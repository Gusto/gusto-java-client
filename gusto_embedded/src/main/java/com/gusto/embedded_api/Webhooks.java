/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.components.WebhookSubscription;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1WebhookSubscriptionUuidRequest;
import com.gusto.embedded_api.models.operations.DeleteV1WebhookSubscriptionUuidRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1WebhookSubscriptionUuidResponse;
import com.gusto.embedded_api.models.operations.DeleteV1WebhookSubscriptionUuidSecurity;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionUuidRequest;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionUuidRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionUuidResponse;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionUuidSecurity;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionVerificationTokenUuidRequest;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionVerificationTokenUuidRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionVerificationTokenUuidResponse;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionVerificationTokenUuidSecurity;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionsRequest;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionsResponse;
import com.gusto.embedded_api.models.operations.GetV1WebhookSubscriptionsSecurity;
import com.gusto.embedded_api.models.operations.PostV1WebhookSubscriptionRequest;
import com.gusto.embedded_api.models.operations.PostV1WebhookSubscriptionRequestBody;
import com.gusto.embedded_api.models.operations.PostV1WebhookSubscriptionRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1WebhookSubscriptionResponse;
import com.gusto.embedded_api.models.operations.PostV1WebhookSubscriptionSecurity;
import com.gusto.embedded_api.models.operations.PutV1VerifyWebhookSubscriptionUuidRequest;
import com.gusto.embedded_api.models.operations.PutV1VerifyWebhookSubscriptionUuidRequestBody;
import com.gusto.embedded_api.models.operations.PutV1VerifyWebhookSubscriptionUuidRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1VerifyWebhookSubscriptionUuidResponse;
import com.gusto.embedded_api.models.operations.PutV1VerifyWebhookSubscriptionUuidSecurity;
import com.gusto.embedded_api.models.operations.PutV1WebhookSubscriptionUuidRequest;
import com.gusto.embedded_api.models.operations.PutV1WebhookSubscriptionUuidRequestBody;
import com.gusto.embedded_api.models.operations.PutV1WebhookSubscriptionUuidRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1WebhookSubscriptionUuidResponse;
import com.gusto.embedded_api.models.operations.PutV1WebhookSubscriptionUuidSecurity;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class Webhooks implements
            MethodCallPostV1WebhookSubscription,
            MethodCallGetV1WebhookSubscriptions,
            MethodCallPutV1WebhookSubscriptionUuid,
            MethodCallGetV1WebhookSubscriptionUuid,
            MethodCallDeleteV1WebhookSubscriptionUuid,
            MethodCallPutV1VerifyWebhookSubscriptionUuid,
            MethodCallGetV1WebhookSubscriptionVerificationTokenUuid {

    private final SDKConfiguration sdkConfiguration;

    Webhooks(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a webhook subscription
     * 
     * <p>Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @return The call builder
     */
    public PostV1WebhookSubscriptionRequestBuilder createSubscription() {
        return new PostV1WebhookSubscriptionRequestBuilder(this);
    }

    /**
     * Create a webhook subscription
     * 
     * <p>Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1WebhookSubscriptionResponse createSubscription(
            PostV1WebhookSubscriptionSecurity security,
            PostV1WebhookSubscriptionRequestBody requestBody) throws Exception {
        return createSubscription(security, Optional.empty(), requestBody);
    }
    
    /**
     * Create a webhook subscription
     * 
     * <p>Create a webhook subscription to receive events of the specified subscription_types whenever there is a state change.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1WebhookSubscriptionResponse createSubscription(
            PostV1WebhookSubscriptionSecurity security,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1WebhookSubscriptionRequestBody requestBody) throws Exception {
        PostV1WebhookSubscriptionRequest request =
            PostV1WebhookSubscriptionRequest
                .builder()
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/webhook_subscriptions");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "post-v1-webhook-subscription", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-webhook-subscription",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "post-v1-webhook-subscription",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-webhook-subscription",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1WebhookSubscriptionResponse.Builder _resBuilder = 
            PostV1WebhookSubscriptionResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1WebhookSubscriptionResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                WebhookSubscription _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<WebhookSubscription>() {});
                _res.withWebhookSubscription(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * List webhook subscriptions
     * 
     * <p>Returns all webhook subscriptions associated with the provided Partner API token.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @return The call builder
     */
    public GetV1WebhookSubscriptionsRequestBuilder listSubscriptions() {
        return new GetV1WebhookSubscriptionsRequestBuilder(this);
    }

    /**
     * List webhook subscriptions
     * 
     * <p>Returns all webhook subscriptions associated with the provided Partner API token.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @param security The security details to use for authentication.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WebhookSubscriptionsResponse listSubscriptions(
            GetV1WebhookSubscriptionsSecurity security) throws Exception {
        return listSubscriptions(security, Optional.empty());
    }
    
    /**
     * List webhook subscriptions
     * 
     * <p>Returns all webhook subscriptions associated with the provided Partner API token.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @param security The security details to use for authentication.
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WebhookSubscriptionsResponse listSubscriptions(
            GetV1WebhookSubscriptionsSecurity security,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1WebhookSubscriptionsRequest request =
            GetV1WebhookSubscriptionsRequest
                .builder()
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/webhook_subscriptions");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-webhook-subscriptions", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscriptions",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscriptions",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscriptions",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1WebhookSubscriptionsResponse.Builder _resBuilder = 
            GetV1WebhookSubscriptionsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1WebhookSubscriptionsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<WebhookSubscription> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<WebhookSubscription>>() {});
                _res.withWebhookSubscriptionsList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a webhook subscription
     * 
     * <p>Updates the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @return The call builder
     */
    public PutV1WebhookSubscriptionUuidRequestBuilder updateSubscription() {
        return new PutV1WebhookSubscriptionUuidRequestBuilder(this);
    }

    /**
     * Update a webhook subscription
     * 
     * <p>Updates the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1WebhookSubscriptionUuidResponse updateSubscription(
            PutV1WebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid,
            PutV1WebhookSubscriptionUuidRequestBody requestBody) throws Exception {
        return updateSubscription(security, webhookSubscriptionUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a webhook subscription
     * 
     * <p>Updates the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1WebhookSubscriptionUuidResponse updateSubscription(
            PutV1WebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1WebhookSubscriptionUuidRequestBody requestBody) throws Exception {
        PutV1WebhookSubscriptionUuidRequest request =
            PutV1WebhookSubscriptionUuidRequest
                .builder()
                .webhookSubscriptionUuid(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1WebhookSubscriptionUuidRequest.class,
                _baseUrl,
                "/v1/webhook_subscriptions/{webhook_subscription_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-webhook-subscription-uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-webhook-subscription-uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1WebhookSubscriptionUuidResponse.Builder _resBuilder = 
            PutV1WebhookSubscriptionUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1WebhookSubscriptionUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                WebhookSubscription _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<WebhookSubscription>() {});
                _res.withWebhookSubscription(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a webhook subscription
     * 
     * <p>Returns the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @return The call builder
     */
    public GetV1WebhookSubscriptionUuidRequestBuilder getSubscription() {
        return new GetV1WebhookSubscriptionUuidRequestBuilder(this);
    }

    /**
     * Get a webhook subscription
     * 
     * <p>Returns the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WebhookSubscriptionUuidResponse getSubscription(
            GetV1WebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid) throws Exception {
        return getSubscription(security, webhookSubscriptionUuid, Optional.empty());
    }
    
    /**
     * Get a webhook subscription
     * 
     * <p>Returns the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WebhookSubscriptionUuidResponse getSubscription(
            GetV1WebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1WebhookSubscriptionUuidRequest request =
            GetV1WebhookSubscriptionUuidRequest
                .builder()
                .webhookSubscriptionUuid(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1WebhookSubscriptionUuidRequest.class,
                _baseUrl,
                "/v1/webhook_subscriptions/{webhook_subscription_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-webhook-subscription-uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscription-uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1WebhookSubscriptionUuidResponse.Builder _resBuilder = 
            GetV1WebhookSubscriptionUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1WebhookSubscriptionUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                WebhookSubscription _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<WebhookSubscription>() {});
                _res.withWebhookSubscription(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a webhook subscription
     * 
     * <p>Deletes the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @return The call builder
     */
    public DeleteV1WebhookSubscriptionUuidRequestBuilder deleteSubscription() {
        return new DeleteV1WebhookSubscriptionUuidRequestBuilder(this);
    }

    /**
     * Delete a webhook subscription
     * 
     * <p>Deletes the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1WebhookSubscriptionUuidResponse deleteSubscription(
            DeleteV1WebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid) throws Exception {
        return deleteSubscription(security, webhookSubscriptionUuid, Optional.empty());
    }
    
    /**
     * Delete a webhook subscription
     * 
     * <p>Deletes the Webhook Subscription associated with the provided UUID.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1WebhookSubscriptionUuidResponse deleteSubscription(
            DeleteV1WebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1WebhookSubscriptionUuidRequest request =
            DeleteV1WebhookSubscriptionUuidRequest
                .builder()
                .webhookSubscriptionUuid(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1WebhookSubscriptionUuidRequest.class,
                _baseUrl,
                "/v1/webhook_subscriptions/{webhook_subscription_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "delete-v1-webhook-subscription-uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "delete-v1-webhook-subscription-uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1WebhookSubscriptionUuidResponse.Builder _resBuilder = 
            DeleteV1WebhookSubscriptionUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1WebhookSubscriptionUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Verify the webhook subscription
     * 
     * <p>When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.
     * 
     * <p>Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @return The call builder
     */
    public PutV1VerifyWebhookSubscriptionUuidRequestBuilder verify() {
        return new PutV1VerifyWebhookSubscriptionUuidRequestBuilder(this);
    }

    /**
     * Verify the webhook subscription
     * 
     * <p>When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.
     * 
     * <p>Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1VerifyWebhookSubscriptionUuidResponse verify(
            PutV1VerifyWebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid,
            PutV1VerifyWebhookSubscriptionUuidRequestBody requestBody) throws Exception {
        return verify(security, webhookSubscriptionUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Verify the webhook subscription
     * 
     * <p>When a webhook subscription is created, a `verification_token` is POSTed to the registered webhook subscription URL. This `verify` endpoint needs to be called with `verification_token` before webhook events can be sent to the registered webhook URL.
     * 
     * <p>Use the /v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token API to resend the `verification_token` to the Subscriber.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:write`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1VerifyWebhookSubscriptionUuidResponse verify(
            PutV1VerifyWebhookSubscriptionUuidSecurity security,
            String webhookSubscriptionUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1VerifyWebhookSubscriptionUuidRequestBody requestBody) throws Exception {
        PutV1VerifyWebhookSubscriptionUuidRequest request =
            PutV1VerifyWebhookSubscriptionUuidRequest
                .builder()
                .webhookSubscriptionUuid(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1VerifyWebhookSubscriptionUuidRequest.class,
                _baseUrl,
                "/v1/webhook_subscriptions/{webhook_subscription_uuid}/verify",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-verify-webhook-subscription-uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-verify-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-verify-webhook-subscription-uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-verify-webhook-subscription-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1VerifyWebhookSubscriptionUuidResponse.Builder _resBuilder = 
            PutV1VerifyWebhookSubscriptionUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1VerifyWebhookSubscriptionUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                WebhookSubscription _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<WebhookSubscription>() {});
                _res.withWebhookSubscription(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Request the webhook subscription verification_token
     * 
     * <p>Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @return The call builder
     */
    public GetV1WebhookSubscriptionVerificationTokenUuidRequestBuilder requestVerificationToken() {
        return new GetV1WebhookSubscriptionVerificationTokenUuidRequestBuilder(this);
    }

    /**
     * Request the webhook subscription verification_token
     * 
     * <p>Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WebhookSubscriptionVerificationTokenUuidResponse requestVerificationToken(
            GetV1WebhookSubscriptionVerificationTokenUuidSecurity security,
            String webhookSubscriptionUuid) throws Exception {
        return requestVerificationToken(security, webhookSubscriptionUuid, Optional.empty());
    }
    
    /**
     * Request the webhook subscription verification_token
     * 
     * <p>Request that the webhook subscription `verification_token` be POSTed to the Subscription URL.
     * 
     * <p>&gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; This endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access).
     * 
     * <p>scope: `webhook_subscriptions:read`
     * 
     * @param security The security details to use for authentication.
     * @param webhookSubscriptionUuid The webhook subscription UUID.
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WebhookSubscriptionVerificationTokenUuidResponse requestVerificationToken(
            GetV1WebhookSubscriptionVerificationTokenUuidSecurity security,
            String webhookSubscriptionUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1WebhookSubscriptionVerificationTokenUuidRequest request =
            GetV1WebhookSubscriptionVerificationTokenUuidRequest
                .builder()
                .webhookSubscriptionUuid(webhookSubscriptionUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1WebhookSubscriptionVerificationTokenUuidRequest.class,
                _baseUrl,
                "/v1/webhook_subscriptions/{webhook_subscription_uuid}/request_verification_token",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));

        // hooks will be passed method level security only
        Optional<SecuritySource> _hookSecuritySource = Optional.of(SecuritySource.of(security));
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-webhook-subscription-verification-token-uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscription-verification-token-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscription-verification-token-uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-webhook-subscription-verification-token-uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1WebhookSubscriptionVerificationTokenUuidResponse.Builder _resBuilder = 
            GetV1WebhookSubscriptionVerificationTokenUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1WebhookSubscriptionVerificationTokenUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
