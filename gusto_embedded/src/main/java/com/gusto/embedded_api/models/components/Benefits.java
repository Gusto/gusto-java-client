/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class Benefits {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction")
    private Optional<Double> employeeDeduction;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_contribution")
    private Optional<Double> companyContribution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imputed")
    private Optional<Boolean> imputed;

    @JsonCreator
    public Benefits(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("employee_deduction") Optional<Double> employeeDeduction,
            @JsonProperty("company_contribution") Optional<Double> companyContribution,
            @JsonProperty("imputed") Optional<Boolean> imputed) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        Utils.checkNotNull(companyContribution, "companyContribution");
        Utils.checkNotNull(imputed, "imputed");
        this.name = name;
        this.employeeDeduction = employeeDeduction;
        this.companyContribution = companyContribution;
        this.imputed = imputed;
    }
    
    public Benefits() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<Double> employeeDeduction() {
        return employeeDeduction;
    }

    @JsonIgnore
    public Optional<Double> companyContribution() {
        return companyContribution;
    }

    @JsonIgnore
    public Optional<Boolean> imputed() {
        return imputed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Benefits withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public Benefits withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Benefits withEmployeeDeduction(double employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = Optional.ofNullable(employeeDeduction);
        return this;
    }

    public Benefits withEmployeeDeduction(Optional<Double> employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = employeeDeduction;
        return this;
    }

    public Benefits withCompanyContribution(double companyContribution) {
        Utils.checkNotNull(companyContribution, "companyContribution");
        this.companyContribution = Optional.ofNullable(companyContribution);
        return this;
    }

    public Benefits withCompanyContribution(Optional<Double> companyContribution) {
        Utils.checkNotNull(companyContribution, "companyContribution");
        this.companyContribution = companyContribution;
        return this;
    }

    public Benefits withImputed(boolean imputed) {
        Utils.checkNotNull(imputed, "imputed");
        this.imputed = Optional.ofNullable(imputed);
        return this;
    }

    public Benefits withImputed(Optional<Boolean> imputed) {
        Utils.checkNotNull(imputed, "imputed");
        this.imputed = imputed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Benefits other = (Benefits) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.employeeDeduction, other.employeeDeduction) &&
            Objects.deepEquals(this.companyContribution, other.companyContribution) &&
            Objects.deepEquals(this.imputed, other.imputed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            employeeDeduction,
            companyContribution,
            imputed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Benefits.class,
                "name", name,
                "employeeDeduction", employeeDeduction,
                "companyContribution", companyContribution,
                "imputed", imputed);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<Double> employeeDeduction = Optional.empty();
 
        private Optional<Double> companyContribution = Optional.empty();
 
        private Optional<Boolean> imputed = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder employeeDeduction(double employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = Optional.ofNullable(employeeDeduction);
            return this;
        }

        public Builder employeeDeduction(Optional<Double> employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = employeeDeduction;
            return this;
        }

        public Builder companyContribution(double companyContribution) {
            Utils.checkNotNull(companyContribution, "companyContribution");
            this.companyContribution = Optional.ofNullable(companyContribution);
            return this;
        }

        public Builder companyContribution(Optional<Double> companyContribution) {
            Utils.checkNotNull(companyContribution, "companyContribution");
            this.companyContribution = companyContribution;
            return this;
        }

        public Builder imputed(boolean imputed) {
            Utils.checkNotNull(imputed, "imputed");
            this.imputed = Optional.ofNullable(imputed);
            return this;
        }

        public Builder imputed(Optional<Boolean> imputed) {
            Utils.checkNotNull(imputed, "imputed");
            this.imputed = imputed;
            return this;
        }
        
        public Benefits build() {
            return new Benefits(
                name,
                employeeDeduction,
                companyContribution,
                imputed);
        }
    }
}

