/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
/**
 * HolidayPayPolicy - Representation of a Holiday Pay Policy
 */

public class HolidayPayPolicy {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    /**
     * A unique identifier for the company owning the holiday pay policy
     */
    @JsonProperty("company_uuid")
    private String companyUuid;

    /**
     * List of the eleven supported federal holidays and their details
     */
    @JsonProperty("federal_holidays")
    private List<FederalHolidays> federalHolidays;

    /**
     * List of employee uuids under a time off policy
     */
    @JsonProperty("employees")
    private List<HolidayPayPolicyEmployees> employees;

    @JsonCreator
    public HolidayPayPolicy(
            @JsonProperty("version") String version,
            @JsonProperty("company_uuid") String companyUuid,
            @JsonProperty("federal_holidays") List<FederalHolidays> federalHolidays,
            @JsonProperty("employees") List<HolidayPayPolicyEmployees> employees) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(federalHolidays, "federalHolidays");
        Utils.checkNotNull(employees, "employees");
        this.version = version;
        this.companyUuid = companyUuid;
        this.federalHolidays = federalHolidays;
        this.employees = employees;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * A unique identifier for the company owning the holiday pay policy
     */
    @JsonIgnore
    public String companyUuid() {
        return companyUuid;
    }

    /**
     * List of the eleven supported federal holidays and their details
     */
    @JsonIgnore
    public List<FederalHolidays> federalHolidays() {
        return federalHolidays;
    }

    /**
     * List of employee uuids under a time off policy
     */
    @JsonIgnore
    public List<HolidayPayPolicyEmployees> employees() {
        return employees;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public HolidayPayPolicy withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * A unique identifier for the company owning the holiday pay policy
     */
    public HolidayPayPolicy withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * List of the eleven supported federal holidays and their details
     */
    public HolidayPayPolicy withFederalHolidays(List<FederalHolidays> federalHolidays) {
        Utils.checkNotNull(federalHolidays, "federalHolidays");
        this.federalHolidays = federalHolidays;
        return this;
    }

    /**
     * List of employee uuids under a time off policy
     */
    public HolidayPayPolicy withEmployees(List<HolidayPayPolicyEmployees> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HolidayPayPolicy other = (HolidayPayPolicy) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.federalHolidays, other.federalHolidays) &&
            Objects.deepEquals(this.employees, other.employees);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            companyUuid,
            federalHolidays,
            employees);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HolidayPayPolicy.class,
                "version", version,
                "companyUuid", companyUuid,
                "federalHolidays", federalHolidays,
                "employees", employees);
    }
    
    public final static class Builder {
 
        private String version;
 
        private String companyUuid;
 
        private List<FederalHolidays> federalHolidays;
 
        private List<HolidayPayPolicyEmployees> employees;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * A unique identifier for the company owning the holiday pay policy
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * List of the eleven supported federal holidays and their details
         */
        public Builder federalHolidays(List<FederalHolidays> federalHolidays) {
            Utils.checkNotNull(federalHolidays, "federalHolidays");
            this.federalHolidays = federalHolidays;
            return this;
        }

        /**
         * List of employee uuids under a time off policy
         */
        public Builder employees(List<HolidayPayPolicyEmployees> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }
        
        public HolidayPayPolicy build() {
            return new HolidayPayPolicy(
                version,
                companyUuid,
                federalHolidays,
                employees);
        }
    }
}

