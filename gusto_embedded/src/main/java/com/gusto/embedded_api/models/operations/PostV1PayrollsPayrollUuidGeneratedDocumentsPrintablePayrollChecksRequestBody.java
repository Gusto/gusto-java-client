/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody {

    /**
     * The type of check stock being printed. Check the "Types of check stock" section in this [link](https://support.gusto.com/article/999877761000000/Pay-your-team-by-check) for more info on check types
     */
    @JsonProperty("printing_format")
    private PrintingFormat printingFormat;

    /**
     * The starting check number we will start generating checks from. Use to override the sequence that will be used to generate check numbers.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("starting_check_number")
    private Optional<Long> startingCheckNumber;

    @JsonCreator
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody(
            @JsonProperty("printing_format") PrintingFormat printingFormat,
            @JsonProperty("starting_check_number") Optional<Long> startingCheckNumber) {
        Utils.checkNotNull(printingFormat, "printingFormat");
        Utils.checkNotNull(startingCheckNumber, "startingCheckNumber");
        this.printingFormat = printingFormat;
        this.startingCheckNumber = startingCheckNumber;
    }
    
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody(
            PrintingFormat printingFormat) {
        this(printingFormat, Optional.empty());
    }

    /**
     * The type of check stock being printed. Check the "Types of check stock" section in this [link](https://support.gusto.com/article/999877761000000/Pay-your-team-by-check) for more info on check types
     */
    @JsonIgnore
    public PrintingFormat printingFormat() {
        return printingFormat;
    }

    /**
     * The starting check number we will start generating checks from. Use to override the sequence that will be used to generate check numbers.
     */
    @JsonIgnore
    public Optional<Long> startingCheckNumber() {
        return startingCheckNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The type of check stock being printed. Check the "Types of check stock" section in this [link](https://support.gusto.com/article/999877761000000/Pay-your-team-by-check) for more info on check types
     */
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody withPrintingFormat(PrintingFormat printingFormat) {
        Utils.checkNotNull(printingFormat, "printingFormat");
        this.printingFormat = printingFormat;
        return this;
    }

    /**
     * The starting check number we will start generating checks from. Use to override the sequence that will be used to generate check numbers.
     */
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody withStartingCheckNumber(long startingCheckNumber) {
        Utils.checkNotNull(startingCheckNumber, "startingCheckNumber");
        this.startingCheckNumber = Optional.ofNullable(startingCheckNumber);
        return this;
    }

    /**
     * The starting check number we will start generating checks from. Use to override the sequence that will be used to generate check numbers.
     */
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody withStartingCheckNumber(Optional<Long> startingCheckNumber) {
        Utils.checkNotNull(startingCheckNumber, "startingCheckNumber");
        this.startingCheckNumber = startingCheckNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody other = (PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody) o;
        return 
            Objects.deepEquals(this.printingFormat, other.printingFormat) &&
            Objects.deepEquals(this.startingCheckNumber, other.startingCheckNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            printingFormat,
            startingCheckNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody.class,
                "printingFormat", printingFormat,
                "startingCheckNumber", startingCheckNumber);
    }
    
    public final static class Builder {
 
        private PrintingFormat printingFormat;
 
        private Optional<Long> startingCheckNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The type of check stock being printed. Check the "Types of check stock" section in this [link](https://support.gusto.com/article/999877761000000/Pay-your-team-by-check) for more info on check types
         */
        public Builder printingFormat(PrintingFormat printingFormat) {
            Utils.checkNotNull(printingFormat, "printingFormat");
            this.printingFormat = printingFormat;
            return this;
        }

        /**
         * The starting check number we will start generating checks from. Use to override the sequence that will be used to generate check numbers.
         */
        public Builder startingCheckNumber(long startingCheckNumber) {
            Utils.checkNotNull(startingCheckNumber, "startingCheckNumber");
            this.startingCheckNumber = Optional.ofNullable(startingCheckNumber);
            return this;
        }

        /**
         * The starting check number we will start generating checks from. Use to override the sequence that will be used to generate check numbers.
         */
        public Builder startingCheckNumber(Optional<Long> startingCheckNumber) {
            Utils.checkNotNull(startingCheckNumber, "startingCheckNumber");
            this.startingCheckNumber = startingCheckNumber;
            return this;
        }
        
        public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody build() {
            return new PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody(
                printingFormat,
                startingCheckNumber);
        }
    }
}

