/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class GetCompaniesCompanyUuidPaidHolidaysRequestBody {

    /**
     * If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private Optional<String> year;

    @JsonCreator
    public GetCompaniesCompanyUuidPaidHolidaysRequestBody(
            @JsonProperty("year") Optional<String> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
    }
    
    public GetCompaniesCompanyUuidPaidHolidaysRequestBody() {
        this(Optional.empty());
    }

    /**
     * If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned.
     */
    @JsonIgnore
    public Optional<String> year() {
        return year;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned.
     */
    public GetCompaniesCompanyUuidPaidHolidaysRequestBody withYear(String year) {
        Utils.checkNotNull(year, "year");
        this.year = Optional.ofNullable(year);
        return this;
    }

    /**
     * If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned.
     */
    public GetCompaniesCompanyUuidPaidHolidaysRequestBody withYear(Optional<String> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCompaniesCompanyUuidPaidHolidaysRequestBody other = (GetCompaniesCompanyUuidPaidHolidaysRequestBody) o;
        return 
            Objects.deepEquals(this.year, other.year);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            year);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCompaniesCompanyUuidPaidHolidaysRequestBody.class,
                "year", year);
    }
    
    public final static class Builder {
 
        private Optional<String> year = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned.
         */
        public Builder year(String year) {
            Utils.checkNotNull(year, "year");
            this.year = Optional.ofNullable(year);
            return this;
        }

        /**
         * If a year is passed, paid holidays for that year will be returned. Otherwise, paid holidays for the next three years will be returned.
         */
        public Builder year(Optional<String> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }
        
        public GetCompaniesCompanyUuidPaidHolidaysRequestBody build() {
            return new GetCompaniesCompanyUuidPaidHolidaysRequestBody(
                year);
        }
    }
}

