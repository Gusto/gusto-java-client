/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * PaymentConfigs - Example response
 */

public class PaymentConfigs {

    /**
     * Company uuid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * Partner uuid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partner_uuid")
    private Optional<String> partnerUuid;

    /**
     * Payment limit for 1-day or 2-day payroll
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fast_payment_limit")
    private Optional<String> fastPaymentLimit;

    /**
     * Payment speed for 1-day, 2-day, 4-day
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_speed")
    private Optional<String> paymentSpeed;

    @JsonCreator
    public PaymentConfigs(
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("partner_uuid") Optional<String> partnerUuid,
            @JsonProperty("fast_payment_limit") Optional<String> fastPaymentLimit,
            @JsonProperty("payment_speed") Optional<String> paymentSpeed) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(partnerUuid, "partnerUuid");
        Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
        Utils.checkNotNull(paymentSpeed, "paymentSpeed");
        this.companyUuid = companyUuid;
        this.partnerUuid = partnerUuid;
        this.fastPaymentLimit = fastPaymentLimit;
        this.paymentSpeed = paymentSpeed;
    }
    
    public PaymentConfigs() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Company uuid
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * Partner uuid
     */
    @JsonIgnore
    public Optional<String> partnerUuid() {
        return partnerUuid;
    }

    /**
     * Payment limit for 1-day or 2-day payroll
     */
    @JsonIgnore
    public Optional<String> fastPaymentLimit() {
        return fastPaymentLimit;
    }

    /**
     * Payment speed for 1-day, 2-day, 4-day
     */
    @JsonIgnore
    public Optional<String> paymentSpeed() {
        return paymentSpeed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Company uuid
     */
    public PaymentConfigs withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * Company uuid
     */
    public PaymentConfigs withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * Partner uuid
     */
    public PaymentConfigs withPartnerUuid(String partnerUuid) {
        Utils.checkNotNull(partnerUuid, "partnerUuid");
        this.partnerUuid = Optional.ofNullable(partnerUuid);
        return this;
    }

    /**
     * Partner uuid
     */
    public PaymentConfigs withPartnerUuid(Optional<String> partnerUuid) {
        Utils.checkNotNull(partnerUuid, "partnerUuid");
        this.partnerUuid = partnerUuid;
        return this;
    }

    /**
     * Payment limit for 1-day or 2-day payroll
     */
    public PaymentConfigs withFastPaymentLimit(String fastPaymentLimit) {
        Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
        this.fastPaymentLimit = Optional.ofNullable(fastPaymentLimit);
        return this;
    }

    /**
     * Payment limit for 1-day or 2-day payroll
     */
    public PaymentConfigs withFastPaymentLimit(Optional<String> fastPaymentLimit) {
        Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
        this.fastPaymentLimit = fastPaymentLimit;
        return this;
    }

    /**
     * Payment speed for 1-day, 2-day, 4-day
     */
    public PaymentConfigs withPaymentSpeed(String paymentSpeed) {
        Utils.checkNotNull(paymentSpeed, "paymentSpeed");
        this.paymentSpeed = Optional.ofNullable(paymentSpeed);
        return this;
    }

    /**
     * Payment speed for 1-day, 2-day, 4-day
     */
    public PaymentConfigs withPaymentSpeed(Optional<String> paymentSpeed) {
        Utils.checkNotNull(paymentSpeed, "paymentSpeed");
        this.paymentSpeed = paymentSpeed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentConfigs other = (PaymentConfigs) o;
        return 
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.partnerUuid, other.partnerUuid) &&
            Objects.deepEquals(this.fastPaymentLimit, other.fastPaymentLimit) &&
            Objects.deepEquals(this.paymentSpeed, other.paymentSpeed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyUuid,
            partnerUuid,
            fastPaymentLimit,
            paymentSpeed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentConfigs.class,
                "companyUuid", companyUuid,
                "partnerUuid", partnerUuid,
                "fastPaymentLimit", fastPaymentLimit,
                "paymentSpeed", paymentSpeed);
    }
    
    public final static class Builder {
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> partnerUuid = Optional.empty();
 
        private Optional<String> fastPaymentLimit = Optional.empty();
 
        private Optional<String> paymentSpeed = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Company uuid
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * Company uuid
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * Partner uuid
         */
        public Builder partnerUuid(String partnerUuid) {
            Utils.checkNotNull(partnerUuid, "partnerUuid");
            this.partnerUuid = Optional.ofNullable(partnerUuid);
            return this;
        }

        /**
         * Partner uuid
         */
        public Builder partnerUuid(Optional<String> partnerUuid) {
            Utils.checkNotNull(partnerUuid, "partnerUuid");
            this.partnerUuid = partnerUuid;
            return this;
        }

        /**
         * Payment limit for 1-day or 2-day payroll
         */
        public Builder fastPaymentLimit(String fastPaymentLimit) {
            Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
            this.fastPaymentLimit = Optional.ofNullable(fastPaymentLimit);
            return this;
        }

        /**
         * Payment limit for 1-day or 2-day payroll
         */
        public Builder fastPaymentLimit(Optional<String> fastPaymentLimit) {
            Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
            this.fastPaymentLimit = fastPaymentLimit;
            return this;
        }

        /**
         * Payment speed for 1-day, 2-day, 4-day
         */
        public Builder paymentSpeed(String paymentSpeed) {
            Utils.checkNotNull(paymentSpeed, "paymentSpeed");
            this.paymentSpeed = Optional.ofNullable(paymentSpeed);
            return this;
        }

        /**
         * Payment speed for 1-day, 2-day, 4-day
         */
        public Builder paymentSpeed(Optional<String> paymentSpeed) {
            Utils.checkNotNull(paymentSpeed, "paymentSpeed");
            this.paymentSpeed = paymentSpeed;
            return this;
        }
        
        public PaymentConfigs build() {
            return new PaymentConfigs(
                companyUuid,
                partnerUuid,
                fastPaymentLimit,
                paymentSpeed);
        }
    }
}

