/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody {

    /**
     * The dollar amount of the first micro-deposit
     */
    @JsonProperty("deposit_1")
    private double deposit1;

    /**
     * The dollar amount of the second micro-deposit
     */
    @JsonProperty("deposit_2")
    private double deposit2;

    @JsonCreator
    public PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody(
            @JsonProperty("deposit_1") double deposit1,
            @JsonProperty("deposit_2") double deposit2) {
        Utils.checkNotNull(deposit1, "deposit1");
        Utils.checkNotNull(deposit2, "deposit2");
        this.deposit1 = deposit1;
        this.deposit2 = deposit2;
    }

    /**
     * The dollar amount of the first micro-deposit
     */
    @JsonIgnore
    public double deposit1() {
        return deposit1;
    }

    /**
     * The dollar amount of the second micro-deposit
     */
    @JsonIgnore
    public double deposit2() {
        return deposit2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The dollar amount of the first micro-deposit
     */
    public PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody withDeposit1(double deposit1) {
        Utils.checkNotNull(deposit1, "deposit1");
        this.deposit1 = deposit1;
        return this;
    }

    /**
     * The dollar amount of the second micro-deposit
     */
    public PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody withDeposit2(double deposit2) {
        Utils.checkNotNull(deposit2, "deposit2");
        this.deposit2 = deposit2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody other = (PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody) o;
        return 
            Objects.deepEquals(this.deposit1, other.deposit1) &&
            Objects.deepEquals(this.deposit2, other.deposit2);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            deposit1,
            deposit2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody.class,
                "deposit1", deposit1,
                "deposit2", deposit2);
    }
    
    public final static class Builder {
 
        private Double deposit1;
 
        private Double deposit2;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The dollar amount of the first micro-deposit
         */
        public Builder deposit1(double deposit1) {
            Utils.checkNotNull(deposit1, "deposit1");
            this.deposit1 = deposit1;
            return this;
        }

        /**
         * The dollar amount of the second micro-deposit
         */
        public Builder deposit2(double deposit2) {
            Utils.checkNotNull(deposit2, "deposit2");
            this.deposit2 = deposit2;
            return this;
        }
        
        public PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody build() {
            return new PutV1CompaniesCompanyIdBankAccountsVerifyRequestBody(
                deposit1,
                deposit2);
        }
    }
}

