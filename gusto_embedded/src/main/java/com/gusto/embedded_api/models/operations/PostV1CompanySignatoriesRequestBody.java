/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class PostV1CompanySignatoriesRequestBody {

    @JsonProperty("ssn")
    private String ssn;

    @JsonProperty("first_name")
    private String firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_initial")
    private Optional<String> middleInitial;

    @JsonProperty("last_name")
    private String lastName;

    @JsonProperty("email")
    private String email;

    @JsonProperty("title")
    private String title;

    @JsonProperty("phone")
    private String phone;

    @JsonProperty("birthday")
    private String birthday;

    /**
     * The signatory's home address
     */
    @JsonProperty("home_address")
    private HomeAddress homeAddress;

    @JsonCreator
    public PostV1CompanySignatoriesRequestBody(
            @JsonProperty("ssn") String ssn,
            @JsonProperty("first_name") String firstName,
            @JsonProperty("middle_initial") Optional<String> middleInitial,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("email") String email,
            @JsonProperty("title") String title,
            @JsonProperty("phone") String phone,
            @JsonProperty("birthday") String birthday,
            @JsonProperty("home_address") HomeAddress homeAddress) {
        Utils.checkNotNull(ssn, "ssn");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleInitial, "middleInitial");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(homeAddress, "homeAddress");
        this.ssn = ssn;
        this.firstName = firstName;
        this.middleInitial = middleInitial;
        this.lastName = lastName;
        this.email = email;
        this.title = title;
        this.phone = phone;
        this.birthday = birthday;
        this.homeAddress = homeAddress;
    }
    
    public PostV1CompanySignatoriesRequestBody(
            String ssn,
            String firstName,
            String lastName,
            String email,
            String title,
            String phone,
            String birthday,
            HomeAddress homeAddress) {
        this(ssn, firstName, Optional.empty(), lastName, email, title, phone, birthday, homeAddress);
    }

    @JsonIgnore
    public String ssn() {
        return ssn;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public Optional<String> middleInitial() {
        return middleInitial;
    }

    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    @JsonIgnore
    public String email() {
        return email;
    }

    @JsonIgnore
    public String title() {
        return title;
    }

    @JsonIgnore
    public String phone() {
        return phone;
    }

    @JsonIgnore
    public String birthday() {
        return birthday;
    }

    /**
     * The signatory's home address
     */
    @JsonIgnore
    public HomeAddress homeAddress() {
        return homeAddress;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PostV1CompanySignatoriesRequestBody withSsn(String ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = ssn;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withMiddleInitial(String middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = Optional.ofNullable(middleInitial);
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withMiddleInitial(Optional<String> middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = middleInitial;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public PostV1CompanySignatoriesRequestBody withBirthday(String birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * The signatory's home address
     */
    public PostV1CompanySignatoriesRequestBody withHomeAddress(HomeAddress homeAddress) {
        Utils.checkNotNull(homeAddress, "homeAddress");
        this.homeAddress = homeAddress;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1CompanySignatoriesRequestBody other = (PostV1CompanySignatoriesRequestBody) o;
        return 
            Objects.deepEquals(this.ssn, other.ssn) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleInitial, other.middleInitial) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.homeAddress, other.homeAddress);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ssn,
            firstName,
            middleInitial,
            lastName,
            email,
            title,
            phone,
            birthday,
            homeAddress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1CompanySignatoriesRequestBody.class,
                "ssn", ssn,
                "firstName", firstName,
                "middleInitial", middleInitial,
                "lastName", lastName,
                "email", email,
                "title", title,
                "phone", phone,
                "birthday", birthday,
                "homeAddress", homeAddress);
    }
    
    public final static class Builder {
 
        private String ssn;
 
        private String firstName;
 
        private Optional<String> middleInitial = Optional.empty();
 
        private String lastName;
 
        private String email;
 
        private String title;
 
        private String phone;
 
        private String birthday;
 
        private HomeAddress homeAddress;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder ssn(String ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = ssn;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder middleInitial(String middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = Optional.ofNullable(middleInitial);
            return this;
        }

        public Builder middleInitial(Optional<String> middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = middleInitial;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder birthday(String birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        /**
         * The signatory's home address
         */
        public Builder homeAddress(HomeAddress homeAddress) {
            Utils.checkNotNull(homeAddress, "homeAddress");
            this.homeAddress = homeAddress;
            return this;
        }
        
        public PostV1CompanySignatoriesRequestBody build() {
            return new PostV1CompanySignatoriesRequestBody(
                ssn,
                firstName,
                middleInitial,
                lastName,
                email,
                title,
                phone,
                birthday,
                homeAddress);
        }
    }
}

