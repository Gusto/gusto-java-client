/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * BenefitTypeRequirements
 * 
 * <p>Benefit type requirements response
 */

public class BenefitTypeRequirements {

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction")
    private Optional<? extends EmployeeDeduction> employeeDeduction;

    /**
     * An object representing the type and value of the company contribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contribution")
    private Optional<? extends BenefitTypeRequirementsContribution> contribution;

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deduct_as_percentage")
    private Optional<? extends DeductAsPercentage> deductAsPercentage;

    /**
     * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catch_up")
    private Optional<? extends CatchUp> catchUp;

    /**
     * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit_option")
    private Optional<? extends LimitOption> limitOption;

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_contribution_annual_maximum")
    private Optional<? extends CompanyContributionAnnualMaximum> companyContributionAnnualMaximum;

    /**
     * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverage_salary_multiplier")
    private Optional<? extends CoverageSalaryMultiplier> coverageSalaryMultiplier;

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverage_amount")
    private Optional<? extends CoverageAmount> coverageAmount;

    @JsonCreator
    public BenefitTypeRequirements(
            @JsonProperty("employee_deduction") Optional<? extends EmployeeDeduction> employeeDeduction,
            @JsonProperty("contribution") Optional<? extends BenefitTypeRequirementsContribution> contribution,
            @JsonProperty("deduct_as_percentage") Optional<? extends DeductAsPercentage> deductAsPercentage,
            @JsonProperty("catch_up") Optional<? extends CatchUp> catchUp,
            @JsonProperty("limit_option") Optional<? extends LimitOption> limitOption,
            @JsonProperty("company_contribution_annual_maximum") Optional<? extends CompanyContributionAnnualMaximum> companyContributionAnnualMaximum,
            @JsonProperty("coverage_salary_multiplier") Optional<? extends CoverageSalaryMultiplier> coverageSalaryMultiplier,
            @JsonProperty("coverage_amount") Optional<? extends CoverageAmount> coverageAmount) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        Utils.checkNotNull(contribution, "contribution");
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        Utils.checkNotNull(catchUp, "catchUp");
        Utils.checkNotNull(limitOption, "limitOption");
        Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
        Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
        Utils.checkNotNull(coverageAmount, "coverageAmount");
        this.employeeDeduction = employeeDeduction;
        this.contribution = contribution;
        this.deductAsPercentage = deductAsPercentage;
        this.catchUp = catchUp;
        this.limitOption = limitOption;
        this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
        this.coverageSalaryMultiplier = coverageSalaryMultiplier;
        this.coverageAmount = coverageAmount;
    }
    
    public BenefitTypeRequirements() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmployeeDeduction> employeeDeduction() {
        return (Optional<EmployeeDeduction>) employeeDeduction;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BenefitTypeRequirementsContribution> contribution() {
        return (Optional<BenefitTypeRequirementsContribution>) contribution;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DeductAsPercentage> deductAsPercentage() {
        return (Optional<DeductAsPercentage>) deductAsPercentage;
    }

    /**
     * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CatchUp> catchUp() {
        return (Optional<CatchUp>) catchUp;
    }

    /**
     * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LimitOption> limitOption() {
        return (Optional<LimitOption>) limitOption;
    }

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyContributionAnnualMaximum> companyContributionAnnualMaximum() {
        return (Optional<CompanyContributionAnnualMaximum>) companyContributionAnnualMaximum;
    }

    /**
     * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CoverageSalaryMultiplier> coverageSalaryMultiplier() {
        return (Optional<CoverageSalaryMultiplier>) coverageSalaryMultiplier;
    }

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CoverageAmount> coverageAmount() {
        return (Optional<CoverageAmount>) coverageAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    public BenefitTypeRequirements withEmployeeDeduction(EmployeeDeduction employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = Optional.ofNullable(employeeDeduction);
        return this;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    public BenefitTypeRequirements withEmployeeDeduction(Optional<? extends EmployeeDeduction> employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = employeeDeduction;
        return this;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    public BenefitTypeRequirements withContribution(BenefitTypeRequirementsContribution contribution) {
        Utils.checkNotNull(contribution, "contribution");
        this.contribution = Optional.ofNullable(contribution);
        return this;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    public BenefitTypeRequirements withContribution(Optional<? extends BenefitTypeRequirementsContribution> contribution) {
        Utils.checkNotNull(contribution, "contribution");
        this.contribution = contribution;
        return this;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    public BenefitTypeRequirements withDeductAsPercentage(DeductAsPercentage deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
        return this;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    public BenefitTypeRequirements withDeductAsPercentage(Optional<? extends DeductAsPercentage> deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = deductAsPercentage;
        return this;
    }

    /**
     * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    public BenefitTypeRequirements withCatchUp(CatchUp catchUp) {
        Utils.checkNotNull(catchUp, "catchUp");
        this.catchUp = Optional.ofNullable(catchUp);
        return this;
    }

    /**
     * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    public BenefitTypeRequirements withCatchUp(Optional<? extends CatchUp> catchUp) {
        Utils.checkNotNull(catchUp, "catchUp");
        this.catchUp = catchUp;
        return this;
    }

    /**
     * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
     */
    public BenefitTypeRequirements withLimitOption(LimitOption limitOption) {
        Utils.checkNotNull(limitOption, "limitOption");
        this.limitOption = Optional.ofNullable(limitOption);
        return this;
    }

    /**
     * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
     */
    public BenefitTypeRequirements withLimitOption(Optional<? extends LimitOption> limitOption) {
        Utils.checkNotNull(limitOption, "limitOption");
        this.limitOption = limitOption;
        return this;
    }

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    public BenefitTypeRequirements withCompanyContributionAnnualMaximum(CompanyContributionAnnualMaximum companyContributionAnnualMaximum) {
        Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
        this.companyContributionAnnualMaximum = Optional.ofNullable(companyContributionAnnualMaximum);
        return this;
    }

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    public BenefitTypeRequirements withCompanyContributionAnnualMaximum(Optional<? extends CompanyContributionAnnualMaximum> companyContributionAnnualMaximum) {
        Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
        this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
        return this;
    }

    /**
     * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    public BenefitTypeRequirements withCoverageSalaryMultiplier(CoverageSalaryMultiplier coverageSalaryMultiplier) {
        Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
        this.coverageSalaryMultiplier = Optional.ofNullable(coverageSalaryMultiplier);
        return this;
    }

    /**
     * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    public BenefitTypeRequirements withCoverageSalaryMultiplier(Optional<? extends CoverageSalaryMultiplier> coverageSalaryMultiplier) {
        Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
        this.coverageSalaryMultiplier = coverageSalaryMultiplier;
        return this;
    }

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    public BenefitTypeRequirements withCoverageAmount(CoverageAmount coverageAmount) {
        Utils.checkNotNull(coverageAmount, "coverageAmount");
        this.coverageAmount = Optional.ofNullable(coverageAmount);
        return this;
    }

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    public BenefitTypeRequirements withCoverageAmount(Optional<? extends CoverageAmount> coverageAmount) {
        Utils.checkNotNull(coverageAmount, "coverageAmount");
        this.coverageAmount = coverageAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BenefitTypeRequirements other = (BenefitTypeRequirements) o;
        return 
            Objects.deepEquals(this.employeeDeduction, other.employeeDeduction) &&
            Objects.deepEquals(this.contribution, other.contribution) &&
            Objects.deepEquals(this.deductAsPercentage, other.deductAsPercentage) &&
            Objects.deepEquals(this.catchUp, other.catchUp) &&
            Objects.deepEquals(this.limitOption, other.limitOption) &&
            Objects.deepEquals(this.companyContributionAnnualMaximum, other.companyContributionAnnualMaximum) &&
            Objects.deepEquals(this.coverageSalaryMultiplier, other.coverageSalaryMultiplier) &&
            Objects.deepEquals(this.coverageAmount, other.coverageAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employeeDeduction,
            contribution,
            deductAsPercentage,
            catchUp,
            limitOption,
            companyContributionAnnualMaximum,
            coverageSalaryMultiplier,
            coverageAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BenefitTypeRequirements.class,
                "employeeDeduction", employeeDeduction,
                "contribution", contribution,
                "deductAsPercentage", deductAsPercentage,
                "catchUp", catchUp,
                "limitOption", limitOption,
                "companyContributionAnnualMaximum", companyContributionAnnualMaximum,
                "coverageSalaryMultiplier", coverageSalaryMultiplier,
                "coverageAmount", coverageAmount);
    }
    
    public final static class Builder {
 
        private Optional<? extends EmployeeDeduction> employeeDeduction = Optional.empty();
 
        private Optional<? extends BenefitTypeRequirementsContribution> contribution = Optional.empty();
 
        private Optional<? extends DeductAsPercentage> deductAsPercentage = Optional.empty();
 
        private Optional<? extends CatchUp> catchUp = Optional.empty();
 
        private Optional<? extends LimitOption> limitOption = Optional.empty();
 
        private Optional<? extends CompanyContributionAnnualMaximum> companyContributionAnnualMaximum = Optional.empty();
 
        private Optional<? extends CoverageSalaryMultiplier> coverageSalaryMultiplier = Optional.empty();
 
        private Optional<? extends CoverageAmount> coverageAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount to be deducted, per pay period, from the employee's pay.
         */
        public Builder employeeDeduction(EmployeeDeduction employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = Optional.ofNullable(employeeDeduction);
            return this;
        }

        /**
         * The amount to be deducted, per pay period, from the employee's pay.
         */
        public Builder employeeDeduction(Optional<? extends EmployeeDeduction> employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = employeeDeduction;
            return this;
        }

        /**
         * An object representing the type and value of the company contribution.
         */
        public Builder contribution(BenefitTypeRequirementsContribution contribution) {
            Utils.checkNotNull(contribution, "contribution");
            this.contribution = Optional.ofNullable(contribution);
            return this;
        }

        /**
         * An object representing the type and value of the company contribution.
         */
        public Builder contribution(Optional<? extends BenefitTypeRequirementsContribution> contribution) {
            Utils.checkNotNull(contribution, "contribution");
            this.contribution = contribution;
            return this;
        }

        /**
         * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
         */
        public Builder deductAsPercentage(DeductAsPercentage deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
            return this;
        }

        /**
         * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
         */
        public Builder deductAsPercentage(Optional<? extends DeductAsPercentage> deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }

        /**
         * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
         */
        public Builder catchUp(CatchUp catchUp) {
            Utils.checkNotNull(catchUp, "catchUp");
            this.catchUp = Optional.ofNullable(catchUp);
            return this;
        }

        /**
         * Whether the employee should use a benefit’s 'catch up' rate. Only Roth 401k and 401k benefits use this value for employees over 50.
         */
        public Builder catchUp(Optional<? extends CatchUp> catchUp) {
            Utils.checkNotNull(catchUp, "catchUp");
            this.catchUp = catchUp;
            return this;
        }

        /**
         * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
         */
        public Builder limitOption(LimitOption limitOption) {
            Utils.checkNotNull(limitOption, "limitOption");
            this.limitOption = Optional.ofNullable(limitOption);
            return this;
        }

        /**
         * Some benefits require additional information to determine their limit. For example, for an HSA benefit, the limit option should be either 'Family' or 'Individual'. For a Dependent Care FSA benefit, the limit option should be either 'Joint Filing or Single' or 'Married and Filing Separately'.
         */
        public Builder limitOption(Optional<? extends LimitOption> limitOption) {
            Utils.checkNotNull(limitOption, "limitOption");
            this.limitOption = limitOption;
            return this;
        }

        /**
         * The maximum company contribution amount per year. A null value signifies no limit.
         */
        public Builder companyContributionAnnualMaximum(CompanyContributionAnnualMaximum companyContributionAnnualMaximum) {
            Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
            this.companyContributionAnnualMaximum = Optional.ofNullable(companyContributionAnnualMaximum);
            return this;
        }

        /**
         * The maximum company contribution amount per year. A null value signifies no limit.
         */
        public Builder companyContributionAnnualMaximum(Optional<? extends CompanyContributionAnnualMaximum> companyContributionAnnualMaximum) {
            Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
            this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
            return this;
        }

        /**
         * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
         */
        public Builder coverageSalaryMultiplier(CoverageSalaryMultiplier coverageSalaryMultiplier) {
            Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
            this.coverageSalaryMultiplier = Optional.ofNullable(coverageSalaryMultiplier);
            return this;
        }

        /**
         * The coverage amount as a multiple of the employee's salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
         */
        public Builder coverageSalaryMultiplier(Optional<? extends CoverageSalaryMultiplier> coverageSalaryMultiplier) {
            Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
            this.coverageSalaryMultiplier = coverageSalaryMultiplier;
            return this;
        }

        /**
         * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
         */
        public Builder coverageAmount(CoverageAmount coverageAmount) {
            Utils.checkNotNull(coverageAmount, "coverageAmount");
            this.coverageAmount = Optional.ofNullable(coverageAmount);
            return this;
        }

        /**
         * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
         */
        public Builder coverageAmount(Optional<? extends CoverageAmount> coverageAmount) {
            Utils.checkNotNull(coverageAmount, "coverageAmount");
            this.coverageAmount = coverageAmount;
            return this;
        }
        
        public BenefitTypeRequirements build() {
            return new BenefitTypeRequirements(
                employeeDeduction,
                contribution,
                deductAsPercentage,
                catchUp,
                limitOption,
                companyContributionAnnualMaximum,
                coverageSalaryMultiplier,
                coverageAmount);
        }
    }
}

