/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * ContractorBankAccount - Example response
 */

public class ContractorBankAccount {

    /**
     * UUID of the bank account
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * UUID of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_uuid")
    private Optional<String> contractorUuid;

    /**
     * Bank account type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("account_type")
    private Optional<? extends ContractorBankAccountAccountType> accountType;

    /**
     * Name for the bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The bank account's routing number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("routing_number")
    private Optional<String> routingNumber;

    /**
     * Masked bank account number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden_account_number")
    private Optional<String> hiddenAccountNumber;

    @JsonCreator
    public ContractorBankAccount(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("contractor_uuid") Optional<String> contractorUuid,
            @JsonProperty("account_type") Optional<? extends ContractorBankAccountAccountType> accountType,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("routing_number") Optional<String> routingNumber,
            @JsonProperty("hidden_account_number") Optional<String> hiddenAccountNumber) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        Utils.checkNotNull(accountType, "accountType");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(routingNumber, "routingNumber");
        Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
        this.uuid = uuid;
        this.contractorUuid = contractorUuid;
        this.accountType = accountType;
        this.name = name;
        this.routingNumber = routingNumber;
        this.hiddenAccountNumber = hiddenAccountNumber;
    }
    
    public ContractorBankAccount(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * UUID of the bank account
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * UUID of the employee
     */
    @JsonIgnore
    public Optional<String> contractorUuid() {
        return contractorUuid;
    }

    /**
     * Bank account type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorBankAccountAccountType> accountType() {
        return (Optional<ContractorBankAccountAccountType>) accountType;
    }

    /**
     * Name for the bank account
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The bank account's routing number
     */
    @JsonIgnore
    public Optional<String> routingNumber() {
        return routingNumber;
    }

    /**
     * Masked bank account number
     */
    @JsonIgnore
    public Optional<String> hiddenAccountNumber() {
        return hiddenAccountNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * UUID of the bank account
     */
    public ContractorBankAccount withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * UUID of the employee
     */
    public ContractorBankAccount withContractorUuid(String contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = Optional.ofNullable(contractorUuid);
        return this;
    }

    /**
     * UUID of the employee
     */
    public ContractorBankAccount withContractorUuid(Optional<String> contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = contractorUuid;
        return this;
    }

    /**
     * Bank account type
     */
    public ContractorBankAccount withAccountType(ContractorBankAccountAccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = Optional.ofNullable(accountType);
        return this;
    }

    /**
     * Bank account type
     */
    public ContractorBankAccount withAccountType(Optional<? extends ContractorBankAccountAccountType> accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }

    /**
     * Name for the bank account
     */
    public ContractorBankAccount withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Name for the bank account
     */
    public ContractorBankAccount withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The bank account's routing number
     */
    public ContractorBankAccount withRoutingNumber(String routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = Optional.ofNullable(routingNumber);
        return this;
    }

    /**
     * The bank account's routing number
     */
    public ContractorBankAccount withRoutingNumber(Optional<String> routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = routingNumber;
        return this;
    }

    /**
     * Masked bank account number
     */
    public ContractorBankAccount withHiddenAccountNumber(String hiddenAccountNumber) {
        Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
        this.hiddenAccountNumber = Optional.ofNullable(hiddenAccountNumber);
        return this;
    }

    /**
     * Masked bank account number
     */
    public ContractorBankAccount withHiddenAccountNumber(Optional<String> hiddenAccountNumber) {
        Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
        this.hiddenAccountNumber = hiddenAccountNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorBankAccount other = (ContractorBankAccount) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.contractorUuid, other.contractorUuid) &&
            Objects.deepEquals(this.accountType, other.accountType) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.routingNumber, other.routingNumber) &&
            Objects.deepEquals(this.hiddenAccountNumber, other.hiddenAccountNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            contractorUuid,
            accountType,
            name,
            routingNumber,
            hiddenAccountNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorBankAccount.class,
                "uuid", uuid,
                "contractorUuid", contractorUuid,
                "accountType", accountType,
                "name", name,
                "routingNumber", routingNumber,
                "hiddenAccountNumber", hiddenAccountNumber);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> contractorUuid = Optional.empty();
 
        private Optional<? extends ContractorBankAccountAccountType> accountType = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> routingNumber = Optional.empty();
 
        private Optional<String> hiddenAccountNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * UUID of the bank account
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * UUID of the employee
         */
        public Builder contractorUuid(String contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = Optional.ofNullable(contractorUuid);
            return this;
        }

        /**
         * UUID of the employee
         */
        public Builder contractorUuid(Optional<String> contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = contractorUuid;
            return this;
        }

        /**
         * Bank account type
         */
        public Builder accountType(ContractorBankAccountAccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = Optional.ofNullable(accountType);
            return this;
        }

        /**
         * Bank account type
         */
        public Builder accountType(Optional<? extends ContractorBankAccountAccountType> accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }

        /**
         * Name for the bank account
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Name for the bank account
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The bank account's routing number
         */
        public Builder routingNumber(String routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = Optional.ofNullable(routingNumber);
            return this;
        }

        /**
         * The bank account's routing number
         */
        public Builder routingNumber(Optional<String> routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = routingNumber;
            return this;
        }

        /**
         * Masked bank account number
         */
        public Builder hiddenAccountNumber(String hiddenAccountNumber) {
            Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
            this.hiddenAccountNumber = Optional.ofNullable(hiddenAccountNumber);
            return this;
        }

        /**
         * Masked bank account number
         */
        public Builder hiddenAccountNumber(Optional<String> hiddenAccountNumber) {
            Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
            this.hiddenAccountNumber = hiddenAccountNumber;
            return this;
        }
        
        public ContractorBankAccount build() {
            return new ContractorBankAccount(
                uuid,
                contractorUuid,
                accountType,
                name,
                routingNumber,
                hiddenAccountNumber);
        }
    }
}

