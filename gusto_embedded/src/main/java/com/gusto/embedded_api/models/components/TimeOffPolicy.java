/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * TimeOffPolicy
 * 
 * <p>Representation of a Time Off Policy
 */

public class TimeOffPolicy {

    /**
     * Unique identifier of a time off policy
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * Unique identifier for the company owning the time off policy
     */
    @JsonProperty("company_uuid")
    private String companyUuid;

    /**
     * Name of the time off policy
     */
    @JsonProperty("name")
    private String name;

    /**
     * Type of the time off policy
     */
    @JsonProperty("policy_type")
    private PolicyType policyType;

    /**
     * Policy time off accrual method
     */
    @JsonProperty("accrual_method")
    private String accrualMethod;

    /**
     * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accrual_rate")
    private Optional<String> accrualRate;

    /**
     * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accrual_rate_unit")
    private Optional<String> accrualRateUnit;

    /**
     * Boolean representing if an employee's accrued time off hours will be paid out on termination
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("paid_out_on_termination")
    private Optional<Boolean> paidOutOnTermination;

    /**
     * Number of days before an employee on the policy will begin accruing time off hours
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("accrual_waiting_period_days")
    private Optional<Long> accrualWaitingPeriodDays;

    /**
     * The max number of hours an employee can carryover from one year to the next
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("carryover_limit_hours")
    private Optional<String> carryoverLimitHours;

    /**
     * The max number of hours an employee can accrue in a year
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_accrual_hours_per_year")
    private Optional<String> maxAccrualHoursPerYear;

    /**
     * The max number of hours an employee can accrue
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("max_hours")
    private Optional<String> maxHours;

    /**
     * boolean representing if a policy has completed configuration
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("complete")
    private Optional<Boolean> complete;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * boolean representing if a policy is active or not
     */
    @JsonProperty("is_active")
    private boolean isActive;

    /**
     * List of employee UUIDs under a time off policy
     */
    @JsonProperty("employees")
    private List<TimeOffPolicyEmployees> employees;

    @JsonCreator
    public TimeOffPolicy(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("company_uuid") String companyUuid,
            @JsonProperty("name") String name,
            @JsonProperty("policy_type") PolicyType policyType,
            @JsonProperty("accrual_method") String accrualMethod,
            @JsonProperty("accrual_rate") Optional<String> accrualRate,
            @JsonProperty("accrual_rate_unit") Optional<String> accrualRateUnit,
            @JsonProperty("paid_out_on_termination") Optional<Boolean> paidOutOnTermination,
            @JsonProperty("accrual_waiting_period_days") Optional<Long> accrualWaitingPeriodDays,
            @JsonProperty("carryover_limit_hours") Optional<String> carryoverLimitHours,
            @JsonProperty("max_accrual_hours_per_year") Optional<String> maxAccrualHoursPerYear,
            @JsonProperty("max_hours") Optional<String> maxHours,
            @JsonProperty("complete") Optional<Boolean> complete,
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("is_active") boolean isActive,
            @JsonProperty("employees") List<TimeOffPolicyEmployees> employees) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(policyType, "policyType");
        Utils.checkNotNull(accrualMethod, "accrualMethod");
        Utils.checkNotNull(accrualRate, "accrualRate");
        Utils.checkNotNull(accrualRateUnit, "accrualRateUnit");
        Utils.checkNotNull(paidOutOnTermination, "paidOutOnTermination");
        Utils.checkNotNull(accrualWaitingPeriodDays, "accrualWaitingPeriodDays");
        Utils.checkNotNull(carryoverLimitHours, "carryoverLimitHours");
        Utils.checkNotNull(maxAccrualHoursPerYear, "maxAccrualHoursPerYear");
        Utils.checkNotNull(maxHours, "maxHours");
        Utils.checkNotNull(complete, "complete");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(employees, "employees");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.name = name;
        this.policyType = policyType;
        this.accrualMethod = accrualMethod;
        this.accrualRate = accrualRate;
        this.accrualRateUnit = accrualRateUnit;
        this.paidOutOnTermination = paidOutOnTermination;
        this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
        this.carryoverLimitHours = carryoverLimitHours;
        this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
        this.maxHours = maxHours;
        this.complete = complete;
        this.version = version;
        this.isActive = isActive;
        this.employees = employees;
    }
    
    public TimeOffPolicy(
            String uuid,
            String companyUuid,
            String name,
            PolicyType policyType,
            String accrualMethod,
            boolean isActive,
            List<TimeOffPolicyEmployees> employees) {
        this(uuid, companyUuid, name, policyType, accrualMethod, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), isActive, employees);
    }

    /**
     * Unique identifier of a time off policy
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * Unique identifier for the company owning the time off policy
     */
    @JsonIgnore
    public String companyUuid() {
        return companyUuid;
    }

    /**
     * Name of the time off policy
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Type of the time off policy
     */
    @JsonIgnore
    public PolicyType policyType() {
        return policyType;
    }

    /**
     * Policy time off accrual method
     */
    @JsonIgnore
    public String accrualMethod() {
        return accrualMethod;
    }

    /**
     * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
     */
    @JsonIgnore
    public Optional<String> accrualRate() {
        return accrualRate;
    }

    /**
     * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
     */
    @JsonIgnore
    public Optional<String> accrualRateUnit() {
        return accrualRateUnit;
    }

    /**
     * Boolean representing if an employee's accrued time off hours will be paid out on termination
     */
    @JsonIgnore
    public Optional<Boolean> paidOutOnTermination() {
        return paidOutOnTermination;
    }

    /**
     * Number of days before an employee on the policy will begin accruing time off hours
     */
    @JsonIgnore
    public Optional<Long> accrualWaitingPeriodDays() {
        return accrualWaitingPeriodDays;
    }

    /**
     * The max number of hours an employee can carryover from one year to the next
     */
    @JsonIgnore
    public Optional<String> carryoverLimitHours() {
        return carryoverLimitHours;
    }

    /**
     * The max number of hours an employee can accrue in a year
     */
    @JsonIgnore
    public Optional<String> maxAccrualHoursPerYear() {
        return maxAccrualHoursPerYear;
    }

    /**
     * The max number of hours an employee can accrue
     */
    @JsonIgnore
    public Optional<String> maxHours() {
        return maxHours;
    }

    /**
     * boolean representing if a policy has completed configuration
     */
    @JsonIgnore
    public Optional<Boolean> complete() {
        return complete;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * boolean representing if a policy is active or not
     */
    @JsonIgnore
    public boolean isActive() {
        return isActive;
    }

    /**
     * List of employee UUIDs under a time off policy
     */
    @JsonIgnore
    public List<TimeOffPolicyEmployees> employees() {
        return employees;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of a time off policy
     */
    public TimeOffPolicy withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Unique identifier for the company owning the time off policy
     */
    public TimeOffPolicy withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * Name of the time off policy
     */
    public TimeOffPolicy withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Type of the time off policy
     */
    public TimeOffPolicy withPolicyType(PolicyType policyType) {
        Utils.checkNotNull(policyType, "policyType");
        this.policyType = policyType;
        return this;
    }

    /**
     * Policy time off accrual method
     */
    public TimeOffPolicy withAccrualMethod(String accrualMethod) {
        Utils.checkNotNull(accrualMethod, "accrualMethod");
        this.accrualMethod = accrualMethod;
        return this;
    }

    /**
     * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
     */
    public TimeOffPolicy withAccrualRate(String accrualRate) {
        Utils.checkNotNull(accrualRate, "accrualRate");
        this.accrualRate = Optional.ofNullable(accrualRate);
        return this;
    }

    /**
     * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
     */
    public TimeOffPolicy withAccrualRate(Optional<String> accrualRate) {
        Utils.checkNotNull(accrualRate, "accrualRate");
        this.accrualRate = accrualRate;
        return this;
    }

    /**
     * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
     */
    public TimeOffPolicy withAccrualRateUnit(String accrualRateUnit) {
        Utils.checkNotNull(accrualRateUnit, "accrualRateUnit");
        this.accrualRateUnit = Optional.ofNullable(accrualRateUnit);
        return this;
    }

    /**
     * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
     */
    public TimeOffPolicy withAccrualRateUnit(Optional<String> accrualRateUnit) {
        Utils.checkNotNull(accrualRateUnit, "accrualRateUnit");
        this.accrualRateUnit = accrualRateUnit;
        return this;
    }

    /**
     * Boolean representing if an employee's accrued time off hours will be paid out on termination
     */
    public TimeOffPolicy withPaidOutOnTermination(boolean paidOutOnTermination) {
        Utils.checkNotNull(paidOutOnTermination, "paidOutOnTermination");
        this.paidOutOnTermination = Optional.ofNullable(paidOutOnTermination);
        return this;
    }

    /**
     * Boolean representing if an employee's accrued time off hours will be paid out on termination
     */
    public TimeOffPolicy withPaidOutOnTermination(Optional<Boolean> paidOutOnTermination) {
        Utils.checkNotNull(paidOutOnTermination, "paidOutOnTermination");
        this.paidOutOnTermination = paidOutOnTermination;
        return this;
    }

    /**
     * Number of days before an employee on the policy will begin accruing time off hours
     */
    public TimeOffPolicy withAccrualWaitingPeriodDays(long accrualWaitingPeriodDays) {
        Utils.checkNotNull(accrualWaitingPeriodDays, "accrualWaitingPeriodDays");
        this.accrualWaitingPeriodDays = Optional.ofNullable(accrualWaitingPeriodDays);
        return this;
    }

    /**
     * Number of days before an employee on the policy will begin accruing time off hours
     */
    public TimeOffPolicy withAccrualWaitingPeriodDays(Optional<Long> accrualWaitingPeriodDays) {
        Utils.checkNotNull(accrualWaitingPeriodDays, "accrualWaitingPeriodDays");
        this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
        return this;
    }

    /**
     * The max number of hours an employee can carryover from one year to the next
     */
    public TimeOffPolicy withCarryoverLimitHours(String carryoverLimitHours) {
        Utils.checkNotNull(carryoverLimitHours, "carryoverLimitHours");
        this.carryoverLimitHours = Optional.ofNullable(carryoverLimitHours);
        return this;
    }

    /**
     * The max number of hours an employee can carryover from one year to the next
     */
    public TimeOffPolicy withCarryoverLimitHours(Optional<String> carryoverLimitHours) {
        Utils.checkNotNull(carryoverLimitHours, "carryoverLimitHours");
        this.carryoverLimitHours = carryoverLimitHours;
        return this;
    }

    /**
     * The max number of hours an employee can accrue in a year
     */
    public TimeOffPolicy withMaxAccrualHoursPerYear(String maxAccrualHoursPerYear) {
        Utils.checkNotNull(maxAccrualHoursPerYear, "maxAccrualHoursPerYear");
        this.maxAccrualHoursPerYear = Optional.ofNullable(maxAccrualHoursPerYear);
        return this;
    }

    /**
     * The max number of hours an employee can accrue in a year
     */
    public TimeOffPolicy withMaxAccrualHoursPerYear(Optional<String> maxAccrualHoursPerYear) {
        Utils.checkNotNull(maxAccrualHoursPerYear, "maxAccrualHoursPerYear");
        this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
        return this;
    }

    /**
     * The max number of hours an employee can accrue
     */
    public TimeOffPolicy withMaxHours(String maxHours) {
        Utils.checkNotNull(maxHours, "maxHours");
        this.maxHours = Optional.ofNullable(maxHours);
        return this;
    }

    /**
     * The max number of hours an employee can accrue
     */
    public TimeOffPolicy withMaxHours(Optional<String> maxHours) {
        Utils.checkNotNull(maxHours, "maxHours");
        this.maxHours = maxHours;
        return this;
    }

    /**
     * boolean representing if a policy has completed configuration
     */
    public TimeOffPolicy withComplete(boolean complete) {
        Utils.checkNotNull(complete, "complete");
        this.complete = Optional.ofNullable(complete);
        return this;
    }

    /**
     * boolean representing if a policy has completed configuration
     */
    public TimeOffPolicy withComplete(Optional<Boolean> complete) {
        Utils.checkNotNull(complete, "complete");
        this.complete = complete;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public TimeOffPolicy withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public TimeOffPolicy withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * boolean representing if a policy is active or not
     */
    public TimeOffPolicy withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    /**
     * List of employee UUIDs under a time off policy
     */
    public TimeOffPolicy withEmployees(List<TimeOffPolicyEmployees> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TimeOffPolicy other = (TimeOffPolicy) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.policyType, other.policyType) &&
            Objects.deepEquals(this.accrualMethod, other.accrualMethod) &&
            Objects.deepEquals(this.accrualRate, other.accrualRate) &&
            Objects.deepEquals(this.accrualRateUnit, other.accrualRateUnit) &&
            Objects.deepEquals(this.paidOutOnTermination, other.paidOutOnTermination) &&
            Objects.deepEquals(this.accrualWaitingPeriodDays, other.accrualWaitingPeriodDays) &&
            Objects.deepEquals(this.carryoverLimitHours, other.carryoverLimitHours) &&
            Objects.deepEquals(this.maxAccrualHoursPerYear, other.maxAccrualHoursPerYear) &&
            Objects.deepEquals(this.maxHours, other.maxHours) &&
            Objects.deepEquals(this.complete, other.complete) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.isActive, other.isActive) &&
            Objects.deepEquals(this.employees, other.employees);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            name,
            policyType,
            accrualMethod,
            accrualRate,
            accrualRateUnit,
            paidOutOnTermination,
            accrualWaitingPeriodDays,
            carryoverLimitHours,
            maxAccrualHoursPerYear,
            maxHours,
            complete,
            version,
            isActive,
            employees);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TimeOffPolicy.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "name", name,
                "policyType", policyType,
                "accrualMethod", accrualMethod,
                "accrualRate", accrualRate,
                "accrualRateUnit", accrualRateUnit,
                "paidOutOnTermination", paidOutOnTermination,
                "accrualWaitingPeriodDays", accrualWaitingPeriodDays,
                "carryoverLimitHours", carryoverLimitHours,
                "maxAccrualHoursPerYear", maxAccrualHoursPerYear,
                "maxHours", maxHours,
                "complete", complete,
                "version", version,
                "isActive", isActive,
                "employees", employees);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private String companyUuid;
 
        private String name;
 
        private PolicyType policyType;
 
        private String accrualMethod;
 
        private Optional<String> accrualRate = Optional.empty();
 
        private Optional<String> accrualRateUnit = Optional.empty();
 
        private Optional<Boolean> paidOutOnTermination = Optional.empty();
 
        private Optional<Long> accrualWaitingPeriodDays = Optional.empty();
 
        private Optional<String> carryoverLimitHours = Optional.empty();
 
        private Optional<String> maxAccrualHoursPerYear = Optional.empty();
 
        private Optional<String> maxHours = Optional.empty();
 
        private Optional<Boolean> complete = Optional.empty();
 
        private Optional<String> version = Optional.empty();
 
        private Boolean isActive;
 
        private List<TimeOffPolicyEmployees> employees;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of a time off policy
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Unique identifier for the company owning the time off policy
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * Name of the time off policy
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Type of the time off policy
         */
        public Builder policyType(PolicyType policyType) {
            Utils.checkNotNull(policyType, "policyType");
            this.policyType = policyType;
            return this;
        }

        /**
         * Policy time off accrual method
         */
        public Builder accrualMethod(String accrualMethod) {
            Utils.checkNotNull(accrualMethod, "accrualMethod");
            this.accrualMethod = accrualMethod;
            return this;
        }

        /**
         * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
         */
        public Builder accrualRate(String accrualRate) {
            Utils.checkNotNull(accrualRate, "accrualRate");
            this.accrualRate = Optional.ofNullable(accrualRate);
            return this;
        }

        /**
         * The rate at which the time off hours will accrue for an employee on the policy. Represented as a float, e.g. "40.0".
         */
        public Builder accrualRate(Optional<String> accrualRate) {
            Utils.checkNotNull(accrualRate, "accrualRate");
            this.accrualRate = accrualRate;
            return this;
        }

        /**
         * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
         */
        public Builder accrualRateUnit(String accrualRateUnit) {
            Utils.checkNotNull(accrualRateUnit, "accrualRateUnit");
            this.accrualRateUnit = Optional.ofNullable(accrualRateUnit);
            return this;
        }

        /**
         * The number of hours an employee has to work or be paid for to accrue the number of hours set in the accrual rate. Only used for hourly policies (per_hour_paid, per_hour_paid_no_overtime, per_hour_work, per_hour_worked_no_overtime). Represented as a float, e.g. "40.0".
         */
        public Builder accrualRateUnit(Optional<String> accrualRateUnit) {
            Utils.checkNotNull(accrualRateUnit, "accrualRateUnit");
            this.accrualRateUnit = accrualRateUnit;
            return this;
        }

        /**
         * Boolean representing if an employee's accrued time off hours will be paid out on termination
         */
        public Builder paidOutOnTermination(boolean paidOutOnTermination) {
            Utils.checkNotNull(paidOutOnTermination, "paidOutOnTermination");
            this.paidOutOnTermination = Optional.ofNullable(paidOutOnTermination);
            return this;
        }

        /**
         * Boolean representing if an employee's accrued time off hours will be paid out on termination
         */
        public Builder paidOutOnTermination(Optional<Boolean> paidOutOnTermination) {
            Utils.checkNotNull(paidOutOnTermination, "paidOutOnTermination");
            this.paidOutOnTermination = paidOutOnTermination;
            return this;
        }

        /**
         * Number of days before an employee on the policy will begin accruing time off hours
         */
        public Builder accrualWaitingPeriodDays(long accrualWaitingPeriodDays) {
            Utils.checkNotNull(accrualWaitingPeriodDays, "accrualWaitingPeriodDays");
            this.accrualWaitingPeriodDays = Optional.ofNullable(accrualWaitingPeriodDays);
            return this;
        }

        /**
         * Number of days before an employee on the policy will begin accruing time off hours
         */
        public Builder accrualWaitingPeriodDays(Optional<Long> accrualWaitingPeriodDays) {
            Utils.checkNotNull(accrualWaitingPeriodDays, "accrualWaitingPeriodDays");
            this.accrualWaitingPeriodDays = accrualWaitingPeriodDays;
            return this;
        }

        /**
         * The max number of hours an employee can carryover from one year to the next
         */
        public Builder carryoverLimitHours(String carryoverLimitHours) {
            Utils.checkNotNull(carryoverLimitHours, "carryoverLimitHours");
            this.carryoverLimitHours = Optional.ofNullable(carryoverLimitHours);
            return this;
        }

        /**
         * The max number of hours an employee can carryover from one year to the next
         */
        public Builder carryoverLimitHours(Optional<String> carryoverLimitHours) {
            Utils.checkNotNull(carryoverLimitHours, "carryoverLimitHours");
            this.carryoverLimitHours = carryoverLimitHours;
            return this;
        }

        /**
         * The max number of hours an employee can accrue in a year
         */
        public Builder maxAccrualHoursPerYear(String maxAccrualHoursPerYear) {
            Utils.checkNotNull(maxAccrualHoursPerYear, "maxAccrualHoursPerYear");
            this.maxAccrualHoursPerYear = Optional.ofNullable(maxAccrualHoursPerYear);
            return this;
        }

        /**
         * The max number of hours an employee can accrue in a year
         */
        public Builder maxAccrualHoursPerYear(Optional<String> maxAccrualHoursPerYear) {
            Utils.checkNotNull(maxAccrualHoursPerYear, "maxAccrualHoursPerYear");
            this.maxAccrualHoursPerYear = maxAccrualHoursPerYear;
            return this;
        }

        /**
         * The max number of hours an employee can accrue
         */
        public Builder maxHours(String maxHours) {
            Utils.checkNotNull(maxHours, "maxHours");
            this.maxHours = Optional.ofNullable(maxHours);
            return this;
        }

        /**
         * The max number of hours an employee can accrue
         */
        public Builder maxHours(Optional<String> maxHours) {
            Utils.checkNotNull(maxHours, "maxHours");
            this.maxHours = maxHours;
            return this;
        }

        /**
         * boolean representing if a policy has completed configuration
         */
        public Builder complete(boolean complete) {
            Utils.checkNotNull(complete, "complete");
            this.complete = Optional.ofNullable(complete);
            return this;
        }

        /**
         * boolean representing if a policy has completed configuration
         */
        public Builder complete(Optional<Boolean> complete) {
            Utils.checkNotNull(complete, "complete");
            this.complete = complete;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * boolean representing if a policy is active or not
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        /**
         * List of employee UUIDs under a time off policy
         */
        public Builder employees(List<TimeOffPolicyEmployees> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }
        
        public TimeOffPolicy build() {
            return new TimeOffPolicy(
                uuid,
                companyUuid,
                name,
                policyType,
                accrualMethod,
                accrualRate,
                accrualRateUnit,
                paidOutOnTermination,
                accrualWaitingPeriodDays,
                carryoverLimitHours,
                maxAccrualHoursPerYear,
                maxHours,
                complete,
                version,
                isActive,
                employees);
        }
    }
}

