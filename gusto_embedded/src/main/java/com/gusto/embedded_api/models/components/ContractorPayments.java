/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class ContractorPayments {

    /**
     * The UUID of the contractor.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_uuid")
    private Optional<String> contractorUuid;

    /**
     * The first name of the contractor. Applies when `contractor_type` is `Individual`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_first_name")
    private Optional<String> contractorFirstName;

    /**
     * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_last_name")
    private Optional<String> contractorLastName;

    /**
     * The business name of the contractor. Applies when `contractor_type` is `Business`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_business_name")
    private Optional<String> contractorBusinessName;

    /**
     * The type of contractor.
     * 
     * `Individual` `Business`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_type")
    private Optional<String> contractorType;

    /**
     * The payment method.
     * 
     * `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private Optional<String> paymentMethod;

    /**
     * The fixed wage of the payment, regardless of hours worked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage")
    private Optional<String> wage;

    /**
     * The bonus amount in the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bonus")
    private Optional<String> bonus;

    /**
     * The reimbursement amount in the payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement")
    private Optional<String> reimbursement;

    @JsonCreator
    public ContractorPayments(
            @JsonProperty("contractor_uuid") Optional<String> contractorUuid,
            @JsonProperty("contractor_first_name") Optional<String> contractorFirstName,
            @JsonProperty("contractor_last_name") Optional<String> contractorLastName,
            @JsonProperty("contractor_business_name") Optional<String> contractorBusinessName,
            @JsonProperty("contractor_type") Optional<String> contractorType,
            @JsonProperty("payment_method") Optional<String> paymentMethod,
            @JsonProperty("wage") Optional<String> wage,
            @JsonProperty("bonus") Optional<String> bonus,
            @JsonProperty("reimbursement") Optional<String> reimbursement) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        Utils.checkNotNull(contractorFirstName, "contractorFirstName");
        Utils.checkNotNull(contractorLastName, "contractorLastName");
        Utils.checkNotNull(contractorBusinessName, "contractorBusinessName");
        Utils.checkNotNull(contractorType, "contractorType");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(wage, "wage");
        Utils.checkNotNull(bonus, "bonus");
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.contractorUuid = contractorUuid;
        this.contractorFirstName = contractorFirstName;
        this.contractorLastName = contractorLastName;
        this.contractorBusinessName = contractorBusinessName;
        this.contractorType = contractorType;
        this.paymentMethod = paymentMethod;
        this.wage = wage;
        this.bonus = bonus;
        this.reimbursement = reimbursement;
    }
    
    public ContractorPayments() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the contractor.
     */
    @JsonIgnore
    public Optional<String> contractorUuid() {
        return contractorUuid;
    }

    /**
     * The first name of the contractor. Applies when `contractor_type` is `Individual`.
     */
    @JsonIgnore
    public Optional<String> contractorFirstName() {
        return contractorFirstName;
    }

    /**
     * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
     */
    @JsonIgnore
    public Optional<String> contractorLastName() {
        return contractorLastName;
    }

    /**
     * The business name of the contractor. Applies when `contractor_type` is `Business`.
     */
    @JsonIgnore
    public Optional<String> contractorBusinessName() {
        return contractorBusinessName;
    }

    /**
     * The type of contractor.
     * 
     * `Individual` `Business`
     */
    @JsonIgnore
    public Optional<String> contractorType() {
        return contractorType;
    }

    /**
     * The payment method.
     * 
     * `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
     */
    @JsonIgnore
    public Optional<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * The fixed wage of the payment, regardless of hours worked.
     */
    @JsonIgnore
    public Optional<String> wage() {
        return wage;
    }

    /**
     * The bonus amount in the payment.
     */
    @JsonIgnore
    public Optional<String> bonus() {
        return bonus;
    }

    /**
     * The reimbursement amount in the payment.
     */
    @JsonIgnore
    public Optional<String> reimbursement() {
        return reimbursement;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the contractor.
     */
    public ContractorPayments withContractorUuid(String contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = Optional.ofNullable(contractorUuid);
        return this;
    }

    /**
     * The UUID of the contractor.
     */
    public ContractorPayments withContractorUuid(Optional<String> contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = contractorUuid;
        return this;
    }

    /**
     * The first name of the contractor. Applies when `contractor_type` is `Individual`.
     */
    public ContractorPayments withContractorFirstName(String contractorFirstName) {
        Utils.checkNotNull(contractorFirstName, "contractorFirstName");
        this.contractorFirstName = Optional.ofNullable(contractorFirstName);
        return this;
    }

    /**
     * The first name of the contractor. Applies when `contractor_type` is `Individual`.
     */
    public ContractorPayments withContractorFirstName(Optional<String> contractorFirstName) {
        Utils.checkNotNull(contractorFirstName, "contractorFirstName");
        this.contractorFirstName = contractorFirstName;
        return this;
    }

    /**
     * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
     */
    public ContractorPayments withContractorLastName(String contractorLastName) {
        Utils.checkNotNull(contractorLastName, "contractorLastName");
        this.contractorLastName = Optional.ofNullable(contractorLastName);
        return this;
    }

    /**
     * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
     */
    public ContractorPayments withContractorLastName(Optional<String> contractorLastName) {
        Utils.checkNotNull(contractorLastName, "contractorLastName");
        this.contractorLastName = contractorLastName;
        return this;
    }

    /**
     * The business name of the contractor. Applies when `contractor_type` is `Business`.
     */
    public ContractorPayments withContractorBusinessName(String contractorBusinessName) {
        Utils.checkNotNull(contractorBusinessName, "contractorBusinessName");
        this.contractorBusinessName = Optional.ofNullable(contractorBusinessName);
        return this;
    }

    /**
     * The business name of the contractor. Applies when `contractor_type` is `Business`.
     */
    public ContractorPayments withContractorBusinessName(Optional<String> contractorBusinessName) {
        Utils.checkNotNull(contractorBusinessName, "contractorBusinessName");
        this.contractorBusinessName = contractorBusinessName;
        return this;
    }

    /**
     * The type of contractor.
     * 
     * `Individual` `Business`
     */
    public ContractorPayments withContractorType(String contractorType) {
        Utils.checkNotNull(contractorType, "contractorType");
        this.contractorType = Optional.ofNullable(contractorType);
        return this;
    }

    /**
     * The type of contractor.
     * 
     * `Individual` `Business`
     */
    public ContractorPayments withContractorType(Optional<String> contractorType) {
        Utils.checkNotNull(contractorType, "contractorType");
        this.contractorType = contractorType;
        return this;
    }

    /**
     * The payment method.
     * 
     * `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
     */
    public ContractorPayments withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = Optional.ofNullable(paymentMethod);
        return this;
    }

    /**
     * The payment method.
     * 
     * `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
     */
    public ContractorPayments withPaymentMethod(Optional<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The fixed wage of the payment, regardless of hours worked.
     */
    public ContractorPayments withWage(String wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = Optional.ofNullable(wage);
        return this;
    }

    /**
     * The fixed wage of the payment, regardless of hours worked.
     */
    public ContractorPayments withWage(Optional<String> wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = wage;
        return this;
    }

    /**
     * The bonus amount in the payment.
     */
    public ContractorPayments withBonus(String bonus) {
        Utils.checkNotNull(bonus, "bonus");
        this.bonus = Optional.ofNullable(bonus);
        return this;
    }

    /**
     * The bonus amount in the payment.
     */
    public ContractorPayments withBonus(Optional<String> bonus) {
        Utils.checkNotNull(bonus, "bonus");
        this.bonus = bonus;
        return this;
    }

    /**
     * The reimbursement amount in the payment.
     */
    public ContractorPayments withReimbursement(String reimbursement) {
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.reimbursement = Optional.ofNullable(reimbursement);
        return this;
    }

    /**
     * The reimbursement amount in the payment.
     */
    public ContractorPayments withReimbursement(Optional<String> reimbursement) {
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.reimbursement = reimbursement;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorPayments other = (ContractorPayments) o;
        return 
            Objects.deepEquals(this.contractorUuid, other.contractorUuid) &&
            Objects.deepEquals(this.contractorFirstName, other.contractorFirstName) &&
            Objects.deepEquals(this.contractorLastName, other.contractorLastName) &&
            Objects.deepEquals(this.contractorBusinessName, other.contractorBusinessName) &&
            Objects.deepEquals(this.contractorType, other.contractorType) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.wage, other.wage) &&
            Objects.deepEquals(this.bonus, other.bonus) &&
            Objects.deepEquals(this.reimbursement, other.reimbursement);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contractorUuid,
            contractorFirstName,
            contractorLastName,
            contractorBusinessName,
            contractorType,
            paymentMethod,
            wage,
            bonus,
            reimbursement);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorPayments.class,
                "contractorUuid", contractorUuid,
                "contractorFirstName", contractorFirstName,
                "contractorLastName", contractorLastName,
                "contractorBusinessName", contractorBusinessName,
                "contractorType", contractorType,
                "paymentMethod", paymentMethod,
                "wage", wage,
                "bonus", bonus,
                "reimbursement", reimbursement);
    }
    
    public final static class Builder {
 
        private Optional<String> contractorUuid = Optional.empty();
 
        private Optional<String> contractorFirstName = Optional.empty();
 
        private Optional<String> contractorLastName = Optional.empty();
 
        private Optional<String> contractorBusinessName = Optional.empty();
 
        private Optional<String> contractorType = Optional.empty();
 
        private Optional<String> paymentMethod = Optional.empty();
 
        private Optional<String> wage = Optional.empty();
 
        private Optional<String> bonus = Optional.empty();
 
        private Optional<String> reimbursement = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the contractor.
         */
        public Builder contractorUuid(String contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = Optional.ofNullable(contractorUuid);
            return this;
        }

        /**
         * The UUID of the contractor.
         */
        public Builder contractorUuid(Optional<String> contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = contractorUuid;
            return this;
        }

        /**
         * The first name of the contractor. Applies when `contractor_type` is `Individual`.
         */
        public Builder contractorFirstName(String contractorFirstName) {
            Utils.checkNotNull(contractorFirstName, "contractorFirstName");
            this.contractorFirstName = Optional.ofNullable(contractorFirstName);
            return this;
        }

        /**
         * The first name of the contractor. Applies when `contractor_type` is `Individual`.
         */
        public Builder contractorFirstName(Optional<String> contractorFirstName) {
            Utils.checkNotNull(contractorFirstName, "contractorFirstName");
            this.contractorFirstName = contractorFirstName;
            return this;
        }

        /**
         * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
         */
        public Builder contractorLastName(String contractorLastName) {
            Utils.checkNotNull(contractorLastName, "contractorLastName");
            this.contractorLastName = Optional.ofNullable(contractorLastName);
            return this;
        }

        /**
         * The last name of the contractor.  Applies when `contractor_type` is `Individual`.
         */
        public Builder contractorLastName(Optional<String> contractorLastName) {
            Utils.checkNotNull(contractorLastName, "contractorLastName");
            this.contractorLastName = contractorLastName;
            return this;
        }

        /**
         * The business name of the contractor. Applies when `contractor_type` is `Business`.
         */
        public Builder contractorBusinessName(String contractorBusinessName) {
            Utils.checkNotNull(contractorBusinessName, "contractorBusinessName");
            this.contractorBusinessName = Optional.ofNullable(contractorBusinessName);
            return this;
        }

        /**
         * The business name of the contractor. Applies when `contractor_type` is `Business`.
         */
        public Builder contractorBusinessName(Optional<String> contractorBusinessName) {
            Utils.checkNotNull(contractorBusinessName, "contractorBusinessName");
            this.contractorBusinessName = contractorBusinessName;
            return this;
        }

        /**
         * The type of contractor.
         * 
         * `Individual` `Business`
         */
        public Builder contractorType(String contractorType) {
            Utils.checkNotNull(contractorType, "contractorType");
            this.contractorType = Optional.ofNullable(contractorType);
            return this;
        }

        /**
         * The type of contractor.
         * 
         * `Individual` `Business`
         */
        public Builder contractorType(Optional<String> contractorType) {
            Utils.checkNotNull(contractorType, "contractorType");
            this.contractorType = contractorType;
            return this;
        }

        /**
         * The payment method.
         * 
         * `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * The payment method.
         * 
         * `Direct Deposit` `Check` `Historical Payment` `Correction Payment`
         */
        public Builder paymentMethod(Optional<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The fixed wage of the payment, regardless of hours worked.
         */
        public Builder wage(String wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = Optional.ofNullable(wage);
            return this;
        }

        /**
         * The fixed wage of the payment, regardless of hours worked.
         */
        public Builder wage(Optional<String> wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = wage;
            return this;
        }

        /**
         * The bonus amount in the payment.
         */
        public Builder bonus(String bonus) {
            Utils.checkNotNull(bonus, "bonus");
            this.bonus = Optional.ofNullable(bonus);
            return this;
        }

        /**
         * The bonus amount in the payment.
         */
        public Builder bonus(Optional<String> bonus) {
            Utils.checkNotNull(bonus, "bonus");
            this.bonus = bonus;
            return this;
        }

        /**
         * The reimbursement amount in the payment.
         */
        public Builder reimbursement(String reimbursement) {
            Utils.checkNotNull(reimbursement, "reimbursement");
            this.reimbursement = Optional.ofNullable(reimbursement);
            return this;
        }

        /**
         * The reimbursement amount in the payment.
         */
        public Builder reimbursement(Optional<String> reimbursement) {
            Utils.checkNotNull(reimbursement, "reimbursement");
            this.reimbursement = reimbursement;
            return this;
        }
        
        public ContractorPayments build() {
            return new ContractorPayments(
                contractorUuid,
                contractorFirstName,
                contractorLastName,
                contractorBusinessName,
                contractorType,
                paymentMethod,
                wage,
                bonus,
                reimbursement);
        }
    }
}

