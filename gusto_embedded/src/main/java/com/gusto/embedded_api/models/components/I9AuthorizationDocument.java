/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * I9AuthorizationDocument - An employee's I-9 verification document
 */

public class I9AuthorizationDocument {

    /**
     * The UUID of the I-9 verification document
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The document's document type
     */
    @JsonProperty("document_type")
    private String documentType;

    /**
     * The document's document title
     */
    @JsonProperty("document_title")
    private String documentTitle;

    /**
     * The document's expiration date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private Optional<String> expirationDate;

    /**
     * The document's issuing authority
     */
    @JsonProperty("issuing_authority")
    private String issuingAuthority;

    @JsonCreator
    public I9AuthorizationDocument(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("document_type") String documentType,
            @JsonProperty("document_title") String documentTitle,
            @JsonProperty("expiration_date") Optional<String> expirationDate,
            @JsonProperty("issuing_authority") String issuingAuthority) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(documentType, "documentType");
        Utils.checkNotNull(documentTitle, "documentTitle");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(issuingAuthority, "issuingAuthority");
        this.uuid = uuid;
        this.documentType = documentType;
        this.documentTitle = documentTitle;
        this.expirationDate = expirationDate;
        this.issuingAuthority = issuingAuthority;
    }
    
    public I9AuthorizationDocument(
            String uuid,
            String documentType,
            String documentTitle,
            String issuingAuthority) {
        this(uuid, documentType, documentTitle, Optional.empty(), issuingAuthority);
    }

    /**
     * The UUID of the I-9 verification document
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The document's document type
     */
    @JsonIgnore
    public String documentType() {
        return documentType;
    }

    /**
     * The document's document title
     */
    @JsonIgnore
    public String documentTitle() {
        return documentTitle;
    }

    /**
     * The document's expiration date
     */
    @JsonIgnore
    public Optional<String> expirationDate() {
        return expirationDate;
    }

    /**
     * The document's issuing authority
     */
    @JsonIgnore
    public String issuingAuthority() {
        return issuingAuthority;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the I-9 verification document
     */
    public I9AuthorizationDocument withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The document's document type
     */
    public I9AuthorizationDocument withDocumentType(String documentType) {
        Utils.checkNotNull(documentType, "documentType");
        this.documentType = documentType;
        return this;
    }

    /**
     * The document's document title
     */
    public I9AuthorizationDocument withDocumentTitle(String documentTitle) {
        Utils.checkNotNull(documentTitle, "documentTitle");
        this.documentTitle = documentTitle;
        return this;
    }

    /**
     * The document's expiration date
     */
    public I9AuthorizationDocument withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = Optional.ofNullable(expirationDate);
        return this;
    }

    /**
     * The document's expiration date
     */
    public I9AuthorizationDocument withExpirationDate(Optional<String> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The document's issuing authority
     */
    public I9AuthorizationDocument withIssuingAuthority(String issuingAuthority) {
        Utils.checkNotNull(issuingAuthority, "issuingAuthority");
        this.issuingAuthority = issuingAuthority;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        I9AuthorizationDocument other = (I9AuthorizationDocument) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.documentType, other.documentType) &&
            Objects.deepEquals(this.documentTitle, other.documentTitle) &&
            Objects.deepEquals(this.expirationDate, other.expirationDate) &&
            Objects.deepEquals(this.issuingAuthority, other.issuingAuthority);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            documentType,
            documentTitle,
            expirationDate,
            issuingAuthority);
    }
    
    @Override
    public String toString() {
        return Utils.toString(I9AuthorizationDocument.class,
                "uuid", uuid,
                "documentType", documentType,
                "documentTitle", documentTitle,
                "expirationDate", expirationDate,
                "issuingAuthority", issuingAuthority);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private String documentType;
 
        private String documentTitle;
 
        private Optional<String> expirationDate = Optional.empty();
 
        private String issuingAuthority;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the I-9 verification document
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The document's document type
         */
        public Builder documentType(String documentType) {
            Utils.checkNotNull(documentType, "documentType");
            this.documentType = documentType;
            return this;
        }

        /**
         * The document's document title
         */
        public Builder documentTitle(String documentTitle) {
            Utils.checkNotNull(documentTitle, "documentTitle");
            this.documentTitle = documentTitle;
            return this;
        }

        /**
         * The document's expiration date
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = Optional.ofNullable(expirationDate);
            return this;
        }

        /**
         * The document's expiration date
         */
        public Builder expirationDate(Optional<String> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The document's issuing authority
         */
        public Builder issuingAuthority(String issuingAuthority) {
            Utils.checkNotNull(issuingAuthority, "issuingAuthority");
            this.issuingAuthority = issuingAuthority;
            return this;
        }
        
        public I9AuthorizationDocument build() {
            return new I9AuthorizationDocument(
                uuid,
                documentType,
                documentTitle,
                expirationDate,
                issuingAuthority);
        }
    }
}

