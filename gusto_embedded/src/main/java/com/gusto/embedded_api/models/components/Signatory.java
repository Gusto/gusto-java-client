/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Signatory - The representation of a company's signatory
 */

public class Signatory {

    @JsonProperty("uuid")
    private String uuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private JsonNullable<String> title;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("birthday")
    private JsonNullable<String> birthday;

    /**
     * Whether or not the signatory is also the payroll admin of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_admin")
    private Optional<Boolean> isAdmin;

    /**
     * Indicates whether the signatory has an SSN in Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_ssn")
    private Optional<Boolean> hasSsn;

    /**
     * The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * |   |   |
     * |---|---|
     * |__Status__| __Description__ |
     * | Pass | Signatory can sign all forms |
     * | Fail | Signatory cannot sign forms |
     * | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
     * | null | Identity verification process has not been completed |
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("identity_verification_status")
    private JsonNullable<? extends IdentityVerificationStatus> identityVerificationStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("home_address")
    private JsonNullable<? extends HomeAddress> homeAddress;

    @JsonCreator
    public Signatory(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("title") JsonNullable<String> title,
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("birthday") JsonNullable<String> birthday,
            @JsonProperty("is_admin") Optional<Boolean> isAdmin,
            @JsonProperty("has_ssn") Optional<Boolean> hasSsn,
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("identity_verification_status") JsonNullable<? extends IdentityVerificationStatus> identityVerificationStatus,
            @JsonProperty("home_address") JsonNullable<? extends HomeAddress> homeAddress) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(birthday, "birthday");
        Utils.checkNotNull(isAdmin, "isAdmin");
        Utils.checkNotNull(hasSsn, "hasSsn");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(identityVerificationStatus, "identityVerificationStatus");
        Utils.checkNotNull(homeAddress, "homeAddress");
        this.uuid = uuid;
        this.firstName = firstName;
        this.lastName = lastName;
        this.title = title;
        this.phone = phone;
        this.email = email;
        this.birthday = birthday;
        this.isAdmin = isAdmin;
        this.hasSsn = hasSsn;
        this.version = version;
        this.identityVerificationStatus = identityVerificationStatus;
        this.homeAddress = homeAddress;
    }
    
    public Signatory(
            String uuid) {
        this(uuid, JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    @JsonIgnore
    public JsonNullable<String> title() {
        return title;
    }

    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    @JsonIgnore
    public JsonNullable<String> birthday() {
        return birthday;
    }

    /**
     * Whether or not the signatory is also the payroll admin of the company.
     */
    @JsonIgnore
    public Optional<Boolean> isAdmin() {
        return isAdmin;
    }

    /**
     * Indicates whether the signatory has an SSN in Gusto.
     */
    @JsonIgnore
    public Optional<Boolean> hasSsn() {
        return hasSsn;
    }

    /**
     * The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * |   |   |
     * |---|---|
     * |__Status__| __Description__ |
     * | Pass | Signatory can sign all forms |
     * | Fail | Signatory cannot sign forms |
     * | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
     * | null | Identity verification process has not been completed |
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<IdentityVerificationStatus> identityVerificationStatus() {
        return (JsonNullable<IdentityVerificationStatus>) identityVerificationStatus;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<HomeAddress> homeAddress() {
        return (JsonNullable<HomeAddress>) homeAddress;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Signatory withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    public Signatory withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    public Signatory withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public Signatory withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    public Signatory withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    public Signatory withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = JsonNullable.of(title);
        return this;
    }

    public Signatory withTitle(JsonNullable<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    public Signatory withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    public Signatory withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public Signatory withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    public Signatory withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    public Signatory withBirthday(String birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = JsonNullable.of(birthday);
        return this;
    }

    public Signatory withBirthday(JsonNullable<String> birthday) {
        Utils.checkNotNull(birthday, "birthday");
        this.birthday = birthday;
        return this;
    }

    /**
     * Whether or not the signatory is also the payroll admin of the company.
     */
    public Signatory withIsAdmin(boolean isAdmin) {
        Utils.checkNotNull(isAdmin, "isAdmin");
        this.isAdmin = Optional.ofNullable(isAdmin);
        return this;
    }

    /**
     * Whether or not the signatory is also the payroll admin of the company.
     */
    public Signatory withIsAdmin(Optional<Boolean> isAdmin) {
        Utils.checkNotNull(isAdmin, "isAdmin");
        this.isAdmin = isAdmin;
        return this;
    }

    /**
     * Indicates whether the signatory has an SSN in Gusto.
     */
    public Signatory withHasSsn(boolean hasSsn) {
        Utils.checkNotNull(hasSsn, "hasSsn");
        this.hasSsn = Optional.ofNullable(hasSsn);
        return this;
    }

    /**
     * Indicates whether the signatory has an SSN in Gusto.
     */
    public Signatory withHasSsn(Optional<Boolean> hasSsn) {
        Utils.checkNotNull(hasSsn, "hasSsn");
        this.hasSsn = hasSsn;
        return this;
    }

    /**
     * The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Signatory withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Signatory withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * |   |   |
     * |---|---|
     * |__Status__| __Description__ |
     * | Pass | Signatory can sign all forms |
     * | Fail | Signatory cannot sign forms |
     * | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
     * | null | Identity verification process has not been completed |
     */
    public Signatory withIdentityVerificationStatus(IdentityVerificationStatus identityVerificationStatus) {
        Utils.checkNotNull(identityVerificationStatus, "identityVerificationStatus");
        this.identityVerificationStatus = JsonNullable.of(identityVerificationStatus);
        return this;
    }

    /**
     * |   |   |
     * |---|---|
     * |__Status__| __Description__ |
     * | Pass | Signatory can sign all forms |
     * | Fail | Signatory cannot sign forms |
     * | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
     * | null | Identity verification process has not been completed |
     */
    public Signatory withIdentityVerificationStatus(JsonNullable<? extends IdentityVerificationStatus> identityVerificationStatus) {
        Utils.checkNotNull(identityVerificationStatus, "identityVerificationStatus");
        this.identityVerificationStatus = identityVerificationStatus;
        return this;
    }

    public Signatory withHomeAddress(HomeAddress homeAddress) {
        Utils.checkNotNull(homeAddress, "homeAddress");
        this.homeAddress = JsonNullable.of(homeAddress);
        return this;
    }

    public Signatory withHomeAddress(JsonNullable<? extends HomeAddress> homeAddress) {
        Utils.checkNotNull(homeAddress, "homeAddress");
        this.homeAddress = homeAddress;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Signatory other = (Signatory) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.birthday, other.birthday) &&
            Objects.deepEquals(this.isAdmin, other.isAdmin) &&
            Objects.deepEquals(this.hasSsn, other.hasSsn) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.identityVerificationStatus, other.identityVerificationStatus) &&
            Objects.deepEquals(this.homeAddress, other.homeAddress);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            firstName,
            lastName,
            title,
            phone,
            email,
            birthday,
            isAdmin,
            hasSsn,
            version,
            identityVerificationStatus,
            homeAddress);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Signatory.class,
                "uuid", uuid,
                "firstName", firstName,
                "lastName", lastName,
                "title", title,
                "phone", phone,
                "email", email,
                "birthday", birthday,
                "isAdmin", isAdmin,
                "hasSsn", hasSsn,
                "version", version,
                "identityVerificationStatus", identityVerificationStatus,
                "homeAddress", homeAddress);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> title = JsonNullable.undefined();
 
        private JsonNullable<String> phone = JsonNullable.undefined();
 
        private Optional<String> email = Optional.empty();
 
        private JsonNullable<String> birthday = JsonNullable.undefined();
 
        private Optional<Boolean> isAdmin = Optional.empty();
 
        private Optional<Boolean> hasSsn = Optional.empty();
 
        private Optional<String> version = Optional.empty();
 
        private JsonNullable<? extends IdentityVerificationStatus> identityVerificationStatus = JsonNullable.undefined();
 
        private JsonNullable<? extends HomeAddress> homeAddress = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = JsonNullable.of(title);
            return this;
        }

        public Builder title(JsonNullable<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        public Builder birthday(String birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = JsonNullable.of(birthday);
            return this;
        }

        public Builder birthday(JsonNullable<String> birthday) {
            Utils.checkNotNull(birthday, "birthday");
            this.birthday = birthday;
            return this;
        }

        /**
         * Whether or not the signatory is also the payroll admin of the company.
         */
        public Builder isAdmin(boolean isAdmin) {
            Utils.checkNotNull(isAdmin, "isAdmin");
            this.isAdmin = Optional.ofNullable(isAdmin);
            return this;
        }

        /**
         * Whether or not the signatory is also the payroll admin of the company.
         */
        public Builder isAdmin(Optional<Boolean> isAdmin) {
            Utils.checkNotNull(isAdmin, "isAdmin");
            this.isAdmin = isAdmin;
            return this;
        }

        /**
         * Indicates whether the signatory has an SSN in Gusto.
         */
        public Builder hasSsn(boolean hasSsn) {
            Utils.checkNotNull(hasSsn, "hasSsn");
            this.hasSsn = Optional.ofNullable(hasSsn);
            return this;
        }

        /**
         * Indicates whether the signatory has an SSN in Gusto.
         */
        public Builder hasSsn(Optional<Boolean> hasSsn) {
            Utils.checkNotNull(hasSsn, "hasSsn");
            this.hasSsn = hasSsn;
            return this;
        }

        /**
         * The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the signatory. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * |   |   |
         * |---|---|
         * |__Status__| __Description__ |
         * | Pass | Signatory can sign all forms |
         * | Fail | Signatory cannot sign forms |
         * | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
         * | null | Identity verification process has not been completed |
         */
        public Builder identityVerificationStatus(IdentityVerificationStatus identityVerificationStatus) {
            Utils.checkNotNull(identityVerificationStatus, "identityVerificationStatus");
            this.identityVerificationStatus = JsonNullable.of(identityVerificationStatus);
            return this;
        }

        /**
         * |   |   |
         * |---|---|
         * |__Status__| __Description__ |
         * | Pass | Signatory can sign all forms |
         * | Fail | Signatory cannot sign forms |
         * | Skipped | Signatory cannot sign Form 8655 until the form is manually uploaded as wet-signed |
         * | null | Identity verification process has not been completed |
         */
        public Builder identityVerificationStatus(JsonNullable<? extends IdentityVerificationStatus> identityVerificationStatus) {
            Utils.checkNotNull(identityVerificationStatus, "identityVerificationStatus");
            this.identityVerificationStatus = identityVerificationStatus;
            return this;
        }

        public Builder homeAddress(HomeAddress homeAddress) {
            Utils.checkNotNull(homeAddress, "homeAddress");
            this.homeAddress = JsonNullable.of(homeAddress);
            return this;
        }

        public Builder homeAddress(JsonNullable<? extends HomeAddress> homeAddress) {
            Utils.checkNotNull(homeAddress, "homeAddress");
            this.homeAddress = homeAddress;
            return this;
        }
        
        public Signatory build() {
            return new Signatory(
                uuid,
                firstName,
                lastName,
                title,
                phone,
                email,
                birthday,
                isAdmin,
                hasSsn,
                version,
                identityVerificationStatus,
                homeAddress);
        }
    }
}

