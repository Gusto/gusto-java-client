/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class PayrollCompanyTaxesType {

    /**
     * The tax name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Whether this tax is an employer or employee tax
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employer")
    private Optional<Boolean> employer;

    /**
     * The amount of this tax for the payroll
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    @JsonCreator
    public PayrollCompanyTaxesType(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("employer") Optional<Boolean> employer,
            @JsonProperty("amount") Optional<String> amount) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(employer, "employer");
        Utils.checkNotNull(amount, "amount");
        this.name = name;
        this.employer = employer;
        this.amount = amount;
    }
    
    public PayrollCompanyTaxesType() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The tax name
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Whether this tax is an employer or employee tax
     */
    @JsonIgnore
    public Optional<Boolean> employer() {
        return employer;
    }

    /**
     * The amount of this tax for the payroll
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The tax name
     */
    public PayrollCompanyTaxesType withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The tax name
     */
    public PayrollCompanyTaxesType withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Whether this tax is an employer or employee tax
     */
    public PayrollCompanyTaxesType withEmployer(boolean employer) {
        Utils.checkNotNull(employer, "employer");
        this.employer = Optional.ofNullable(employer);
        return this;
    }

    /**
     * Whether this tax is an employer or employee tax
     */
    public PayrollCompanyTaxesType withEmployer(Optional<Boolean> employer) {
        Utils.checkNotNull(employer, "employer");
        this.employer = employer;
        return this;
    }

    /**
     * The amount of this tax for the payroll
     */
    public PayrollCompanyTaxesType withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of this tax for the payroll
     */
    public PayrollCompanyTaxesType withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollCompanyTaxesType other = (PayrollCompanyTaxesType) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.employer, other.employer) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            employer,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollCompanyTaxesType.class,
                "name", name,
                "employer", employer,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<Boolean> employer = Optional.empty();
 
        private Optional<String> amount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The tax name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The tax name
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Whether this tax is an employer or employee tax
         */
        public Builder employer(boolean employer) {
            Utils.checkNotNull(employer, "employer");
            this.employer = Optional.ofNullable(employer);
            return this;
        }

        /**
         * Whether this tax is an employer or employee tax
         */
        public Builder employer(Optional<Boolean> employer) {
            Utils.checkNotNull(employer, "employer");
            this.employer = employer;
            return this;
        }

        /**
         * The amount of this tax for the payroll
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of this tax for the payroll
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public PayrollCompanyTaxesType build() {
            return new PayrollCompanyTaxesType(
                name,
                employer,
                amount);
        }
    }
}

