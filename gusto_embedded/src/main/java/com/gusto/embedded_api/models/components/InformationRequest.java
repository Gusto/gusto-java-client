/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * InformationRequest
 * 
 * <p>Representation of an information request
 */

public class InformationRequest {

    /**
     * Unique identifier of an information request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * Unique identifier of the company to which the information requests belongs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The type of information request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends InformationRequestType> type;

    /**
     * The status of the information request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends InformationRequestStatus> status;

    /**
     * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("blocking_payroll")
    private Optional<Boolean> blockingPayroll;

    @JsonCreator
    public InformationRequest(
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("type") Optional<? extends InformationRequestType> type,
            @JsonProperty("status") Optional<? extends InformationRequestStatus> status,
            @JsonProperty("blocking_payroll") Optional<Boolean> blockingPayroll) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(blockingPayroll, "blockingPayroll");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.type = type;
        this.status = status;
        this.blockingPayroll = blockingPayroll;
    }
    
    public InformationRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of an information request
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * Unique identifier of the company to which the information requests belongs
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The type of information request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InformationRequestType> type() {
        return (Optional<InformationRequestType>) type;
    }

    /**
     * The status of the information request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<InformationRequestStatus> status() {
        return (Optional<InformationRequestStatus>) status;
    }

    /**
     * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
     */
    @JsonIgnore
    public Optional<Boolean> blockingPayroll() {
        return blockingPayroll;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of an information request
     */
    public InformationRequest withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * Unique identifier of an information request
     */
    public InformationRequest withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Unique identifier of the company to which the information requests belongs
     */
    public InformationRequest withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * Unique identifier of the company to which the information requests belongs
     */
    public InformationRequest withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The type of information request
     */
    public InformationRequest withType(InformationRequestType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The type of information request
     */
    public InformationRequest withType(Optional<? extends InformationRequestType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The status of the information request
     */
    public InformationRequest withStatus(InformationRequestStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the information request
     */
    public InformationRequest withStatus(Optional<? extends InformationRequestStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
     */
    public InformationRequest withBlockingPayroll(boolean blockingPayroll) {
        Utils.checkNotNull(blockingPayroll, "blockingPayroll");
        this.blockingPayroll = Optional.ofNullable(blockingPayroll);
        return this;
    }

    /**
     * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
     */
    public InformationRequest withBlockingPayroll(Optional<Boolean> blockingPayroll) {
        Utils.checkNotNull(blockingPayroll, "blockingPayroll");
        this.blockingPayroll = blockingPayroll;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InformationRequest other = (InformationRequest) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.blockingPayroll, other.blockingPayroll);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            type,
            status,
            blockingPayroll);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InformationRequest.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "type", type,
                "status", status,
                "blockingPayroll", blockingPayroll);
    }
    
    public final static class Builder {
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<? extends InformationRequestType> type = Optional.empty();
 
        private Optional<? extends InformationRequestStatus> status = Optional.empty();
 
        private Optional<Boolean> blockingPayroll = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of an information request
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * Unique identifier of an information request
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Unique identifier of the company to which the information requests belongs
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * Unique identifier of the company to which the information requests belongs
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The type of information request
         */
        public Builder type(InformationRequestType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The type of information request
         */
        public Builder type(Optional<? extends InformationRequestType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The status of the information request
         */
        public Builder status(InformationRequestStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the information request
         */
        public Builder status(Optional<? extends InformationRequestStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
         */
        public Builder blockingPayroll(boolean blockingPayroll) {
            Utils.checkNotNull(blockingPayroll, "blockingPayroll");
            this.blockingPayroll = Optional.ofNullable(blockingPayroll);
            return this;
        }

        /**
         * If true, this information request is blocking payroll, and may require response or requires review from our Risk Ops team.
         */
        public Builder blockingPayroll(Optional<Boolean> blockingPayroll) {
            Utils.checkNotNull(blockingPayroll, "blockingPayroll");
            this.blockingPayroll = blockingPayroll;
            return this;
        }
        
        public InformationRequest build() {
            return new InformationRequest(
                uuid,
                companyUuid,
                type,
                status,
                blockingPayroll);
        }
    }
}

