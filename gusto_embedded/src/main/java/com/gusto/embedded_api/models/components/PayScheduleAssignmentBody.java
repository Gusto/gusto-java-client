/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PayScheduleAssignmentBody {

    /**
     * The pay schedule assignment type.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("type")
    private Optional<? extends PayScheduleAssignmentBodyType> type;

    /**
     * Pay schedule for hourly employees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_pay_schedule_uuid")
    private Optional<String> hourlyPayScheduleUuid;

    /**
     * Pay schedule for salaried employees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salaried_pay_schedule_uuid")
    private Optional<String> salariedPayScheduleUuid;

    /**
     * Default pay schedule for employees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_pay_schedule_uuid")
    private Optional<String> defaultPayScheduleUuid;

    /**
     * Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("partial_assignment")
    private Optional<Boolean> partialAssignment;

    /**
     * List of employees and their pay schedules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees")
    private Optional<? extends List<Employees>> employees;

    /**
     * List of departments and their pay schedules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private Optional<? extends List<Departments>> departments;

    @JsonCreator
    public PayScheduleAssignmentBody(
            @JsonProperty("type") Optional<? extends PayScheduleAssignmentBodyType> type,
            @JsonProperty("hourly_pay_schedule_uuid") Optional<String> hourlyPayScheduleUuid,
            @JsonProperty("salaried_pay_schedule_uuid") Optional<String> salariedPayScheduleUuid,
            @JsonProperty("default_pay_schedule_uuid") Optional<String> defaultPayScheduleUuid,
            @JsonProperty("partial_assignment") Optional<Boolean> partialAssignment,
            @JsonProperty("employees") Optional<? extends List<Employees>> employees,
            @JsonProperty("departments") Optional<? extends List<Departments>> departments) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
        Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
        Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
        Utils.checkNotNull(partialAssignment, "partialAssignment");
        Utils.checkNotNull(employees, "employees");
        Utils.checkNotNull(departments, "departments");
        this.type = type;
        this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
        this.salariedPayScheduleUuid = salariedPayScheduleUuid;
        this.defaultPayScheduleUuid = defaultPayScheduleUuid;
        this.partialAssignment = partialAssignment;
        this.employees = employees;
        this.departments = departments;
    }
    
    public PayScheduleAssignmentBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The pay schedule assignment type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayScheduleAssignmentBodyType> type() {
        return (Optional<PayScheduleAssignmentBodyType>) type;
    }

    /**
     * Pay schedule for hourly employees.
     */
    @JsonIgnore
    public Optional<String> hourlyPayScheduleUuid() {
        return hourlyPayScheduleUuid;
    }

    /**
     * Pay schedule for salaried employees.
     */
    @JsonIgnore
    public Optional<String> salariedPayScheduleUuid() {
        return salariedPayScheduleUuid;
    }

    /**
     * Default pay schedule for employees.
     */
    @JsonIgnore
    public Optional<String> defaultPayScheduleUuid() {
        return defaultPayScheduleUuid;
    }

    /**
     * Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false.
     */
    @JsonIgnore
    public Optional<Boolean> partialAssignment() {
        return partialAssignment;
    }

    /**
     * List of employees and their pay schedules.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Employees>> employees() {
        return (Optional<List<Employees>>) employees;
    }

    /**
     * List of departments and their pay schedules.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Departments>> departments() {
        return (Optional<List<Departments>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The pay schedule assignment type.
     */
    public PayScheduleAssignmentBody withType(PayScheduleAssignmentBodyType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The pay schedule assignment type.
     */
    public PayScheduleAssignmentBody withType(Optional<? extends PayScheduleAssignmentBodyType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Pay schedule for hourly employees.
     */
    public PayScheduleAssignmentBody withHourlyPayScheduleUuid(String hourlyPayScheduleUuid) {
        Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
        this.hourlyPayScheduleUuid = Optional.ofNullable(hourlyPayScheduleUuid);
        return this;
    }

    /**
     * Pay schedule for hourly employees.
     */
    public PayScheduleAssignmentBody withHourlyPayScheduleUuid(Optional<String> hourlyPayScheduleUuid) {
        Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
        this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
        return this;
    }

    /**
     * Pay schedule for salaried employees.
     */
    public PayScheduleAssignmentBody withSalariedPayScheduleUuid(String salariedPayScheduleUuid) {
        Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
        this.salariedPayScheduleUuid = Optional.ofNullable(salariedPayScheduleUuid);
        return this;
    }

    /**
     * Pay schedule for salaried employees.
     */
    public PayScheduleAssignmentBody withSalariedPayScheduleUuid(Optional<String> salariedPayScheduleUuid) {
        Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
        this.salariedPayScheduleUuid = salariedPayScheduleUuid;
        return this;
    }

    /**
     * Default pay schedule for employees.
     */
    public PayScheduleAssignmentBody withDefaultPayScheduleUuid(String defaultPayScheduleUuid) {
        Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
        this.defaultPayScheduleUuid = Optional.ofNullable(defaultPayScheduleUuid);
        return this;
    }

    /**
     * Default pay schedule for employees.
     */
    public PayScheduleAssignmentBody withDefaultPayScheduleUuid(Optional<String> defaultPayScheduleUuid) {
        Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
        this.defaultPayScheduleUuid = defaultPayScheduleUuid;
        return this;
    }

    /**
     * Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false.
     */
    public PayScheduleAssignmentBody withPartialAssignment(boolean partialAssignment) {
        Utils.checkNotNull(partialAssignment, "partialAssignment");
        this.partialAssignment = Optional.ofNullable(partialAssignment);
        return this;
    }

    /**
     * Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false.
     */
    public PayScheduleAssignmentBody withPartialAssignment(Optional<Boolean> partialAssignment) {
        Utils.checkNotNull(partialAssignment, "partialAssignment");
        this.partialAssignment = partialAssignment;
        return this;
    }

    /**
     * List of employees and their pay schedules.
     */
    public PayScheduleAssignmentBody withEmployees(List<Employees> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = Optional.ofNullable(employees);
        return this;
    }

    /**
     * List of employees and their pay schedules.
     */
    public PayScheduleAssignmentBody withEmployees(Optional<? extends List<Employees>> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }

    /**
     * List of departments and their pay schedules.
     */
    public PayScheduleAssignmentBody withDepartments(List<Departments> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = Optional.ofNullable(departments);
        return this;
    }

    /**
     * List of departments and their pay schedules.
     */
    public PayScheduleAssignmentBody withDepartments(Optional<? extends List<Departments>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayScheduleAssignmentBody other = (PayScheduleAssignmentBody) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.hourlyPayScheduleUuid, other.hourlyPayScheduleUuid) &&
            Objects.deepEquals(this.salariedPayScheduleUuid, other.salariedPayScheduleUuid) &&
            Objects.deepEquals(this.defaultPayScheduleUuid, other.defaultPayScheduleUuid) &&
            Objects.deepEquals(this.partialAssignment, other.partialAssignment) &&
            Objects.deepEquals(this.employees, other.employees) &&
            Objects.deepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            hourlyPayScheduleUuid,
            salariedPayScheduleUuid,
            defaultPayScheduleUuid,
            partialAssignment,
            employees,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayScheduleAssignmentBody.class,
                "type", type,
                "hourlyPayScheduleUuid", hourlyPayScheduleUuid,
                "salariedPayScheduleUuid", salariedPayScheduleUuid,
                "defaultPayScheduleUuid", defaultPayScheduleUuid,
                "partialAssignment", partialAssignment,
                "employees", employees,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private Optional<? extends PayScheduleAssignmentBodyType> type = Optional.empty();
 
        private Optional<String> hourlyPayScheduleUuid = Optional.empty();
 
        private Optional<String> salariedPayScheduleUuid = Optional.empty();
 
        private Optional<String> defaultPayScheduleUuid = Optional.empty();
 
        private Optional<Boolean> partialAssignment = Optional.empty();
 
        private Optional<? extends List<Employees>> employees = Optional.empty();
 
        private Optional<? extends List<Departments>> departments = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The pay schedule assignment type.
         */
        public Builder type(PayScheduleAssignmentBodyType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The pay schedule assignment type.
         */
        public Builder type(Optional<? extends PayScheduleAssignmentBodyType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Pay schedule for hourly employees.
         */
        public Builder hourlyPayScheduleUuid(String hourlyPayScheduleUuid) {
            Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
            this.hourlyPayScheduleUuid = Optional.ofNullable(hourlyPayScheduleUuid);
            return this;
        }

        /**
         * Pay schedule for hourly employees.
         */
        public Builder hourlyPayScheduleUuid(Optional<String> hourlyPayScheduleUuid) {
            Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
            this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
            return this;
        }

        /**
         * Pay schedule for salaried employees.
         */
        public Builder salariedPayScheduleUuid(String salariedPayScheduleUuid) {
            Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
            this.salariedPayScheduleUuid = Optional.ofNullable(salariedPayScheduleUuid);
            return this;
        }

        /**
         * Pay schedule for salaried employees.
         */
        public Builder salariedPayScheduleUuid(Optional<String> salariedPayScheduleUuid) {
            Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
            this.salariedPayScheduleUuid = salariedPayScheduleUuid;
            return this;
        }

        /**
         * Default pay schedule for employees.
         */
        public Builder defaultPayScheduleUuid(String defaultPayScheduleUuid) {
            Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
            this.defaultPayScheduleUuid = Optional.ofNullable(defaultPayScheduleUuid);
            return this;
        }

        /**
         * Default pay schedule for employees.
         */
        public Builder defaultPayScheduleUuid(Optional<String> defaultPayScheduleUuid) {
            Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
            this.defaultPayScheduleUuid = defaultPayScheduleUuid;
            return this;
        }

        /**
         * Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false.
         */
        public Builder partialAssignment(boolean partialAssignment) {
            Utils.checkNotNull(partialAssignment, "partialAssignment");
            this.partialAssignment = Optional.ofNullable(partialAssignment);
            return this;
        }

        /**
         * Indicates whether the request provides pay schedule assignments for a partial list of employees or departments of the company. By default, this is set to false.
         */
        public Builder partialAssignment(Optional<Boolean> partialAssignment) {
            Utils.checkNotNull(partialAssignment, "partialAssignment");
            this.partialAssignment = partialAssignment;
            return this;
        }

        /**
         * List of employees and their pay schedules.
         */
        public Builder employees(List<Employees> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = Optional.ofNullable(employees);
            return this;
        }

        /**
         * List of employees and their pay schedules.
         */
        public Builder employees(Optional<? extends List<Employees>> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }

        /**
         * List of departments and their pay schedules.
         */
        public Builder departments(List<Departments> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = Optional.ofNullable(departments);
            return this;
        }

        /**
         * List of departments and their pay schedules.
         */
        public Builder departments(Optional<? extends List<Departments>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public PayScheduleAssignmentBody build() {
            return new PayScheduleAssignmentBody(
                type,
                hourlyPayScheduleUuid,
                salariedPayScheduleUuid,
                defaultPayScheduleUuid,
                partialAssignment,
                employees,
                departments);
        }
    }
}

