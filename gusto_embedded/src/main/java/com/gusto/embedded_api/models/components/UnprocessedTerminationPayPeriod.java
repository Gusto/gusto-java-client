/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * UnprocessedTerminationPayPeriod - The representation of an unprocessed termination pay period.
 */

public class UnprocessedTerminationPayPeriod {

    /**
     * The start date of the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * The end date of the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * The check date of the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * The debit date of the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debit_date")
    private Optional<String> debitDate;

    /**
     * The full name of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_name")
    private Optional<String> employeeName;

    /**
     * A unique identifier of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * A unique identifier of the pay schedule to which the pay period belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_schedule_uuid")
    private Optional<String> payScheduleUuid;

    @JsonCreator
    public UnprocessedTerminationPayPeriod(
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("debit_date") Optional<String> debitDate,
            @JsonProperty("employee_name") Optional<String> employeeName,
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("pay_schedule_uuid") Optional<String> payScheduleUuid) {
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(debitDate, "debitDate");
        Utils.checkNotNull(employeeName, "employeeName");
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.startDate = startDate;
        this.endDate = endDate;
        this.checkDate = checkDate;
        this.debitDate = debitDate;
        this.employeeName = employeeName;
        this.employeeUuid = employeeUuid;
        this.payScheduleUuid = payScheduleUuid;
    }
    
    public UnprocessedTerminationPayPeriod() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The start date of the pay period.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The end date of the pay period.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * The check date of the pay period.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * The debit date of the pay period.
     */
    @JsonIgnore
    public Optional<String> debitDate() {
        return debitDate;
    }

    /**
     * The full name of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeName() {
        return employeeName;
    }

    /**
     * A unique identifier of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * A unique identifier of the pay schedule to which the pay period belongs.
     */
    @JsonIgnore
    public Optional<String> payScheduleUuid() {
        return payScheduleUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The start date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The start date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The end date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The end date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * The check date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * The check date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * The debit date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withDebitDate(String debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = Optional.ofNullable(debitDate);
        return this;
    }

    /**
     * The debit date of the pay period.
     */
    public UnprocessedTerminationPayPeriod withDebitDate(Optional<String> debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = debitDate;
        return this;
    }

    /**
     * The full name of the employee.
     */
    public UnprocessedTerminationPayPeriod withEmployeeName(String employeeName) {
        Utils.checkNotNull(employeeName, "employeeName");
        this.employeeName = Optional.ofNullable(employeeName);
        return this;
    }

    /**
     * The full name of the employee.
     */
    public UnprocessedTerminationPayPeriod withEmployeeName(Optional<String> employeeName) {
        Utils.checkNotNull(employeeName, "employeeName");
        this.employeeName = employeeName;
        return this;
    }

    /**
     * A unique identifier of the employee.
     */
    public UnprocessedTerminationPayPeriod withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * A unique identifier of the employee.
     */
    public UnprocessedTerminationPayPeriod withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * A unique identifier of the pay schedule to which the pay period belongs.
     */
    public UnprocessedTerminationPayPeriod withPayScheduleUuid(String payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
        return this;
    }

    /**
     * A unique identifier of the pay schedule to which the pay period belongs.
     */
    public UnprocessedTerminationPayPeriod withPayScheduleUuid(Optional<String> payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = payScheduleUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnprocessedTerminationPayPeriod other = (UnprocessedTerminationPayPeriod) o;
        return 
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.debitDate, other.debitDate) &&
            Objects.deepEquals(this.employeeName, other.employeeName) &&
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.payScheduleUuid, other.payScheduleUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startDate,
            endDate,
            checkDate,
            debitDate,
            employeeName,
            employeeUuid,
            payScheduleUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(UnprocessedTerminationPayPeriod.class,
                "startDate", startDate,
                "endDate", endDate,
                "checkDate", checkDate,
                "debitDate", debitDate,
                "employeeName", employeeName,
                "employeeUuid", employeeUuid,
                "payScheduleUuid", payScheduleUuid);
    }
    
    public final static class Builder {
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<String> debitDate = Optional.empty();
 
        private Optional<String> employeeName = Optional.empty();
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<String> payScheduleUuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The start date of the pay period.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The start date of the pay period.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The end date of the pay period.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The end date of the pay period.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * The check date of the pay period.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * The check date of the pay period.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * The debit date of the pay period.
         */
        public Builder debitDate(String debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = Optional.ofNullable(debitDate);
            return this;
        }

        /**
         * The debit date of the pay period.
         */
        public Builder debitDate(Optional<String> debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = debitDate;
            return this;
        }

        /**
         * The full name of the employee.
         */
        public Builder employeeName(String employeeName) {
            Utils.checkNotNull(employeeName, "employeeName");
            this.employeeName = Optional.ofNullable(employeeName);
            return this;
        }

        /**
         * The full name of the employee.
         */
        public Builder employeeName(Optional<String> employeeName) {
            Utils.checkNotNull(employeeName, "employeeName");
            this.employeeName = employeeName;
            return this;
        }

        /**
         * A unique identifier of the employee.
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * A unique identifier of the employee.
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * A unique identifier of the pay schedule to which the pay period belongs.
         */
        public Builder payScheduleUuid(String payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
            return this;
        }

        /**
         * A unique identifier of the pay schedule to which the pay period belongs.
         */
        public Builder payScheduleUuid(Optional<String> payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = payScheduleUuid;
            return this;
        }
        
        public UnprocessedTerminationPayPeriod build() {
            return new UnprocessedTerminationPayPeriod(
                startDate,
                endDate,
                checkDate,
                debitDate,
                employeeName,
                employeeUuid,
                payScheduleUuid);
        }
    }
}

