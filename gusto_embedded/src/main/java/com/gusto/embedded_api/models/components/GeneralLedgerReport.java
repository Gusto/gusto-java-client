/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * GeneralLedgerReport
 * 
 * <p>Successful response for general ledger report generation
 */

public class GeneralLedgerReport {

    /**
     * The UUID of the payroll record for which the report was generated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_uuid")
    private Optional<String> payrollUuid;

    /**
     * The breakdown level used for the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("aggregation")
    private Optional<? extends Aggregation> aggregation;

    /**
     * UUID to use for polling the report status
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_uuid")
    private Optional<String> requestUuid;

    @JsonCreator
    public GeneralLedgerReport(
            @JsonProperty("payroll_uuid") Optional<String> payrollUuid,
            @JsonProperty("aggregation") Optional<? extends Aggregation> aggregation,
            @JsonProperty("request_uuid") Optional<String> requestUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        Utils.checkNotNull(aggregation, "aggregation");
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.payrollUuid = payrollUuid;
        this.aggregation = aggregation;
        this.requestUuid = requestUuid;
    }
    
    public GeneralLedgerReport() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the payroll record for which the report was generated
     */
    @JsonIgnore
    public Optional<String> payrollUuid() {
        return payrollUuid;
    }

    /**
     * The breakdown level used for the report
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Aggregation> aggregation() {
        return (Optional<Aggregation>) aggregation;
    }

    /**
     * UUID to use for polling the report status
     */
    @JsonIgnore
    public Optional<String> requestUuid() {
        return requestUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the payroll record for which the report was generated
     */
    public GeneralLedgerReport withPayrollUuid(String payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = Optional.ofNullable(payrollUuid);
        return this;
    }

    /**
     * The UUID of the payroll record for which the report was generated
     */
    public GeneralLedgerReport withPayrollUuid(Optional<String> payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = payrollUuid;
        return this;
    }

    /**
     * The breakdown level used for the report
     */
    public GeneralLedgerReport withAggregation(Aggregation aggregation) {
        Utils.checkNotNull(aggregation, "aggregation");
        this.aggregation = Optional.ofNullable(aggregation);
        return this;
    }

    /**
     * The breakdown level used for the report
     */
    public GeneralLedgerReport withAggregation(Optional<? extends Aggregation> aggregation) {
        Utils.checkNotNull(aggregation, "aggregation");
        this.aggregation = aggregation;
        return this;
    }

    /**
     * UUID to use for polling the report status
     */
    public GeneralLedgerReport withRequestUuid(String requestUuid) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.requestUuid = Optional.ofNullable(requestUuid);
        return this;
    }

    /**
     * UUID to use for polling the report status
     */
    public GeneralLedgerReport withRequestUuid(Optional<String> requestUuid) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.requestUuid = requestUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneralLedgerReport other = (GeneralLedgerReport) o;
        return 
            Objects.deepEquals(this.payrollUuid, other.payrollUuid) &&
            Objects.deepEquals(this.aggregation, other.aggregation) &&
            Objects.deepEquals(this.requestUuid, other.requestUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            payrollUuid,
            aggregation,
            requestUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneralLedgerReport.class,
                "payrollUuid", payrollUuid,
                "aggregation", aggregation,
                "requestUuid", requestUuid);
    }
    
    public final static class Builder {
 
        private Optional<String> payrollUuid = Optional.empty();
 
        private Optional<? extends Aggregation> aggregation = Optional.empty();
 
        private Optional<String> requestUuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the payroll record for which the report was generated
         */
        public Builder payrollUuid(String payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = Optional.ofNullable(payrollUuid);
            return this;
        }

        /**
         * The UUID of the payroll record for which the report was generated
         */
        public Builder payrollUuid(Optional<String> payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = payrollUuid;
            return this;
        }

        /**
         * The breakdown level used for the report
         */
        public Builder aggregation(Aggregation aggregation) {
            Utils.checkNotNull(aggregation, "aggregation");
            this.aggregation = Optional.ofNullable(aggregation);
            return this;
        }

        /**
         * The breakdown level used for the report
         */
        public Builder aggregation(Optional<? extends Aggregation> aggregation) {
            Utils.checkNotNull(aggregation, "aggregation");
            this.aggregation = aggregation;
            return this;
        }

        /**
         * UUID to use for polling the report status
         */
        public Builder requestUuid(String requestUuid) {
            Utils.checkNotNull(requestUuid, "requestUuid");
            this.requestUuid = Optional.ofNullable(requestUuid);
            return this;
        }

        /**
         * UUID to use for polling the report status
         */
        public Builder requestUuid(Optional<String> requestUuid) {
            Utils.checkNotNull(requestUuid, "requestUuid");
            this.requestUuid = requestUuid;
            return this;
        }
        
        public GeneralLedgerReport build() {
            return new GeneralLedgerReport(
                payrollUuid,
                aggregation,
                requestUuid);
        }
    }
}

