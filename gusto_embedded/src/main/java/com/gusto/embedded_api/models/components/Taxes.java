/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class Taxes {

    @JsonProperty("name")
    private String name;

    @JsonProperty("employer")
    private boolean employer;

    @JsonProperty("amount")
    private double amount;

    @JsonCreator
    public Taxes(
            @JsonProperty("name") String name,
            @JsonProperty("employer") boolean employer,
            @JsonProperty("amount") double amount) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(employer, "employer");
        Utils.checkNotNull(amount, "amount");
        this.name = name;
        this.employer = employer;
        this.amount = amount;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public boolean employer() {
        return employer;
    }

    @JsonIgnore
    public double amount() {
        return amount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Taxes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public Taxes withEmployer(boolean employer) {
        Utils.checkNotNull(employer, "employer");
        this.employer = employer;
        return this;
    }

    public Taxes withAmount(double amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Taxes other = (Taxes) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.employer, other.employer) &&
            Objects.deepEquals(this.amount, other.amount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            employer,
            amount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Taxes.class,
                "name", name,
                "employer", employer,
                "amount", amount);
    }
    
    public final static class Builder {
 
        private String name;
 
        private Boolean employer;
 
        private Double amount;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder employer(boolean employer) {
            Utils.checkNotNull(employer, "employer");
            this.employer = employer;
            return this;
        }

        public Builder amount(double amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }
        
        public Taxes build() {
            return new Taxes(
                name,
                employer,
                amount);
        }
    }
}

