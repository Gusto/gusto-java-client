/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PutV1ExternalPayrollRequestBody {

    /**
     * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("replace_fields")
    private Optional<Boolean> replaceFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_payroll_items")
    private Optional<? extends List<ExternalPayrollItems>> externalPayrollItems;

    @JsonCreator
    public PutV1ExternalPayrollRequestBody(
            @JsonProperty("replace_fields") Optional<Boolean> replaceFields,
            @JsonProperty("external_payroll_items") Optional<? extends List<ExternalPayrollItems>> externalPayrollItems) {
        Utils.checkNotNull(replaceFields, "replaceFields");
        Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
        this.replaceFields = replaceFields;
        this.externalPayrollItems = externalPayrollItems;
    }
    
    public PutV1ExternalPayrollRequestBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
     */
    @JsonIgnore
    public Optional<Boolean> replaceFields() {
        return replaceFields;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ExternalPayrollItems>> externalPayrollItems() {
        return (Optional<List<ExternalPayrollItems>>) externalPayrollItems;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
     */
    public PutV1ExternalPayrollRequestBody withReplaceFields(boolean replaceFields) {
        Utils.checkNotNull(replaceFields, "replaceFields");
        this.replaceFields = Optional.ofNullable(replaceFields);
        return this;
    }

    /**
     * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
     */
    public PutV1ExternalPayrollRequestBody withReplaceFields(Optional<Boolean> replaceFields) {
        Utils.checkNotNull(replaceFields, "replaceFields");
        this.replaceFields = replaceFields;
        return this;
    }

    public PutV1ExternalPayrollRequestBody withExternalPayrollItems(List<ExternalPayrollItems> externalPayrollItems) {
        Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
        this.externalPayrollItems = Optional.ofNullable(externalPayrollItems);
        return this;
    }

    public PutV1ExternalPayrollRequestBody withExternalPayrollItems(Optional<? extends List<ExternalPayrollItems>> externalPayrollItems) {
        Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
        this.externalPayrollItems = externalPayrollItems;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1ExternalPayrollRequestBody other = (PutV1ExternalPayrollRequestBody) o;
        return 
            Objects.deepEquals(this.replaceFields, other.replaceFields) &&
            Objects.deepEquals(this.externalPayrollItems, other.externalPayrollItems);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            replaceFields,
            externalPayrollItems);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1ExternalPayrollRequestBody.class,
                "replaceFields", replaceFields,
                "externalPayrollItems", externalPayrollItems);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> replaceFields = Optional.empty();
 
        private Optional<? extends List<ExternalPayrollItems>> externalPayrollItems = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
         */
        public Builder replaceFields(boolean replaceFields) {
            Utils.checkNotNull(replaceFields, "replaceFields");
            this.replaceFields = Optional.ofNullable(replaceFields);
            return this;
        }

        /**
         * Patch update external payroll items when set to true, otherwise it will overwrite the previous changes.
         */
        public Builder replaceFields(Optional<Boolean> replaceFields) {
            Utils.checkNotNull(replaceFields, "replaceFields");
            this.replaceFields = replaceFields;
            return this;
        }

        public Builder externalPayrollItems(List<ExternalPayrollItems> externalPayrollItems) {
            Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
            this.externalPayrollItems = Optional.ofNullable(externalPayrollItems);
            return this;
        }

        public Builder externalPayrollItems(Optional<? extends List<ExternalPayrollItems>> externalPayrollItems) {
            Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
            this.externalPayrollItems = externalPayrollItems;
            return this;
        }
        
        public PutV1ExternalPayrollRequestBody build() {
            return new PutV1ExternalPayrollRequestBody(
                replaceFields,
                externalPayrollItems);
        }
    }
}

