/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * PayrollPayrollStatusMetaType - Information about the payroll's status and expected dates
 */

public class PayrollPayrollStatusMetaType {

    /**
     * true if the payroll may be cancelled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("cancellable")
    private Optional<Boolean> cancellable;

    /**
     * The date an employee will be paid if the payroll is submitted now.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_check_date")
    private Optional<String> expectedCheckDate;

    /**
     * The normal check date for the associated pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_check_date")
    private Optional<String> initialCheckDate;

    /**
     * The time the employer's account will be debited if the payroll is submitted now.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expected_debit_time")
    private Optional<String> expectedDebitTime;

    /**
     * expected_check_date &gt; initial_check_date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_late")
    private Optional<Boolean> payrollLate;

    /**
     * Payroll must be submitted at or before this time to avoid late payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("initial_debit_cutoff_time")
    private Optional<String> initialDebitCutoffTime;

    @JsonCreator
    public PayrollPayrollStatusMetaType(
            @JsonProperty("cancellable") Optional<Boolean> cancellable,
            @JsonProperty("expected_check_date") Optional<String> expectedCheckDate,
            @JsonProperty("initial_check_date") Optional<String> initialCheckDate,
            @JsonProperty("expected_debit_time") Optional<String> expectedDebitTime,
            @JsonProperty("payroll_late") Optional<Boolean> payrollLate,
            @JsonProperty("initial_debit_cutoff_time") Optional<String> initialDebitCutoffTime) {
        Utils.checkNotNull(cancellable, "cancellable");
        Utils.checkNotNull(expectedCheckDate, "expectedCheckDate");
        Utils.checkNotNull(initialCheckDate, "initialCheckDate");
        Utils.checkNotNull(expectedDebitTime, "expectedDebitTime");
        Utils.checkNotNull(payrollLate, "payrollLate");
        Utils.checkNotNull(initialDebitCutoffTime, "initialDebitCutoffTime");
        this.cancellable = cancellable;
        this.expectedCheckDate = expectedCheckDate;
        this.initialCheckDate = initialCheckDate;
        this.expectedDebitTime = expectedDebitTime;
        this.payrollLate = payrollLate;
        this.initialDebitCutoffTime = initialDebitCutoffTime;
    }
    
    public PayrollPayrollStatusMetaType() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * true if the payroll may be cancelled.
     */
    @JsonIgnore
    public Optional<Boolean> cancellable() {
        return cancellable;
    }

    /**
     * The date an employee will be paid if the payroll is submitted now.
     */
    @JsonIgnore
    public Optional<String> expectedCheckDate() {
        return expectedCheckDate;
    }

    /**
     * The normal check date for the associated pay period.
     */
    @JsonIgnore
    public Optional<String> initialCheckDate() {
        return initialCheckDate;
    }

    /**
     * The time the employer's account will be debited if the payroll is submitted now.
     */
    @JsonIgnore
    public Optional<String> expectedDebitTime() {
        return expectedDebitTime;
    }

    /**
     * expected_check_date &gt; initial_check_date.
     */
    @JsonIgnore
    public Optional<Boolean> payrollLate() {
        return payrollLate;
    }

    /**
     * Payroll must be submitted at or before this time to avoid late payroll.
     */
    @JsonIgnore
    public Optional<String> initialDebitCutoffTime() {
        return initialDebitCutoffTime;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * true if the payroll may be cancelled.
     */
    public PayrollPayrollStatusMetaType withCancellable(boolean cancellable) {
        Utils.checkNotNull(cancellable, "cancellable");
        this.cancellable = Optional.ofNullable(cancellable);
        return this;
    }

    /**
     * true if the payroll may be cancelled.
     */
    public PayrollPayrollStatusMetaType withCancellable(Optional<Boolean> cancellable) {
        Utils.checkNotNull(cancellable, "cancellable");
        this.cancellable = cancellable;
        return this;
    }

    /**
     * The date an employee will be paid if the payroll is submitted now.
     */
    public PayrollPayrollStatusMetaType withExpectedCheckDate(String expectedCheckDate) {
        Utils.checkNotNull(expectedCheckDate, "expectedCheckDate");
        this.expectedCheckDate = Optional.ofNullable(expectedCheckDate);
        return this;
    }

    /**
     * The date an employee will be paid if the payroll is submitted now.
     */
    public PayrollPayrollStatusMetaType withExpectedCheckDate(Optional<String> expectedCheckDate) {
        Utils.checkNotNull(expectedCheckDate, "expectedCheckDate");
        this.expectedCheckDate = expectedCheckDate;
        return this;
    }

    /**
     * The normal check date for the associated pay period.
     */
    public PayrollPayrollStatusMetaType withInitialCheckDate(String initialCheckDate) {
        Utils.checkNotNull(initialCheckDate, "initialCheckDate");
        this.initialCheckDate = Optional.ofNullable(initialCheckDate);
        return this;
    }

    /**
     * The normal check date for the associated pay period.
     */
    public PayrollPayrollStatusMetaType withInitialCheckDate(Optional<String> initialCheckDate) {
        Utils.checkNotNull(initialCheckDate, "initialCheckDate");
        this.initialCheckDate = initialCheckDate;
        return this;
    }

    /**
     * The time the employer's account will be debited if the payroll is submitted now.
     */
    public PayrollPayrollStatusMetaType withExpectedDebitTime(String expectedDebitTime) {
        Utils.checkNotNull(expectedDebitTime, "expectedDebitTime");
        this.expectedDebitTime = Optional.ofNullable(expectedDebitTime);
        return this;
    }

    /**
     * The time the employer's account will be debited if the payroll is submitted now.
     */
    public PayrollPayrollStatusMetaType withExpectedDebitTime(Optional<String> expectedDebitTime) {
        Utils.checkNotNull(expectedDebitTime, "expectedDebitTime");
        this.expectedDebitTime = expectedDebitTime;
        return this;
    }

    /**
     * expected_check_date &gt; initial_check_date.
     */
    public PayrollPayrollStatusMetaType withPayrollLate(boolean payrollLate) {
        Utils.checkNotNull(payrollLate, "payrollLate");
        this.payrollLate = Optional.ofNullable(payrollLate);
        return this;
    }

    /**
     * expected_check_date &gt; initial_check_date.
     */
    public PayrollPayrollStatusMetaType withPayrollLate(Optional<Boolean> payrollLate) {
        Utils.checkNotNull(payrollLate, "payrollLate");
        this.payrollLate = payrollLate;
        return this;
    }

    /**
     * Payroll must be submitted at or before this time to avoid late payroll.
     */
    public PayrollPayrollStatusMetaType withInitialDebitCutoffTime(String initialDebitCutoffTime) {
        Utils.checkNotNull(initialDebitCutoffTime, "initialDebitCutoffTime");
        this.initialDebitCutoffTime = Optional.ofNullable(initialDebitCutoffTime);
        return this;
    }

    /**
     * Payroll must be submitted at or before this time to avoid late payroll.
     */
    public PayrollPayrollStatusMetaType withInitialDebitCutoffTime(Optional<String> initialDebitCutoffTime) {
        Utils.checkNotNull(initialDebitCutoffTime, "initialDebitCutoffTime");
        this.initialDebitCutoffTime = initialDebitCutoffTime;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollPayrollStatusMetaType other = (PayrollPayrollStatusMetaType) o;
        return 
            Objects.deepEquals(this.cancellable, other.cancellable) &&
            Objects.deepEquals(this.expectedCheckDate, other.expectedCheckDate) &&
            Objects.deepEquals(this.initialCheckDate, other.initialCheckDate) &&
            Objects.deepEquals(this.expectedDebitTime, other.expectedDebitTime) &&
            Objects.deepEquals(this.payrollLate, other.payrollLate) &&
            Objects.deepEquals(this.initialDebitCutoffTime, other.initialDebitCutoffTime);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            cancellable,
            expectedCheckDate,
            initialCheckDate,
            expectedDebitTime,
            payrollLate,
            initialDebitCutoffTime);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollPayrollStatusMetaType.class,
                "cancellable", cancellable,
                "expectedCheckDate", expectedCheckDate,
                "initialCheckDate", initialCheckDate,
                "expectedDebitTime", expectedDebitTime,
                "payrollLate", payrollLate,
                "initialDebitCutoffTime", initialDebitCutoffTime);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> cancellable = Optional.empty();
 
        private Optional<String> expectedCheckDate = Optional.empty();
 
        private Optional<String> initialCheckDate = Optional.empty();
 
        private Optional<String> expectedDebitTime = Optional.empty();
 
        private Optional<Boolean> payrollLate = Optional.empty();
 
        private Optional<String> initialDebitCutoffTime = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * true if the payroll may be cancelled.
         */
        public Builder cancellable(boolean cancellable) {
            Utils.checkNotNull(cancellable, "cancellable");
            this.cancellable = Optional.ofNullable(cancellable);
            return this;
        }

        /**
         * true if the payroll may be cancelled.
         */
        public Builder cancellable(Optional<Boolean> cancellable) {
            Utils.checkNotNull(cancellable, "cancellable");
            this.cancellable = cancellable;
            return this;
        }

        /**
         * The date an employee will be paid if the payroll is submitted now.
         */
        public Builder expectedCheckDate(String expectedCheckDate) {
            Utils.checkNotNull(expectedCheckDate, "expectedCheckDate");
            this.expectedCheckDate = Optional.ofNullable(expectedCheckDate);
            return this;
        }

        /**
         * The date an employee will be paid if the payroll is submitted now.
         */
        public Builder expectedCheckDate(Optional<String> expectedCheckDate) {
            Utils.checkNotNull(expectedCheckDate, "expectedCheckDate");
            this.expectedCheckDate = expectedCheckDate;
            return this;
        }

        /**
         * The normal check date for the associated pay period.
         */
        public Builder initialCheckDate(String initialCheckDate) {
            Utils.checkNotNull(initialCheckDate, "initialCheckDate");
            this.initialCheckDate = Optional.ofNullable(initialCheckDate);
            return this;
        }

        /**
         * The normal check date for the associated pay period.
         */
        public Builder initialCheckDate(Optional<String> initialCheckDate) {
            Utils.checkNotNull(initialCheckDate, "initialCheckDate");
            this.initialCheckDate = initialCheckDate;
            return this;
        }

        /**
         * The time the employer's account will be debited if the payroll is submitted now.
         */
        public Builder expectedDebitTime(String expectedDebitTime) {
            Utils.checkNotNull(expectedDebitTime, "expectedDebitTime");
            this.expectedDebitTime = Optional.ofNullable(expectedDebitTime);
            return this;
        }

        /**
         * The time the employer's account will be debited if the payroll is submitted now.
         */
        public Builder expectedDebitTime(Optional<String> expectedDebitTime) {
            Utils.checkNotNull(expectedDebitTime, "expectedDebitTime");
            this.expectedDebitTime = expectedDebitTime;
            return this;
        }

        /**
         * expected_check_date &gt; initial_check_date.
         */
        public Builder payrollLate(boolean payrollLate) {
            Utils.checkNotNull(payrollLate, "payrollLate");
            this.payrollLate = Optional.ofNullable(payrollLate);
            return this;
        }

        /**
         * expected_check_date &gt; initial_check_date.
         */
        public Builder payrollLate(Optional<Boolean> payrollLate) {
            Utils.checkNotNull(payrollLate, "payrollLate");
            this.payrollLate = payrollLate;
            return this;
        }

        /**
         * Payroll must be submitted at or before this time to avoid late payroll.
         */
        public Builder initialDebitCutoffTime(String initialDebitCutoffTime) {
            Utils.checkNotNull(initialDebitCutoffTime, "initialDebitCutoffTime");
            this.initialDebitCutoffTime = Optional.ofNullable(initialDebitCutoffTime);
            return this;
        }

        /**
         * Payroll must be submitted at or before this time to avoid late payroll.
         */
        public Builder initialDebitCutoffTime(Optional<String> initialDebitCutoffTime) {
            Utils.checkNotNull(initialDebitCutoffTime, "initialDebitCutoffTime");
            this.initialDebitCutoffTime = initialDebitCutoffTime;
            return this;
        }
        
        public PayrollPayrollStatusMetaType build() {
            return new PayrollPayrollStatusMetaType(
                cancellable,
                expectedCheckDate,
                initialCheckDate,
                expectedDebitTime,
                payrollLate,
                initialDebitCutoffTime);
        }
    }
}

