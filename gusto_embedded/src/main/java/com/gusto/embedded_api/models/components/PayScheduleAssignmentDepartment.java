/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class PayScheduleAssignmentDepartment {

    /**
     * The UUID of the department.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_uuid")
    private Optional<String> departmentUuid;

    /**
     * The department's pay schedule UUID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_schedule_uuid")
    private Optional<String> payScheduleUuid;

    @JsonCreator
    public PayScheduleAssignmentDepartment(
            @JsonProperty("department_uuid") Optional<String> departmentUuid,
            @JsonProperty("pay_schedule_uuid") Optional<String> payScheduleUuid) {
        Utils.checkNotNull(departmentUuid, "departmentUuid");
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.departmentUuid = departmentUuid;
        this.payScheduleUuid = payScheduleUuid;
    }
    
    public PayScheduleAssignmentDepartment() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the department.
     */
    @JsonIgnore
    public Optional<String> departmentUuid() {
        return departmentUuid;
    }

    /**
     * The department's pay schedule UUID.
     */
    @JsonIgnore
    public Optional<String> payScheduleUuid() {
        return payScheduleUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the department.
     */
    public PayScheduleAssignmentDepartment withDepartmentUuid(String departmentUuid) {
        Utils.checkNotNull(departmentUuid, "departmentUuid");
        this.departmentUuid = Optional.ofNullable(departmentUuid);
        return this;
    }

    /**
     * The UUID of the department.
     */
    public PayScheduleAssignmentDepartment withDepartmentUuid(Optional<String> departmentUuid) {
        Utils.checkNotNull(departmentUuid, "departmentUuid");
        this.departmentUuid = departmentUuid;
        return this;
    }

    /**
     * The department's pay schedule UUID.
     */
    public PayScheduleAssignmentDepartment withPayScheduleUuid(String payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
        return this;
    }

    /**
     * The department's pay schedule UUID.
     */
    public PayScheduleAssignmentDepartment withPayScheduleUuid(Optional<String> payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = payScheduleUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayScheduleAssignmentDepartment other = (PayScheduleAssignmentDepartment) o;
        return 
            Objects.deepEquals(this.departmentUuid, other.departmentUuid) &&
            Objects.deepEquals(this.payScheduleUuid, other.payScheduleUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            departmentUuid,
            payScheduleUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayScheduleAssignmentDepartment.class,
                "departmentUuid", departmentUuid,
                "payScheduleUuid", payScheduleUuid);
    }
    
    public final static class Builder {
 
        private Optional<String> departmentUuid = Optional.empty();
 
        private Optional<String> payScheduleUuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the department.
         */
        public Builder departmentUuid(String departmentUuid) {
            Utils.checkNotNull(departmentUuid, "departmentUuid");
            this.departmentUuid = Optional.ofNullable(departmentUuid);
            return this;
        }

        /**
         * The UUID of the department.
         */
        public Builder departmentUuid(Optional<String> departmentUuid) {
            Utils.checkNotNull(departmentUuid, "departmentUuid");
            this.departmentUuid = departmentUuid;
            return this;
        }

        /**
         * The department's pay schedule UUID.
         */
        public Builder payScheduleUuid(String payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
            return this;
        }

        /**
         * The department's pay schedule UUID.
         */
        public Builder payScheduleUuid(Optional<String> payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = payScheduleUuid;
            return this;
        }
        
        public PayScheduleAssignmentDepartment build() {
            return new PayScheduleAssignmentDepartment(
                departmentUuid,
                payScheduleUuid);
        }
    }
}

