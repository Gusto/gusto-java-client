/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class Questions {

    @JsonProperty("key")
    private String key;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("answers")
    private Optional<? extends List<Answers>> answers;

    @JsonCreator
    public Questions(
            @JsonProperty("key") String key,
            @JsonProperty("answers") Optional<? extends List<Answers>> answers) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(answers, "answers");
        this.key = key;
        this.answers = answers;
    }
    
    public Questions(
            String key) {
        this(key, Optional.empty());
    }

    @JsonIgnore
    public String key() {
        return key;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Answers>> answers() {
        return (Optional<List<Answers>>) answers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Questions withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public Questions withAnswers(List<Answers> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = Optional.ofNullable(answers);
        return this;
    }

    public Questions withAnswers(Optional<? extends List<Answers>> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = answers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Questions other = (Questions) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.answers, other.answers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            answers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Questions.class,
                "key", key,
                "answers", answers);
    }
    
    public final static class Builder {
 
        private String key;
 
        private Optional<? extends List<Answers>> answers = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder answers(List<Answers> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = Optional.ofNullable(answers);
            return this;
        }

        public Builder answers(Optional<? extends List<Answers>> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = answers;
            return this;
        }
        
        public Questions build() {
            return new Questions(
                key,
                answers);
        }
    }
}

