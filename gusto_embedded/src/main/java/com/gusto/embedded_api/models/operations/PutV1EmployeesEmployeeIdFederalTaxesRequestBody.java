/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PutV1EmployeesEmployeeIdFederalTaxesRequestBody {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_status")
    private Optional<String> filingStatus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("extra_withholding")
    private JsonNullable<String> extraWithholding;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("two_jobs")
    private Optional<Boolean> twoJobs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("dependents_amount")
    private Optional<String> dependentsAmount;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_income")
    private Optional<String> otherIncome;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deductions")
    private Optional<String> deductions;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("w4_data_type")
    private Optional<String> w4DataType;

    @JsonCreator
    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody(
            @JsonProperty("version") String version,
            @JsonProperty("filing_status") Optional<String> filingStatus,
            @JsonProperty("extra_withholding") JsonNullable<String> extraWithholding,
            @JsonProperty("two_jobs") Optional<Boolean> twoJobs,
            @JsonProperty("dependents_amount") Optional<String> dependentsAmount,
            @JsonProperty("other_income") Optional<String> otherIncome,
            @JsonProperty("deductions") Optional<String> deductions,
            @JsonProperty("w4_data_type") Optional<String> w4DataType) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(filingStatus, "filingStatus");
        Utils.checkNotNull(extraWithholding, "extraWithholding");
        Utils.checkNotNull(twoJobs, "twoJobs");
        Utils.checkNotNull(dependentsAmount, "dependentsAmount");
        Utils.checkNotNull(otherIncome, "otherIncome");
        Utils.checkNotNull(deductions, "deductions");
        Utils.checkNotNull(w4DataType, "w4DataType");
        this.version = version;
        this.filingStatus = filingStatus;
        this.extraWithholding = extraWithholding;
        this.twoJobs = twoJobs;
        this.dependentsAmount = dependentsAmount;
        this.otherIncome = otherIncome;
        this.deductions = deductions;
        this.w4DataType = w4DataType;
    }
    
    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody(
            String version) {
        this(version, Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    @JsonIgnore
    public Optional<String> filingStatus() {
        return filingStatus;
    }

    @JsonIgnore
    public JsonNullable<String> extraWithholding() {
        return extraWithholding;
    }

    @JsonIgnore
    public Optional<Boolean> twoJobs() {
        return twoJobs;
    }

    @JsonIgnore
    public Optional<String> dependentsAmount() {
        return dependentsAmount;
    }

    @JsonIgnore
    public Optional<String> otherIncome() {
        return otherIncome;
    }

    @JsonIgnore
    public Optional<String> deductions() {
        return deductions;
    }

    @JsonIgnore
    public Optional<String> w4DataType() {
        return w4DataType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withFilingStatus(String filingStatus) {
        Utils.checkNotNull(filingStatus, "filingStatus");
        this.filingStatus = Optional.ofNullable(filingStatus);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withFilingStatus(Optional<String> filingStatus) {
        Utils.checkNotNull(filingStatus, "filingStatus");
        this.filingStatus = filingStatus;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withExtraWithholding(String extraWithholding) {
        Utils.checkNotNull(extraWithholding, "extraWithholding");
        this.extraWithholding = JsonNullable.of(extraWithholding);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withExtraWithholding(JsonNullable<String> extraWithholding) {
        Utils.checkNotNull(extraWithholding, "extraWithholding");
        this.extraWithholding = extraWithholding;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withTwoJobs(boolean twoJobs) {
        Utils.checkNotNull(twoJobs, "twoJobs");
        this.twoJobs = Optional.ofNullable(twoJobs);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withTwoJobs(Optional<Boolean> twoJobs) {
        Utils.checkNotNull(twoJobs, "twoJobs");
        this.twoJobs = twoJobs;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withDependentsAmount(String dependentsAmount) {
        Utils.checkNotNull(dependentsAmount, "dependentsAmount");
        this.dependentsAmount = Optional.ofNullable(dependentsAmount);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withDependentsAmount(Optional<String> dependentsAmount) {
        Utils.checkNotNull(dependentsAmount, "dependentsAmount");
        this.dependentsAmount = dependentsAmount;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withOtherIncome(String otherIncome) {
        Utils.checkNotNull(otherIncome, "otherIncome");
        this.otherIncome = Optional.ofNullable(otherIncome);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withOtherIncome(Optional<String> otherIncome) {
        Utils.checkNotNull(otherIncome, "otherIncome");
        this.otherIncome = otherIncome;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withDeductions(String deductions) {
        Utils.checkNotNull(deductions, "deductions");
        this.deductions = Optional.ofNullable(deductions);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withDeductions(Optional<String> deductions) {
        Utils.checkNotNull(deductions, "deductions");
        this.deductions = deductions;
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withW4DataType(String w4DataType) {
        Utils.checkNotNull(w4DataType, "w4DataType");
        this.w4DataType = Optional.ofNullable(w4DataType);
        return this;
    }

    public PutV1EmployeesEmployeeIdFederalTaxesRequestBody withW4DataType(Optional<String> w4DataType) {
        Utils.checkNotNull(w4DataType, "w4DataType");
        this.w4DataType = w4DataType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1EmployeesEmployeeIdFederalTaxesRequestBody other = (PutV1EmployeesEmployeeIdFederalTaxesRequestBody) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.filingStatus, other.filingStatus) &&
            Objects.deepEquals(this.extraWithholding, other.extraWithholding) &&
            Objects.deepEquals(this.twoJobs, other.twoJobs) &&
            Objects.deepEquals(this.dependentsAmount, other.dependentsAmount) &&
            Objects.deepEquals(this.otherIncome, other.otherIncome) &&
            Objects.deepEquals(this.deductions, other.deductions) &&
            Objects.deepEquals(this.w4DataType, other.w4DataType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            filingStatus,
            extraWithholding,
            twoJobs,
            dependentsAmount,
            otherIncome,
            deductions,
            w4DataType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1EmployeesEmployeeIdFederalTaxesRequestBody.class,
                "version", version,
                "filingStatus", filingStatus,
                "extraWithholding", extraWithholding,
                "twoJobs", twoJobs,
                "dependentsAmount", dependentsAmount,
                "otherIncome", otherIncome,
                "deductions", deductions,
                "w4DataType", w4DataType);
    }
    
    public final static class Builder {
 
        private String version;
 
        private Optional<String> filingStatus = Optional.empty();
 
        private JsonNullable<String> extraWithholding = JsonNullable.undefined();
 
        private Optional<Boolean> twoJobs = Optional.empty();
 
        private Optional<String> dependentsAmount = Optional.empty();
 
        private Optional<String> otherIncome = Optional.empty();
 
        private Optional<String> deductions = Optional.empty();
 
        private Optional<String> w4DataType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        public Builder filingStatus(String filingStatus) {
            Utils.checkNotNull(filingStatus, "filingStatus");
            this.filingStatus = Optional.ofNullable(filingStatus);
            return this;
        }

        public Builder filingStatus(Optional<String> filingStatus) {
            Utils.checkNotNull(filingStatus, "filingStatus");
            this.filingStatus = filingStatus;
            return this;
        }

        public Builder extraWithholding(String extraWithholding) {
            Utils.checkNotNull(extraWithholding, "extraWithholding");
            this.extraWithholding = JsonNullable.of(extraWithholding);
            return this;
        }

        public Builder extraWithholding(JsonNullable<String> extraWithholding) {
            Utils.checkNotNull(extraWithholding, "extraWithholding");
            this.extraWithholding = extraWithholding;
            return this;
        }

        public Builder twoJobs(boolean twoJobs) {
            Utils.checkNotNull(twoJobs, "twoJobs");
            this.twoJobs = Optional.ofNullable(twoJobs);
            return this;
        }

        public Builder twoJobs(Optional<Boolean> twoJobs) {
            Utils.checkNotNull(twoJobs, "twoJobs");
            this.twoJobs = twoJobs;
            return this;
        }

        public Builder dependentsAmount(String dependentsAmount) {
            Utils.checkNotNull(dependentsAmount, "dependentsAmount");
            this.dependentsAmount = Optional.ofNullable(dependentsAmount);
            return this;
        }

        public Builder dependentsAmount(Optional<String> dependentsAmount) {
            Utils.checkNotNull(dependentsAmount, "dependentsAmount");
            this.dependentsAmount = dependentsAmount;
            return this;
        }

        public Builder otherIncome(String otherIncome) {
            Utils.checkNotNull(otherIncome, "otherIncome");
            this.otherIncome = Optional.ofNullable(otherIncome);
            return this;
        }

        public Builder otherIncome(Optional<String> otherIncome) {
            Utils.checkNotNull(otherIncome, "otherIncome");
            this.otherIncome = otherIncome;
            return this;
        }

        public Builder deductions(String deductions) {
            Utils.checkNotNull(deductions, "deductions");
            this.deductions = Optional.ofNullable(deductions);
            return this;
        }

        public Builder deductions(Optional<String> deductions) {
            Utils.checkNotNull(deductions, "deductions");
            this.deductions = deductions;
            return this;
        }

        public Builder w4DataType(String w4DataType) {
            Utils.checkNotNull(w4DataType, "w4DataType");
            this.w4DataType = Optional.ofNullable(w4DataType);
            return this;
        }

        public Builder w4DataType(Optional<String> w4DataType) {
            Utils.checkNotNull(w4DataType, "w4DataType");
            this.w4DataType = w4DataType;
            return this;
        }
        
        public PutV1EmployeesEmployeeIdFederalTaxesRequestBody build() {
            return new PutV1EmployeesEmployeeIdFederalTaxesRequestBody(
                version,
                filingStatus,
                extraWithholding,
                twoJobs,
                dependentsAmount,
                otherIncome,
                deductions,
                w4DataType);
        }
    }
}

