/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * InvoiceData
 * 
 * <p>Representation of a partners invoice data
 */

public class InvoiceData {

    /**
     * The list of companies that are active within the invoice period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active_companies")
    private Optional<? extends List<ActiveCompanies>> activeCompanies;

    @JsonCreator
    public InvoiceData(
            @JsonProperty("active_companies") Optional<? extends List<ActiveCompanies>> activeCompanies) {
        Utils.checkNotNull(activeCompanies, "activeCompanies");
        this.activeCompanies = activeCompanies;
    }
    
    public InvoiceData() {
        this(Optional.empty());
    }

    /**
     * The list of companies that are active within the invoice period
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ActiveCompanies>> activeCompanies() {
        return (Optional<List<ActiveCompanies>>) activeCompanies;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The list of companies that are active within the invoice period
     */
    public InvoiceData withActiveCompanies(List<ActiveCompanies> activeCompanies) {
        Utils.checkNotNull(activeCompanies, "activeCompanies");
        this.activeCompanies = Optional.ofNullable(activeCompanies);
        return this;
    }

    /**
     * The list of companies that are active within the invoice period
     */
    public InvoiceData withActiveCompanies(Optional<? extends List<ActiveCompanies>> activeCompanies) {
        Utils.checkNotNull(activeCompanies, "activeCompanies");
        this.activeCompanies = activeCompanies;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        InvoiceData other = (InvoiceData) o;
        return 
            Objects.deepEquals(this.activeCompanies, other.activeCompanies);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            activeCompanies);
    }
    
    @Override
    public String toString() {
        return Utils.toString(InvoiceData.class,
                "activeCompanies", activeCompanies);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ActiveCompanies>> activeCompanies = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The list of companies that are active within the invoice period
         */
        public Builder activeCompanies(List<ActiveCompanies> activeCompanies) {
            Utils.checkNotNull(activeCompanies, "activeCompanies");
            this.activeCompanies = Optional.ofNullable(activeCompanies);
            return this;
        }

        /**
         * The list of companies that are active within the invoice period
         */
        public Builder activeCompanies(Optional<? extends List<ActiveCompanies>> activeCompanies) {
            Utils.checkNotNull(activeCompanies, "activeCompanies");
            this.activeCompanies = activeCompanies;
            return this;
        }
        
        public InvoiceData build() {
            return new InvoiceData(
                activeCompanies);
        }
    }
}

