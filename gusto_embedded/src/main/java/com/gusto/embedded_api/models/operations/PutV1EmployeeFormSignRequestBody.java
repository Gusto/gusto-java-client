/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class PutV1EmployeeFormSignRequestBody {

    /**
     * The signature
     */
    @JsonProperty("signature_text")
    private String signatureText;

    /**
     * Whether you agree to sign electronically
     */
    @JsonProperty("agree")
    private boolean agree;

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signed_by_ip_address")
    private Optional<String> signedByIpAddress;

    /**
     * Whether there is a preparer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer")
    private Optional<Boolean> preparer;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_first_name")
    private Optional<String> preparerFirstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_last_name")
    private Optional<String> preparerLastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_street_1")
    private Optional<String> preparerStreet1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_street_2")
    private Optional<String> preparerStreet2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_city")
    private Optional<String> preparerCity;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_state")
    private Optional<String> preparerState;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_zip")
    private Optional<String> preparerZip;

    /**
     * Whether preparer agrees to sign electronically
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer_agree")
    private Optional<String> preparerAgree;

    /**
     * Whether there is a 2nd preparer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2")
    private Optional<Boolean> preparer2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_first_name")
    private Optional<String> preparer2FirstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_last_name")
    private Optional<String> preparer2LastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_street_1")
    private Optional<String> preparer2Street1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_street_2")
    private Optional<String> preparer2Street2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_city")
    private Optional<String> preparer2City;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_state")
    private Optional<String> preparer2State;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_zip")
    private Optional<String> preparer2Zip;

    /**
     * Whether 2nd preparer agrees to sign electronically
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer2_agree")
    private Optional<String> preparer2Agree;

    /**
     * Whether there is a 3rd preparer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3")
    private Optional<Boolean> preparer3;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_first_name")
    private Optional<String> preparer3FirstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_last_name")
    private Optional<String> preparer3LastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_street_1")
    private Optional<String> preparer3Street1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_street_2")
    private Optional<String> preparer3Street2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_city")
    private Optional<String> preparer3City;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_state")
    private Optional<String> preparer3State;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_zip")
    private Optional<String> preparer3Zip;

    /**
     * Whether 3rd preparer agrees to sign electronically
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer3_agree")
    private Optional<String> preparer3Agree;

    /**
     * Whether there is a 4th preparer
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4")
    private Optional<Boolean> preparer4;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_first_name")
    private Optional<String> preparer4FirstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_last_name")
    private Optional<String> preparer4LastName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_street_1")
    private Optional<String> preparer4Street1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_street_2")
    private Optional<String> preparer4Street2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_city")
    private Optional<String> preparer4City;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_state")
    private Optional<String> preparer4State;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_zip")
    private Optional<String> preparer4Zip;

    /**
     * Whether 4th preparer agrees to sign electronically
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preparer4_agree")
    private Optional<String> preparer4Agree;

    @JsonCreator
    public PutV1EmployeeFormSignRequestBody(
            @JsonProperty("signature_text") String signatureText,
            @JsonProperty("agree") boolean agree,
            @JsonProperty("signed_by_ip_address") Optional<String> signedByIpAddress,
            @JsonProperty("preparer") Optional<Boolean> preparer,
            @JsonProperty("preparer_first_name") Optional<String> preparerFirstName,
            @JsonProperty("preparer_last_name") Optional<String> preparerLastName,
            @JsonProperty("preparer_street_1") Optional<String> preparerStreet1,
            @JsonProperty("preparer_street_2") Optional<String> preparerStreet2,
            @JsonProperty("preparer_city") Optional<String> preparerCity,
            @JsonProperty("preparer_state") Optional<String> preparerState,
            @JsonProperty("preparer_zip") Optional<String> preparerZip,
            @JsonProperty("preparer_agree") Optional<String> preparerAgree,
            @JsonProperty("preparer2") Optional<Boolean> preparer2,
            @JsonProperty("preparer2_first_name") Optional<String> preparer2FirstName,
            @JsonProperty("preparer2_last_name") Optional<String> preparer2LastName,
            @JsonProperty("preparer2_street_1") Optional<String> preparer2Street1,
            @JsonProperty("preparer2_street_2") Optional<String> preparer2Street2,
            @JsonProperty("preparer2_city") Optional<String> preparer2City,
            @JsonProperty("preparer2_state") Optional<String> preparer2State,
            @JsonProperty("preparer2_zip") Optional<String> preparer2Zip,
            @JsonProperty("preparer2_agree") Optional<String> preparer2Agree,
            @JsonProperty("preparer3") Optional<Boolean> preparer3,
            @JsonProperty("preparer3_first_name") Optional<String> preparer3FirstName,
            @JsonProperty("preparer3_last_name") Optional<String> preparer3LastName,
            @JsonProperty("preparer3_street_1") Optional<String> preparer3Street1,
            @JsonProperty("preparer3_street_2") Optional<String> preparer3Street2,
            @JsonProperty("preparer3_city") Optional<String> preparer3City,
            @JsonProperty("preparer3_state") Optional<String> preparer3State,
            @JsonProperty("preparer3_zip") Optional<String> preparer3Zip,
            @JsonProperty("preparer3_agree") Optional<String> preparer3Agree,
            @JsonProperty("preparer4") Optional<Boolean> preparer4,
            @JsonProperty("preparer4_first_name") Optional<String> preparer4FirstName,
            @JsonProperty("preparer4_last_name") Optional<String> preparer4LastName,
            @JsonProperty("preparer4_street_1") Optional<String> preparer4Street1,
            @JsonProperty("preparer4_street_2") Optional<String> preparer4Street2,
            @JsonProperty("preparer4_city") Optional<String> preparer4City,
            @JsonProperty("preparer4_state") Optional<String> preparer4State,
            @JsonProperty("preparer4_zip") Optional<String> preparer4Zip,
            @JsonProperty("preparer4_agree") Optional<String> preparer4Agree) {
        Utils.checkNotNull(signatureText, "signatureText");
        Utils.checkNotNull(agree, "agree");
        Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
        Utils.checkNotNull(preparer, "preparer");
        Utils.checkNotNull(preparerFirstName, "preparerFirstName");
        Utils.checkNotNull(preparerLastName, "preparerLastName");
        Utils.checkNotNull(preparerStreet1, "preparerStreet1");
        Utils.checkNotNull(preparerStreet2, "preparerStreet2");
        Utils.checkNotNull(preparerCity, "preparerCity");
        Utils.checkNotNull(preparerState, "preparerState");
        Utils.checkNotNull(preparerZip, "preparerZip");
        Utils.checkNotNull(preparerAgree, "preparerAgree");
        Utils.checkNotNull(preparer2, "preparer2");
        Utils.checkNotNull(preparer2FirstName, "preparer2FirstName");
        Utils.checkNotNull(preparer2LastName, "preparer2LastName");
        Utils.checkNotNull(preparer2Street1, "preparer2Street1");
        Utils.checkNotNull(preparer2Street2, "preparer2Street2");
        Utils.checkNotNull(preparer2City, "preparer2City");
        Utils.checkNotNull(preparer2State, "preparer2State");
        Utils.checkNotNull(preparer2Zip, "preparer2Zip");
        Utils.checkNotNull(preparer2Agree, "preparer2Agree");
        Utils.checkNotNull(preparer3, "preparer3");
        Utils.checkNotNull(preparer3FirstName, "preparer3FirstName");
        Utils.checkNotNull(preparer3LastName, "preparer3LastName");
        Utils.checkNotNull(preparer3Street1, "preparer3Street1");
        Utils.checkNotNull(preparer3Street2, "preparer3Street2");
        Utils.checkNotNull(preparer3City, "preparer3City");
        Utils.checkNotNull(preparer3State, "preparer3State");
        Utils.checkNotNull(preparer3Zip, "preparer3Zip");
        Utils.checkNotNull(preparer3Agree, "preparer3Agree");
        Utils.checkNotNull(preparer4, "preparer4");
        Utils.checkNotNull(preparer4FirstName, "preparer4FirstName");
        Utils.checkNotNull(preparer4LastName, "preparer4LastName");
        Utils.checkNotNull(preparer4Street1, "preparer4Street1");
        Utils.checkNotNull(preparer4Street2, "preparer4Street2");
        Utils.checkNotNull(preparer4City, "preparer4City");
        Utils.checkNotNull(preparer4State, "preparer4State");
        Utils.checkNotNull(preparer4Zip, "preparer4Zip");
        Utils.checkNotNull(preparer4Agree, "preparer4Agree");
        this.signatureText = signatureText;
        this.agree = agree;
        this.signedByIpAddress = signedByIpAddress;
        this.preparer = preparer;
        this.preparerFirstName = preparerFirstName;
        this.preparerLastName = preparerLastName;
        this.preparerStreet1 = preparerStreet1;
        this.preparerStreet2 = preparerStreet2;
        this.preparerCity = preparerCity;
        this.preparerState = preparerState;
        this.preparerZip = preparerZip;
        this.preparerAgree = preparerAgree;
        this.preparer2 = preparer2;
        this.preparer2FirstName = preparer2FirstName;
        this.preparer2LastName = preparer2LastName;
        this.preparer2Street1 = preparer2Street1;
        this.preparer2Street2 = preparer2Street2;
        this.preparer2City = preparer2City;
        this.preparer2State = preparer2State;
        this.preparer2Zip = preparer2Zip;
        this.preparer2Agree = preparer2Agree;
        this.preparer3 = preparer3;
        this.preparer3FirstName = preparer3FirstName;
        this.preparer3LastName = preparer3LastName;
        this.preparer3Street1 = preparer3Street1;
        this.preparer3Street2 = preparer3Street2;
        this.preparer3City = preparer3City;
        this.preparer3State = preparer3State;
        this.preparer3Zip = preparer3Zip;
        this.preparer3Agree = preparer3Agree;
        this.preparer4 = preparer4;
        this.preparer4FirstName = preparer4FirstName;
        this.preparer4LastName = preparer4LastName;
        this.preparer4Street1 = preparer4Street1;
        this.preparer4Street2 = preparer4Street2;
        this.preparer4City = preparer4City;
        this.preparer4State = preparer4State;
        this.preparer4Zip = preparer4Zip;
        this.preparer4Agree = preparer4Agree;
    }
    
    public PutV1EmployeeFormSignRequestBody(
            String signatureText,
            boolean agree) {
        this(signatureText, agree, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The signature
     */
    @JsonIgnore
    public String signatureText() {
        return signatureText;
    }

    /**
     * Whether you agree to sign electronically
     */
    @JsonIgnore
    public boolean agree() {
        return agree;
    }

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    @JsonIgnore
    public Optional<String> signedByIpAddress() {
        return signedByIpAddress;
    }

    /**
     * Whether there is a preparer
     */
    @JsonIgnore
    public Optional<Boolean> preparer() {
        return preparer;
    }

    @JsonIgnore
    public Optional<String> preparerFirstName() {
        return preparerFirstName;
    }

    @JsonIgnore
    public Optional<String> preparerLastName() {
        return preparerLastName;
    }

    @JsonIgnore
    public Optional<String> preparerStreet1() {
        return preparerStreet1;
    }

    @JsonIgnore
    public Optional<String> preparerStreet2() {
        return preparerStreet2;
    }

    @JsonIgnore
    public Optional<String> preparerCity() {
        return preparerCity;
    }

    @JsonIgnore
    public Optional<String> preparerState() {
        return preparerState;
    }

    @JsonIgnore
    public Optional<String> preparerZip() {
        return preparerZip;
    }

    /**
     * Whether preparer agrees to sign electronically
     */
    @JsonIgnore
    public Optional<String> preparerAgree() {
        return preparerAgree;
    }

    /**
     * Whether there is a 2nd preparer
     */
    @JsonIgnore
    public Optional<Boolean> preparer2() {
        return preparer2;
    }

    @JsonIgnore
    public Optional<String> preparer2FirstName() {
        return preparer2FirstName;
    }

    @JsonIgnore
    public Optional<String> preparer2LastName() {
        return preparer2LastName;
    }

    @JsonIgnore
    public Optional<String> preparer2Street1() {
        return preparer2Street1;
    }

    @JsonIgnore
    public Optional<String> preparer2Street2() {
        return preparer2Street2;
    }

    @JsonIgnore
    public Optional<String> preparer2City() {
        return preparer2City;
    }

    @JsonIgnore
    public Optional<String> preparer2State() {
        return preparer2State;
    }

    @JsonIgnore
    public Optional<String> preparer2Zip() {
        return preparer2Zip;
    }

    /**
     * Whether 2nd preparer agrees to sign electronically
     */
    @JsonIgnore
    public Optional<String> preparer2Agree() {
        return preparer2Agree;
    }

    /**
     * Whether there is a 3rd preparer
     */
    @JsonIgnore
    public Optional<Boolean> preparer3() {
        return preparer3;
    }

    @JsonIgnore
    public Optional<String> preparer3FirstName() {
        return preparer3FirstName;
    }

    @JsonIgnore
    public Optional<String> preparer3LastName() {
        return preparer3LastName;
    }

    @JsonIgnore
    public Optional<String> preparer3Street1() {
        return preparer3Street1;
    }

    @JsonIgnore
    public Optional<String> preparer3Street2() {
        return preparer3Street2;
    }

    @JsonIgnore
    public Optional<String> preparer3City() {
        return preparer3City;
    }

    @JsonIgnore
    public Optional<String> preparer3State() {
        return preparer3State;
    }

    @JsonIgnore
    public Optional<String> preparer3Zip() {
        return preparer3Zip;
    }

    /**
     * Whether 3rd preparer agrees to sign electronically
     */
    @JsonIgnore
    public Optional<String> preparer3Agree() {
        return preparer3Agree;
    }

    /**
     * Whether there is a 4th preparer
     */
    @JsonIgnore
    public Optional<Boolean> preparer4() {
        return preparer4;
    }

    @JsonIgnore
    public Optional<String> preparer4FirstName() {
        return preparer4FirstName;
    }

    @JsonIgnore
    public Optional<String> preparer4LastName() {
        return preparer4LastName;
    }

    @JsonIgnore
    public Optional<String> preparer4Street1() {
        return preparer4Street1;
    }

    @JsonIgnore
    public Optional<String> preparer4Street2() {
        return preparer4Street2;
    }

    @JsonIgnore
    public Optional<String> preparer4City() {
        return preparer4City;
    }

    @JsonIgnore
    public Optional<String> preparer4State() {
        return preparer4State;
    }

    @JsonIgnore
    public Optional<String> preparer4Zip() {
        return preparer4Zip;
    }

    /**
     * Whether 4th preparer agrees to sign electronically
     */
    @JsonIgnore
    public Optional<String> preparer4Agree() {
        return preparer4Agree;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The signature
     */
    public PutV1EmployeeFormSignRequestBody withSignatureText(String signatureText) {
        Utils.checkNotNull(signatureText, "signatureText");
        this.signatureText = signatureText;
        return this;
    }

    /**
     * Whether you agree to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withAgree(boolean agree) {
        Utils.checkNotNull(agree, "agree");
        this.agree = agree;
        return this;
    }

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    public PutV1EmployeeFormSignRequestBody withSignedByIpAddress(String signedByIpAddress) {
        Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
        this.signedByIpAddress = Optional.ofNullable(signedByIpAddress);
        return this;
    }

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    public PutV1EmployeeFormSignRequestBody withSignedByIpAddress(Optional<String> signedByIpAddress) {
        Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
        this.signedByIpAddress = signedByIpAddress;
        return this;
    }

    /**
     * Whether there is a preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer(boolean preparer) {
        Utils.checkNotNull(preparer, "preparer");
        this.preparer = Optional.ofNullable(preparer);
        return this;
    }

    /**
     * Whether there is a preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer(Optional<Boolean> preparer) {
        Utils.checkNotNull(preparer, "preparer");
        this.preparer = preparer;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerFirstName(String preparerFirstName) {
        Utils.checkNotNull(preparerFirstName, "preparerFirstName");
        this.preparerFirstName = Optional.ofNullable(preparerFirstName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerFirstName(Optional<String> preparerFirstName) {
        Utils.checkNotNull(preparerFirstName, "preparerFirstName");
        this.preparerFirstName = preparerFirstName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerLastName(String preparerLastName) {
        Utils.checkNotNull(preparerLastName, "preparerLastName");
        this.preparerLastName = Optional.ofNullable(preparerLastName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerLastName(Optional<String> preparerLastName) {
        Utils.checkNotNull(preparerLastName, "preparerLastName");
        this.preparerLastName = preparerLastName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerStreet1(String preparerStreet1) {
        Utils.checkNotNull(preparerStreet1, "preparerStreet1");
        this.preparerStreet1 = Optional.ofNullable(preparerStreet1);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerStreet1(Optional<String> preparerStreet1) {
        Utils.checkNotNull(preparerStreet1, "preparerStreet1");
        this.preparerStreet1 = preparerStreet1;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerStreet2(String preparerStreet2) {
        Utils.checkNotNull(preparerStreet2, "preparerStreet2");
        this.preparerStreet2 = Optional.ofNullable(preparerStreet2);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerStreet2(Optional<String> preparerStreet2) {
        Utils.checkNotNull(preparerStreet2, "preparerStreet2");
        this.preparerStreet2 = preparerStreet2;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerCity(String preparerCity) {
        Utils.checkNotNull(preparerCity, "preparerCity");
        this.preparerCity = Optional.ofNullable(preparerCity);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerCity(Optional<String> preparerCity) {
        Utils.checkNotNull(preparerCity, "preparerCity");
        this.preparerCity = preparerCity;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerState(String preparerState) {
        Utils.checkNotNull(preparerState, "preparerState");
        this.preparerState = Optional.ofNullable(preparerState);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerState(Optional<String> preparerState) {
        Utils.checkNotNull(preparerState, "preparerState");
        this.preparerState = preparerState;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerZip(String preparerZip) {
        Utils.checkNotNull(preparerZip, "preparerZip");
        this.preparerZip = Optional.ofNullable(preparerZip);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparerZip(Optional<String> preparerZip) {
        Utils.checkNotNull(preparerZip, "preparerZip");
        this.preparerZip = preparerZip;
        return this;
    }

    /**
     * Whether preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparerAgree(String preparerAgree) {
        Utils.checkNotNull(preparerAgree, "preparerAgree");
        this.preparerAgree = Optional.ofNullable(preparerAgree);
        return this;
    }

    /**
     * Whether preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparerAgree(Optional<String> preparerAgree) {
        Utils.checkNotNull(preparerAgree, "preparerAgree");
        this.preparerAgree = preparerAgree;
        return this;
    }

    /**
     * Whether there is a 2nd preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer2(boolean preparer2) {
        Utils.checkNotNull(preparer2, "preparer2");
        this.preparer2 = Optional.ofNullable(preparer2);
        return this;
    }

    /**
     * Whether there is a 2nd preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer2(Optional<Boolean> preparer2) {
        Utils.checkNotNull(preparer2, "preparer2");
        this.preparer2 = preparer2;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2FirstName(String preparer2FirstName) {
        Utils.checkNotNull(preparer2FirstName, "preparer2FirstName");
        this.preparer2FirstName = Optional.ofNullable(preparer2FirstName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2FirstName(Optional<String> preparer2FirstName) {
        Utils.checkNotNull(preparer2FirstName, "preparer2FirstName");
        this.preparer2FirstName = preparer2FirstName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2LastName(String preparer2LastName) {
        Utils.checkNotNull(preparer2LastName, "preparer2LastName");
        this.preparer2LastName = Optional.ofNullable(preparer2LastName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2LastName(Optional<String> preparer2LastName) {
        Utils.checkNotNull(preparer2LastName, "preparer2LastName");
        this.preparer2LastName = preparer2LastName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2Street1(String preparer2Street1) {
        Utils.checkNotNull(preparer2Street1, "preparer2Street1");
        this.preparer2Street1 = Optional.ofNullable(preparer2Street1);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2Street1(Optional<String> preparer2Street1) {
        Utils.checkNotNull(preparer2Street1, "preparer2Street1");
        this.preparer2Street1 = preparer2Street1;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2Street2(String preparer2Street2) {
        Utils.checkNotNull(preparer2Street2, "preparer2Street2");
        this.preparer2Street2 = Optional.ofNullable(preparer2Street2);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2Street2(Optional<String> preparer2Street2) {
        Utils.checkNotNull(preparer2Street2, "preparer2Street2");
        this.preparer2Street2 = preparer2Street2;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2City(String preparer2City) {
        Utils.checkNotNull(preparer2City, "preparer2City");
        this.preparer2City = Optional.ofNullable(preparer2City);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2City(Optional<String> preparer2City) {
        Utils.checkNotNull(preparer2City, "preparer2City");
        this.preparer2City = preparer2City;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2State(String preparer2State) {
        Utils.checkNotNull(preparer2State, "preparer2State");
        this.preparer2State = Optional.ofNullable(preparer2State);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2State(Optional<String> preparer2State) {
        Utils.checkNotNull(preparer2State, "preparer2State");
        this.preparer2State = preparer2State;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2Zip(String preparer2Zip) {
        Utils.checkNotNull(preparer2Zip, "preparer2Zip");
        this.preparer2Zip = Optional.ofNullable(preparer2Zip);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer2Zip(Optional<String> preparer2Zip) {
        Utils.checkNotNull(preparer2Zip, "preparer2Zip");
        this.preparer2Zip = preparer2Zip;
        return this;
    }

    /**
     * Whether 2nd preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparer2Agree(String preparer2Agree) {
        Utils.checkNotNull(preparer2Agree, "preparer2Agree");
        this.preparer2Agree = Optional.ofNullable(preparer2Agree);
        return this;
    }

    /**
     * Whether 2nd preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparer2Agree(Optional<String> preparer2Agree) {
        Utils.checkNotNull(preparer2Agree, "preparer2Agree");
        this.preparer2Agree = preparer2Agree;
        return this;
    }

    /**
     * Whether there is a 3rd preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer3(boolean preparer3) {
        Utils.checkNotNull(preparer3, "preparer3");
        this.preparer3 = Optional.ofNullable(preparer3);
        return this;
    }

    /**
     * Whether there is a 3rd preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer3(Optional<Boolean> preparer3) {
        Utils.checkNotNull(preparer3, "preparer3");
        this.preparer3 = preparer3;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3FirstName(String preparer3FirstName) {
        Utils.checkNotNull(preparer3FirstName, "preparer3FirstName");
        this.preparer3FirstName = Optional.ofNullable(preparer3FirstName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3FirstName(Optional<String> preparer3FirstName) {
        Utils.checkNotNull(preparer3FirstName, "preparer3FirstName");
        this.preparer3FirstName = preparer3FirstName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3LastName(String preparer3LastName) {
        Utils.checkNotNull(preparer3LastName, "preparer3LastName");
        this.preparer3LastName = Optional.ofNullable(preparer3LastName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3LastName(Optional<String> preparer3LastName) {
        Utils.checkNotNull(preparer3LastName, "preparer3LastName");
        this.preparer3LastName = preparer3LastName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3Street1(String preparer3Street1) {
        Utils.checkNotNull(preparer3Street1, "preparer3Street1");
        this.preparer3Street1 = Optional.ofNullable(preparer3Street1);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3Street1(Optional<String> preparer3Street1) {
        Utils.checkNotNull(preparer3Street1, "preparer3Street1");
        this.preparer3Street1 = preparer3Street1;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3Street2(String preparer3Street2) {
        Utils.checkNotNull(preparer3Street2, "preparer3Street2");
        this.preparer3Street2 = Optional.ofNullable(preparer3Street2);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3Street2(Optional<String> preparer3Street2) {
        Utils.checkNotNull(preparer3Street2, "preparer3Street2");
        this.preparer3Street2 = preparer3Street2;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3City(String preparer3City) {
        Utils.checkNotNull(preparer3City, "preparer3City");
        this.preparer3City = Optional.ofNullable(preparer3City);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3City(Optional<String> preparer3City) {
        Utils.checkNotNull(preparer3City, "preparer3City");
        this.preparer3City = preparer3City;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3State(String preparer3State) {
        Utils.checkNotNull(preparer3State, "preparer3State");
        this.preparer3State = Optional.ofNullable(preparer3State);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3State(Optional<String> preparer3State) {
        Utils.checkNotNull(preparer3State, "preparer3State");
        this.preparer3State = preparer3State;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3Zip(String preparer3Zip) {
        Utils.checkNotNull(preparer3Zip, "preparer3Zip");
        this.preparer3Zip = Optional.ofNullable(preparer3Zip);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer3Zip(Optional<String> preparer3Zip) {
        Utils.checkNotNull(preparer3Zip, "preparer3Zip");
        this.preparer3Zip = preparer3Zip;
        return this;
    }

    /**
     * Whether 3rd preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparer3Agree(String preparer3Agree) {
        Utils.checkNotNull(preparer3Agree, "preparer3Agree");
        this.preparer3Agree = Optional.ofNullable(preparer3Agree);
        return this;
    }

    /**
     * Whether 3rd preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparer3Agree(Optional<String> preparer3Agree) {
        Utils.checkNotNull(preparer3Agree, "preparer3Agree");
        this.preparer3Agree = preparer3Agree;
        return this;
    }

    /**
     * Whether there is a 4th preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer4(boolean preparer4) {
        Utils.checkNotNull(preparer4, "preparer4");
        this.preparer4 = Optional.ofNullable(preparer4);
        return this;
    }

    /**
     * Whether there is a 4th preparer
     */
    public PutV1EmployeeFormSignRequestBody withPreparer4(Optional<Boolean> preparer4) {
        Utils.checkNotNull(preparer4, "preparer4");
        this.preparer4 = preparer4;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4FirstName(String preparer4FirstName) {
        Utils.checkNotNull(preparer4FirstName, "preparer4FirstName");
        this.preparer4FirstName = Optional.ofNullable(preparer4FirstName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4FirstName(Optional<String> preparer4FirstName) {
        Utils.checkNotNull(preparer4FirstName, "preparer4FirstName");
        this.preparer4FirstName = preparer4FirstName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4LastName(String preparer4LastName) {
        Utils.checkNotNull(preparer4LastName, "preparer4LastName");
        this.preparer4LastName = Optional.ofNullable(preparer4LastName);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4LastName(Optional<String> preparer4LastName) {
        Utils.checkNotNull(preparer4LastName, "preparer4LastName");
        this.preparer4LastName = preparer4LastName;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4Street1(String preparer4Street1) {
        Utils.checkNotNull(preparer4Street1, "preparer4Street1");
        this.preparer4Street1 = Optional.ofNullable(preparer4Street1);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4Street1(Optional<String> preparer4Street1) {
        Utils.checkNotNull(preparer4Street1, "preparer4Street1");
        this.preparer4Street1 = preparer4Street1;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4Street2(String preparer4Street2) {
        Utils.checkNotNull(preparer4Street2, "preparer4Street2");
        this.preparer4Street2 = Optional.ofNullable(preparer4Street2);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4Street2(Optional<String> preparer4Street2) {
        Utils.checkNotNull(preparer4Street2, "preparer4Street2");
        this.preparer4Street2 = preparer4Street2;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4City(String preparer4City) {
        Utils.checkNotNull(preparer4City, "preparer4City");
        this.preparer4City = Optional.ofNullable(preparer4City);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4City(Optional<String> preparer4City) {
        Utils.checkNotNull(preparer4City, "preparer4City");
        this.preparer4City = preparer4City;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4State(String preparer4State) {
        Utils.checkNotNull(preparer4State, "preparer4State");
        this.preparer4State = Optional.ofNullable(preparer4State);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4State(Optional<String> preparer4State) {
        Utils.checkNotNull(preparer4State, "preparer4State");
        this.preparer4State = preparer4State;
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4Zip(String preparer4Zip) {
        Utils.checkNotNull(preparer4Zip, "preparer4Zip");
        this.preparer4Zip = Optional.ofNullable(preparer4Zip);
        return this;
    }

    public PutV1EmployeeFormSignRequestBody withPreparer4Zip(Optional<String> preparer4Zip) {
        Utils.checkNotNull(preparer4Zip, "preparer4Zip");
        this.preparer4Zip = preparer4Zip;
        return this;
    }

    /**
     * Whether 4th preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparer4Agree(String preparer4Agree) {
        Utils.checkNotNull(preparer4Agree, "preparer4Agree");
        this.preparer4Agree = Optional.ofNullable(preparer4Agree);
        return this;
    }

    /**
     * Whether 4th preparer agrees to sign electronically
     */
    public PutV1EmployeeFormSignRequestBody withPreparer4Agree(Optional<String> preparer4Agree) {
        Utils.checkNotNull(preparer4Agree, "preparer4Agree");
        this.preparer4Agree = preparer4Agree;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1EmployeeFormSignRequestBody other = (PutV1EmployeeFormSignRequestBody) o;
        return 
            Objects.deepEquals(this.signatureText, other.signatureText) &&
            Objects.deepEquals(this.agree, other.agree) &&
            Objects.deepEquals(this.signedByIpAddress, other.signedByIpAddress) &&
            Objects.deepEquals(this.preparer, other.preparer) &&
            Objects.deepEquals(this.preparerFirstName, other.preparerFirstName) &&
            Objects.deepEquals(this.preparerLastName, other.preparerLastName) &&
            Objects.deepEquals(this.preparerStreet1, other.preparerStreet1) &&
            Objects.deepEquals(this.preparerStreet2, other.preparerStreet2) &&
            Objects.deepEquals(this.preparerCity, other.preparerCity) &&
            Objects.deepEquals(this.preparerState, other.preparerState) &&
            Objects.deepEquals(this.preparerZip, other.preparerZip) &&
            Objects.deepEquals(this.preparerAgree, other.preparerAgree) &&
            Objects.deepEquals(this.preparer2, other.preparer2) &&
            Objects.deepEquals(this.preparer2FirstName, other.preparer2FirstName) &&
            Objects.deepEquals(this.preparer2LastName, other.preparer2LastName) &&
            Objects.deepEquals(this.preparer2Street1, other.preparer2Street1) &&
            Objects.deepEquals(this.preparer2Street2, other.preparer2Street2) &&
            Objects.deepEquals(this.preparer2City, other.preparer2City) &&
            Objects.deepEquals(this.preparer2State, other.preparer2State) &&
            Objects.deepEquals(this.preparer2Zip, other.preparer2Zip) &&
            Objects.deepEquals(this.preparer2Agree, other.preparer2Agree) &&
            Objects.deepEquals(this.preparer3, other.preparer3) &&
            Objects.deepEquals(this.preparer3FirstName, other.preparer3FirstName) &&
            Objects.deepEquals(this.preparer3LastName, other.preparer3LastName) &&
            Objects.deepEquals(this.preparer3Street1, other.preparer3Street1) &&
            Objects.deepEquals(this.preparer3Street2, other.preparer3Street2) &&
            Objects.deepEquals(this.preparer3City, other.preparer3City) &&
            Objects.deepEquals(this.preparer3State, other.preparer3State) &&
            Objects.deepEquals(this.preparer3Zip, other.preparer3Zip) &&
            Objects.deepEquals(this.preparer3Agree, other.preparer3Agree) &&
            Objects.deepEquals(this.preparer4, other.preparer4) &&
            Objects.deepEquals(this.preparer4FirstName, other.preparer4FirstName) &&
            Objects.deepEquals(this.preparer4LastName, other.preparer4LastName) &&
            Objects.deepEquals(this.preparer4Street1, other.preparer4Street1) &&
            Objects.deepEquals(this.preparer4Street2, other.preparer4Street2) &&
            Objects.deepEquals(this.preparer4City, other.preparer4City) &&
            Objects.deepEquals(this.preparer4State, other.preparer4State) &&
            Objects.deepEquals(this.preparer4Zip, other.preparer4Zip) &&
            Objects.deepEquals(this.preparer4Agree, other.preparer4Agree);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            signatureText,
            agree,
            signedByIpAddress,
            preparer,
            preparerFirstName,
            preparerLastName,
            preparerStreet1,
            preparerStreet2,
            preparerCity,
            preparerState,
            preparerZip,
            preparerAgree,
            preparer2,
            preparer2FirstName,
            preparer2LastName,
            preparer2Street1,
            preparer2Street2,
            preparer2City,
            preparer2State,
            preparer2Zip,
            preparer2Agree,
            preparer3,
            preparer3FirstName,
            preparer3LastName,
            preparer3Street1,
            preparer3Street2,
            preparer3City,
            preparer3State,
            preparer3Zip,
            preparer3Agree,
            preparer4,
            preparer4FirstName,
            preparer4LastName,
            preparer4Street1,
            preparer4Street2,
            preparer4City,
            preparer4State,
            preparer4Zip,
            preparer4Agree);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1EmployeeFormSignRequestBody.class,
                "signatureText", signatureText,
                "agree", agree,
                "signedByIpAddress", signedByIpAddress,
                "preparer", preparer,
                "preparerFirstName", preparerFirstName,
                "preparerLastName", preparerLastName,
                "preparerStreet1", preparerStreet1,
                "preparerStreet2", preparerStreet2,
                "preparerCity", preparerCity,
                "preparerState", preparerState,
                "preparerZip", preparerZip,
                "preparerAgree", preparerAgree,
                "preparer2", preparer2,
                "preparer2FirstName", preparer2FirstName,
                "preparer2LastName", preparer2LastName,
                "preparer2Street1", preparer2Street1,
                "preparer2Street2", preparer2Street2,
                "preparer2City", preparer2City,
                "preparer2State", preparer2State,
                "preparer2Zip", preparer2Zip,
                "preparer2Agree", preparer2Agree,
                "preparer3", preparer3,
                "preparer3FirstName", preparer3FirstName,
                "preparer3LastName", preparer3LastName,
                "preparer3Street1", preparer3Street1,
                "preparer3Street2", preparer3Street2,
                "preparer3City", preparer3City,
                "preparer3State", preparer3State,
                "preparer3Zip", preparer3Zip,
                "preparer3Agree", preparer3Agree,
                "preparer4", preparer4,
                "preparer4FirstName", preparer4FirstName,
                "preparer4LastName", preparer4LastName,
                "preparer4Street1", preparer4Street1,
                "preparer4Street2", preparer4Street2,
                "preparer4City", preparer4City,
                "preparer4State", preparer4State,
                "preparer4Zip", preparer4Zip,
                "preparer4Agree", preparer4Agree);
    }
    
    public final static class Builder {
 
        private String signatureText;
 
        private Boolean agree;
 
        private Optional<String> signedByIpAddress = Optional.empty();
 
        private Optional<Boolean> preparer = Optional.empty();
 
        private Optional<String> preparerFirstName = Optional.empty();
 
        private Optional<String> preparerLastName = Optional.empty();
 
        private Optional<String> preparerStreet1 = Optional.empty();
 
        private Optional<String> preparerStreet2 = Optional.empty();
 
        private Optional<String> preparerCity = Optional.empty();
 
        private Optional<String> preparerState = Optional.empty();
 
        private Optional<String> preparerZip = Optional.empty();
 
        private Optional<String> preparerAgree = Optional.empty();
 
        private Optional<Boolean> preparer2 = Optional.empty();
 
        private Optional<String> preparer2FirstName = Optional.empty();
 
        private Optional<String> preparer2LastName = Optional.empty();
 
        private Optional<String> preparer2Street1 = Optional.empty();
 
        private Optional<String> preparer2Street2 = Optional.empty();
 
        private Optional<String> preparer2City = Optional.empty();
 
        private Optional<String> preparer2State = Optional.empty();
 
        private Optional<String> preparer2Zip = Optional.empty();
 
        private Optional<String> preparer2Agree = Optional.empty();
 
        private Optional<Boolean> preparer3 = Optional.empty();
 
        private Optional<String> preparer3FirstName = Optional.empty();
 
        private Optional<String> preparer3LastName = Optional.empty();
 
        private Optional<String> preparer3Street1 = Optional.empty();
 
        private Optional<String> preparer3Street2 = Optional.empty();
 
        private Optional<String> preparer3City = Optional.empty();
 
        private Optional<String> preparer3State = Optional.empty();
 
        private Optional<String> preparer3Zip = Optional.empty();
 
        private Optional<String> preparer3Agree = Optional.empty();
 
        private Optional<Boolean> preparer4 = Optional.empty();
 
        private Optional<String> preparer4FirstName = Optional.empty();
 
        private Optional<String> preparer4LastName = Optional.empty();
 
        private Optional<String> preparer4Street1 = Optional.empty();
 
        private Optional<String> preparer4Street2 = Optional.empty();
 
        private Optional<String> preparer4City = Optional.empty();
 
        private Optional<String> preparer4State = Optional.empty();
 
        private Optional<String> preparer4Zip = Optional.empty();
 
        private Optional<String> preparer4Agree = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The signature
         */
        public Builder signatureText(String signatureText) {
            Utils.checkNotNull(signatureText, "signatureText");
            this.signatureText = signatureText;
            return this;
        }

        /**
         * Whether you agree to sign electronically
         */
        public Builder agree(boolean agree) {
            Utils.checkNotNull(agree, "agree");
            this.agree = agree;
            return this;
        }

        /**
         * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
         */
        public Builder signedByIpAddress(String signedByIpAddress) {
            Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
            this.signedByIpAddress = Optional.ofNullable(signedByIpAddress);
            return this;
        }

        /**
         * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
         */
        public Builder signedByIpAddress(Optional<String> signedByIpAddress) {
            Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
            this.signedByIpAddress = signedByIpAddress;
            return this;
        }

        /**
         * Whether there is a preparer
         */
        public Builder preparer(boolean preparer) {
            Utils.checkNotNull(preparer, "preparer");
            this.preparer = Optional.ofNullable(preparer);
            return this;
        }

        /**
         * Whether there is a preparer
         */
        public Builder preparer(Optional<Boolean> preparer) {
            Utils.checkNotNull(preparer, "preparer");
            this.preparer = preparer;
            return this;
        }

        public Builder preparerFirstName(String preparerFirstName) {
            Utils.checkNotNull(preparerFirstName, "preparerFirstName");
            this.preparerFirstName = Optional.ofNullable(preparerFirstName);
            return this;
        }

        public Builder preparerFirstName(Optional<String> preparerFirstName) {
            Utils.checkNotNull(preparerFirstName, "preparerFirstName");
            this.preparerFirstName = preparerFirstName;
            return this;
        }

        public Builder preparerLastName(String preparerLastName) {
            Utils.checkNotNull(preparerLastName, "preparerLastName");
            this.preparerLastName = Optional.ofNullable(preparerLastName);
            return this;
        }

        public Builder preparerLastName(Optional<String> preparerLastName) {
            Utils.checkNotNull(preparerLastName, "preparerLastName");
            this.preparerLastName = preparerLastName;
            return this;
        }

        public Builder preparerStreet1(String preparerStreet1) {
            Utils.checkNotNull(preparerStreet1, "preparerStreet1");
            this.preparerStreet1 = Optional.ofNullable(preparerStreet1);
            return this;
        }

        public Builder preparerStreet1(Optional<String> preparerStreet1) {
            Utils.checkNotNull(preparerStreet1, "preparerStreet1");
            this.preparerStreet1 = preparerStreet1;
            return this;
        }

        public Builder preparerStreet2(String preparerStreet2) {
            Utils.checkNotNull(preparerStreet2, "preparerStreet2");
            this.preparerStreet2 = Optional.ofNullable(preparerStreet2);
            return this;
        }

        public Builder preparerStreet2(Optional<String> preparerStreet2) {
            Utils.checkNotNull(preparerStreet2, "preparerStreet2");
            this.preparerStreet2 = preparerStreet2;
            return this;
        }

        public Builder preparerCity(String preparerCity) {
            Utils.checkNotNull(preparerCity, "preparerCity");
            this.preparerCity = Optional.ofNullable(preparerCity);
            return this;
        }

        public Builder preparerCity(Optional<String> preparerCity) {
            Utils.checkNotNull(preparerCity, "preparerCity");
            this.preparerCity = preparerCity;
            return this;
        }

        public Builder preparerState(String preparerState) {
            Utils.checkNotNull(preparerState, "preparerState");
            this.preparerState = Optional.ofNullable(preparerState);
            return this;
        }

        public Builder preparerState(Optional<String> preparerState) {
            Utils.checkNotNull(preparerState, "preparerState");
            this.preparerState = preparerState;
            return this;
        }

        public Builder preparerZip(String preparerZip) {
            Utils.checkNotNull(preparerZip, "preparerZip");
            this.preparerZip = Optional.ofNullable(preparerZip);
            return this;
        }

        public Builder preparerZip(Optional<String> preparerZip) {
            Utils.checkNotNull(preparerZip, "preparerZip");
            this.preparerZip = preparerZip;
            return this;
        }

        /**
         * Whether preparer agrees to sign electronically
         */
        public Builder preparerAgree(String preparerAgree) {
            Utils.checkNotNull(preparerAgree, "preparerAgree");
            this.preparerAgree = Optional.ofNullable(preparerAgree);
            return this;
        }

        /**
         * Whether preparer agrees to sign electronically
         */
        public Builder preparerAgree(Optional<String> preparerAgree) {
            Utils.checkNotNull(preparerAgree, "preparerAgree");
            this.preparerAgree = preparerAgree;
            return this;
        }

        /**
         * Whether there is a 2nd preparer
         */
        public Builder preparer2(boolean preparer2) {
            Utils.checkNotNull(preparer2, "preparer2");
            this.preparer2 = Optional.ofNullable(preparer2);
            return this;
        }

        /**
         * Whether there is a 2nd preparer
         */
        public Builder preparer2(Optional<Boolean> preparer2) {
            Utils.checkNotNull(preparer2, "preparer2");
            this.preparer2 = preparer2;
            return this;
        }

        public Builder preparer2FirstName(String preparer2FirstName) {
            Utils.checkNotNull(preparer2FirstName, "preparer2FirstName");
            this.preparer2FirstName = Optional.ofNullable(preparer2FirstName);
            return this;
        }

        public Builder preparer2FirstName(Optional<String> preparer2FirstName) {
            Utils.checkNotNull(preparer2FirstName, "preparer2FirstName");
            this.preparer2FirstName = preparer2FirstName;
            return this;
        }

        public Builder preparer2LastName(String preparer2LastName) {
            Utils.checkNotNull(preparer2LastName, "preparer2LastName");
            this.preparer2LastName = Optional.ofNullable(preparer2LastName);
            return this;
        }

        public Builder preparer2LastName(Optional<String> preparer2LastName) {
            Utils.checkNotNull(preparer2LastName, "preparer2LastName");
            this.preparer2LastName = preparer2LastName;
            return this;
        }

        public Builder preparer2Street1(String preparer2Street1) {
            Utils.checkNotNull(preparer2Street1, "preparer2Street1");
            this.preparer2Street1 = Optional.ofNullable(preparer2Street1);
            return this;
        }

        public Builder preparer2Street1(Optional<String> preparer2Street1) {
            Utils.checkNotNull(preparer2Street1, "preparer2Street1");
            this.preparer2Street1 = preparer2Street1;
            return this;
        }

        public Builder preparer2Street2(String preparer2Street2) {
            Utils.checkNotNull(preparer2Street2, "preparer2Street2");
            this.preparer2Street2 = Optional.ofNullable(preparer2Street2);
            return this;
        }

        public Builder preparer2Street2(Optional<String> preparer2Street2) {
            Utils.checkNotNull(preparer2Street2, "preparer2Street2");
            this.preparer2Street2 = preparer2Street2;
            return this;
        }

        public Builder preparer2City(String preparer2City) {
            Utils.checkNotNull(preparer2City, "preparer2City");
            this.preparer2City = Optional.ofNullable(preparer2City);
            return this;
        }

        public Builder preparer2City(Optional<String> preparer2City) {
            Utils.checkNotNull(preparer2City, "preparer2City");
            this.preparer2City = preparer2City;
            return this;
        }

        public Builder preparer2State(String preparer2State) {
            Utils.checkNotNull(preparer2State, "preparer2State");
            this.preparer2State = Optional.ofNullable(preparer2State);
            return this;
        }

        public Builder preparer2State(Optional<String> preparer2State) {
            Utils.checkNotNull(preparer2State, "preparer2State");
            this.preparer2State = preparer2State;
            return this;
        }

        public Builder preparer2Zip(String preparer2Zip) {
            Utils.checkNotNull(preparer2Zip, "preparer2Zip");
            this.preparer2Zip = Optional.ofNullable(preparer2Zip);
            return this;
        }

        public Builder preparer2Zip(Optional<String> preparer2Zip) {
            Utils.checkNotNull(preparer2Zip, "preparer2Zip");
            this.preparer2Zip = preparer2Zip;
            return this;
        }

        /**
         * Whether 2nd preparer agrees to sign electronically
         */
        public Builder preparer2Agree(String preparer2Agree) {
            Utils.checkNotNull(preparer2Agree, "preparer2Agree");
            this.preparer2Agree = Optional.ofNullable(preparer2Agree);
            return this;
        }

        /**
         * Whether 2nd preparer agrees to sign electronically
         */
        public Builder preparer2Agree(Optional<String> preparer2Agree) {
            Utils.checkNotNull(preparer2Agree, "preparer2Agree");
            this.preparer2Agree = preparer2Agree;
            return this;
        }

        /**
         * Whether there is a 3rd preparer
         */
        public Builder preparer3(boolean preparer3) {
            Utils.checkNotNull(preparer3, "preparer3");
            this.preparer3 = Optional.ofNullable(preparer3);
            return this;
        }

        /**
         * Whether there is a 3rd preparer
         */
        public Builder preparer3(Optional<Boolean> preparer3) {
            Utils.checkNotNull(preparer3, "preparer3");
            this.preparer3 = preparer3;
            return this;
        }

        public Builder preparer3FirstName(String preparer3FirstName) {
            Utils.checkNotNull(preparer3FirstName, "preparer3FirstName");
            this.preparer3FirstName = Optional.ofNullable(preparer3FirstName);
            return this;
        }

        public Builder preparer3FirstName(Optional<String> preparer3FirstName) {
            Utils.checkNotNull(preparer3FirstName, "preparer3FirstName");
            this.preparer3FirstName = preparer3FirstName;
            return this;
        }

        public Builder preparer3LastName(String preparer3LastName) {
            Utils.checkNotNull(preparer3LastName, "preparer3LastName");
            this.preparer3LastName = Optional.ofNullable(preparer3LastName);
            return this;
        }

        public Builder preparer3LastName(Optional<String> preparer3LastName) {
            Utils.checkNotNull(preparer3LastName, "preparer3LastName");
            this.preparer3LastName = preparer3LastName;
            return this;
        }

        public Builder preparer3Street1(String preparer3Street1) {
            Utils.checkNotNull(preparer3Street1, "preparer3Street1");
            this.preparer3Street1 = Optional.ofNullable(preparer3Street1);
            return this;
        }

        public Builder preparer3Street1(Optional<String> preparer3Street1) {
            Utils.checkNotNull(preparer3Street1, "preparer3Street1");
            this.preparer3Street1 = preparer3Street1;
            return this;
        }

        public Builder preparer3Street2(String preparer3Street2) {
            Utils.checkNotNull(preparer3Street2, "preparer3Street2");
            this.preparer3Street2 = Optional.ofNullable(preparer3Street2);
            return this;
        }

        public Builder preparer3Street2(Optional<String> preparer3Street2) {
            Utils.checkNotNull(preparer3Street2, "preparer3Street2");
            this.preparer3Street2 = preparer3Street2;
            return this;
        }

        public Builder preparer3City(String preparer3City) {
            Utils.checkNotNull(preparer3City, "preparer3City");
            this.preparer3City = Optional.ofNullable(preparer3City);
            return this;
        }

        public Builder preparer3City(Optional<String> preparer3City) {
            Utils.checkNotNull(preparer3City, "preparer3City");
            this.preparer3City = preparer3City;
            return this;
        }

        public Builder preparer3State(String preparer3State) {
            Utils.checkNotNull(preparer3State, "preparer3State");
            this.preparer3State = Optional.ofNullable(preparer3State);
            return this;
        }

        public Builder preparer3State(Optional<String> preparer3State) {
            Utils.checkNotNull(preparer3State, "preparer3State");
            this.preparer3State = preparer3State;
            return this;
        }

        public Builder preparer3Zip(String preparer3Zip) {
            Utils.checkNotNull(preparer3Zip, "preparer3Zip");
            this.preparer3Zip = Optional.ofNullable(preparer3Zip);
            return this;
        }

        public Builder preparer3Zip(Optional<String> preparer3Zip) {
            Utils.checkNotNull(preparer3Zip, "preparer3Zip");
            this.preparer3Zip = preparer3Zip;
            return this;
        }

        /**
         * Whether 3rd preparer agrees to sign electronically
         */
        public Builder preparer3Agree(String preparer3Agree) {
            Utils.checkNotNull(preparer3Agree, "preparer3Agree");
            this.preparer3Agree = Optional.ofNullable(preparer3Agree);
            return this;
        }

        /**
         * Whether 3rd preparer agrees to sign electronically
         */
        public Builder preparer3Agree(Optional<String> preparer3Agree) {
            Utils.checkNotNull(preparer3Agree, "preparer3Agree");
            this.preparer3Agree = preparer3Agree;
            return this;
        }

        /**
         * Whether there is a 4th preparer
         */
        public Builder preparer4(boolean preparer4) {
            Utils.checkNotNull(preparer4, "preparer4");
            this.preparer4 = Optional.ofNullable(preparer4);
            return this;
        }

        /**
         * Whether there is a 4th preparer
         */
        public Builder preparer4(Optional<Boolean> preparer4) {
            Utils.checkNotNull(preparer4, "preparer4");
            this.preparer4 = preparer4;
            return this;
        }

        public Builder preparer4FirstName(String preparer4FirstName) {
            Utils.checkNotNull(preparer4FirstName, "preparer4FirstName");
            this.preparer4FirstName = Optional.ofNullable(preparer4FirstName);
            return this;
        }

        public Builder preparer4FirstName(Optional<String> preparer4FirstName) {
            Utils.checkNotNull(preparer4FirstName, "preparer4FirstName");
            this.preparer4FirstName = preparer4FirstName;
            return this;
        }

        public Builder preparer4LastName(String preparer4LastName) {
            Utils.checkNotNull(preparer4LastName, "preparer4LastName");
            this.preparer4LastName = Optional.ofNullable(preparer4LastName);
            return this;
        }

        public Builder preparer4LastName(Optional<String> preparer4LastName) {
            Utils.checkNotNull(preparer4LastName, "preparer4LastName");
            this.preparer4LastName = preparer4LastName;
            return this;
        }

        public Builder preparer4Street1(String preparer4Street1) {
            Utils.checkNotNull(preparer4Street1, "preparer4Street1");
            this.preparer4Street1 = Optional.ofNullable(preparer4Street1);
            return this;
        }

        public Builder preparer4Street1(Optional<String> preparer4Street1) {
            Utils.checkNotNull(preparer4Street1, "preparer4Street1");
            this.preparer4Street1 = preparer4Street1;
            return this;
        }

        public Builder preparer4Street2(String preparer4Street2) {
            Utils.checkNotNull(preparer4Street2, "preparer4Street2");
            this.preparer4Street2 = Optional.ofNullable(preparer4Street2);
            return this;
        }

        public Builder preparer4Street2(Optional<String> preparer4Street2) {
            Utils.checkNotNull(preparer4Street2, "preparer4Street2");
            this.preparer4Street2 = preparer4Street2;
            return this;
        }

        public Builder preparer4City(String preparer4City) {
            Utils.checkNotNull(preparer4City, "preparer4City");
            this.preparer4City = Optional.ofNullable(preparer4City);
            return this;
        }

        public Builder preparer4City(Optional<String> preparer4City) {
            Utils.checkNotNull(preparer4City, "preparer4City");
            this.preparer4City = preparer4City;
            return this;
        }

        public Builder preparer4State(String preparer4State) {
            Utils.checkNotNull(preparer4State, "preparer4State");
            this.preparer4State = Optional.ofNullable(preparer4State);
            return this;
        }

        public Builder preparer4State(Optional<String> preparer4State) {
            Utils.checkNotNull(preparer4State, "preparer4State");
            this.preparer4State = preparer4State;
            return this;
        }

        public Builder preparer4Zip(String preparer4Zip) {
            Utils.checkNotNull(preparer4Zip, "preparer4Zip");
            this.preparer4Zip = Optional.ofNullable(preparer4Zip);
            return this;
        }

        public Builder preparer4Zip(Optional<String> preparer4Zip) {
            Utils.checkNotNull(preparer4Zip, "preparer4Zip");
            this.preparer4Zip = preparer4Zip;
            return this;
        }

        /**
         * Whether 4th preparer agrees to sign electronically
         */
        public Builder preparer4Agree(String preparer4Agree) {
            Utils.checkNotNull(preparer4Agree, "preparer4Agree");
            this.preparer4Agree = Optional.ofNullable(preparer4Agree);
            return this;
        }

        /**
         * Whether 4th preparer agrees to sign electronically
         */
        public Builder preparer4Agree(Optional<String> preparer4Agree) {
            Utils.checkNotNull(preparer4Agree, "preparer4Agree");
            this.preparer4Agree = preparer4Agree;
            return this;
        }
        
        public PutV1EmployeeFormSignRequestBody build() {
            return new PutV1EmployeeFormSignRequestBody(
                signatureText,
                agree,
                signedByIpAddress,
                preparer,
                preparerFirstName,
                preparerLastName,
                preparerStreet1,
                preparerStreet2,
                preparerCity,
                preparerState,
                preparerZip,
                preparerAgree,
                preparer2,
                preparer2FirstName,
                preparer2LastName,
                preparer2Street1,
                preparer2Street2,
                preparer2City,
                preparer2State,
                preparer2Zip,
                preparer2Agree,
                preparer3,
                preparer3FirstName,
                preparer3LastName,
                preparer3Street1,
                preparer3Street2,
                preparer3City,
                preparer3State,
                preparer3Zip,
                preparer3Agree,
                preparer4,
                preparer4FirstName,
                preparer4LastName,
                preparer4Street1,
                preparer4Street2,
                preparer4City,
                preparer4State,
                preparer4Zip,
                preparer4Agree);
        }
    }
}

