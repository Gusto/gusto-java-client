/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * PayScheduleAssignmentPayPeriod - Pay schedule assignment first pay period information.
 */

public class PayScheduleAssignmentPayPeriod {

    /**
     * The pay schedule UUID.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_schedule_uuid")
    private Optional<String> payScheduleUuid;

    /**
     * Pay period start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * Pay period end date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * Pay period check date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    @JsonCreator
    public PayScheduleAssignmentPayPeriod(
            @JsonProperty("pay_schedule_uuid") Optional<String> payScheduleUuid,
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("check_date") Optional<String> checkDate) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(checkDate, "checkDate");
        this.payScheduleUuid = payScheduleUuid;
        this.startDate = startDate;
        this.endDate = endDate;
        this.checkDate = checkDate;
    }
    
    public PayScheduleAssignmentPayPeriod() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The pay schedule UUID.
     */
    @JsonIgnore
    public Optional<String> payScheduleUuid() {
        return payScheduleUuid;
    }

    /**
     * Pay period start date.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * Pay period end date.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Pay period check date.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The pay schedule UUID.
     */
    public PayScheduleAssignmentPayPeriod withPayScheduleUuid(String payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
        return this;
    }

    /**
     * The pay schedule UUID.
     */
    public PayScheduleAssignmentPayPeriod withPayScheduleUuid(Optional<String> payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = payScheduleUuid;
        return this;
    }

    /**
     * Pay period start date.
     */
    public PayScheduleAssignmentPayPeriod withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * Pay period start date.
     */
    public PayScheduleAssignmentPayPeriod withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Pay period end date.
     */
    public PayScheduleAssignmentPayPeriod withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * Pay period end date.
     */
    public PayScheduleAssignmentPayPeriod withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Pay period check date.
     */
    public PayScheduleAssignmentPayPeriod withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * Pay period check date.
     */
    public PayScheduleAssignmentPayPeriod withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayScheduleAssignmentPayPeriod other = (PayScheduleAssignmentPayPeriod) o;
        return 
            Objects.deepEquals(this.payScheduleUuid, other.payScheduleUuid) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.checkDate, other.checkDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            payScheduleUuid,
            startDate,
            endDate,
            checkDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayScheduleAssignmentPayPeriod.class,
                "payScheduleUuid", payScheduleUuid,
                "startDate", startDate,
                "endDate", endDate,
                "checkDate", checkDate);
    }
    
    public final static class Builder {
 
        private Optional<String> payScheduleUuid = Optional.empty();
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The pay schedule UUID.
         */
        public Builder payScheduleUuid(String payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
            return this;
        }

        /**
         * The pay schedule UUID.
         */
        public Builder payScheduleUuid(Optional<String> payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = payScheduleUuid;
            return this;
        }

        /**
         * Pay period start date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * Pay period start date.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Pay period end date.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * Pay period end date.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Pay period check date.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * Pay period check date.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }
        
        public PayScheduleAssignmentPayPeriod build() {
            return new PayScheduleAssignmentPayPeriod(
                payScheduleUuid,
                startDate,
                endDate,
                checkDate);
        }
    }
}

