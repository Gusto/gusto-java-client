/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class Fields {

    /**
     * Unique identifier of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<String> key;

    /**
     * Auto-filled value of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<String> value;

    /**
     * X-coordinate location of the field on the page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("x")
    private Optional<Long> x;

    /**
     * Y-coordinate location of the field on the page
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("y")
    private Optional<Long> y;

    /**
     * Width of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("width")
    private Optional<Long> width;

    /**
     * Height of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("height")
    private Optional<Long> height;

    /**
     * Page number of the field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("page_number")
    private Optional<Long> pageNumber;

    /**
     * The field's data type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("data_type")
    private Optional<String> dataType;

    /**
     * Whether the field is required
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Optional<Boolean> required;

    @JsonCreator
    public Fields(
            @JsonProperty("key") Optional<String> key,
            @JsonProperty("value") JsonNullable<String> value,
            @JsonProperty("x") Optional<Long> x,
            @JsonProperty("y") Optional<Long> y,
            @JsonProperty("width") Optional<Long> width,
            @JsonProperty("height") Optional<Long> height,
            @JsonProperty("page_number") Optional<Long> pageNumber,
            @JsonProperty("data_type") Optional<String> dataType,
            @JsonProperty("required") Optional<Boolean> required) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(x, "x");
        Utils.checkNotNull(y, "y");
        Utils.checkNotNull(width, "width");
        Utils.checkNotNull(height, "height");
        Utils.checkNotNull(pageNumber, "pageNumber");
        Utils.checkNotNull(dataType, "dataType");
        Utils.checkNotNull(required, "required");
        this.key = key;
        this.value = value;
        this.x = x;
        this.y = y;
        this.width = width;
        this.height = height;
        this.pageNumber = pageNumber;
        this.dataType = dataType;
        this.required = required;
    }
    
    public Fields() {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of the field
     */
    @JsonIgnore
    public Optional<String> key() {
        return key;
    }

    /**
     * Auto-filled value of the field
     */
    @JsonIgnore
    public JsonNullable<String> value() {
        return value;
    }

    /**
     * X-coordinate location of the field on the page
     */
    @JsonIgnore
    public Optional<Long> x() {
        return x;
    }

    /**
     * Y-coordinate location of the field on the page
     */
    @JsonIgnore
    public Optional<Long> y() {
        return y;
    }

    /**
     * Width of the field
     */
    @JsonIgnore
    public Optional<Long> width() {
        return width;
    }

    /**
     * Height of the field
     */
    @JsonIgnore
    public Optional<Long> height() {
        return height;
    }

    /**
     * Page number of the field
     */
    @JsonIgnore
    public Optional<Long> pageNumber() {
        return pageNumber;
    }

    /**
     * The field's data type
     */
    @JsonIgnore
    public Optional<String> dataType() {
        return dataType;
    }

    /**
     * Whether the field is required
     */
    @JsonIgnore
    public Optional<Boolean> required() {
        return required;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of the field
     */
    public Fields withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * Unique identifier of the field
     */
    public Fields withKey(Optional<String> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * Auto-filled value of the field
     */
    public Fields withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = JsonNullable.of(value);
        return this;
    }

    /**
     * Auto-filled value of the field
     */
    public Fields withValue(JsonNullable<String> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * X-coordinate location of the field on the page
     */
    public Fields withX(long x) {
        Utils.checkNotNull(x, "x");
        this.x = Optional.ofNullable(x);
        return this;
    }

    /**
     * X-coordinate location of the field on the page
     */
    public Fields withX(Optional<Long> x) {
        Utils.checkNotNull(x, "x");
        this.x = x;
        return this;
    }

    /**
     * Y-coordinate location of the field on the page
     */
    public Fields withY(long y) {
        Utils.checkNotNull(y, "y");
        this.y = Optional.ofNullable(y);
        return this;
    }

    /**
     * Y-coordinate location of the field on the page
     */
    public Fields withY(Optional<Long> y) {
        Utils.checkNotNull(y, "y");
        this.y = y;
        return this;
    }

    /**
     * Width of the field
     */
    public Fields withWidth(long width) {
        Utils.checkNotNull(width, "width");
        this.width = Optional.ofNullable(width);
        return this;
    }

    /**
     * Width of the field
     */
    public Fields withWidth(Optional<Long> width) {
        Utils.checkNotNull(width, "width");
        this.width = width;
        return this;
    }

    /**
     * Height of the field
     */
    public Fields withHeight(long height) {
        Utils.checkNotNull(height, "height");
        this.height = Optional.ofNullable(height);
        return this;
    }

    /**
     * Height of the field
     */
    public Fields withHeight(Optional<Long> height) {
        Utils.checkNotNull(height, "height");
        this.height = height;
        return this;
    }

    /**
     * Page number of the field
     */
    public Fields withPageNumber(long pageNumber) {
        Utils.checkNotNull(pageNumber, "pageNumber");
        this.pageNumber = Optional.ofNullable(pageNumber);
        return this;
    }

    /**
     * Page number of the field
     */
    public Fields withPageNumber(Optional<Long> pageNumber) {
        Utils.checkNotNull(pageNumber, "pageNumber");
        this.pageNumber = pageNumber;
        return this;
    }

    /**
     * The field's data type
     */
    public Fields withDataType(String dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = Optional.ofNullable(dataType);
        return this;
    }

    /**
     * The field's data type
     */
    public Fields withDataType(Optional<String> dataType) {
        Utils.checkNotNull(dataType, "dataType");
        this.dataType = dataType;
        return this;
    }

    /**
     * Whether the field is required
     */
    public Fields withRequired(boolean required) {
        Utils.checkNotNull(required, "required");
        this.required = Optional.ofNullable(required);
        return this;
    }

    /**
     * Whether the field is required
     */
    public Fields withRequired(Optional<Boolean> required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Fields other = (Fields) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.x, other.x) &&
            Objects.deepEquals(this.y, other.y) &&
            Objects.deepEquals(this.width, other.width) &&
            Objects.deepEquals(this.height, other.height) &&
            Objects.deepEquals(this.pageNumber, other.pageNumber) &&
            Objects.deepEquals(this.dataType, other.dataType) &&
            Objects.deepEquals(this.required, other.required);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            value,
            x,
            y,
            width,
            height,
            pageNumber,
            dataType,
            required);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Fields.class,
                "key", key,
                "value", value,
                "x", x,
                "y", y,
                "width", width,
                "height", height,
                "pageNumber", pageNumber,
                "dataType", dataType,
                "required", required);
    }
    
    public final static class Builder {
 
        private Optional<String> key = Optional.empty();
 
        private JsonNullable<String> value = JsonNullable.undefined();
 
        private Optional<Long> x = Optional.empty();
 
        private Optional<Long> y = Optional.empty();
 
        private Optional<Long> width = Optional.empty();
 
        private Optional<Long> height = Optional.empty();
 
        private Optional<Long> pageNumber = Optional.empty();
 
        private Optional<String> dataType = Optional.empty();
 
        private Optional<Boolean> required = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of the field
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * Unique identifier of the field
         */
        public Builder key(Optional<String> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * Auto-filled value of the field
         */
        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = JsonNullable.of(value);
            return this;
        }

        /**
         * Auto-filled value of the field
         */
        public Builder value(JsonNullable<String> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * X-coordinate location of the field on the page
         */
        public Builder x(long x) {
            Utils.checkNotNull(x, "x");
            this.x = Optional.ofNullable(x);
            return this;
        }

        /**
         * X-coordinate location of the field on the page
         */
        public Builder x(Optional<Long> x) {
            Utils.checkNotNull(x, "x");
            this.x = x;
            return this;
        }

        /**
         * Y-coordinate location of the field on the page
         */
        public Builder y(long y) {
            Utils.checkNotNull(y, "y");
            this.y = Optional.ofNullable(y);
            return this;
        }

        /**
         * Y-coordinate location of the field on the page
         */
        public Builder y(Optional<Long> y) {
            Utils.checkNotNull(y, "y");
            this.y = y;
            return this;
        }

        /**
         * Width of the field
         */
        public Builder width(long width) {
            Utils.checkNotNull(width, "width");
            this.width = Optional.ofNullable(width);
            return this;
        }

        /**
         * Width of the field
         */
        public Builder width(Optional<Long> width) {
            Utils.checkNotNull(width, "width");
            this.width = width;
            return this;
        }

        /**
         * Height of the field
         */
        public Builder height(long height) {
            Utils.checkNotNull(height, "height");
            this.height = Optional.ofNullable(height);
            return this;
        }

        /**
         * Height of the field
         */
        public Builder height(Optional<Long> height) {
            Utils.checkNotNull(height, "height");
            this.height = height;
            return this;
        }

        /**
         * Page number of the field
         */
        public Builder pageNumber(long pageNumber) {
            Utils.checkNotNull(pageNumber, "pageNumber");
            this.pageNumber = Optional.ofNullable(pageNumber);
            return this;
        }

        /**
         * Page number of the field
         */
        public Builder pageNumber(Optional<Long> pageNumber) {
            Utils.checkNotNull(pageNumber, "pageNumber");
            this.pageNumber = pageNumber;
            return this;
        }

        /**
         * The field's data type
         */
        public Builder dataType(String dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = Optional.ofNullable(dataType);
            return this;
        }

        /**
         * The field's data type
         */
        public Builder dataType(Optional<String> dataType) {
            Utils.checkNotNull(dataType, "dataType");
            this.dataType = dataType;
            return this;
        }

        /**
         * Whether the field is required
         */
        public Builder required(boolean required) {
            Utils.checkNotNull(required, "required");
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * Whether the field is required
         */
        public Builder required(Optional<Boolean> required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }
        
        public Fields build() {
            return new Fields(
                key,
                value,
                x,
                y,
                width,
                height,
                pageNumber,
                dataType,
                required);
        }
    }
}

