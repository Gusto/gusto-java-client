/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * Location - The representation of an address in Gusto.
 */

public class Location {

    /**
     * The UUID of the location object.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The phone number for the location. Required for company locations. Optional for employee locations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private Optional<String> phoneNumber;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_1")
    private Optional<String> street1;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("street_2")
    private JsonNullable<String> street2;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("zip")
    private Optional<String> zip;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("mailing_address")
    private Optional<Boolean> mailingAddress;

    /**
     * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_address")
    private Optional<Boolean> filingAddress;

    /**
     * Datetime for when location is created
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    /**
     * Datetime for when location is updated
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("updated_at")
    private Optional<String> updatedAt;

    @JsonCreator
    public Location(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("phone_number") Optional<String> phoneNumber,
            @JsonProperty("street_1") Optional<String> street1,
            @JsonProperty("street_2") JsonNullable<String> street2,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("zip") Optional<String> zip,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("mailing_address") Optional<Boolean> mailingAddress,
            @JsonProperty("filing_address") Optional<Boolean> filingAddress,
            @JsonProperty("created_at") Optional<String> createdAt,
            @JsonProperty("updated_at") Optional<String> updatedAt) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        Utils.checkNotNull(street1, "street1");
        Utils.checkNotNull(street2, "street2");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(zip, "zip");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(mailingAddress, "mailingAddress");
        Utils.checkNotNull(filingAddress, "filingAddress");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.uuid = uuid;
        this.version = version;
        this.companyUuid = companyUuid;
        this.phoneNumber = phoneNumber;
        this.street1 = street1;
        this.street2 = street2;
        this.city = city;
        this.state = state;
        this.zip = zip;
        this.country = country;
        this.active = active;
        this.mailingAddress = mailingAddress;
        this.filingAddress = filingAddress;
        this.createdAt = createdAt;
        this.updatedAt = updatedAt;
    }
    
    public Location(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the location object.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The phone number for the location. Required for company locations. Optional for employee locations.
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    @JsonIgnore
    public Optional<String> street1() {
        return street1;
    }

    @JsonIgnore
    public JsonNullable<String> street2() {
        return street2;
    }

    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    @JsonIgnore
    public Optional<String> zip() {
        return zip;
    }

    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
     */
    @JsonIgnore
    public Optional<Boolean> mailingAddress() {
        return mailingAddress;
    }

    /**
     * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
     */
    @JsonIgnore
    public Optional<Boolean> filingAddress() {
        return filingAddress;
    }

    /**
     * Datetime for when location is created
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * Datetime for when location is updated
     */
    @JsonIgnore
    public Optional<String> updatedAt() {
        return updatedAt;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the location object.
     */
    public Location withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Location withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Location withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
     */
    public Location withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
     */
    public Location withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The phone number for the location. Required for company locations. Optional for employee locations.
     */
    public Location withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * The phone number for the location. Required for company locations. Optional for employee locations.
     */
    public Location withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }

    public Location withStreet1(String street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = Optional.ofNullable(street1);
        return this;
    }

    public Location withStreet1(Optional<String> street1) {
        Utils.checkNotNull(street1, "street1");
        this.street1 = street1;
        return this;
    }

    public Location withStreet2(String street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = JsonNullable.of(street2);
        return this;
    }

    public Location withStreet2(JsonNullable<String> street2) {
        Utils.checkNotNull(street2, "street2");
        this.street2 = street2;
        return this;
    }

    public Location withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    public Location withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    public Location withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    public Location withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public Location withZip(String zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = Optional.ofNullable(zip);
        return this;
    }

    public Location withZip(Optional<String> zip) {
        Utils.checkNotNull(zip, "zip");
        this.zip = zip;
        return this;
    }

    public Location withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    public Location withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
     */
    public Location withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
     */
    public Location withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
     */
    public Location withMailingAddress(boolean mailingAddress) {
        Utils.checkNotNull(mailingAddress, "mailingAddress");
        this.mailingAddress = Optional.ofNullable(mailingAddress);
        return this;
    }

    /**
     * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
     */
    public Location withMailingAddress(Optional<Boolean> mailingAddress) {
        Utils.checkNotNull(mailingAddress, "mailingAddress");
        this.mailingAddress = mailingAddress;
        return this;
    }

    /**
     * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
     */
    public Location withFilingAddress(boolean filingAddress) {
        Utils.checkNotNull(filingAddress, "filingAddress");
        this.filingAddress = Optional.ofNullable(filingAddress);
        return this;
    }

    /**
     * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
     */
    public Location withFilingAddress(Optional<Boolean> filingAddress) {
        Utils.checkNotNull(filingAddress, "filingAddress");
        this.filingAddress = filingAddress;
        return this;
    }

    /**
     * Datetime for when location is created
     */
    public Location withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Datetime for when location is created
     */
    public Location withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * Datetime for when location is updated
     */
    public Location withUpdatedAt(String updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = Optional.ofNullable(updatedAt);
        return this;
    }

    /**
     * Datetime for when location is updated
     */
    public Location withUpdatedAt(Optional<String> updatedAt) {
        Utils.checkNotNull(updatedAt, "updatedAt");
        this.updatedAt = updatedAt;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Location other = (Location) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber) &&
            Objects.deepEquals(this.street1, other.street1) &&
            Objects.deepEquals(this.street2, other.street2) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.zip, other.zip) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.mailingAddress, other.mailingAddress) &&
            Objects.deepEquals(this.filingAddress, other.filingAddress) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.updatedAt, other.updatedAt);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            version,
            companyUuid,
            phoneNumber,
            street1,
            street2,
            city,
            state,
            zip,
            country,
            active,
            mailingAddress,
            filingAddress,
            createdAt,
            updatedAt);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Location.class,
                "uuid", uuid,
                "version", version,
                "companyUuid", companyUuid,
                "phoneNumber", phoneNumber,
                "street1", street1,
                "street2", street2,
                "city", city,
                "state", state,
                "zip", zip,
                "country", country,
                "active", active,
                "mailingAddress", mailingAddress,
                "filingAddress", filingAddress,
                "createdAt", createdAt,
                "updatedAt", updatedAt);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> version = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();
 
        private Optional<String> street1 = Optional.empty();
 
        private JsonNullable<String> street2 = JsonNullable.undefined();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<String> zip = Optional.empty();
 
        private Optional<String> country;
 
        private Optional<Boolean> active = Optional.empty();
 
        private Optional<Boolean> mailingAddress = Optional.empty();
 
        private Optional<Boolean> filingAddress = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<String> updatedAt = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the location object.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * The UUID for the company to which the location belongs. Only included if the location belongs to a company.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The phone number for the location. Required for company locations. Optional for employee locations.
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * The phone number for the location. Required for company locations. Optional for employee locations.
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }

        public Builder street1(String street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = Optional.ofNullable(street1);
            return this;
        }

        public Builder street1(Optional<String> street1) {
            Utils.checkNotNull(street1, "street1");
            this.street1 = street1;
            return this;
        }

        public Builder street2(String street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = JsonNullable.of(street2);
            return this;
        }

        public Builder street2(JsonNullable<String> street2) {
            Utils.checkNotNull(street2, "street2");
            this.street2 = street2;
            return this;
        }

        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder zip(String zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = Optional.ofNullable(zip);
            return this;
        }

        public Builder zip(Optional<String> zip) {
            Utils.checkNotNull(zip, "zip");
            this.zip = zip;
            return this;
        }

        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * The status of the location. Inactive locations have been deleted, but may still have historical data associated with them.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
         */
        public Builder mailingAddress(boolean mailingAddress) {
            Utils.checkNotNull(mailingAddress, "mailingAddress");
            this.mailingAddress = Optional.ofNullable(mailingAddress);
            return this;
        }

        /**
         * Specifies if the location is the company's mailing address. Only included if the location belongs to a company.
         */
        public Builder mailingAddress(Optional<Boolean> mailingAddress) {
            Utils.checkNotNull(mailingAddress, "mailingAddress");
            this.mailingAddress = mailingAddress;
            return this;
        }

        /**
         * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
         */
        public Builder filingAddress(boolean filingAddress) {
            Utils.checkNotNull(filingAddress, "filingAddress");
            this.filingAddress = Optional.ofNullable(filingAddress);
            return this;
        }

        /**
         * Specifies if the location is the company's filing address. Only included if the location belongs to a company.
         */
        public Builder filingAddress(Optional<Boolean> filingAddress) {
            Utils.checkNotNull(filingAddress, "filingAddress");
            this.filingAddress = filingAddress;
            return this;
        }

        /**
         * Datetime for when location is created
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Datetime for when location is created
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * Datetime for when location is updated
         */
        public Builder updatedAt(String updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = Optional.ofNullable(updatedAt);
            return this;
        }

        /**
         * Datetime for when location is updated
         */
        public Builder updatedAt(Optional<String> updatedAt) {
            Utils.checkNotNull(updatedAt, "updatedAt");
            this.updatedAt = updatedAt;
            return this;
        }
        
        public Location build() {
            if (country == null) {
                country = _SINGLETON_VALUE_Country.value();
            }            return new Location(
                uuid,
                version,
                companyUuid,
                phoneNumber,
                street1,
                street2,
                city,
                state,
                zip,
                country,
                active,
                mailingAddress,
                filingAddress,
                createdAt,
                updatedAt);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_Country =
                new LazySingletonValue<>(
                        "country",
                        "\"USA\"",
                        new TypeReference<Optional<String>>() {});
    }
}

