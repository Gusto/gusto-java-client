/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * Garnishment - Garnishments, or employee deductions, are fixed amounts or percentages deducted from an employeeâ€™s pay. They can be deducted a specific number of times or on a recurring basis. Garnishments can also have maximum deductions on a yearly or per-pay-period bases. Common uses for garnishments are court-ordered payments for child support or back taxes. Some companies provide loans to their employees that are repaid via garnishments.
 */

public class Garnishment {

    /**
     * The UUID of the garnishment in Gusto.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * The UUID of the employee to which this garnishment belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * Whether or not this garnishment is currently active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * The description of the garnishment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether the garnishment is court ordered.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("court_ordered")
    private Optional<Boolean> courtOrdered;

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    private JsonNullable<Long> times;

    /**
     * Whether the garnishment should recur indefinitely.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring")
    private Optional<Boolean> recurring;

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annual_maximum")
    private JsonNullable<String> annualMaximum;

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private JsonNullable<String> totalAmount;

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_period_maximum")
    private JsonNullable<String> payPeriodMaximum;

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deduct_as_percentage")
    private Optional<Boolean> deductAsPercentage;

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("garnishment_type")
    private JsonNullable<? extends GarnishmentType> garnishmentType;

    /**
     * Additional child support order details
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_support")
    private JsonNullable<? extends GarnishmentChildSupport> childSupport;

    @JsonCreator
    public Garnishment(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("court_ordered") Optional<Boolean> courtOrdered,
            @JsonProperty("times") JsonNullable<Long> times,
            @JsonProperty("recurring") Optional<Boolean> recurring,
            @JsonProperty("annual_maximum") JsonNullable<String> annualMaximum,
            @JsonProperty("total_amount") JsonNullable<String> totalAmount,
            @JsonProperty("pay_period_maximum") JsonNullable<String> payPeriodMaximum,
            @JsonProperty("deduct_as_percentage") Optional<Boolean> deductAsPercentage,
            @JsonProperty("garnishment_type") JsonNullable<? extends GarnishmentType> garnishmentType,
            @JsonProperty("child_support") JsonNullable<? extends GarnishmentChildSupport> childSupport) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(courtOrdered, "courtOrdered");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(recurring, "recurring");
        Utils.checkNotNull(annualMaximum, "annualMaximum");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        Utils.checkNotNull(garnishmentType, "garnishmentType");
        Utils.checkNotNull(childSupport, "childSupport");
        this.uuid = uuid;
        this.version = version;
        this.employeeUuid = employeeUuid;
        this.active = active;
        this.amount = amount;
        this.description = description;
        this.courtOrdered = courtOrdered;
        this.times = times;
        this.recurring = recurring;
        this.annualMaximum = annualMaximum;
        this.totalAmount = totalAmount;
        this.payPeriodMaximum = payPeriodMaximum;
        this.deductAsPercentage = deductAsPercentage;
        this.garnishmentType = garnishmentType;
        this.childSupport = childSupport;
    }
    
    public Garnishment(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The UUID of the garnishment in Gusto.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * The UUID of the employee to which this garnishment belongs.
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * Whether or not this garnishment is currently active.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * The description of the garnishment.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether the garnishment is court ordered.
     */
    @JsonIgnore
    public Optional<Boolean> courtOrdered() {
        return courtOrdered;
    }

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    @JsonIgnore
    public JsonNullable<Long> times() {
        return times;
    }

    /**
     * Whether the garnishment should recur indefinitely.
     */
    @JsonIgnore
    public Optional<Boolean> recurring() {
        return recurring;
    }

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    @JsonIgnore
    public JsonNullable<String> annualMaximum() {
        return annualMaximum;
    }

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    @JsonIgnore
    public JsonNullable<String> totalAmount() {
        return totalAmount;
    }

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    @JsonIgnore
    public JsonNullable<String> payPeriodMaximum() {
        return payPeriodMaximum;
    }

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    @JsonIgnore
    public Optional<Boolean> deductAsPercentage() {
        return deductAsPercentage;
    }

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GarnishmentType> garnishmentType() {
        return (JsonNullable<GarnishmentType>) garnishmentType;
    }

    /**
     * Additional child support order details
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GarnishmentChildSupport> childSupport() {
        return (JsonNullable<GarnishmentChildSupport>) childSupport;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the garnishment in Gusto.
     */
    public Garnishment withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Garnishment withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Garnishment withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The UUID of the employee to which this garnishment belongs.
     */
    public Garnishment withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * The UUID of the employee to which this garnishment belongs.
     */
    public Garnishment withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * Whether or not this garnishment is currently active.
     */
    public Garnishment withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Whether or not this garnishment is currently active.
     */
    public Garnishment withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    public Garnishment withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    public Garnishment withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the garnishment.
     */
    public Garnishment withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the garnishment.
     */
    public Garnishment withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether the garnishment is court ordered.
     */
    public Garnishment withCourtOrdered(boolean courtOrdered) {
        Utils.checkNotNull(courtOrdered, "courtOrdered");
        this.courtOrdered = Optional.ofNullable(courtOrdered);
        return this;
    }

    /**
     * Whether the garnishment is court ordered.
     */
    public Garnishment withCourtOrdered(Optional<Boolean> courtOrdered) {
        Utils.checkNotNull(courtOrdered, "courtOrdered");
        this.courtOrdered = courtOrdered;
        return this;
    }

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    public Garnishment withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = JsonNullable.of(times);
        return this;
    }

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    public Garnishment withTimes(JsonNullable<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    /**
     * Whether the garnishment should recur indefinitely.
     */
    public Garnishment withRecurring(boolean recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = Optional.ofNullable(recurring);
        return this;
    }

    /**
     * Whether the garnishment should recur indefinitely.
     */
    public Garnishment withRecurring(Optional<Boolean> recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = recurring;
        return this;
    }

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    public Garnishment withAnnualMaximum(String annualMaximum) {
        Utils.checkNotNull(annualMaximum, "annualMaximum");
        this.annualMaximum = JsonNullable.of(annualMaximum);
        return this;
    }

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    public Garnishment withAnnualMaximum(JsonNullable<String> annualMaximum) {
        Utils.checkNotNull(annualMaximum, "annualMaximum");
        this.annualMaximum = annualMaximum;
        return this;
    }

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    public Garnishment withTotalAmount(String totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = JsonNullable.of(totalAmount);
        return this;
    }

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    public Garnishment withTotalAmount(JsonNullable<String> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    public Garnishment withPayPeriodMaximum(String payPeriodMaximum) {
        Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
        this.payPeriodMaximum = JsonNullable.of(payPeriodMaximum);
        return this;
    }

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    public Garnishment withPayPeriodMaximum(JsonNullable<String> payPeriodMaximum) {
        Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
        this.payPeriodMaximum = payPeriodMaximum;
        return this;
    }

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    public Garnishment withDeductAsPercentage(boolean deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
        return this;
    }

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    public Garnishment withDeductAsPercentage(Optional<Boolean> deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = deductAsPercentage;
        return this;
    }

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    public Garnishment withGarnishmentType(GarnishmentType garnishmentType) {
        Utils.checkNotNull(garnishmentType, "garnishmentType");
        this.garnishmentType = JsonNullable.of(garnishmentType);
        return this;
    }

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    public Garnishment withGarnishmentType(JsonNullable<? extends GarnishmentType> garnishmentType) {
        Utils.checkNotNull(garnishmentType, "garnishmentType");
        this.garnishmentType = garnishmentType;
        return this;
    }

    /**
     * Additional child support order details
     */
    public Garnishment withChildSupport(GarnishmentChildSupport childSupport) {
        Utils.checkNotNull(childSupport, "childSupport");
        this.childSupport = JsonNullable.of(childSupport);
        return this;
    }

    /**
     * Additional child support order details
     */
    public Garnishment withChildSupport(JsonNullable<? extends GarnishmentChildSupport> childSupport) {
        Utils.checkNotNull(childSupport, "childSupport");
        this.childSupport = childSupport;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Garnishment other = (Garnishment) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.courtOrdered, other.courtOrdered) &&
            Objects.deepEquals(this.times, other.times) &&
            Objects.deepEquals(this.recurring, other.recurring) &&
            Objects.deepEquals(this.annualMaximum, other.annualMaximum) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.payPeriodMaximum, other.payPeriodMaximum) &&
            Objects.deepEquals(this.deductAsPercentage, other.deductAsPercentage) &&
            Objects.deepEquals(this.garnishmentType, other.garnishmentType) &&
            Objects.deepEquals(this.childSupport, other.childSupport);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            version,
            employeeUuid,
            active,
            amount,
            description,
            courtOrdered,
            times,
            recurring,
            annualMaximum,
            totalAmount,
            payPeriodMaximum,
            deductAsPercentage,
            garnishmentType,
            childSupport);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Garnishment.class,
                "uuid", uuid,
                "version", version,
                "employeeUuid", employeeUuid,
                "active", active,
                "amount", amount,
                "description", description,
                "courtOrdered", courtOrdered,
                "times", times,
                "recurring", recurring,
                "annualMaximum", annualMaximum,
                "totalAmount", totalAmount,
                "payPeriodMaximum", payPeriodMaximum,
                "deductAsPercentage", deductAsPercentage,
                "garnishmentType", garnishmentType,
                "childSupport", childSupport);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> version = Optional.empty();
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<Boolean> active;
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Boolean> courtOrdered = Optional.empty();
 
        private JsonNullable<Long> times;
 
        private Optional<Boolean> recurring;
 
        private JsonNullable<String> annualMaximum;
 
        private JsonNullable<String> totalAmount;
 
        private JsonNullable<String> payPeriodMaximum;
 
        private Optional<Boolean> deductAsPercentage;
 
        private JsonNullable<? extends GarnishmentType> garnishmentType = JsonNullable.undefined();
 
        private JsonNullable<? extends GarnishmentChildSupport> childSupport = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the garnishment in Gusto.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The UUID of the employee to which this garnishment belongs.
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * The UUID of the employee to which this garnishment belongs.
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * Whether or not this garnishment is currently active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Whether or not this garnishment is currently active.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The description of the garnishment.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the garnishment.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether the garnishment is court ordered.
         */
        public Builder courtOrdered(boolean courtOrdered) {
            Utils.checkNotNull(courtOrdered, "courtOrdered");
            this.courtOrdered = Optional.ofNullable(courtOrdered);
            return this;
        }

        /**
         * Whether the garnishment is court ordered.
         */
        public Builder courtOrdered(Optional<Boolean> courtOrdered) {
            Utils.checkNotNull(courtOrdered, "courtOrdered");
            this.courtOrdered = courtOrdered;
            return this;
        }

        /**
         * The number of times to apply the garnishment. Ignored if recurring is true.
         */
        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = JsonNullable.of(times);
            return this;
        }

        /**
         * The number of times to apply the garnishment. Ignored if recurring is true.
         */
        public Builder times(JsonNullable<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }

        /**
         * Whether the garnishment should recur indefinitely.
         */
        public Builder recurring(boolean recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = Optional.ofNullable(recurring);
            return this;
        }

        /**
         * Whether the garnishment should recur indefinitely.
         */
        public Builder recurring(Optional<Boolean> recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = recurring;
            return this;
        }

        /**
         * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
         */
        public Builder annualMaximum(String annualMaximum) {
            Utils.checkNotNull(annualMaximum, "annualMaximum");
            this.annualMaximum = JsonNullable.of(annualMaximum);
            return this;
        }

        /**
         * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
         */
        public Builder annualMaximum(JsonNullable<String> annualMaximum) {
            Utils.checkNotNull(annualMaximum, "annualMaximum");
            this.annualMaximum = annualMaximum;
            return this;
        }

        /**
         * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
         */
        public Builder totalAmount(String totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = JsonNullable.of(totalAmount);
            return this;
        }

        /**
         * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
         */
        public Builder totalAmount(JsonNullable<String> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
         */
        public Builder payPeriodMaximum(String payPeriodMaximum) {
            Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
            this.payPeriodMaximum = JsonNullable.of(payPeriodMaximum);
            return this;
        }

        /**
         * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
         */
        public Builder payPeriodMaximum(JsonNullable<String> payPeriodMaximum) {
            Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
            this.payPeriodMaximum = payPeriodMaximum;
            return this;
        }

        /**
         * Whether the amount should be treated as a percentage to be deducted per pay period.
         */
        public Builder deductAsPercentage(boolean deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
            return this;
        }

        /**
         * Whether the amount should be treated as a percentage to be deducted per pay period.
         */
        public Builder deductAsPercentage(Optional<Boolean> deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }

        /**
         * The specific type of garnishment for court ordered garnishments.
         */
        public Builder garnishmentType(GarnishmentType garnishmentType) {
            Utils.checkNotNull(garnishmentType, "garnishmentType");
            this.garnishmentType = JsonNullable.of(garnishmentType);
            return this;
        }

        /**
         * The specific type of garnishment for court ordered garnishments.
         */
        public Builder garnishmentType(JsonNullable<? extends GarnishmentType> garnishmentType) {
            Utils.checkNotNull(garnishmentType, "garnishmentType");
            this.garnishmentType = garnishmentType;
            return this;
        }

        /**
         * Additional child support order details
         */
        public Builder childSupport(GarnishmentChildSupport childSupport) {
            Utils.checkNotNull(childSupport, "childSupport");
            this.childSupport = JsonNullable.of(childSupport);
            return this;
        }

        /**
         * Additional child support order details
         */
        public Builder childSupport(JsonNullable<? extends GarnishmentChildSupport> childSupport) {
            Utils.checkNotNull(childSupport, "childSupport");
            this.childSupport = childSupport;
            return this;
        }
        
        public Garnishment build() {
            if (active == null) {
                active = _SINGLETON_VALUE_Active.value();
            }
            if (times == null) {
                times = _SINGLETON_VALUE_Times.value();
            }
            if (recurring == null) {
                recurring = _SINGLETON_VALUE_Recurring.value();
            }
            if (annualMaximum == null) {
                annualMaximum = _SINGLETON_VALUE_AnnualMaximum.value();
            }
            if (totalAmount == null) {
                totalAmount = _SINGLETON_VALUE_TotalAmount.value();
            }
            if (payPeriodMaximum == null) {
                payPeriodMaximum = _SINGLETON_VALUE_PayPeriodMaximum.value();
            }
            if (deductAsPercentage == null) {
                deductAsPercentage = _SINGLETON_VALUE_DeductAsPercentage.value();
            }            return new Garnishment(
                uuid,
                version,
                employeeUuid,
                active,
                amount,
                description,
                courtOrdered,
                times,
                recurring,
                annualMaximum,
                totalAmount,
                payPeriodMaximum,
                deductAsPercentage,
                garnishmentType,
                childSupport);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Active =
                new LazySingletonValue<>(
                        "active",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<Long>> _SINGLETON_VALUE_Times =
                new LazySingletonValue<>(
                        "times",
                        "null",
                        new TypeReference<JsonNullable<Long>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Recurring =
                new LazySingletonValue<>(
                        "recurring",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_AnnualMaximum =
                new LazySingletonValue<>(
                        "annual_maximum",
                        "null",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_TotalAmount =
                new LazySingletonValue<>(
                        "total_amount",
                        "null",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_PayPeriodMaximum =
                new LazySingletonValue<>(
                        "pay_period_maximum",
                        "null",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_DeductAsPercentage =
                new LazySingletonValue<>(
                        "deduct_as_percentage",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

