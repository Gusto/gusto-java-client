/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * AchTransaction - Representation of an ACH transaction
 */

public class AchTransaction {

    /**
     * Unique identifier of an ACH transaction
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * Unique identifier of the company to which the ACH transaction belongs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The type of payment event associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_event_type")
    private Optional<? extends PaymentEventType> paymentEventType;

    /**
     * Unique identifier for the payment event associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_event_uuid")
    private Optional<String> paymentEventUuid;

    /**
     * The type of recipient associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_type")
    private Optional<? extends AchTransactionRecipientType> recipientType;

    /**
     * Unique identifier for the recipient associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_uuid")
    private Optional<String> recipientUuid;

    /**
     * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_code")
    private Optional<String> errorCode;

    /**
     * The type of transaction associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transaction_type")
    private Optional<String> transactionType;

    /**
     * The status of the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_status")
    private Optional<? extends PaymentStatus> paymentStatus;

    /**
     * The direction of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_direction")
    private Optional<? extends PaymentDirection> paymentDirection;

    /**
     * The date of the payment event check associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_event_check_date")
    private Optional<String> paymentEventCheckDate;

    /**
     * The date of the payment associated with the ACH transaction
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_date")
    private Optional<String> paymentDate;

    /**
     * The amount of money moved by the ACH transaction. This amount is always non-negative.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    @JsonCreator
    public AchTransaction(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("payment_event_type") Optional<? extends PaymentEventType> paymentEventType,
            @JsonProperty("payment_event_uuid") Optional<String> paymentEventUuid,
            @JsonProperty("recipient_type") Optional<? extends AchTransactionRecipientType> recipientType,
            @JsonProperty("recipient_uuid") Optional<String> recipientUuid,
            @JsonProperty("error_code") Optional<String> errorCode,
            @JsonProperty("transaction_type") Optional<String> transactionType,
            @JsonProperty("payment_status") Optional<? extends PaymentStatus> paymentStatus,
            @JsonProperty("payment_direction") Optional<? extends PaymentDirection> paymentDirection,
            @JsonProperty("payment_event_check_date") Optional<String> paymentEventCheckDate,
            @JsonProperty("payment_date") Optional<String> paymentDate,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("description") Optional<String> description) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(paymentEventType, "paymentEventType");
        Utils.checkNotNull(paymentEventUuid, "paymentEventUuid");
        Utils.checkNotNull(recipientType, "recipientType");
        Utils.checkNotNull(recipientUuid, "recipientUuid");
        Utils.checkNotNull(errorCode, "errorCode");
        Utils.checkNotNull(transactionType, "transactionType");
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        Utils.checkNotNull(paymentDirection, "paymentDirection");
        Utils.checkNotNull(paymentEventCheckDate, "paymentEventCheckDate");
        Utils.checkNotNull(paymentDate, "paymentDate");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.paymentEventType = paymentEventType;
        this.paymentEventUuid = paymentEventUuid;
        this.recipientType = recipientType;
        this.recipientUuid = recipientUuid;
        this.errorCode = errorCode;
        this.transactionType = transactionType;
        this.paymentStatus = paymentStatus;
        this.paymentDirection = paymentDirection;
        this.paymentEventCheckDate = paymentEventCheckDate;
        this.paymentDate = paymentDate;
        this.amount = amount;
        this.description = description;
    }
    
    public AchTransaction(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of an ACH transaction
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * Unique identifier of the company to which the ACH transaction belongs
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The type of payment event associated with the ACH transaction
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentEventType> paymentEventType() {
        return (Optional<PaymentEventType>) paymentEventType;
    }

    /**
     * Unique identifier for the payment event associated with the ACH transaction
     */
    @JsonIgnore
    public Optional<String> paymentEventUuid() {
        return paymentEventUuid;
    }

    /**
     * The type of recipient associated with the ACH transaction
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<AchTransactionRecipientType> recipientType() {
        return (Optional<AchTransactionRecipientType>) recipientType;
    }

    /**
     * Unique identifier for the recipient associated with the ACH transaction
     */
    @JsonIgnore
    public Optional<String> recipientUuid() {
        return recipientUuid;
    }

    /**
     * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
     */
    @JsonIgnore
    public Optional<String> errorCode() {
        return errorCode;
    }

    /**
     * The type of transaction associated with the ACH transaction
     */
    @JsonIgnore
    public Optional<String> transactionType() {
        return transactionType;
    }

    /**
     * The status of the ACH transaction
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentStatus> paymentStatus() {
        return (Optional<PaymentStatus>) paymentStatus;
    }

    /**
     * The direction of the payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentDirection> paymentDirection() {
        return (Optional<PaymentDirection>) paymentDirection;
    }

    /**
     * The date of the payment event check associated with the ACH transaction
     */
    @JsonIgnore
    public Optional<String> paymentEventCheckDate() {
        return paymentEventCheckDate;
    }

    /**
     * The date of the payment associated with the ACH transaction
     */
    @JsonIgnore
    public Optional<String> paymentDate() {
        return paymentDate;
    }

    /**
     * The amount of money moved by the ACH transaction. This amount is always non-negative.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of an ACH transaction
     */
    public AchTransaction withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Unique identifier of the company to which the ACH transaction belongs
     */
    public AchTransaction withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * Unique identifier of the company to which the ACH transaction belongs
     */
    public AchTransaction withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The type of payment event associated with the ACH transaction
     */
    public AchTransaction withPaymentEventType(PaymentEventType paymentEventType) {
        Utils.checkNotNull(paymentEventType, "paymentEventType");
        this.paymentEventType = Optional.ofNullable(paymentEventType);
        return this;
    }

    /**
     * The type of payment event associated with the ACH transaction
     */
    public AchTransaction withPaymentEventType(Optional<? extends PaymentEventType> paymentEventType) {
        Utils.checkNotNull(paymentEventType, "paymentEventType");
        this.paymentEventType = paymentEventType;
        return this;
    }

    /**
     * Unique identifier for the payment event associated with the ACH transaction
     */
    public AchTransaction withPaymentEventUuid(String paymentEventUuid) {
        Utils.checkNotNull(paymentEventUuid, "paymentEventUuid");
        this.paymentEventUuid = Optional.ofNullable(paymentEventUuid);
        return this;
    }

    /**
     * Unique identifier for the payment event associated with the ACH transaction
     */
    public AchTransaction withPaymentEventUuid(Optional<String> paymentEventUuid) {
        Utils.checkNotNull(paymentEventUuid, "paymentEventUuid");
        this.paymentEventUuid = paymentEventUuid;
        return this;
    }

    /**
     * The type of recipient associated with the ACH transaction
     */
    public AchTransaction withRecipientType(AchTransactionRecipientType recipientType) {
        Utils.checkNotNull(recipientType, "recipientType");
        this.recipientType = Optional.ofNullable(recipientType);
        return this;
    }

    /**
     * The type of recipient associated with the ACH transaction
     */
    public AchTransaction withRecipientType(Optional<? extends AchTransactionRecipientType> recipientType) {
        Utils.checkNotNull(recipientType, "recipientType");
        this.recipientType = recipientType;
        return this;
    }

    /**
     * Unique identifier for the recipient associated with the ACH transaction
     */
    public AchTransaction withRecipientUuid(String recipientUuid) {
        Utils.checkNotNull(recipientUuid, "recipientUuid");
        this.recipientUuid = Optional.ofNullable(recipientUuid);
        return this;
    }

    /**
     * Unique identifier for the recipient associated with the ACH transaction
     */
    public AchTransaction withRecipientUuid(Optional<String> recipientUuid) {
        Utils.checkNotNull(recipientUuid, "recipientUuid");
        this.recipientUuid = recipientUuid;
        return this;
    }

    /**
     * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
     */
    public AchTransaction withErrorCode(String errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = Optional.ofNullable(errorCode);
        return this;
    }

    /**
     * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
     */
    public AchTransaction withErrorCode(Optional<String> errorCode) {
        Utils.checkNotNull(errorCode, "errorCode");
        this.errorCode = errorCode;
        return this;
    }

    /**
     * The type of transaction associated with the ACH transaction
     */
    public AchTransaction withTransactionType(String transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = Optional.ofNullable(transactionType);
        return this;
    }

    /**
     * The type of transaction associated with the ACH transaction
     */
    public AchTransaction withTransactionType(Optional<String> transactionType) {
        Utils.checkNotNull(transactionType, "transactionType");
        this.transactionType = transactionType;
        return this;
    }

    /**
     * The status of the ACH transaction
     */
    public AchTransaction withPaymentStatus(PaymentStatus paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = Optional.ofNullable(paymentStatus);
        return this;
    }

    /**
     * The status of the ACH transaction
     */
    public AchTransaction withPaymentStatus(Optional<? extends PaymentStatus> paymentStatus) {
        Utils.checkNotNull(paymentStatus, "paymentStatus");
        this.paymentStatus = paymentStatus;
        return this;
    }

    /**
     * The direction of the payment
     */
    public AchTransaction withPaymentDirection(PaymentDirection paymentDirection) {
        Utils.checkNotNull(paymentDirection, "paymentDirection");
        this.paymentDirection = Optional.ofNullable(paymentDirection);
        return this;
    }

    /**
     * The direction of the payment
     */
    public AchTransaction withPaymentDirection(Optional<? extends PaymentDirection> paymentDirection) {
        Utils.checkNotNull(paymentDirection, "paymentDirection");
        this.paymentDirection = paymentDirection;
        return this;
    }

    /**
     * The date of the payment event check associated with the ACH transaction
     */
    public AchTransaction withPaymentEventCheckDate(String paymentEventCheckDate) {
        Utils.checkNotNull(paymentEventCheckDate, "paymentEventCheckDate");
        this.paymentEventCheckDate = Optional.ofNullable(paymentEventCheckDate);
        return this;
    }

    /**
     * The date of the payment event check associated with the ACH transaction
     */
    public AchTransaction withPaymentEventCheckDate(Optional<String> paymentEventCheckDate) {
        Utils.checkNotNull(paymentEventCheckDate, "paymentEventCheckDate");
        this.paymentEventCheckDate = paymentEventCheckDate;
        return this;
    }

    /**
     * The date of the payment associated with the ACH transaction
     */
    public AchTransaction withPaymentDate(String paymentDate) {
        Utils.checkNotNull(paymentDate, "paymentDate");
        this.paymentDate = Optional.ofNullable(paymentDate);
        return this;
    }

    /**
     * The date of the payment associated with the ACH transaction
     */
    public AchTransaction withPaymentDate(Optional<String> paymentDate) {
        Utils.checkNotNull(paymentDate, "paymentDate");
        this.paymentDate = paymentDate;
        return this;
    }

    /**
     * The amount of money moved by the ACH transaction. This amount is always non-negative.
     */
    public AchTransaction withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of money moved by the ACH transaction. This amount is always non-negative.
     */
    public AchTransaction withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.
     */
    public AchTransaction withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.
     */
    public AchTransaction withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AchTransaction other = (AchTransaction) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.paymentEventType, other.paymentEventType) &&
            Objects.deepEquals(this.paymentEventUuid, other.paymentEventUuid) &&
            Objects.deepEquals(this.recipientType, other.recipientType) &&
            Objects.deepEquals(this.recipientUuid, other.recipientUuid) &&
            Objects.deepEquals(this.errorCode, other.errorCode) &&
            Objects.deepEquals(this.transactionType, other.transactionType) &&
            Objects.deepEquals(this.paymentStatus, other.paymentStatus) &&
            Objects.deepEquals(this.paymentDirection, other.paymentDirection) &&
            Objects.deepEquals(this.paymentEventCheckDate, other.paymentEventCheckDate) &&
            Objects.deepEquals(this.paymentDate, other.paymentDate) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            paymentEventType,
            paymentEventUuid,
            recipientType,
            recipientUuid,
            errorCode,
            transactionType,
            paymentStatus,
            paymentDirection,
            paymentEventCheckDate,
            paymentDate,
            amount,
            description);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AchTransaction.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "paymentEventType", paymentEventType,
                "paymentEventUuid", paymentEventUuid,
                "recipientType", recipientType,
                "recipientUuid", recipientUuid,
                "errorCode", errorCode,
                "transactionType", transactionType,
                "paymentStatus", paymentStatus,
                "paymentDirection", paymentDirection,
                "paymentEventCheckDate", paymentEventCheckDate,
                "paymentDate", paymentDate,
                "amount", amount,
                "description", description);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<? extends PaymentEventType> paymentEventType = Optional.empty();
 
        private Optional<String> paymentEventUuid = Optional.empty();
 
        private Optional<? extends AchTransactionRecipientType> recipientType = Optional.empty();
 
        private Optional<String> recipientUuid = Optional.empty();
 
        private Optional<String> errorCode = Optional.empty();
 
        private Optional<String> transactionType = Optional.empty();
 
        private Optional<? extends PaymentStatus> paymentStatus = Optional.empty();
 
        private Optional<? extends PaymentDirection> paymentDirection = Optional.empty();
 
        private Optional<String> paymentEventCheckDate = Optional.empty();
 
        private Optional<String> paymentDate = Optional.empty();
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> description = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of an ACH transaction
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Unique identifier of the company to which the ACH transaction belongs
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * Unique identifier of the company to which the ACH transaction belongs
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The type of payment event associated with the ACH transaction
         */
        public Builder paymentEventType(PaymentEventType paymentEventType) {
            Utils.checkNotNull(paymentEventType, "paymentEventType");
            this.paymentEventType = Optional.ofNullable(paymentEventType);
            return this;
        }

        /**
         * The type of payment event associated with the ACH transaction
         */
        public Builder paymentEventType(Optional<? extends PaymentEventType> paymentEventType) {
            Utils.checkNotNull(paymentEventType, "paymentEventType");
            this.paymentEventType = paymentEventType;
            return this;
        }

        /**
         * Unique identifier for the payment event associated with the ACH transaction
         */
        public Builder paymentEventUuid(String paymentEventUuid) {
            Utils.checkNotNull(paymentEventUuid, "paymentEventUuid");
            this.paymentEventUuid = Optional.ofNullable(paymentEventUuid);
            return this;
        }

        /**
         * Unique identifier for the payment event associated with the ACH transaction
         */
        public Builder paymentEventUuid(Optional<String> paymentEventUuid) {
            Utils.checkNotNull(paymentEventUuid, "paymentEventUuid");
            this.paymentEventUuid = paymentEventUuid;
            return this;
        }

        /**
         * The type of recipient associated with the ACH transaction
         */
        public Builder recipientType(AchTransactionRecipientType recipientType) {
            Utils.checkNotNull(recipientType, "recipientType");
            this.recipientType = Optional.ofNullable(recipientType);
            return this;
        }

        /**
         * The type of recipient associated with the ACH transaction
         */
        public Builder recipientType(Optional<? extends AchTransactionRecipientType> recipientType) {
            Utils.checkNotNull(recipientType, "recipientType");
            this.recipientType = recipientType;
            return this;
        }

        /**
         * Unique identifier for the recipient associated with the ACH transaction
         */
        public Builder recipientUuid(String recipientUuid) {
            Utils.checkNotNull(recipientUuid, "recipientUuid");
            this.recipientUuid = Optional.ofNullable(recipientUuid);
            return this;
        }

        /**
         * Unique identifier for the recipient associated with the ACH transaction
         */
        public Builder recipientUuid(Optional<String> recipientUuid) {
            Utils.checkNotNull(recipientUuid, "recipientUuid");
            this.recipientUuid = recipientUuid;
            return this;
        }

        /**
         * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
         */
        public Builder errorCode(String errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = Optional.ofNullable(errorCode);
            return this;
        }

        /**
         * The error code associated with the ACH transaction, if any. If there is no error on the ACH transaction, this field will be nil. See [this article](https://engineering.gusto.com/how-ach-works-a-developer-perspective-part-2/) for a complete list of ACH return codes.
         */
        public Builder errorCode(Optional<String> errorCode) {
            Utils.checkNotNull(errorCode, "errorCode");
            this.errorCode = errorCode;
            return this;
        }

        /**
         * The type of transaction associated with the ACH transaction
         */
        public Builder transactionType(String transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = Optional.ofNullable(transactionType);
            return this;
        }

        /**
         * The type of transaction associated with the ACH transaction
         */
        public Builder transactionType(Optional<String> transactionType) {
            Utils.checkNotNull(transactionType, "transactionType");
            this.transactionType = transactionType;
            return this;
        }

        /**
         * The status of the ACH transaction
         */
        public Builder paymentStatus(PaymentStatus paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = Optional.ofNullable(paymentStatus);
            return this;
        }

        /**
         * The status of the ACH transaction
         */
        public Builder paymentStatus(Optional<? extends PaymentStatus> paymentStatus) {
            Utils.checkNotNull(paymentStatus, "paymentStatus");
            this.paymentStatus = paymentStatus;
            return this;
        }

        /**
         * The direction of the payment
         */
        public Builder paymentDirection(PaymentDirection paymentDirection) {
            Utils.checkNotNull(paymentDirection, "paymentDirection");
            this.paymentDirection = Optional.ofNullable(paymentDirection);
            return this;
        }

        /**
         * The direction of the payment
         */
        public Builder paymentDirection(Optional<? extends PaymentDirection> paymentDirection) {
            Utils.checkNotNull(paymentDirection, "paymentDirection");
            this.paymentDirection = paymentDirection;
            return this;
        }

        /**
         * The date of the payment event check associated with the ACH transaction
         */
        public Builder paymentEventCheckDate(String paymentEventCheckDate) {
            Utils.checkNotNull(paymentEventCheckDate, "paymentEventCheckDate");
            this.paymentEventCheckDate = Optional.ofNullable(paymentEventCheckDate);
            return this;
        }

        /**
         * The date of the payment event check associated with the ACH transaction
         */
        public Builder paymentEventCheckDate(Optional<String> paymentEventCheckDate) {
            Utils.checkNotNull(paymentEventCheckDate, "paymentEventCheckDate");
            this.paymentEventCheckDate = paymentEventCheckDate;
            return this;
        }

        /**
         * The date of the payment associated with the ACH transaction
         */
        public Builder paymentDate(String paymentDate) {
            Utils.checkNotNull(paymentDate, "paymentDate");
            this.paymentDate = Optional.ofNullable(paymentDate);
            return this;
        }

        /**
         * The date of the payment associated with the ACH transaction
         */
        public Builder paymentDate(Optional<String> paymentDate) {
            Utils.checkNotNull(paymentDate, "paymentDate");
            this.paymentDate = paymentDate;
            return this;
        }

        /**
         * The amount of money moved by the ACH transaction. This amount is always non-negative.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of money moved by the ACH transaction. This amount is always non-negative.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the ACH transaction. Can be used to identify the ACH transaction on the recipient's bank statement.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }
        
        public AchTransaction build() {
            return new AchTransaction(
                uuid,
                companyUuid,
                paymentEventType,
                paymentEventUuid,
                recipientType,
                recipientUuid,
                errorCode,
                transactionType,
                paymentStatus,
                paymentDirection,
                paymentEventCheckDate,
                paymentDate,
                amount,
                description);
        }
    }
}

