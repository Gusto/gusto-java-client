/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class PutV1TerminationsEmployeeIdRequestBody {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    /**
     * The employee's last day of work.
     */
    @JsonProperty("effective_date")
    private String effectiveDate;

    /**
     * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("run_termination_payroll")
    private Optional<Boolean> runTerminationPayroll;

    @JsonCreator
    public PutV1TerminationsEmployeeIdRequestBody(
            @JsonProperty("version") String version,
            @JsonProperty("effective_date") String effectiveDate,
            @JsonProperty("run_termination_payroll") Optional<Boolean> runTerminationPayroll) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(runTerminationPayroll, "runTerminationPayroll");
        this.version = version;
        this.effectiveDate = effectiveDate;
        this.runTerminationPayroll = runTerminationPayroll;
    }
    
    public PutV1TerminationsEmployeeIdRequestBody(
            String version,
            String effectiveDate) {
        this(version, effectiveDate, Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * The employee's last day of work.
     */
    @JsonIgnore
    public String effectiveDate() {
        return effectiveDate;
    }

    /**
     * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
     */
    @JsonIgnore
    public Optional<Boolean> runTerminationPayroll() {
        return runTerminationPayroll;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public PutV1TerminationsEmployeeIdRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The employee's last day of work.
     */
    public PutV1TerminationsEmployeeIdRequestBody withEffectiveDate(String effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
     */
    public PutV1TerminationsEmployeeIdRequestBody withRunTerminationPayroll(boolean runTerminationPayroll) {
        Utils.checkNotNull(runTerminationPayroll, "runTerminationPayroll");
        this.runTerminationPayroll = Optional.ofNullable(runTerminationPayroll);
        return this;
    }

    /**
     * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
     */
    public PutV1TerminationsEmployeeIdRequestBody withRunTerminationPayroll(Optional<Boolean> runTerminationPayroll) {
        Utils.checkNotNull(runTerminationPayroll, "runTerminationPayroll");
        this.runTerminationPayroll = runTerminationPayroll;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1TerminationsEmployeeIdRequestBody other = (PutV1TerminationsEmployeeIdRequestBody) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.runTerminationPayroll, other.runTerminationPayroll);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            effectiveDate,
            runTerminationPayroll);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1TerminationsEmployeeIdRequestBody.class,
                "version", version,
                "effectiveDate", effectiveDate,
                "runTerminationPayroll", runTerminationPayroll);
    }
    
    public final static class Builder {
 
        private String version;
 
        private String effectiveDate;
 
        private Optional<Boolean> runTerminationPayroll = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The employee's last day of work.
         */
        public Builder effectiveDate(String effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
         */
        public Builder runTerminationPayroll(boolean runTerminationPayroll) {
            Utils.checkNotNull(runTerminationPayroll, "runTerminationPayroll");
            this.runTerminationPayroll = Optional.ofNullable(runTerminationPayroll);
            return this;
        }

        /**
         * If true, the employee should receive their final wages via an off-cycle payroll. If false, they should receive their final wages on their current pay schedule.
         */
        public Builder runTerminationPayroll(Optional<Boolean> runTerminationPayroll) {
            Utils.checkNotNull(runTerminationPayroll, "runTerminationPayroll");
            this.runTerminationPayroll = runTerminationPayroll;
            return this;
        }
        
        public PutV1TerminationsEmployeeIdRequestBody build() {
            return new PutV1TerminationsEmployeeIdRequestBody(
                version,
                effectiveDate,
                runTerminationPayroll);
        }
    }
}

