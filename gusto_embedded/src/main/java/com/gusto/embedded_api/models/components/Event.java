/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * Event
 * 
 * <p>Representation of an Event
 */

public class Event {

    /**
     * Unique identifier for the event.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * Description of the event (e.g., payroll.submitted, or company.form.signed).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_type")
    private Optional<String> eventType;

    /**
     * Name of the parent resource of the described entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_type")
    private Optional<? extends ResourceType> resourceType;

    /**
     * Unique identifier for the parent resource.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resource_uuid")
    private Optional<String> resourceUuid;

    /**
     * Name of the entity that the event corresponds to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity_type")
    private Optional<String> entityType;

    /**
     * Unique identifier for the entity.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity_uuid")
    private Optional<String> entityUuid;

    /**
     * Time at which this event was created. Measured in seconds since the Unix epoch.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("timestamp")
    private Optional<Long> timestamp;

    @JsonCreator
    public Event(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("event_type") Optional<String> eventType,
            @JsonProperty("resource_type") Optional<? extends ResourceType> resourceType,
            @JsonProperty("resource_uuid") Optional<String> resourceUuid,
            @JsonProperty("entity_type") Optional<String> entityType,
            @JsonProperty("entity_uuid") Optional<String> entityUuid,
            @JsonProperty("timestamp") Optional<Long> timestamp) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(eventType, "eventType");
        Utils.checkNotNull(resourceType, "resourceType");
        Utils.checkNotNull(resourceUuid, "resourceUuid");
        Utils.checkNotNull(entityType, "entityType");
        Utils.checkNotNull(entityUuid, "entityUuid");
        Utils.checkNotNull(timestamp, "timestamp");
        this.uuid = uuid;
        this.eventType = eventType;
        this.resourceType = resourceType;
        this.resourceUuid = resourceUuid;
        this.entityType = entityType;
        this.entityUuid = entityUuid;
        this.timestamp = timestamp;
    }
    
    public Event(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for the event.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * Description of the event (e.g., payroll.submitted, or company.form.signed).
     */
    @JsonIgnore
    public Optional<String> eventType() {
        return eventType;
    }

    /**
     * Name of the parent resource of the described entity.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceType> resourceType() {
        return (Optional<ResourceType>) resourceType;
    }

    /**
     * Unique identifier for the parent resource.
     */
    @JsonIgnore
    public Optional<String> resourceUuid() {
        return resourceUuid;
    }

    /**
     * Name of the entity that the event corresponds to.
     */
    @JsonIgnore
    public Optional<String> entityType() {
        return entityType;
    }

    /**
     * Unique identifier for the entity.
     */
    @JsonIgnore
    public Optional<String> entityUuid() {
        return entityUuid;
    }

    /**
     * Time at which this event was created. Measured in seconds since the Unix epoch.
     */
    @JsonIgnore
    public Optional<Long> timestamp() {
        return timestamp;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for the event.
     */
    public Event withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Description of the event (e.g., payroll.submitted, or company.form.signed).
     */
    public Event withEventType(String eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = Optional.ofNullable(eventType);
        return this;
    }

    /**
     * Description of the event (e.g., payroll.submitted, or company.form.signed).
     */
    public Event withEventType(Optional<String> eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = eventType;
        return this;
    }

    /**
     * Name of the parent resource of the described entity.
     */
    public Event withResourceType(ResourceType resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = Optional.ofNullable(resourceType);
        return this;
    }

    /**
     * Name of the parent resource of the described entity.
     */
    public Event withResourceType(Optional<? extends ResourceType> resourceType) {
        Utils.checkNotNull(resourceType, "resourceType");
        this.resourceType = resourceType;
        return this;
    }

    /**
     * Unique identifier for the parent resource.
     */
    public Event withResourceUuid(String resourceUuid) {
        Utils.checkNotNull(resourceUuid, "resourceUuid");
        this.resourceUuid = Optional.ofNullable(resourceUuid);
        return this;
    }

    /**
     * Unique identifier for the parent resource.
     */
    public Event withResourceUuid(Optional<String> resourceUuid) {
        Utils.checkNotNull(resourceUuid, "resourceUuid");
        this.resourceUuid = resourceUuid;
        return this;
    }

    /**
     * Name of the entity that the event corresponds to.
     */
    public Event withEntityType(String entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = Optional.ofNullable(entityType);
        return this;
    }

    /**
     * Name of the entity that the event corresponds to.
     */
    public Event withEntityType(Optional<String> entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = entityType;
        return this;
    }

    /**
     * Unique identifier for the entity.
     */
    public Event withEntityUuid(String entityUuid) {
        Utils.checkNotNull(entityUuid, "entityUuid");
        this.entityUuid = Optional.ofNullable(entityUuid);
        return this;
    }

    /**
     * Unique identifier for the entity.
     */
    public Event withEntityUuid(Optional<String> entityUuid) {
        Utils.checkNotNull(entityUuid, "entityUuid");
        this.entityUuid = entityUuid;
        return this;
    }

    /**
     * Time at which this event was created. Measured in seconds since the Unix epoch.
     */
    public Event withTimestamp(long timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = Optional.ofNullable(timestamp);
        return this;
    }

    /**
     * Time at which this event was created. Measured in seconds since the Unix epoch.
     */
    public Event withTimestamp(Optional<Long> timestamp) {
        Utils.checkNotNull(timestamp, "timestamp");
        this.timestamp = timestamp;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Event other = (Event) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.eventType, other.eventType) &&
            Objects.deepEquals(this.resourceType, other.resourceType) &&
            Objects.deepEquals(this.resourceUuid, other.resourceUuid) &&
            Objects.deepEquals(this.entityType, other.entityType) &&
            Objects.deepEquals(this.entityUuid, other.entityUuid) &&
            Objects.deepEquals(this.timestamp, other.timestamp);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            eventType,
            resourceType,
            resourceUuid,
            entityType,
            entityUuid,
            timestamp);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Event.class,
                "uuid", uuid,
                "eventType", eventType,
                "resourceType", resourceType,
                "resourceUuid", resourceUuid,
                "entityType", entityType,
                "entityUuid", entityUuid,
                "timestamp", timestamp);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> eventType = Optional.empty();
 
        private Optional<? extends ResourceType> resourceType = Optional.empty();
 
        private Optional<String> resourceUuid = Optional.empty();
 
        private Optional<String> entityType = Optional.empty();
 
        private Optional<String> entityUuid = Optional.empty();
 
        private Optional<Long> timestamp = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for the event.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Description of the event (e.g., payroll.submitted, or company.form.signed).
         */
        public Builder eventType(String eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * Description of the event (e.g., payroll.submitted, or company.form.signed).
         */
        public Builder eventType(Optional<String> eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = eventType;
            return this;
        }

        /**
         * Name of the parent resource of the described entity.
         */
        public Builder resourceType(ResourceType resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = Optional.ofNullable(resourceType);
            return this;
        }

        /**
         * Name of the parent resource of the described entity.
         */
        public Builder resourceType(Optional<? extends ResourceType> resourceType) {
            Utils.checkNotNull(resourceType, "resourceType");
            this.resourceType = resourceType;
            return this;
        }

        /**
         * Unique identifier for the parent resource.
         */
        public Builder resourceUuid(String resourceUuid) {
            Utils.checkNotNull(resourceUuid, "resourceUuid");
            this.resourceUuid = Optional.ofNullable(resourceUuid);
            return this;
        }

        /**
         * Unique identifier for the parent resource.
         */
        public Builder resourceUuid(Optional<String> resourceUuid) {
            Utils.checkNotNull(resourceUuid, "resourceUuid");
            this.resourceUuid = resourceUuid;
            return this;
        }

        /**
         * Name of the entity that the event corresponds to.
         */
        public Builder entityType(String entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = Optional.ofNullable(entityType);
            return this;
        }

        /**
         * Name of the entity that the event corresponds to.
         */
        public Builder entityType(Optional<String> entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = entityType;
            return this;
        }

        /**
         * Unique identifier for the entity.
         */
        public Builder entityUuid(String entityUuid) {
            Utils.checkNotNull(entityUuid, "entityUuid");
            this.entityUuid = Optional.ofNullable(entityUuid);
            return this;
        }

        /**
         * Unique identifier for the entity.
         */
        public Builder entityUuid(Optional<String> entityUuid) {
            Utils.checkNotNull(entityUuid, "entityUuid");
            this.entityUuid = entityUuid;
            return this;
        }

        /**
         * Time at which this event was created. Measured in seconds since the Unix epoch.
         */
        public Builder timestamp(long timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = Optional.ofNullable(timestamp);
            return this;
        }

        /**
         * Time at which this event was created. Measured in seconds since the Unix epoch.
         */
        public Builder timestamp(Optional<Long> timestamp) {
            Utils.checkNotNull(timestamp, "timestamp");
            this.timestamp = timestamp;
            return this;
        }
        
        public Event build() {
            return new Event(
                uuid,
                eventType,
                resourceType,
                resourceUuid,
                entityType,
                entityUuid,
                timestamp);
        }
    }
}

