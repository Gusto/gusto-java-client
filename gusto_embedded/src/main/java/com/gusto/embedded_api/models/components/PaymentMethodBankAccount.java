/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * PaymentMethodBankAccount - Representation of a bank account item
 */

public class PaymentMethodBankAccount {

    /**
     * The bank account ID
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The bank account name
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Masked bank account number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hidden_account_number")
    private Optional<String> hiddenAccountNumber;

    /**
     * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("priority")
    private Optional<Long> priority;

    /**
     * The cents amount allocated for each payment split
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("split_amount")
    private JsonNullable<Long> splitAmount;

    @JsonCreator
    public PaymentMethodBankAccount(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("hidden_account_number") Optional<String> hiddenAccountNumber,
            @JsonProperty("priority") Optional<Long> priority,
            @JsonProperty("split_amount") JsonNullable<Long> splitAmount) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
        Utils.checkNotNull(priority, "priority");
        Utils.checkNotNull(splitAmount, "splitAmount");
        this.uuid = uuid;
        this.name = name;
        this.hiddenAccountNumber = hiddenAccountNumber;
        this.priority = priority;
        this.splitAmount = splitAmount;
    }
    
    public PaymentMethodBankAccount(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The bank account ID
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The bank account name
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Masked bank account number
     */
    @JsonIgnore
    public Optional<String> hiddenAccountNumber() {
        return hiddenAccountNumber;
    }

    /**
     * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
     */
    @JsonIgnore
    public Optional<Long> priority() {
        return priority;
    }

    /**
     * The cents amount allocated for each payment split
     */
    @JsonIgnore
    public JsonNullable<Long> splitAmount() {
        return splitAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The bank account ID
     */
    public PaymentMethodBankAccount withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The bank account name
     */
    public PaymentMethodBankAccount withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The bank account name
     */
    public PaymentMethodBankAccount withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Masked bank account number
     */
    public PaymentMethodBankAccount withHiddenAccountNumber(String hiddenAccountNumber) {
        Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
        this.hiddenAccountNumber = Optional.ofNullable(hiddenAccountNumber);
        return this;
    }

    /**
     * Masked bank account number
     */
    public PaymentMethodBankAccount withHiddenAccountNumber(Optional<String> hiddenAccountNumber) {
        Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
        this.hiddenAccountNumber = hiddenAccountNumber;
        return this;
    }

    /**
     * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
     */
    public PaymentMethodBankAccount withPriority(long priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = Optional.ofNullable(priority);
        return this;
    }

    /**
     * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
     */
    public PaymentMethodBankAccount withPriority(Optional<Long> priority) {
        Utils.checkNotNull(priority, "priority");
        this.priority = priority;
        return this;
    }

    /**
     * The cents amount allocated for each payment split
     */
    public PaymentMethodBankAccount withSplitAmount(long splitAmount) {
        Utils.checkNotNull(splitAmount, "splitAmount");
        this.splitAmount = JsonNullable.of(splitAmount);
        return this;
    }

    /**
     * The cents amount allocated for each payment split
     */
    public PaymentMethodBankAccount withSplitAmount(JsonNullable<Long> splitAmount) {
        Utils.checkNotNull(splitAmount, "splitAmount");
        this.splitAmount = splitAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentMethodBankAccount other = (PaymentMethodBankAccount) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.hiddenAccountNumber, other.hiddenAccountNumber) &&
            Objects.deepEquals(this.priority, other.priority) &&
            Objects.deepEquals(this.splitAmount, other.splitAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            name,
            hiddenAccountNumber,
            priority,
            splitAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentMethodBankAccount.class,
                "uuid", uuid,
                "name", name,
                "hiddenAccountNumber", hiddenAccountNumber,
                "priority", priority,
                "splitAmount", splitAmount);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> hiddenAccountNumber = Optional.empty();
 
        private Optional<Long> priority = Optional.empty();
 
        private JsonNullable<Long> splitAmount = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The bank account ID
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The bank account name
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The bank account name
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Masked bank account number
         */
        public Builder hiddenAccountNumber(String hiddenAccountNumber) {
            Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
            this.hiddenAccountNumber = Optional.ofNullable(hiddenAccountNumber);
            return this;
        }

        /**
         * Masked bank account number
         */
        public Builder hiddenAccountNumber(Optional<String> hiddenAccountNumber) {
            Utils.checkNotNull(hiddenAccountNumber, "hiddenAccountNumber");
            this.hiddenAccountNumber = hiddenAccountNumber;
            return this;
        }

        /**
         * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
         */
        public Builder priority(long priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = Optional.ofNullable(priority);
            return this;
        }

        /**
         * The order of priority for each payment split, with priority 1 being the first bank account paid. Priority must be unique and sequential.
         */
        public Builder priority(Optional<Long> priority) {
            Utils.checkNotNull(priority, "priority");
            this.priority = priority;
            return this;
        }

        /**
         * The cents amount allocated for each payment split
         */
        public Builder splitAmount(long splitAmount) {
            Utils.checkNotNull(splitAmount, "splitAmount");
            this.splitAmount = JsonNullable.of(splitAmount);
            return this;
        }

        /**
         * The cents amount allocated for each payment split
         */
        public Builder splitAmount(JsonNullable<Long> splitAmount) {
            Utils.checkNotNull(splitAmount, "splitAmount");
            this.splitAmount = splitAmount;
            return this;
        }
        
        public PaymentMethodBankAccount build() {
            return new PaymentMethodBankAccount(
                uuid,
                name,
                hiddenAccountNumber,
                priority,
                splitAmount);
        }
    }
}

