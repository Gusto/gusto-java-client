/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class Hourly {

    /**
     * The name of the hourly compensation rate.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The amount multiplied by the base rate of a job to calculate compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("multiple")
    private Optional<Double> multiple;

    @JsonCreator
    public Hourly(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("multiple") Optional<Double> multiple) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(multiple, "multiple");
        this.name = name;
        this.multiple = multiple;
    }
    
    public Hourly() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The name of the hourly compensation rate.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The amount multiplied by the base rate of a job to calculate compensation.
     */
    @JsonIgnore
    public Optional<Double> multiple() {
        return multiple;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the hourly compensation rate.
     */
    public Hourly withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the hourly compensation rate.
     */
    public Hourly withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The amount multiplied by the base rate of a job to calculate compensation.
     */
    public Hourly withMultiple(double multiple) {
        Utils.checkNotNull(multiple, "multiple");
        this.multiple = Optional.ofNullable(multiple);
        return this;
    }

    /**
     * The amount multiplied by the base rate of a job to calculate compensation.
     */
    public Hourly withMultiple(Optional<Double> multiple) {
        Utils.checkNotNull(multiple, "multiple");
        this.multiple = multiple;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Hourly other = (Hourly) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.multiple, other.multiple);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            multiple);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Hourly.class,
                "name", name,
                "multiple", multiple);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<Double> multiple = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the hourly compensation rate.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the hourly compensation rate.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The amount multiplied by the base rate of a job to calculate compensation.
         */
        public Builder multiple(double multiple) {
            Utils.checkNotNull(multiple, "multiple");
            this.multiple = Optional.ofNullable(multiple);
            return this;
        }

        /**
         * The amount multiplied by the base rate of a job to calculate compensation.
         */
        public Builder multiple(Optional<Double> multiple) {
            Utils.checkNotNull(multiple, "multiple");
            this.multiple = multiple;
            return this;
        }
        
        public Hourly build() {
            return new Hourly(
                name,
                multiple);
        }
    }
}

