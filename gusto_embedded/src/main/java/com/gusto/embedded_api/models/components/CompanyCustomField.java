/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * CompanyCustomField - A custom field on a company
 */

public class CompanyCustomField {

    /**
     * UUID of the company custom field
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * Name of the company custom field
     */
    @JsonProperty("name")
    private String name;

    /**
     * Input type for the custom field.
     */
    @JsonProperty("type")
    private CustomFieldType type;

    /**
     * Description of the company custom field
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * An array of options for fields of type radio. Otherwise, null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("selection_options")
    private JsonNullable<? extends List<String>> selectionOptions;

    @JsonCreator
    public CompanyCustomField(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("name") String name,
            @JsonProperty("type") CustomFieldType type,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("selection_options") JsonNullable<? extends List<String>> selectionOptions) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(selectionOptions, "selectionOptions");
        this.uuid = uuid;
        this.name = name;
        this.type = type;
        this.description = description;
        this.selectionOptions = selectionOptions;
    }
    
    public CompanyCustomField(
            String uuid,
            String name,
            CustomFieldType type) {
        this(uuid, name, type, Optional.empty(), JsonNullable.undefined());
    }

    /**
     * UUID of the company custom field
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * Name of the company custom field
     */
    @JsonIgnore
    public String name() {
        return name;
    }

    /**
     * Input type for the custom field.
     */
    @JsonIgnore
    public CustomFieldType type() {
        return type;
    }

    /**
     * Description of the company custom field
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * An array of options for fields of type radio. Otherwise, null.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<String>> selectionOptions() {
        return (JsonNullable<List<String>>) selectionOptions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * UUID of the company custom field
     */
    public CompanyCustomField withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Name of the company custom field
     */
    public CompanyCustomField withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Input type for the custom field.
     */
    public CompanyCustomField withType(CustomFieldType type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Description of the company custom field
     */
    public CompanyCustomField withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Description of the company custom field
     */
    public CompanyCustomField withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * An array of options for fields of type radio. Otherwise, null.
     */
    public CompanyCustomField withSelectionOptions(List<String> selectionOptions) {
        Utils.checkNotNull(selectionOptions, "selectionOptions");
        this.selectionOptions = JsonNullable.of(selectionOptions);
        return this;
    }

    /**
     * An array of options for fields of type radio. Otherwise, null.
     */
    public CompanyCustomField withSelectionOptions(JsonNullable<? extends List<String>> selectionOptions) {
        Utils.checkNotNull(selectionOptions, "selectionOptions");
        this.selectionOptions = selectionOptions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        CompanyCustomField other = (CompanyCustomField) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.selectionOptions, other.selectionOptions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            name,
            type,
            description,
            selectionOptions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(CompanyCustomField.class,
                "uuid", uuid,
                "name", name,
                "type", type,
                "description", description,
                "selectionOptions", selectionOptions);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private String name;
 
        private CustomFieldType type;
 
        private Optional<String> description = Optional.empty();
 
        private JsonNullable<? extends List<String>> selectionOptions = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * UUID of the company custom field
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Name of the company custom field
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Input type for the custom field.
         */
        public Builder type(CustomFieldType type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Description of the company custom field
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the company custom field
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * An array of options for fields of type radio. Otherwise, null.
         */
        public Builder selectionOptions(List<String> selectionOptions) {
            Utils.checkNotNull(selectionOptions, "selectionOptions");
            this.selectionOptions = JsonNullable.of(selectionOptions);
            return this;
        }

        /**
         * An array of options for fields of type radio. Otherwise, null.
         */
        public Builder selectionOptions(JsonNullable<? extends List<String>> selectionOptions) {
            Utils.checkNotNull(selectionOptions, "selectionOptions");
            this.selectionOptions = selectionOptions;
            return this;
        }
        
        public CompanyCustomField build() {
            return new CompanyCustomField(
                uuid,
                name,
                type,
                description,
                selectionOptions);
        }
    }
}

