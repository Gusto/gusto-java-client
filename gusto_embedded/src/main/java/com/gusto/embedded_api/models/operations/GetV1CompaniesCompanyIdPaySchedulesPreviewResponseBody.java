/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody - Pay schedule preview
 */

public class GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody {

    /**
     * A list of pay periods for the previewed pay schedule
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_periods")
    private Optional<? extends List<PayPeriods>> payPeriods;

    /**
     * A list of dates for bank closures
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("holidays")
    private Optional<? extends List<String>> holidays;

    @JsonCreator
    public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody(
            @JsonProperty("pay_periods") Optional<? extends List<PayPeriods>> payPeriods,
            @JsonProperty("holidays") Optional<? extends List<String>> holidays) {
        Utils.checkNotNull(payPeriods, "payPeriods");
        Utils.checkNotNull(holidays, "holidays");
        this.payPeriods = payPeriods;
        this.holidays = holidays;
    }
    
    public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A list of pay periods for the previewed pay schedule
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PayPeriods>> payPeriods() {
        return (Optional<List<PayPeriods>>) payPeriods;
    }

    /**
     * A list of dates for bank closures
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> holidays() {
        return (Optional<List<String>>) holidays;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A list of pay periods for the previewed pay schedule
     */
    public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody withPayPeriods(List<PayPeriods> payPeriods) {
        Utils.checkNotNull(payPeriods, "payPeriods");
        this.payPeriods = Optional.ofNullable(payPeriods);
        return this;
    }

    /**
     * A list of pay periods for the previewed pay schedule
     */
    public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody withPayPeriods(Optional<? extends List<PayPeriods>> payPeriods) {
        Utils.checkNotNull(payPeriods, "payPeriods");
        this.payPeriods = payPeriods;
        return this;
    }

    /**
     * A list of dates for bank closures
     */
    public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody withHolidays(List<String> holidays) {
        Utils.checkNotNull(holidays, "holidays");
        this.holidays = Optional.ofNullable(holidays);
        return this;
    }

    /**
     * A list of dates for bank closures
     */
    public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody withHolidays(Optional<? extends List<String>> holidays) {
        Utils.checkNotNull(holidays, "holidays");
        this.holidays = holidays;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody other = (GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody) o;
        return 
            Objects.deepEquals(this.payPeriods, other.payPeriods) &&
            Objects.deepEquals(this.holidays, other.holidays);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            payPeriods,
            holidays);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody.class,
                "payPeriods", payPeriods,
                "holidays", holidays);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<PayPeriods>> payPeriods = Optional.empty();
 
        private Optional<? extends List<String>> holidays = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A list of pay periods for the previewed pay schedule
         */
        public Builder payPeriods(List<PayPeriods> payPeriods) {
            Utils.checkNotNull(payPeriods, "payPeriods");
            this.payPeriods = Optional.ofNullable(payPeriods);
            return this;
        }

        /**
         * A list of pay periods for the previewed pay schedule
         */
        public Builder payPeriods(Optional<? extends List<PayPeriods>> payPeriods) {
            Utils.checkNotNull(payPeriods, "payPeriods");
            this.payPeriods = payPeriods;
            return this;
        }

        /**
         * A list of dates for bank closures
         */
        public Builder holidays(List<String> holidays) {
            Utils.checkNotNull(holidays, "holidays");
            this.holidays = Optional.ofNullable(holidays);
            return this;
        }

        /**
         * A list of dates for bank closures
         */
        public Builder holidays(Optional<? extends List<String>> holidays) {
            Utils.checkNotNull(holidays, "holidays");
            this.holidays = holidays;
            return this;
        }
        
        public GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody build() {
            return new GetV1CompaniesCompanyIdPaySchedulesPreviewResponseBody(
                payPeriods,
                holidays);
        }
    }
}

