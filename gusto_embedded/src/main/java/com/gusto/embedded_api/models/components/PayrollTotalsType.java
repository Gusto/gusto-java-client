/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * PayrollTotalsType
 * 
 * <p>The subtotals for the payroll.
 */

public class PayrollTotalsType {

    /**
     * The total company debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_debit")
    private Optional<String> companyDebit;

    /**
     * The total company net pay for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_pay_debit")
    private Optional<String> netPayDebit;

    /**
     * The total tax debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_debit")
    private Optional<String> taxDebit;

    /**
     * The total reimbursement debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement_debit")
    private Optional<String> reimbursementDebit;

    /**
     * The total child support debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_support_debit")
    private Optional<String> childSupportDebit;

    /**
     * The total reimbursements for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursements")
    private Optional<String> reimbursements;

    /**
     * The net pay amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_pay")
    private Optional<String> netPay;

    /**
     * The gross pay amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_pay")
    private Optional<String> grossPay;

    /**
     * The total employee bonuses amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_bonuses")
    private Optional<String> employeeBonuses;

    /**
     * The total employee commissions amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_commissions")
    private Optional<String> employeeCommissions;

    /**
     * The total employee cash tips amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_cash_tips")
    private Optional<String> employeeCashTips;

    /**
     * The total employee paycheck tips amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_paycheck_tips")
    private Optional<String> employeePaycheckTips;

    /**
     * The total additional earnings amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_earnings")
    private Optional<String> additionalEarnings;

    /**
     * The total owner's draw for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("owners_draw")
    private Optional<String> ownersDraw;

    /**
     * The total check amount for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_amount")
    private Optional<String> checkAmount;

    /**
     * The total amount of employer paid taxes for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employer_taxes")
    private Optional<String> employerTaxes;

    /**
     * The total amount of employee paid taxes for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_taxes")
    private Optional<String> employeeTaxes;

    /**
     * The total amount of company contributed benefits for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefits")
    private Optional<String> benefits;

    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_benefits_deductions")
    private Optional<String> employeeBenefitsDeductions;

    /**
     * The total amount of imputed pay for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imputed_pay")
    private Optional<String> imputedPay;

    /**
     * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deferred_payroll_taxes")
    private Optional<String> deferredPayrollTaxes;

    /**
     * The total amount of deductions for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("other_deductions")
    private Optional<String> otherDeductions;

    @JsonCreator
    public PayrollTotalsType(
            @JsonProperty("company_debit") Optional<String> companyDebit,
            @JsonProperty("net_pay_debit") Optional<String> netPayDebit,
            @JsonProperty("tax_debit") Optional<String> taxDebit,
            @JsonProperty("reimbursement_debit") Optional<String> reimbursementDebit,
            @JsonProperty("child_support_debit") Optional<String> childSupportDebit,
            @JsonProperty("reimbursements") Optional<String> reimbursements,
            @JsonProperty("net_pay") Optional<String> netPay,
            @JsonProperty("gross_pay") Optional<String> grossPay,
            @JsonProperty("employee_bonuses") Optional<String> employeeBonuses,
            @JsonProperty("employee_commissions") Optional<String> employeeCommissions,
            @JsonProperty("employee_cash_tips") Optional<String> employeeCashTips,
            @JsonProperty("employee_paycheck_tips") Optional<String> employeePaycheckTips,
            @JsonProperty("additional_earnings") Optional<String> additionalEarnings,
            @JsonProperty("owners_draw") Optional<String> ownersDraw,
            @JsonProperty("check_amount") Optional<String> checkAmount,
            @JsonProperty("employer_taxes") Optional<String> employerTaxes,
            @JsonProperty("employee_taxes") Optional<String> employeeTaxes,
            @JsonProperty("benefits") Optional<String> benefits,
            @JsonProperty("employee_benefits_deductions") Optional<String> employeeBenefitsDeductions,
            @JsonProperty("imputed_pay") Optional<String> imputedPay,
            @JsonProperty("deferred_payroll_taxes") Optional<String> deferredPayrollTaxes,
            @JsonProperty("other_deductions") Optional<String> otherDeductions) {
        Utils.checkNotNull(companyDebit, "companyDebit");
        Utils.checkNotNull(netPayDebit, "netPayDebit");
        Utils.checkNotNull(taxDebit, "taxDebit");
        Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
        Utils.checkNotNull(childSupportDebit, "childSupportDebit");
        Utils.checkNotNull(reimbursements, "reimbursements");
        Utils.checkNotNull(netPay, "netPay");
        Utils.checkNotNull(grossPay, "grossPay");
        Utils.checkNotNull(employeeBonuses, "employeeBonuses");
        Utils.checkNotNull(employeeCommissions, "employeeCommissions");
        Utils.checkNotNull(employeeCashTips, "employeeCashTips");
        Utils.checkNotNull(employeePaycheckTips, "employeePaycheckTips");
        Utils.checkNotNull(additionalEarnings, "additionalEarnings");
        Utils.checkNotNull(ownersDraw, "ownersDraw");
        Utils.checkNotNull(checkAmount, "checkAmount");
        Utils.checkNotNull(employerTaxes, "employerTaxes");
        Utils.checkNotNull(employeeTaxes, "employeeTaxes");
        Utils.checkNotNull(benefits, "benefits");
        Utils.checkNotNull(employeeBenefitsDeductions, "employeeBenefitsDeductions");
        Utils.checkNotNull(imputedPay, "imputedPay");
        Utils.checkNotNull(deferredPayrollTaxes, "deferredPayrollTaxes");
        Utils.checkNotNull(otherDeductions, "otherDeductions");
        this.companyDebit = companyDebit;
        this.netPayDebit = netPayDebit;
        this.taxDebit = taxDebit;
        this.reimbursementDebit = reimbursementDebit;
        this.childSupportDebit = childSupportDebit;
        this.reimbursements = reimbursements;
        this.netPay = netPay;
        this.grossPay = grossPay;
        this.employeeBonuses = employeeBonuses;
        this.employeeCommissions = employeeCommissions;
        this.employeeCashTips = employeeCashTips;
        this.employeePaycheckTips = employeePaycheckTips;
        this.additionalEarnings = additionalEarnings;
        this.ownersDraw = ownersDraw;
        this.checkAmount = checkAmount;
        this.employerTaxes = employerTaxes;
        this.employeeTaxes = employeeTaxes;
        this.benefits = benefits;
        this.employeeBenefitsDeductions = employeeBenefitsDeductions;
        this.imputedPay = imputedPay;
        this.deferredPayrollTaxes = deferredPayrollTaxes;
        this.otherDeductions = otherDeductions;
    }
    
    public PayrollTotalsType() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The total company debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> companyDebit() {
        return companyDebit;
    }

    /**
     * The total company net pay for the payroll.
     */
    @JsonIgnore
    public Optional<String> netPayDebit() {
        return netPayDebit;
    }

    /**
     * The total tax debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> taxDebit() {
        return taxDebit;
    }

    /**
     * The total reimbursement debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> reimbursementDebit() {
        return reimbursementDebit;
    }

    /**
     * The total child support debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> childSupportDebit() {
        return childSupportDebit;
    }

    /**
     * The total reimbursements for the payroll.
     */
    @JsonIgnore
    public Optional<String> reimbursements() {
        return reimbursements;
    }

    /**
     * The net pay amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> netPay() {
        return netPay;
    }

    /**
     * The gross pay amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> grossPay() {
        return grossPay;
    }

    /**
     * The total employee bonuses amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> employeeBonuses() {
        return employeeBonuses;
    }

    /**
     * The total employee commissions amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> employeeCommissions() {
        return employeeCommissions;
    }

    /**
     * The total employee cash tips amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> employeeCashTips() {
        return employeeCashTips;
    }

    /**
     * The total employee paycheck tips amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> employeePaycheckTips() {
        return employeePaycheckTips;
    }

    /**
     * The total additional earnings amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> additionalEarnings() {
        return additionalEarnings;
    }

    /**
     * The total owner's draw for the payroll.
     */
    @JsonIgnore
    public Optional<String> ownersDraw() {
        return ownersDraw;
    }

    /**
     * The total check amount for the payroll.
     */
    @JsonIgnore
    public Optional<String> checkAmount() {
        return checkAmount;
    }

    /**
     * The total amount of employer paid taxes for the payroll.
     */
    @JsonIgnore
    public Optional<String> employerTaxes() {
        return employerTaxes;
    }

    /**
     * The total amount of employee paid taxes for the payroll.
     */
    @JsonIgnore
    public Optional<String> employeeTaxes() {
        return employeeTaxes;
    }

    /**
     * The total amount of company contributed benefits for the payroll.
     */
    @JsonIgnore
    public Optional<String> benefits() {
        return benefits;
    }

    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    @JsonIgnore
    public Optional<String> employeeBenefitsDeductions() {
        return employeeBenefitsDeductions;
    }

    /**
     * The total amount of imputed pay for the payroll.
     */
    @JsonIgnore
    public Optional<String> imputedPay() {
        return imputedPay;
    }

    /**
     * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
     */
    @JsonIgnore
    public Optional<String> deferredPayrollTaxes() {
        return deferredPayrollTaxes;
    }

    /**
     * The total amount of deductions for the payroll.
     */
    @JsonIgnore
    public Optional<String> otherDeductions() {
        return otherDeductions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The total company debit for the payroll.
     */
    public PayrollTotalsType withCompanyDebit(String companyDebit) {
        Utils.checkNotNull(companyDebit, "companyDebit");
        this.companyDebit = Optional.ofNullable(companyDebit);
        return this;
    }

    /**
     * The total company debit for the payroll.
     */
    public PayrollTotalsType withCompanyDebit(Optional<String> companyDebit) {
        Utils.checkNotNull(companyDebit, "companyDebit");
        this.companyDebit = companyDebit;
        return this;
    }

    /**
     * The total company net pay for the payroll.
     */
    public PayrollTotalsType withNetPayDebit(String netPayDebit) {
        Utils.checkNotNull(netPayDebit, "netPayDebit");
        this.netPayDebit = Optional.ofNullable(netPayDebit);
        return this;
    }

    /**
     * The total company net pay for the payroll.
     */
    public PayrollTotalsType withNetPayDebit(Optional<String> netPayDebit) {
        Utils.checkNotNull(netPayDebit, "netPayDebit");
        this.netPayDebit = netPayDebit;
        return this;
    }

    /**
     * The total tax debit for the payroll.
     */
    public PayrollTotalsType withTaxDebit(String taxDebit) {
        Utils.checkNotNull(taxDebit, "taxDebit");
        this.taxDebit = Optional.ofNullable(taxDebit);
        return this;
    }

    /**
     * The total tax debit for the payroll.
     */
    public PayrollTotalsType withTaxDebit(Optional<String> taxDebit) {
        Utils.checkNotNull(taxDebit, "taxDebit");
        this.taxDebit = taxDebit;
        return this;
    }

    /**
     * The total reimbursement debit for the payroll.
     */
    public PayrollTotalsType withReimbursementDebit(String reimbursementDebit) {
        Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
        this.reimbursementDebit = Optional.ofNullable(reimbursementDebit);
        return this;
    }

    /**
     * The total reimbursement debit for the payroll.
     */
    public PayrollTotalsType withReimbursementDebit(Optional<String> reimbursementDebit) {
        Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
        this.reimbursementDebit = reimbursementDebit;
        return this;
    }

    /**
     * The total child support debit for the payroll.
     */
    public PayrollTotalsType withChildSupportDebit(String childSupportDebit) {
        Utils.checkNotNull(childSupportDebit, "childSupportDebit");
        this.childSupportDebit = Optional.ofNullable(childSupportDebit);
        return this;
    }

    /**
     * The total child support debit for the payroll.
     */
    public PayrollTotalsType withChildSupportDebit(Optional<String> childSupportDebit) {
        Utils.checkNotNull(childSupportDebit, "childSupportDebit");
        this.childSupportDebit = childSupportDebit;
        return this;
    }

    /**
     * The total reimbursements for the payroll.
     */
    public PayrollTotalsType withReimbursements(String reimbursements) {
        Utils.checkNotNull(reimbursements, "reimbursements");
        this.reimbursements = Optional.ofNullable(reimbursements);
        return this;
    }

    /**
     * The total reimbursements for the payroll.
     */
    public PayrollTotalsType withReimbursements(Optional<String> reimbursements) {
        Utils.checkNotNull(reimbursements, "reimbursements");
        this.reimbursements = reimbursements;
        return this;
    }

    /**
     * The net pay amount for the payroll.
     */
    public PayrollTotalsType withNetPay(String netPay) {
        Utils.checkNotNull(netPay, "netPay");
        this.netPay = Optional.ofNullable(netPay);
        return this;
    }

    /**
     * The net pay amount for the payroll.
     */
    public PayrollTotalsType withNetPay(Optional<String> netPay) {
        Utils.checkNotNull(netPay, "netPay");
        this.netPay = netPay;
        return this;
    }

    /**
     * The gross pay amount for the payroll.
     */
    public PayrollTotalsType withGrossPay(String grossPay) {
        Utils.checkNotNull(grossPay, "grossPay");
        this.grossPay = Optional.ofNullable(grossPay);
        return this;
    }

    /**
     * The gross pay amount for the payroll.
     */
    public PayrollTotalsType withGrossPay(Optional<String> grossPay) {
        Utils.checkNotNull(grossPay, "grossPay");
        this.grossPay = grossPay;
        return this;
    }

    /**
     * The total employee bonuses amount for the payroll.
     */
    public PayrollTotalsType withEmployeeBonuses(String employeeBonuses) {
        Utils.checkNotNull(employeeBonuses, "employeeBonuses");
        this.employeeBonuses = Optional.ofNullable(employeeBonuses);
        return this;
    }

    /**
     * The total employee bonuses amount for the payroll.
     */
    public PayrollTotalsType withEmployeeBonuses(Optional<String> employeeBonuses) {
        Utils.checkNotNull(employeeBonuses, "employeeBonuses");
        this.employeeBonuses = employeeBonuses;
        return this;
    }

    /**
     * The total employee commissions amount for the payroll.
     */
    public PayrollTotalsType withEmployeeCommissions(String employeeCommissions) {
        Utils.checkNotNull(employeeCommissions, "employeeCommissions");
        this.employeeCommissions = Optional.ofNullable(employeeCommissions);
        return this;
    }

    /**
     * The total employee commissions amount for the payroll.
     */
    public PayrollTotalsType withEmployeeCommissions(Optional<String> employeeCommissions) {
        Utils.checkNotNull(employeeCommissions, "employeeCommissions");
        this.employeeCommissions = employeeCommissions;
        return this;
    }

    /**
     * The total employee cash tips amount for the payroll.
     */
    public PayrollTotalsType withEmployeeCashTips(String employeeCashTips) {
        Utils.checkNotNull(employeeCashTips, "employeeCashTips");
        this.employeeCashTips = Optional.ofNullable(employeeCashTips);
        return this;
    }

    /**
     * The total employee cash tips amount for the payroll.
     */
    public PayrollTotalsType withEmployeeCashTips(Optional<String> employeeCashTips) {
        Utils.checkNotNull(employeeCashTips, "employeeCashTips");
        this.employeeCashTips = employeeCashTips;
        return this;
    }

    /**
     * The total employee paycheck tips amount for the payroll.
     */
    public PayrollTotalsType withEmployeePaycheckTips(String employeePaycheckTips) {
        Utils.checkNotNull(employeePaycheckTips, "employeePaycheckTips");
        this.employeePaycheckTips = Optional.ofNullable(employeePaycheckTips);
        return this;
    }

    /**
     * The total employee paycheck tips amount for the payroll.
     */
    public PayrollTotalsType withEmployeePaycheckTips(Optional<String> employeePaycheckTips) {
        Utils.checkNotNull(employeePaycheckTips, "employeePaycheckTips");
        this.employeePaycheckTips = employeePaycheckTips;
        return this;
    }

    /**
     * The total additional earnings amount for the payroll.
     */
    public PayrollTotalsType withAdditionalEarnings(String additionalEarnings) {
        Utils.checkNotNull(additionalEarnings, "additionalEarnings");
        this.additionalEarnings = Optional.ofNullable(additionalEarnings);
        return this;
    }

    /**
     * The total additional earnings amount for the payroll.
     */
    public PayrollTotalsType withAdditionalEarnings(Optional<String> additionalEarnings) {
        Utils.checkNotNull(additionalEarnings, "additionalEarnings");
        this.additionalEarnings = additionalEarnings;
        return this;
    }

    /**
     * The total owner's draw for the payroll.
     */
    public PayrollTotalsType withOwnersDraw(String ownersDraw) {
        Utils.checkNotNull(ownersDraw, "ownersDraw");
        this.ownersDraw = Optional.ofNullable(ownersDraw);
        return this;
    }

    /**
     * The total owner's draw for the payroll.
     */
    public PayrollTotalsType withOwnersDraw(Optional<String> ownersDraw) {
        Utils.checkNotNull(ownersDraw, "ownersDraw");
        this.ownersDraw = ownersDraw;
        return this;
    }

    /**
     * The total check amount for the payroll.
     */
    public PayrollTotalsType withCheckAmount(String checkAmount) {
        Utils.checkNotNull(checkAmount, "checkAmount");
        this.checkAmount = Optional.ofNullable(checkAmount);
        return this;
    }

    /**
     * The total check amount for the payroll.
     */
    public PayrollTotalsType withCheckAmount(Optional<String> checkAmount) {
        Utils.checkNotNull(checkAmount, "checkAmount");
        this.checkAmount = checkAmount;
        return this;
    }

    /**
     * The total amount of employer paid taxes for the payroll.
     */
    public PayrollTotalsType withEmployerTaxes(String employerTaxes) {
        Utils.checkNotNull(employerTaxes, "employerTaxes");
        this.employerTaxes = Optional.ofNullable(employerTaxes);
        return this;
    }

    /**
     * The total amount of employer paid taxes for the payroll.
     */
    public PayrollTotalsType withEmployerTaxes(Optional<String> employerTaxes) {
        Utils.checkNotNull(employerTaxes, "employerTaxes");
        this.employerTaxes = employerTaxes;
        return this;
    }

    /**
     * The total amount of employee paid taxes for the payroll.
     */
    public PayrollTotalsType withEmployeeTaxes(String employeeTaxes) {
        Utils.checkNotNull(employeeTaxes, "employeeTaxes");
        this.employeeTaxes = Optional.ofNullable(employeeTaxes);
        return this;
    }

    /**
     * The total amount of employee paid taxes for the payroll.
     */
    public PayrollTotalsType withEmployeeTaxes(Optional<String> employeeTaxes) {
        Utils.checkNotNull(employeeTaxes, "employeeTaxes");
        this.employeeTaxes = employeeTaxes;
        return this;
    }

    /**
     * The total amount of company contributed benefits for the payroll.
     */
    public PayrollTotalsType withBenefits(String benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = Optional.ofNullable(benefits);
        return this;
    }

    /**
     * The total amount of company contributed benefits for the payroll.
     */
    public PayrollTotalsType withBenefits(Optional<String> benefits) {
        Utils.checkNotNull(benefits, "benefits");
        this.benefits = benefits;
        return this;
    }

    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    public PayrollTotalsType withEmployeeBenefitsDeductions(String employeeBenefitsDeductions) {
        Utils.checkNotNull(employeeBenefitsDeductions, "employeeBenefitsDeductions");
        this.employeeBenefitsDeductions = Optional.ofNullable(employeeBenefitsDeductions);
        return this;
    }

    /**
     * The total amount of employee deducted benefits for the payroll.
     */
    public PayrollTotalsType withEmployeeBenefitsDeductions(Optional<String> employeeBenefitsDeductions) {
        Utils.checkNotNull(employeeBenefitsDeductions, "employeeBenefitsDeductions");
        this.employeeBenefitsDeductions = employeeBenefitsDeductions;
        return this;
    }

    /**
     * The total amount of imputed pay for the payroll.
     */
    public PayrollTotalsType withImputedPay(String imputedPay) {
        Utils.checkNotNull(imputedPay, "imputedPay");
        this.imputedPay = Optional.ofNullable(imputedPay);
        return this;
    }

    /**
     * The total amount of imputed pay for the payroll.
     */
    public PayrollTotalsType withImputedPay(Optional<String> imputedPay) {
        Utils.checkNotNull(imputedPay, "imputedPay");
        this.imputedPay = imputedPay;
        return this;
    }

    /**
     * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
     */
    public PayrollTotalsType withDeferredPayrollTaxes(String deferredPayrollTaxes) {
        Utils.checkNotNull(deferredPayrollTaxes, "deferredPayrollTaxes");
        this.deferredPayrollTaxes = Optional.ofNullable(deferredPayrollTaxes);
        return this;
    }

    /**
     * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
     */
    public PayrollTotalsType withDeferredPayrollTaxes(Optional<String> deferredPayrollTaxes) {
        Utils.checkNotNull(deferredPayrollTaxes, "deferredPayrollTaxes");
        this.deferredPayrollTaxes = deferredPayrollTaxes;
        return this;
    }

    /**
     * The total amount of deductions for the payroll.
     */
    public PayrollTotalsType withOtherDeductions(String otherDeductions) {
        Utils.checkNotNull(otherDeductions, "otherDeductions");
        this.otherDeductions = Optional.ofNullable(otherDeductions);
        return this;
    }

    /**
     * The total amount of deductions for the payroll.
     */
    public PayrollTotalsType withOtherDeductions(Optional<String> otherDeductions) {
        Utils.checkNotNull(otherDeductions, "otherDeductions");
        this.otherDeductions = otherDeductions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollTotalsType other = (PayrollTotalsType) o;
        return 
            Objects.deepEquals(this.companyDebit, other.companyDebit) &&
            Objects.deepEquals(this.netPayDebit, other.netPayDebit) &&
            Objects.deepEquals(this.taxDebit, other.taxDebit) &&
            Objects.deepEquals(this.reimbursementDebit, other.reimbursementDebit) &&
            Objects.deepEquals(this.childSupportDebit, other.childSupportDebit) &&
            Objects.deepEquals(this.reimbursements, other.reimbursements) &&
            Objects.deepEquals(this.netPay, other.netPay) &&
            Objects.deepEquals(this.grossPay, other.grossPay) &&
            Objects.deepEquals(this.employeeBonuses, other.employeeBonuses) &&
            Objects.deepEquals(this.employeeCommissions, other.employeeCommissions) &&
            Objects.deepEquals(this.employeeCashTips, other.employeeCashTips) &&
            Objects.deepEquals(this.employeePaycheckTips, other.employeePaycheckTips) &&
            Objects.deepEquals(this.additionalEarnings, other.additionalEarnings) &&
            Objects.deepEquals(this.ownersDraw, other.ownersDraw) &&
            Objects.deepEquals(this.checkAmount, other.checkAmount) &&
            Objects.deepEquals(this.employerTaxes, other.employerTaxes) &&
            Objects.deepEquals(this.employeeTaxes, other.employeeTaxes) &&
            Objects.deepEquals(this.benefits, other.benefits) &&
            Objects.deepEquals(this.employeeBenefitsDeductions, other.employeeBenefitsDeductions) &&
            Objects.deepEquals(this.imputedPay, other.imputedPay) &&
            Objects.deepEquals(this.deferredPayrollTaxes, other.deferredPayrollTaxes) &&
            Objects.deepEquals(this.otherDeductions, other.otherDeductions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyDebit,
            netPayDebit,
            taxDebit,
            reimbursementDebit,
            childSupportDebit,
            reimbursements,
            netPay,
            grossPay,
            employeeBonuses,
            employeeCommissions,
            employeeCashTips,
            employeePaycheckTips,
            additionalEarnings,
            ownersDraw,
            checkAmount,
            employerTaxes,
            employeeTaxes,
            benefits,
            employeeBenefitsDeductions,
            imputedPay,
            deferredPayrollTaxes,
            otherDeductions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollTotalsType.class,
                "companyDebit", companyDebit,
                "netPayDebit", netPayDebit,
                "taxDebit", taxDebit,
                "reimbursementDebit", reimbursementDebit,
                "childSupportDebit", childSupportDebit,
                "reimbursements", reimbursements,
                "netPay", netPay,
                "grossPay", grossPay,
                "employeeBonuses", employeeBonuses,
                "employeeCommissions", employeeCommissions,
                "employeeCashTips", employeeCashTips,
                "employeePaycheckTips", employeePaycheckTips,
                "additionalEarnings", additionalEarnings,
                "ownersDraw", ownersDraw,
                "checkAmount", checkAmount,
                "employerTaxes", employerTaxes,
                "employeeTaxes", employeeTaxes,
                "benefits", benefits,
                "employeeBenefitsDeductions", employeeBenefitsDeductions,
                "imputedPay", imputedPay,
                "deferredPayrollTaxes", deferredPayrollTaxes,
                "otherDeductions", otherDeductions);
    }
    
    public final static class Builder {
 
        private Optional<String> companyDebit = Optional.empty();
 
        private Optional<String> netPayDebit = Optional.empty();
 
        private Optional<String> taxDebit = Optional.empty();
 
        private Optional<String> reimbursementDebit = Optional.empty();
 
        private Optional<String> childSupportDebit = Optional.empty();
 
        private Optional<String> reimbursements = Optional.empty();
 
        private Optional<String> netPay = Optional.empty();
 
        private Optional<String> grossPay = Optional.empty();
 
        private Optional<String> employeeBonuses = Optional.empty();
 
        private Optional<String> employeeCommissions = Optional.empty();
 
        private Optional<String> employeeCashTips = Optional.empty();
 
        private Optional<String> employeePaycheckTips = Optional.empty();
 
        private Optional<String> additionalEarnings = Optional.empty();
 
        private Optional<String> ownersDraw = Optional.empty();
 
        private Optional<String> checkAmount = Optional.empty();
 
        private Optional<String> employerTaxes = Optional.empty();
 
        private Optional<String> employeeTaxes = Optional.empty();
 
        private Optional<String> benefits = Optional.empty();
 
        private Optional<String> employeeBenefitsDeductions = Optional.empty();
 
        private Optional<String> imputedPay = Optional.empty();
 
        private Optional<String> deferredPayrollTaxes = Optional.empty();
 
        private Optional<String> otherDeductions = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total company debit for the payroll.
         */
        public Builder companyDebit(String companyDebit) {
            Utils.checkNotNull(companyDebit, "companyDebit");
            this.companyDebit = Optional.ofNullable(companyDebit);
            return this;
        }

        /**
         * The total company debit for the payroll.
         */
        public Builder companyDebit(Optional<String> companyDebit) {
            Utils.checkNotNull(companyDebit, "companyDebit");
            this.companyDebit = companyDebit;
            return this;
        }

        /**
         * The total company net pay for the payroll.
         */
        public Builder netPayDebit(String netPayDebit) {
            Utils.checkNotNull(netPayDebit, "netPayDebit");
            this.netPayDebit = Optional.ofNullable(netPayDebit);
            return this;
        }

        /**
         * The total company net pay for the payroll.
         */
        public Builder netPayDebit(Optional<String> netPayDebit) {
            Utils.checkNotNull(netPayDebit, "netPayDebit");
            this.netPayDebit = netPayDebit;
            return this;
        }

        /**
         * The total tax debit for the payroll.
         */
        public Builder taxDebit(String taxDebit) {
            Utils.checkNotNull(taxDebit, "taxDebit");
            this.taxDebit = Optional.ofNullable(taxDebit);
            return this;
        }

        /**
         * The total tax debit for the payroll.
         */
        public Builder taxDebit(Optional<String> taxDebit) {
            Utils.checkNotNull(taxDebit, "taxDebit");
            this.taxDebit = taxDebit;
            return this;
        }

        /**
         * The total reimbursement debit for the payroll.
         */
        public Builder reimbursementDebit(String reimbursementDebit) {
            Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
            this.reimbursementDebit = Optional.ofNullable(reimbursementDebit);
            return this;
        }

        /**
         * The total reimbursement debit for the payroll.
         */
        public Builder reimbursementDebit(Optional<String> reimbursementDebit) {
            Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
            this.reimbursementDebit = reimbursementDebit;
            return this;
        }

        /**
         * The total child support debit for the payroll.
         */
        public Builder childSupportDebit(String childSupportDebit) {
            Utils.checkNotNull(childSupportDebit, "childSupportDebit");
            this.childSupportDebit = Optional.ofNullable(childSupportDebit);
            return this;
        }

        /**
         * The total child support debit for the payroll.
         */
        public Builder childSupportDebit(Optional<String> childSupportDebit) {
            Utils.checkNotNull(childSupportDebit, "childSupportDebit");
            this.childSupportDebit = childSupportDebit;
            return this;
        }

        /**
         * The total reimbursements for the payroll.
         */
        public Builder reimbursements(String reimbursements) {
            Utils.checkNotNull(reimbursements, "reimbursements");
            this.reimbursements = Optional.ofNullable(reimbursements);
            return this;
        }

        /**
         * The total reimbursements for the payroll.
         */
        public Builder reimbursements(Optional<String> reimbursements) {
            Utils.checkNotNull(reimbursements, "reimbursements");
            this.reimbursements = reimbursements;
            return this;
        }

        /**
         * The net pay amount for the payroll.
         */
        public Builder netPay(String netPay) {
            Utils.checkNotNull(netPay, "netPay");
            this.netPay = Optional.ofNullable(netPay);
            return this;
        }

        /**
         * The net pay amount for the payroll.
         */
        public Builder netPay(Optional<String> netPay) {
            Utils.checkNotNull(netPay, "netPay");
            this.netPay = netPay;
            return this;
        }

        /**
         * The gross pay amount for the payroll.
         */
        public Builder grossPay(String grossPay) {
            Utils.checkNotNull(grossPay, "grossPay");
            this.grossPay = Optional.ofNullable(grossPay);
            return this;
        }

        /**
         * The gross pay amount for the payroll.
         */
        public Builder grossPay(Optional<String> grossPay) {
            Utils.checkNotNull(grossPay, "grossPay");
            this.grossPay = grossPay;
            return this;
        }

        /**
         * The total employee bonuses amount for the payroll.
         */
        public Builder employeeBonuses(String employeeBonuses) {
            Utils.checkNotNull(employeeBonuses, "employeeBonuses");
            this.employeeBonuses = Optional.ofNullable(employeeBonuses);
            return this;
        }

        /**
         * The total employee bonuses amount for the payroll.
         */
        public Builder employeeBonuses(Optional<String> employeeBonuses) {
            Utils.checkNotNull(employeeBonuses, "employeeBonuses");
            this.employeeBonuses = employeeBonuses;
            return this;
        }

        /**
         * The total employee commissions amount for the payroll.
         */
        public Builder employeeCommissions(String employeeCommissions) {
            Utils.checkNotNull(employeeCommissions, "employeeCommissions");
            this.employeeCommissions = Optional.ofNullable(employeeCommissions);
            return this;
        }

        /**
         * The total employee commissions amount for the payroll.
         */
        public Builder employeeCommissions(Optional<String> employeeCommissions) {
            Utils.checkNotNull(employeeCommissions, "employeeCommissions");
            this.employeeCommissions = employeeCommissions;
            return this;
        }

        /**
         * The total employee cash tips amount for the payroll.
         */
        public Builder employeeCashTips(String employeeCashTips) {
            Utils.checkNotNull(employeeCashTips, "employeeCashTips");
            this.employeeCashTips = Optional.ofNullable(employeeCashTips);
            return this;
        }

        /**
         * The total employee cash tips amount for the payroll.
         */
        public Builder employeeCashTips(Optional<String> employeeCashTips) {
            Utils.checkNotNull(employeeCashTips, "employeeCashTips");
            this.employeeCashTips = employeeCashTips;
            return this;
        }

        /**
         * The total employee paycheck tips amount for the payroll.
         */
        public Builder employeePaycheckTips(String employeePaycheckTips) {
            Utils.checkNotNull(employeePaycheckTips, "employeePaycheckTips");
            this.employeePaycheckTips = Optional.ofNullable(employeePaycheckTips);
            return this;
        }

        /**
         * The total employee paycheck tips amount for the payroll.
         */
        public Builder employeePaycheckTips(Optional<String> employeePaycheckTips) {
            Utils.checkNotNull(employeePaycheckTips, "employeePaycheckTips");
            this.employeePaycheckTips = employeePaycheckTips;
            return this;
        }

        /**
         * The total additional earnings amount for the payroll.
         */
        public Builder additionalEarnings(String additionalEarnings) {
            Utils.checkNotNull(additionalEarnings, "additionalEarnings");
            this.additionalEarnings = Optional.ofNullable(additionalEarnings);
            return this;
        }

        /**
         * The total additional earnings amount for the payroll.
         */
        public Builder additionalEarnings(Optional<String> additionalEarnings) {
            Utils.checkNotNull(additionalEarnings, "additionalEarnings");
            this.additionalEarnings = additionalEarnings;
            return this;
        }

        /**
         * The total owner's draw for the payroll.
         */
        public Builder ownersDraw(String ownersDraw) {
            Utils.checkNotNull(ownersDraw, "ownersDraw");
            this.ownersDraw = Optional.ofNullable(ownersDraw);
            return this;
        }

        /**
         * The total owner's draw for the payroll.
         */
        public Builder ownersDraw(Optional<String> ownersDraw) {
            Utils.checkNotNull(ownersDraw, "ownersDraw");
            this.ownersDraw = ownersDraw;
            return this;
        }

        /**
         * The total check amount for the payroll.
         */
        public Builder checkAmount(String checkAmount) {
            Utils.checkNotNull(checkAmount, "checkAmount");
            this.checkAmount = Optional.ofNullable(checkAmount);
            return this;
        }

        /**
         * The total check amount for the payroll.
         */
        public Builder checkAmount(Optional<String> checkAmount) {
            Utils.checkNotNull(checkAmount, "checkAmount");
            this.checkAmount = checkAmount;
            return this;
        }

        /**
         * The total amount of employer paid taxes for the payroll.
         */
        public Builder employerTaxes(String employerTaxes) {
            Utils.checkNotNull(employerTaxes, "employerTaxes");
            this.employerTaxes = Optional.ofNullable(employerTaxes);
            return this;
        }

        /**
         * The total amount of employer paid taxes for the payroll.
         */
        public Builder employerTaxes(Optional<String> employerTaxes) {
            Utils.checkNotNull(employerTaxes, "employerTaxes");
            this.employerTaxes = employerTaxes;
            return this;
        }

        /**
         * The total amount of employee paid taxes for the payroll.
         */
        public Builder employeeTaxes(String employeeTaxes) {
            Utils.checkNotNull(employeeTaxes, "employeeTaxes");
            this.employeeTaxes = Optional.ofNullable(employeeTaxes);
            return this;
        }

        /**
         * The total amount of employee paid taxes for the payroll.
         */
        public Builder employeeTaxes(Optional<String> employeeTaxes) {
            Utils.checkNotNull(employeeTaxes, "employeeTaxes");
            this.employeeTaxes = employeeTaxes;
            return this;
        }

        /**
         * The total amount of company contributed benefits for the payroll.
         */
        public Builder benefits(String benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = Optional.ofNullable(benefits);
            return this;
        }

        /**
         * The total amount of company contributed benefits for the payroll.
         */
        public Builder benefits(Optional<String> benefits) {
            Utils.checkNotNull(benefits, "benefits");
            this.benefits = benefits;
            return this;
        }

        /**
         * The total amount of employee deducted benefits for the payroll.
         */
        public Builder employeeBenefitsDeductions(String employeeBenefitsDeductions) {
            Utils.checkNotNull(employeeBenefitsDeductions, "employeeBenefitsDeductions");
            this.employeeBenefitsDeductions = Optional.ofNullable(employeeBenefitsDeductions);
            return this;
        }

        /**
         * The total amount of employee deducted benefits for the payroll.
         */
        public Builder employeeBenefitsDeductions(Optional<String> employeeBenefitsDeductions) {
            Utils.checkNotNull(employeeBenefitsDeductions, "employeeBenefitsDeductions");
            this.employeeBenefitsDeductions = employeeBenefitsDeductions;
            return this;
        }

        /**
         * The total amount of imputed pay for the payroll.
         */
        public Builder imputedPay(String imputedPay) {
            Utils.checkNotNull(imputedPay, "imputedPay");
            this.imputedPay = Optional.ofNullable(imputedPay);
            return this;
        }

        /**
         * The total amount of imputed pay for the payroll.
         */
        public Builder imputedPay(Optional<String> imputedPay) {
            Utils.checkNotNull(imputedPay, "imputedPay");
            this.imputedPay = imputedPay;
            return this;
        }

        /**
         * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
         */
        public Builder deferredPayrollTaxes(String deferredPayrollTaxes) {
            Utils.checkNotNull(deferredPayrollTaxes, "deferredPayrollTaxes");
            this.deferredPayrollTaxes = Optional.ofNullable(deferredPayrollTaxes);
            return this;
        }

        /**
         * The total amount of payroll taxes deferred for the payroll, such as allowed by the CARES act.
         */
        public Builder deferredPayrollTaxes(Optional<String> deferredPayrollTaxes) {
            Utils.checkNotNull(deferredPayrollTaxes, "deferredPayrollTaxes");
            this.deferredPayrollTaxes = deferredPayrollTaxes;
            return this;
        }

        /**
         * The total amount of deductions for the payroll.
         */
        public Builder otherDeductions(String otherDeductions) {
            Utils.checkNotNull(otherDeductions, "otherDeductions");
            this.otherDeductions = Optional.ofNullable(otherDeductions);
            return this;
        }

        /**
         * The total amount of deductions for the payroll.
         */
        public Builder otherDeductions(Optional<String> otherDeductions) {
            Utils.checkNotNull(otherDeductions, "otherDeductions");
            this.otherDeductions = otherDeductions;
            return this;
        }
        
        public PayrollTotalsType build() {
            return new PayrollTotalsType(
                companyDebit,
                netPayDebit,
                taxDebit,
                reimbursementDebit,
                childSupportDebit,
                reimbursements,
                netPay,
                grossPay,
                employeeBonuses,
                employeeCommissions,
                employeeCashTips,
                employeePaycheckTips,
                additionalEarnings,
                ownersDraw,
                checkAmount,
                employerTaxes,
                employeeTaxes,
                benefits,
                employeeBenefitsDeductions,
                imputedPay,
                deferredPayrollTaxes,
                otherDeductions);
        }
    }
}

