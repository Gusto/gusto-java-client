/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * ContractorPaymentReceipt
 * 
 * <p>Example response
 */

public class ContractorPaymentReceipt {

    /**
     * A unique identifier of the contractor payment receipt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_payment_uuid")
    private Optional<String> contractorPaymentUuid;

    /**
     * A unique identifier of the company making the contractor payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The name of the company making the contractor payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_of_sender")
    private Optional<String> nameOfSender;

    /**
     * The individual or company name of the contractor receiving payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_of_recipient")
    private Optional<String> nameOfRecipient;

    /**
     * The debit date for the contractor payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debit_date")
    private Optional<LocalDate> debitDate;

    /**
     * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    private Optional<String> license;

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license_uri")
    private Optional<String> licenseUri;

    /**
     * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("right_to_refund")
    private Optional<String> rightToRefund;

    /**
     * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_of_licensee")
    private Optional<String> liabilityOfLicensee;

    /**
     * The subtotals for the contractor payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    private Optional<? extends ContractorPaymentReceiptTotals> totals;

    /**
     * An array of contractor payments for this contractor payment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_payments")
    private Optional<? extends List<ContractorPayments>> contractorPayments;

    /**
     * The licensed payroll processor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licensee")
    private Optional<? extends ContractorPaymentReceiptLicensee> licensee;

    @JsonCreator
    public ContractorPaymentReceipt(
            @JsonProperty("contractor_payment_uuid") Optional<String> contractorPaymentUuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("name_of_sender") Optional<String> nameOfSender,
            @JsonProperty("name_of_recipient") Optional<String> nameOfRecipient,
            @JsonProperty("debit_date") Optional<LocalDate> debitDate,
            @JsonProperty("license") Optional<String> license,
            @JsonProperty("license_uri") Optional<String> licenseUri,
            @JsonProperty("right_to_refund") Optional<String> rightToRefund,
            @JsonProperty("liability_of_licensee") Optional<String> liabilityOfLicensee,
            @JsonProperty("totals") Optional<? extends ContractorPaymentReceiptTotals> totals,
            @JsonProperty("contractor_payments") Optional<? extends List<ContractorPayments>> contractorPayments,
            @JsonProperty("licensee") Optional<? extends ContractorPaymentReceiptLicensee> licensee) {
        Utils.checkNotNull(contractorPaymentUuid, "contractorPaymentUuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(nameOfSender, "nameOfSender");
        Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
        Utils.checkNotNull(debitDate, "debitDate");
        Utils.checkNotNull(license, "license");
        Utils.checkNotNull(licenseUri, "licenseUri");
        Utils.checkNotNull(rightToRefund, "rightToRefund");
        Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
        Utils.checkNotNull(totals, "totals");
        Utils.checkNotNull(contractorPayments, "contractorPayments");
        Utils.checkNotNull(licensee, "licensee");
        this.contractorPaymentUuid = contractorPaymentUuid;
        this.companyUuid = companyUuid;
        this.nameOfSender = nameOfSender;
        this.nameOfRecipient = nameOfRecipient;
        this.debitDate = debitDate;
        this.license = license;
        this.licenseUri = licenseUri;
        this.rightToRefund = rightToRefund;
        this.liabilityOfLicensee = liabilityOfLicensee;
        this.totals = totals;
        this.contractorPayments = contractorPayments;
        this.licensee = licensee;
    }
    
    public ContractorPaymentReceipt() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier of the contractor payment receipt.
     */
    @JsonIgnore
    public Optional<String> contractorPaymentUuid() {
        return contractorPaymentUuid;
    }

    /**
     * A unique identifier of the company making the contractor payment.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The name of the company making the contractor payment.
     */
    @JsonIgnore
    public Optional<String> nameOfSender() {
        return nameOfSender;
    }

    /**
     * The individual or company name of the contractor receiving payment.
     */
    @JsonIgnore
    public Optional<String> nameOfRecipient() {
        return nameOfRecipient;
    }

    /**
     * The debit date for the contractor payment.
     */
    @JsonIgnore
    public Optional<LocalDate> debitDate() {
        return debitDate;
    }

    /**
     * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
     */
    @JsonIgnore
    public Optional<String> license() {
        return license;
    }

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonIgnore
    public Optional<String> licenseUri() {
        return licenseUri;
    }

    /**
     * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonIgnore
    public Optional<String> rightToRefund() {
        return rightToRefund;
    }

    /**
     * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonIgnore
    public Optional<String> liabilityOfLicensee() {
        return liabilityOfLicensee;
    }

    /**
     * The subtotals for the contractor payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorPaymentReceiptTotals> totals() {
        return (Optional<ContractorPaymentReceiptTotals>) totals;
    }

    /**
     * An array of contractor payments for this contractor payment.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ContractorPayments>> contractorPayments() {
        return (Optional<List<ContractorPayments>>) contractorPayments;
    }

    /**
     * The licensed payroll processor
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorPaymentReceiptLicensee> licensee() {
        return (Optional<ContractorPaymentReceiptLicensee>) licensee;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier of the contractor payment receipt.
     */
    public ContractorPaymentReceipt withContractorPaymentUuid(String contractorPaymentUuid) {
        Utils.checkNotNull(contractorPaymentUuid, "contractorPaymentUuid");
        this.contractorPaymentUuid = Optional.ofNullable(contractorPaymentUuid);
        return this;
    }

    /**
     * A unique identifier of the contractor payment receipt.
     */
    public ContractorPaymentReceipt withContractorPaymentUuid(Optional<String> contractorPaymentUuid) {
        Utils.checkNotNull(contractorPaymentUuid, "contractorPaymentUuid");
        this.contractorPaymentUuid = contractorPaymentUuid;
        return this;
    }

    /**
     * A unique identifier of the company making the contractor payment.
     */
    public ContractorPaymentReceipt withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * A unique identifier of the company making the contractor payment.
     */
    public ContractorPaymentReceipt withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The name of the company making the contractor payment.
     */
    public ContractorPaymentReceipt withNameOfSender(String nameOfSender) {
        Utils.checkNotNull(nameOfSender, "nameOfSender");
        this.nameOfSender = Optional.ofNullable(nameOfSender);
        return this;
    }

    /**
     * The name of the company making the contractor payment.
     */
    public ContractorPaymentReceipt withNameOfSender(Optional<String> nameOfSender) {
        Utils.checkNotNull(nameOfSender, "nameOfSender");
        this.nameOfSender = nameOfSender;
        return this;
    }

    /**
     * The individual or company name of the contractor receiving payment.
     */
    public ContractorPaymentReceipt withNameOfRecipient(String nameOfRecipient) {
        Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
        this.nameOfRecipient = Optional.ofNullable(nameOfRecipient);
        return this;
    }

    /**
     * The individual or company name of the contractor receiving payment.
     */
    public ContractorPaymentReceipt withNameOfRecipient(Optional<String> nameOfRecipient) {
        Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
        this.nameOfRecipient = nameOfRecipient;
        return this;
    }

    /**
     * The debit date for the contractor payment.
     */
    public ContractorPaymentReceipt withDebitDate(LocalDate debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = Optional.ofNullable(debitDate);
        return this;
    }

    /**
     * The debit date for the contractor payment.
     */
    public ContractorPaymentReceipt withDebitDate(Optional<LocalDate> debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = debitDate;
        return this;
    }

    /**
     * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
     */
    public ContractorPaymentReceipt withLicense(String license) {
        Utils.checkNotNull(license, "license");
        this.license = Optional.ofNullable(license);
        return this;
    }

    /**
     * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
     */
    public ContractorPaymentReceipt withLicense(Optional<String> license) {
        Utils.checkNotNull(license, "license");
        this.license = license;
        return this;
    }

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    public ContractorPaymentReceipt withLicenseUri(String licenseUri) {
        Utils.checkNotNull(licenseUri, "licenseUri");
        this.licenseUri = Optional.ofNullable(licenseUri);
        return this;
    }

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    public ContractorPaymentReceipt withLicenseUri(Optional<String> licenseUri) {
        Utils.checkNotNull(licenseUri, "licenseUri");
        this.licenseUri = licenseUri;
        return this;
    }

    /**
     * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
     */
    public ContractorPaymentReceipt withRightToRefund(String rightToRefund) {
        Utils.checkNotNull(rightToRefund, "rightToRefund");
        this.rightToRefund = Optional.ofNullable(rightToRefund);
        return this;
    }

    /**
     * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
     */
    public ContractorPaymentReceipt withRightToRefund(Optional<String> rightToRefund) {
        Utils.checkNotNull(rightToRefund, "rightToRefund");
        this.rightToRefund = rightToRefund;
        return this;
    }

    /**
     * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
     */
    public ContractorPaymentReceipt withLiabilityOfLicensee(String liabilityOfLicensee) {
        Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
        this.liabilityOfLicensee = Optional.ofNullable(liabilityOfLicensee);
        return this;
    }

    /**
     * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
     */
    public ContractorPaymentReceipt withLiabilityOfLicensee(Optional<String> liabilityOfLicensee) {
        Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
        this.liabilityOfLicensee = liabilityOfLicensee;
        return this;
    }

    /**
     * The subtotals for the contractor payment.
     */
    public ContractorPaymentReceipt withTotals(ContractorPaymentReceiptTotals totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = Optional.ofNullable(totals);
        return this;
    }

    /**
     * The subtotals for the contractor payment.
     */
    public ContractorPaymentReceipt withTotals(Optional<? extends ContractorPaymentReceiptTotals> totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = totals;
        return this;
    }

    /**
     * An array of contractor payments for this contractor payment.
     */
    public ContractorPaymentReceipt withContractorPayments(List<ContractorPayments> contractorPayments) {
        Utils.checkNotNull(contractorPayments, "contractorPayments");
        this.contractorPayments = Optional.ofNullable(contractorPayments);
        return this;
    }

    /**
     * An array of contractor payments for this contractor payment.
     */
    public ContractorPaymentReceipt withContractorPayments(Optional<? extends List<ContractorPayments>> contractorPayments) {
        Utils.checkNotNull(contractorPayments, "contractorPayments");
        this.contractorPayments = contractorPayments;
        return this;
    }

    /**
     * The licensed payroll processor
     */
    public ContractorPaymentReceipt withLicensee(ContractorPaymentReceiptLicensee licensee) {
        Utils.checkNotNull(licensee, "licensee");
        this.licensee = Optional.ofNullable(licensee);
        return this;
    }

    /**
     * The licensed payroll processor
     */
    public ContractorPaymentReceipt withLicensee(Optional<? extends ContractorPaymentReceiptLicensee> licensee) {
        Utils.checkNotNull(licensee, "licensee");
        this.licensee = licensee;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorPaymentReceipt other = (ContractorPaymentReceipt) o;
        return 
            Objects.deepEquals(this.contractorPaymentUuid, other.contractorPaymentUuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.nameOfSender, other.nameOfSender) &&
            Objects.deepEquals(this.nameOfRecipient, other.nameOfRecipient) &&
            Objects.deepEquals(this.debitDate, other.debitDate) &&
            Objects.deepEquals(this.license, other.license) &&
            Objects.deepEquals(this.licenseUri, other.licenseUri) &&
            Objects.deepEquals(this.rightToRefund, other.rightToRefund) &&
            Objects.deepEquals(this.liabilityOfLicensee, other.liabilityOfLicensee) &&
            Objects.deepEquals(this.totals, other.totals) &&
            Objects.deepEquals(this.contractorPayments, other.contractorPayments) &&
            Objects.deepEquals(this.licensee, other.licensee);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contractorPaymentUuid,
            companyUuid,
            nameOfSender,
            nameOfRecipient,
            debitDate,
            license,
            licenseUri,
            rightToRefund,
            liabilityOfLicensee,
            totals,
            contractorPayments,
            licensee);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorPaymentReceipt.class,
                "contractorPaymentUuid", contractorPaymentUuid,
                "companyUuid", companyUuid,
                "nameOfSender", nameOfSender,
                "nameOfRecipient", nameOfRecipient,
                "debitDate", debitDate,
                "license", license,
                "licenseUri", licenseUri,
                "rightToRefund", rightToRefund,
                "liabilityOfLicensee", liabilityOfLicensee,
                "totals", totals,
                "contractorPayments", contractorPayments,
                "licensee", licensee);
    }
    
    public final static class Builder {
 
        private Optional<String> contractorPaymentUuid = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> nameOfSender = Optional.empty();
 
        private Optional<String> nameOfRecipient = Optional.empty();
 
        private Optional<LocalDate> debitDate = Optional.empty();
 
        private Optional<String> license = Optional.empty();
 
        private Optional<String> licenseUri = Optional.empty();
 
        private Optional<String> rightToRefund = Optional.empty();
 
        private Optional<String> liabilityOfLicensee = Optional.empty();
 
        private Optional<? extends ContractorPaymentReceiptTotals> totals = Optional.empty();
 
        private Optional<? extends List<ContractorPayments>> contractorPayments = Optional.empty();
 
        private Optional<? extends ContractorPaymentReceiptLicensee> licensee = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier of the contractor payment receipt.
         */
        public Builder contractorPaymentUuid(String contractorPaymentUuid) {
            Utils.checkNotNull(contractorPaymentUuid, "contractorPaymentUuid");
            this.contractorPaymentUuid = Optional.ofNullable(contractorPaymentUuid);
            return this;
        }

        /**
         * A unique identifier of the contractor payment receipt.
         */
        public Builder contractorPaymentUuid(Optional<String> contractorPaymentUuid) {
            Utils.checkNotNull(contractorPaymentUuid, "contractorPaymentUuid");
            this.contractorPaymentUuid = contractorPaymentUuid;
            return this;
        }

        /**
         * A unique identifier of the company making the contractor payment.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * A unique identifier of the company making the contractor payment.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The name of the company making the contractor payment.
         */
        public Builder nameOfSender(String nameOfSender) {
            Utils.checkNotNull(nameOfSender, "nameOfSender");
            this.nameOfSender = Optional.ofNullable(nameOfSender);
            return this;
        }

        /**
         * The name of the company making the contractor payment.
         */
        public Builder nameOfSender(Optional<String> nameOfSender) {
            Utils.checkNotNull(nameOfSender, "nameOfSender");
            this.nameOfSender = nameOfSender;
            return this;
        }

        /**
         * The individual or company name of the contractor receiving payment.
         */
        public Builder nameOfRecipient(String nameOfRecipient) {
            Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
            this.nameOfRecipient = Optional.ofNullable(nameOfRecipient);
            return this;
        }

        /**
         * The individual or company name of the contractor receiving payment.
         */
        public Builder nameOfRecipient(Optional<String> nameOfRecipient) {
            Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
            this.nameOfRecipient = nameOfRecipient;
            return this;
        }

        /**
         * The debit date for the contractor payment.
         */
        public Builder debitDate(LocalDate debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = Optional.ofNullable(debitDate);
            return this;
        }

        /**
         * The debit date for the contractor payment.
         */
        public Builder debitDate(Optional<LocalDate> debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = debitDate;
            return this;
        }

        /**
         * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
         */
        public Builder license(String license) {
            Utils.checkNotNull(license, "license");
            this.license = Optional.ofNullable(license);
            return this;
        }

        /**
         * Always the fixed string "Your payroll provider partners with Gusto Inc. for payments processing. Gusto Inc. is a licensed money transmitter. Learn more on our license page."
         */
        public Builder license(Optional<String> license) {
            Utils.checkNotNull(license, "license");
            this.license = license;
            return this;
        }

        /**
         * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder licenseUri(String licenseUri) {
            Utils.checkNotNull(licenseUri, "licenseUri");
            this.licenseUri = Optional.ofNullable(licenseUri);
            return this;
        }

        /**
         * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder licenseUri(Optional<String> licenseUri) {
            Utils.checkNotNull(licenseUri, "licenseUri");
            this.licenseUri = licenseUri;
            return this;
        }

        /**
         * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder rightToRefund(String rightToRefund) {
            Utils.checkNotNull(rightToRefund, "rightToRefund");
            this.rightToRefund = Optional.ofNullable(rightToRefund);
            return this;
        }

        /**
         * URL for information related to right to refund. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder rightToRefund(Optional<String> rightToRefund) {
            Utils.checkNotNull(rightToRefund, "rightToRefund");
            this.rightToRefund = rightToRefund;
            return this;
        }

        /**
         * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder liabilityOfLicensee(String liabilityOfLicensee) {
            Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
            this.liabilityOfLicensee = Optional.ofNullable(liabilityOfLicensee);
            return this;
        }

        /**
         * URL for information related to right to liability of licensee. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder liabilityOfLicensee(Optional<String> liabilityOfLicensee) {
            Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
            this.liabilityOfLicensee = liabilityOfLicensee;
            return this;
        }

        /**
         * The subtotals for the contractor payment.
         */
        public Builder totals(ContractorPaymentReceiptTotals totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = Optional.ofNullable(totals);
            return this;
        }

        /**
         * The subtotals for the contractor payment.
         */
        public Builder totals(Optional<? extends ContractorPaymentReceiptTotals> totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = totals;
            return this;
        }

        /**
         * An array of contractor payments for this contractor payment.
         */
        public Builder contractorPayments(List<ContractorPayments> contractorPayments) {
            Utils.checkNotNull(contractorPayments, "contractorPayments");
            this.contractorPayments = Optional.ofNullable(contractorPayments);
            return this;
        }

        /**
         * An array of contractor payments for this contractor payment.
         */
        public Builder contractorPayments(Optional<? extends List<ContractorPayments>> contractorPayments) {
            Utils.checkNotNull(contractorPayments, "contractorPayments");
            this.contractorPayments = contractorPayments;
            return this;
        }

        /**
         * The licensed payroll processor
         */
        public Builder licensee(ContractorPaymentReceiptLicensee licensee) {
            Utils.checkNotNull(licensee, "licensee");
            this.licensee = Optional.ofNullable(licensee);
            return this;
        }

        /**
         * The licensed payroll processor
         */
        public Builder licensee(Optional<? extends ContractorPaymentReceiptLicensee> licensee) {
            Utils.checkNotNull(licensee, "licensee");
            this.licensee = licensee;
            return this;
        }
        
        public ContractorPaymentReceipt build() {
            return new ContractorPaymentReceipt(
                contractorPaymentUuid,
                companyUuid,
                nameOfSender,
                nameOfRecipient,
                debitDate,
                license,
                licenseUri,
                rightToRefund,
                liabilityOfLicensee,
                totals,
                contractorPayments,
                licensee);
        }
    }
}

