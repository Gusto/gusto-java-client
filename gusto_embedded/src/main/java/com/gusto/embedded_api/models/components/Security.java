/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gusto.embedded_api.utils.HasSecurity;
import com.gusto.embedded_api.utils.SpeakeasyMetadata;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class Security implements HasSecurity {

    @SpeakeasyMetadata("security:scheme=true,type=http,subtype=bearer,name=Authorization")
    private Optional<String> companyAccessAuth;

    @JsonCreator
    public Security(
            Optional<String> companyAccessAuth) {
        Utils.checkNotNull(companyAccessAuth, "companyAccessAuth");
        this.companyAccessAuth = companyAccessAuth;
    }
    
    public Security() {
        this(Optional.empty());
    }

    @JsonIgnore
    public Optional<String> companyAccessAuth() {
        return companyAccessAuth;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Security withCompanyAccessAuth(String companyAccessAuth) {
        Utils.checkNotNull(companyAccessAuth, "companyAccessAuth");
        this.companyAccessAuth = Optional.ofNullable(companyAccessAuth);
        return this;
    }

    public Security withCompanyAccessAuth(Optional<String> companyAccessAuth) {
        Utils.checkNotNull(companyAccessAuth, "companyAccessAuth");
        this.companyAccessAuth = companyAccessAuth;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Security other = (Security) o;
        return 
            Objects.deepEquals(this.companyAccessAuth, other.companyAccessAuth);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyAccessAuth);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Security.class,
                "companyAccessAuth", companyAccessAuth);
    }
    
    public final static class Builder {
 
        private Optional<String> companyAccessAuth = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder companyAccessAuth(String companyAccessAuth) {
            Utils.checkNotNull(companyAccessAuth, "companyAccessAuth");
            this.companyAccessAuth = Optional.ofNullable(companyAccessAuth);
            return this;
        }

        public Builder companyAccessAuth(Optional<String> companyAccessAuth) {
            Utils.checkNotNull(companyAccessAuth, "companyAccessAuth");
            this.companyAccessAuth = companyAccessAuth;
            return this;
        }
        
        public Security build() {
            return new Security(
                companyAccessAuth);
        }
    }
}

