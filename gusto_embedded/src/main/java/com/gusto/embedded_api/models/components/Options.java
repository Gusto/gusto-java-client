/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class Options {

    /**
     * An allowed value to answer the question
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private Optional<? extends EmployeeStateTaxInputQuestionFormatValue> value;

    /**
     * A display label that corresponds to the answer value
     */
    @JsonProperty("label")
    private String label;

    @JsonCreator
    public Options(
            @JsonProperty("value") Optional<? extends EmployeeStateTaxInputQuestionFormatValue> value,
            @JsonProperty("label") String label) {
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(label, "label");
        this.value = value;
        this.label = label;
    }
    
    public Options(
            String label) {
        this(Optional.empty(), label);
    }

    /**
     * An allowed value to answer the question
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmployeeStateTaxInputQuestionFormatValue> value() {
        return (Optional<EmployeeStateTaxInputQuestionFormatValue>) value;
    }

    /**
     * A display label that corresponds to the answer value
     */
    @JsonIgnore
    public String label() {
        return label;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * An allowed value to answer the question
     */
    public Options withValue(EmployeeStateTaxInputQuestionFormatValue value) {
        Utils.checkNotNull(value, "value");
        this.value = Optional.ofNullable(value);
        return this;
    }

    /**
     * An allowed value to answer the question
     */
    public Options withValue(Optional<? extends EmployeeStateTaxInputQuestionFormatValue> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * A display label that corresponds to the answer value
     */
    public Options withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Options other = (Options) o;
        return 
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.label, other.label);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            value,
            label);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Options.class,
                "value", value,
                "label", label);
    }
    
    public final static class Builder {
 
        private Optional<? extends EmployeeStateTaxInputQuestionFormatValue> value = Optional.empty();
 
        private String label;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * An allowed value to answer the question
         */
        public Builder value(EmployeeStateTaxInputQuestionFormatValue value) {
            Utils.checkNotNull(value, "value");
            this.value = Optional.ofNullable(value);
            return this;
        }

        /**
         * An allowed value to answer the question
         */
        public Builder value(Optional<? extends EmployeeStateTaxInputQuestionFormatValue> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * A display label that corresponds to the answer value
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }
        
        public Options build() {
            return new Options(
                value,
                label);
        }
    }
}

