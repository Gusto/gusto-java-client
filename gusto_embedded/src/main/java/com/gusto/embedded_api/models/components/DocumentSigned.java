/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class DocumentSigned {

    /**
     * The UUID of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * The title of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The type identifier of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_type")
    private Optional<? extends DocumentSignedRecipientType> recipientType;

    /**
     * Unique identifier for the recipient associated with the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_uuid")
    private Optional<String> recipientUuid;

    /**
     * When the document was signed (will be `null` if unsigned)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signed_at")
    private JsonNullable<String> signedAt;

    /**
     * The description of the document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requires_signing")
    private Optional<Boolean> requiresSigning;

    /**
     * If the document is in a draft state
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("draft")
    private Optional<Boolean> draft;

    /**
     * The year of this document. This value is nullable and will not be present on all documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("year")
    private JsonNullable<Long> year;

    /**
     * The quarter of this document. This value is nullable and will not be present on all documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("quarter")
    private JsonNullable<Long> quarter;

    @JsonCreator
    public DocumentSigned(
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("recipient_type") Optional<? extends DocumentSignedRecipientType> recipientType,
            @JsonProperty("recipient_uuid") Optional<String> recipientUuid,
            @JsonProperty("signed_at") JsonNullable<String> signedAt,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("requires_signing") Optional<Boolean> requiresSigning,
            @JsonProperty("draft") Optional<Boolean> draft,
            @JsonProperty("year") JsonNullable<Long> year,
            @JsonProperty("quarter") JsonNullable<Long> quarter) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(recipientType, "recipientType");
        Utils.checkNotNull(recipientUuid, "recipientUuid");
        Utils.checkNotNull(signedAt, "signedAt");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(requiresSigning, "requiresSigning");
        Utils.checkNotNull(draft, "draft");
        Utils.checkNotNull(year, "year");
        Utils.checkNotNull(quarter, "quarter");
        this.uuid = uuid;
        this.title = title;
        this.name = name;
        this.recipientType = recipientType;
        this.recipientUuid = recipientUuid;
        this.signedAt = signedAt;
        this.description = description;
        this.requiresSigning = requiresSigning;
        this.draft = draft;
        this.year = year;
        this.quarter = quarter;
    }
    
    public DocumentSigned() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The UUID of the document
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * The title of the document
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The type identifier of the document
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentSignedRecipientType> recipientType() {
        return (Optional<DocumentSignedRecipientType>) recipientType;
    }

    /**
     * Unique identifier for the recipient associated with the document
     */
    @JsonIgnore
    public Optional<String> recipientUuid() {
        return recipientUuid;
    }

    /**
     * When the document was signed (will be `null` if unsigned)
     */
    @JsonIgnore
    public JsonNullable<String> signedAt() {
        return signedAt;
    }

    /**
     * The description of the document
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
     */
    @JsonIgnore
    public Optional<Boolean> requiresSigning() {
        return requiresSigning;
    }

    /**
     * If the document is in a draft state
     */
    @JsonIgnore
    public Optional<Boolean> draft() {
        return draft;
    }

    /**
     * The year of this document. This value is nullable and will not be present on all documents.
     */
    @JsonIgnore
    public JsonNullable<Long> year() {
        return year;
    }

    /**
     * The quarter of this document. This value is nullable and will not be present on all documents.
     */
    @JsonIgnore
    public JsonNullable<Long> quarter() {
        return quarter;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the document
     */
    public DocumentSigned withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * The UUID of the document
     */
    public DocumentSigned withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The title of the document
     */
    public DocumentSigned withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The title of the document
     */
    public DocumentSigned withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The type identifier of the document
     */
    public DocumentSigned withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The type identifier of the document
     */
    public DocumentSigned withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
     */
    public DocumentSigned withRecipientType(DocumentSignedRecipientType recipientType) {
        Utils.checkNotNull(recipientType, "recipientType");
        this.recipientType = Optional.ofNullable(recipientType);
        return this;
    }

    /**
     * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
     */
    public DocumentSigned withRecipientType(Optional<? extends DocumentSignedRecipientType> recipientType) {
        Utils.checkNotNull(recipientType, "recipientType");
        this.recipientType = recipientType;
        return this;
    }

    /**
     * Unique identifier for the recipient associated with the document
     */
    public DocumentSigned withRecipientUuid(String recipientUuid) {
        Utils.checkNotNull(recipientUuid, "recipientUuid");
        this.recipientUuid = Optional.ofNullable(recipientUuid);
        return this;
    }

    /**
     * Unique identifier for the recipient associated with the document
     */
    public DocumentSigned withRecipientUuid(Optional<String> recipientUuid) {
        Utils.checkNotNull(recipientUuid, "recipientUuid");
        this.recipientUuid = recipientUuid;
        return this;
    }

    /**
     * When the document was signed (will be `null` if unsigned)
     */
    public DocumentSigned withSignedAt(String signedAt) {
        Utils.checkNotNull(signedAt, "signedAt");
        this.signedAt = JsonNullable.of(signedAt);
        return this;
    }

    /**
     * When the document was signed (will be `null` if unsigned)
     */
    public DocumentSigned withSignedAt(JsonNullable<String> signedAt) {
        Utils.checkNotNull(signedAt, "signedAt");
        this.signedAt = signedAt;
        return this;
    }

    /**
     * The description of the document
     */
    public DocumentSigned withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the document
     */
    public DocumentSigned withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
     */
    public DocumentSigned withRequiresSigning(boolean requiresSigning) {
        Utils.checkNotNull(requiresSigning, "requiresSigning");
        this.requiresSigning = Optional.ofNullable(requiresSigning);
        return this;
    }

    /**
     * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
     */
    public DocumentSigned withRequiresSigning(Optional<Boolean> requiresSigning) {
        Utils.checkNotNull(requiresSigning, "requiresSigning");
        this.requiresSigning = requiresSigning;
        return this;
    }

    /**
     * If the document is in a draft state
     */
    public DocumentSigned withDraft(boolean draft) {
        Utils.checkNotNull(draft, "draft");
        this.draft = Optional.ofNullable(draft);
        return this;
    }

    /**
     * If the document is in a draft state
     */
    public DocumentSigned withDraft(Optional<Boolean> draft) {
        Utils.checkNotNull(draft, "draft");
        this.draft = draft;
        return this;
    }

    /**
     * The year of this document. This value is nullable and will not be present on all documents.
     */
    public DocumentSigned withYear(long year) {
        Utils.checkNotNull(year, "year");
        this.year = JsonNullable.of(year);
        return this;
    }

    /**
     * The year of this document. This value is nullable and will not be present on all documents.
     */
    public DocumentSigned withYear(JsonNullable<Long> year) {
        Utils.checkNotNull(year, "year");
        this.year = year;
        return this;
    }

    /**
     * The quarter of this document. This value is nullable and will not be present on all documents.
     */
    public DocumentSigned withQuarter(long quarter) {
        Utils.checkNotNull(quarter, "quarter");
        this.quarter = JsonNullable.of(quarter);
        return this;
    }

    /**
     * The quarter of this document. This value is nullable and will not be present on all documents.
     */
    public DocumentSigned withQuarter(JsonNullable<Long> quarter) {
        Utils.checkNotNull(quarter, "quarter");
        this.quarter = quarter;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        DocumentSigned other = (DocumentSigned) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.recipientType, other.recipientType) &&
            Objects.deepEquals(this.recipientUuid, other.recipientUuid) &&
            Objects.deepEquals(this.signedAt, other.signedAt) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.requiresSigning, other.requiresSigning) &&
            Objects.deepEquals(this.draft, other.draft) &&
            Objects.deepEquals(this.year, other.year) &&
            Objects.deepEquals(this.quarter, other.quarter);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            title,
            name,
            recipientType,
            recipientUuid,
            signedAt,
            description,
            requiresSigning,
            draft,
            year,
            quarter);
    }
    
    @Override
    public String toString() {
        return Utils.toString(DocumentSigned.class,
                "uuid", uuid,
                "title", title,
                "name", name,
                "recipientType", recipientType,
                "recipientUuid", recipientUuid,
                "signedAt", signedAt,
                "description", description,
                "requiresSigning", requiresSigning,
                "draft", draft,
                "year", year,
                "quarter", quarter);
    }
    
    public final static class Builder {
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<? extends DocumentSignedRecipientType> recipientType = Optional.empty();
 
        private Optional<String> recipientUuid = Optional.empty();
 
        private JsonNullable<String> signedAt = JsonNullable.undefined();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Boolean> requiresSigning = Optional.empty();
 
        private Optional<Boolean> draft = Optional.empty();
 
        private JsonNullable<Long> year = JsonNullable.undefined();
 
        private JsonNullable<Long> quarter = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the document
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * The UUID of the document
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The title of the document
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The title of the document
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The type identifier of the document
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The type identifier of the document
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
         */
        public Builder recipientType(DocumentSignedRecipientType recipientType) {
            Utils.checkNotNull(recipientType, "recipientType");
            this.recipientType = Optional.ofNullable(recipientType);
            return this;
        }

        /**
         * The type of recipient associated with the document (will be `Contractor` for Contractor Documents)
         */
        public Builder recipientType(Optional<? extends DocumentSignedRecipientType> recipientType) {
            Utils.checkNotNull(recipientType, "recipientType");
            this.recipientType = recipientType;
            return this;
        }

        /**
         * Unique identifier for the recipient associated with the document
         */
        public Builder recipientUuid(String recipientUuid) {
            Utils.checkNotNull(recipientUuid, "recipientUuid");
            this.recipientUuid = Optional.ofNullable(recipientUuid);
            return this;
        }

        /**
         * Unique identifier for the recipient associated with the document
         */
        public Builder recipientUuid(Optional<String> recipientUuid) {
            Utils.checkNotNull(recipientUuid, "recipientUuid");
            this.recipientUuid = recipientUuid;
            return this;
        }

        /**
         * When the document was signed (will be `null` if unsigned)
         */
        public Builder signedAt(String signedAt) {
            Utils.checkNotNull(signedAt, "signedAt");
            this.signedAt = JsonNullable.of(signedAt);
            return this;
        }

        /**
         * When the document was signed (will be `null` if unsigned)
         */
        public Builder signedAt(JsonNullable<String> signedAt) {
            Utils.checkNotNull(signedAt, "signedAt");
            this.signedAt = signedAt;
            return this;
        }

        /**
         * The description of the document
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the document
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
         */
        public Builder requiresSigning(boolean requiresSigning) {
            Utils.checkNotNull(requiresSigning, "requiresSigning");
            this.requiresSigning = Optional.ofNullable(requiresSigning);
            return this;
        }

        /**
         * A boolean flag that indicates whether the document needs signing or not. Note that this value will change after the document is signed.
         */
        public Builder requiresSigning(Optional<Boolean> requiresSigning) {
            Utils.checkNotNull(requiresSigning, "requiresSigning");
            this.requiresSigning = requiresSigning;
            return this;
        }

        /**
         * If the document is in a draft state
         */
        public Builder draft(boolean draft) {
            Utils.checkNotNull(draft, "draft");
            this.draft = Optional.ofNullable(draft);
            return this;
        }

        /**
         * If the document is in a draft state
         */
        public Builder draft(Optional<Boolean> draft) {
            Utils.checkNotNull(draft, "draft");
            this.draft = draft;
            return this;
        }

        /**
         * The year of this document. This value is nullable and will not be present on all documents.
         */
        public Builder year(long year) {
            Utils.checkNotNull(year, "year");
            this.year = JsonNullable.of(year);
            return this;
        }

        /**
         * The year of this document. This value is nullable and will not be present on all documents.
         */
        public Builder year(JsonNullable<Long> year) {
            Utils.checkNotNull(year, "year");
            this.year = year;
            return this;
        }

        /**
         * The quarter of this document. This value is nullable and will not be present on all documents.
         */
        public Builder quarter(long quarter) {
            Utils.checkNotNull(quarter, "quarter");
            this.quarter = JsonNullable.of(quarter);
            return this;
        }

        /**
         * The quarter of this document. This value is nullable and will not be present on all documents.
         */
        public Builder quarter(JsonNullable<Long> quarter) {
            Utils.checkNotNull(quarter, "quarter");
            this.quarter = quarter;
            return this;
        }
        
        public DocumentSigned build() {
            return new DocumentSigned(
                uuid,
                title,
                name,
                recipientType,
                recipientUuid,
                signedAt,
                description,
                requiresSigning,
                draft,
                year,
                quarter);
        }
    }
}

