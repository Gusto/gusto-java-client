/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PutV1EmployeesEmployeeIdI9AuthorizationRequestBody {

    /**
     * The employee's authorization status
     * 
     * <p>  * `citizen`: A citizen is someone who was born in the United States or is a naturalized citizen living in the United States.
     *   * `noncitizen`: A noncitizen national is someone born in American Samoa, certain former citizens of the former Trust Territory of the Pacific Islands, and certain children of noncitizen nationals born abroad.
     *   * `permanent_resident`: A lawful permanent resident is someone who is not a US citizen and who resides under legally recognized and lawfully recorded permanent residence as an immigrant.
     *   * `alien`: Also referred to as a "noncitizen authorized to work". This includes anyone who is authorized to work in the United States but is not a US citizen, US national or lawful permanent resident.
     */
    @JsonProperty("authorization_status")
    private AuthorizationStatus authorizationStatus;

    /**
     * The type of document an employee holds, based on their authorization status.
     * 
     * <p>  * This is unused for authorization status `citizen` or `noncitizen`.
     *   * If the authorization status is `permanent_resident`, this must be `uscis_alien_registration_number`.
     *   * If the authorization status is `alien`, this is required and may be any of the valid values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_type")
    private Optional<? extends DocumentType> documentType;

    /**
     * The document number. Formatting depends on the employee's document type.
     * 
     * <p>  * For `document_type:'uscis_alien_registration_number'`, this must be a USCIS Number/A-Number, which is 7 to 9 digits.
     *   * For `document_type:'form_i94'`, this must be a Form I-94 Admission Number, which is 11 digits.
     *   * For `document_type:'foreign_passport'`, this must be the passport number.
     * 
     * <p>This is required when the document type is present.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_number")
    private Optional<String> documentNumber;

    /**
     * The document's country of issuance.
     * 
     * <p>This is required when the document type is `foreign_passport`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("country")
    private Optional<String> country;

    /**
     * The document's expiration date.
     * 
     * <p>This may only be used when the authorization status is `alien`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expiration_date")
    private Optional<String> expirationDate;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. If supplied, this endpoint will update the existing I-9 authorization if it exists.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    @JsonCreator
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody(
            @JsonProperty("authorization_status") AuthorizationStatus authorizationStatus,
            @JsonProperty("document_type") Optional<? extends DocumentType> documentType,
            @JsonProperty("document_number") Optional<String> documentNumber,
            @JsonProperty("country") Optional<String> country,
            @JsonProperty("expiration_date") Optional<String> expirationDate,
            @JsonProperty("version") Optional<String> version) {
        Utils.checkNotNull(authorizationStatus, "authorizationStatus");
        Utils.checkNotNull(documentType, "documentType");
        Utils.checkNotNull(documentNumber, "documentNumber");
        Utils.checkNotNull(country, "country");
        Utils.checkNotNull(expirationDate, "expirationDate");
        Utils.checkNotNull(version, "version");
        this.authorizationStatus = authorizationStatus;
        this.documentType = documentType;
        this.documentNumber = documentNumber;
        this.country = country;
        this.expirationDate = expirationDate;
        this.version = version;
    }
    
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody(
            AuthorizationStatus authorizationStatus) {
        this(authorizationStatus, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The employee's authorization status
     * 
     * <p>  * `citizen`: A citizen is someone who was born in the United States or is a naturalized citizen living in the United States.
     *   * `noncitizen`: A noncitizen national is someone born in American Samoa, certain former citizens of the former Trust Territory of the Pacific Islands, and certain children of noncitizen nationals born abroad.
     *   * `permanent_resident`: A lawful permanent resident is someone who is not a US citizen and who resides under legally recognized and lawfully recorded permanent residence as an immigrant.
     *   * `alien`: Also referred to as a "noncitizen authorized to work". This includes anyone who is authorized to work in the United States but is not a US citizen, US national or lawful permanent resident.
     */
    @JsonIgnore
    public AuthorizationStatus authorizationStatus() {
        return authorizationStatus;
    }

    /**
     * The type of document an employee holds, based on their authorization status.
     * 
     * <p>  * This is unused for authorization status `citizen` or `noncitizen`.
     *   * If the authorization status is `permanent_resident`, this must be `uscis_alien_registration_number`.
     *   * If the authorization status is `alien`, this is required and may be any of the valid values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<DocumentType> documentType() {
        return (Optional<DocumentType>) documentType;
    }

    /**
     * The document number. Formatting depends on the employee's document type.
     * 
     * <p>  * For `document_type:'uscis_alien_registration_number'`, this must be a USCIS Number/A-Number, which is 7 to 9 digits.
     *   * For `document_type:'form_i94'`, this must be a Form I-94 Admission Number, which is 11 digits.
     *   * For `document_type:'foreign_passport'`, this must be the passport number.
     * 
     * <p>This is required when the document type is present.
     */
    @JsonIgnore
    public Optional<String> documentNumber() {
        return documentNumber;
    }

    /**
     * The document's country of issuance.
     * 
     * <p>This is required when the document type is `foreign_passport`.
     */
    @JsonIgnore
    public Optional<String> country() {
        return country;
    }

    /**
     * The document's expiration date.
     * 
     * <p>This may only be used when the authorization status is `alien`.
     */
    @JsonIgnore
    public Optional<String> expirationDate() {
        return expirationDate;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. If supplied, this endpoint will update the existing I-9 authorization if it exists.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The employee's authorization status
     * 
     * <p>  * `citizen`: A citizen is someone who was born in the United States or is a naturalized citizen living in the United States.
     *   * `noncitizen`: A noncitizen national is someone born in American Samoa, certain former citizens of the former Trust Territory of the Pacific Islands, and certain children of noncitizen nationals born abroad.
     *   * `permanent_resident`: A lawful permanent resident is someone who is not a US citizen and who resides under legally recognized and lawfully recorded permanent residence as an immigrant.
     *   * `alien`: Also referred to as a "noncitizen authorized to work". This includes anyone who is authorized to work in the United States but is not a US citizen, US national or lawful permanent resident.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withAuthorizationStatus(AuthorizationStatus authorizationStatus) {
        Utils.checkNotNull(authorizationStatus, "authorizationStatus");
        this.authorizationStatus = authorizationStatus;
        return this;
    }

    /**
     * The type of document an employee holds, based on their authorization status.
     * 
     * <p>  * This is unused for authorization status `citizen` or `noncitizen`.
     *   * If the authorization status is `permanent_resident`, this must be `uscis_alien_registration_number`.
     *   * If the authorization status is `alien`, this is required and may be any of the valid values.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withDocumentType(DocumentType documentType) {
        Utils.checkNotNull(documentType, "documentType");
        this.documentType = Optional.ofNullable(documentType);
        return this;
    }

    /**
     * The type of document an employee holds, based on their authorization status.
     * 
     * <p>  * This is unused for authorization status `citizen` or `noncitizen`.
     *   * If the authorization status is `permanent_resident`, this must be `uscis_alien_registration_number`.
     *   * If the authorization status is `alien`, this is required and may be any of the valid values.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withDocumentType(Optional<? extends DocumentType> documentType) {
        Utils.checkNotNull(documentType, "documentType");
        this.documentType = documentType;
        return this;
    }

    /**
     * The document number. Formatting depends on the employee's document type.
     * 
     * <p>  * For `document_type:'uscis_alien_registration_number'`, this must be a USCIS Number/A-Number, which is 7 to 9 digits.
     *   * For `document_type:'form_i94'`, this must be a Form I-94 Admission Number, which is 11 digits.
     *   * For `document_type:'foreign_passport'`, this must be the passport number.
     * 
     * <p>This is required when the document type is present.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withDocumentNumber(String documentNumber) {
        Utils.checkNotNull(documentNumber, "documentNumber");
        this.documentNumber = Optional.ofNullable(documentNumber);
        return this;
    }

    /**
     * The document number. Formatting depends on the employee's document type.
     * 
     * <p>  * For `document_type:'uscis_alien_registration_number'`, this must be a USCIS Number/A-Number, which is 7 to 9 digits.
     *   * For `document_type:'form_i94'`, this must be a Form I-94 Admission Number, which is 11 digits.
     *   * For `document_type:'foreign_passport'`, this must be the passport number.
     * 
     * <p>This is required when the document type is present.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withDocumentNumber(Optional<String> documentNumber) {
        Utils.checkNotNull(documentNumber, "documentNumber");
        this.documentNumber = documentNumber;
        return this;
    }

    /**
     * The document's country of issuance.
     * 
     * <p>This is required when the document type is `foreign_passport`.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withCountry(String country) {
        Utils.checkNotNull(country, "country");
        this.country = Optional.ofNullable(country);
        return this;
    }

    /**
     * The document's country of issuance.
     * 
     * <p>This is required when the document type is `foreign_passport`.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withCountry(Optional<String> country) {
        Utils.checkNotNull(country, "country");
        this.country = country;
        return this;
    }

    /**
     * The document's expiration date.
     * 
     * <p>This may only be used when the authorization status is `alien`.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withExpirationDate(String expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = Optional.ofNullable(expirationDate);
        return this;
    }

    /**
     * The document's expiration date.
     * 
     * <p>This may only be used when the authorization status is `alien`.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withExpirationDate(Optional<String> expirationDate) {
        Utils.checkNotNull(expirationDate, "expirationDate");
        this.expirationDate = expirationDate;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. If supplied, this endpoint will update the existing I-9 authorization if it exists.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. If supplied, this endpoint will update the existing I-9 authorization if it exists.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1EmployeesEmployeeIdI9AuthorizationRequestBody other = (PutV1EmployeesEmployeeIdI9AuthorizationRequestBody) o;
        return 
            Objects.deepEquals(this.authorizationStatus, other.authorizationStatus) &&
            Objects.deepEquals(this.documentType, other.documentType) &&
            Objects.deepEquals(this.documentNumber, other.documentNumber) &&
            Objects.deepEquals(this.country, other.country) &&
            Objects.deepEquals(this.expirationDate, other.expirationDate) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            authorizationStatus,
            documentType,
            documentNumber,
            country,
            expirationDate,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1EmployeesEmployeeIdI9AuthorizationRequestBody.class,
                "authorizationStatus", authorizationStatus,
                "documentType", documentType,
                "documentNumber", documentNumber,
                "country", country,
                "expirationDate", expirationDate,
                "version", version);
    }
    
    public final static class Builder {
 
        private AuthorizationStatus authorizationStatus;
 
        private Optional<? extends DocumentType> documentType = Optional.empty();
 
        private Optional<String> documentNumber = Optional.empty();
 
        private Optional<String> country = Optional.empty();
 
        private Optional<String> expirationDate = Optional.empty();
 
        private Optional<String> version = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The employee's authorization status
         * 
         * <p>  * `citizen`: A citizen is someone who was born in the United States or is a naturalized citizen living in the United States.
         *   * `noncitizen`: A noncitizen national is someone born in American Samoa, certain former citizens of the former Trust Territory of the Pacific Islands, and certain children of noncitizen nationals born abroad.
         *   * `permanent_resident`: A lawful permanent resident is someone who is not a US citizen and who resides under legally recognized and lawfully recorded permanent residence as an immigrant.
         *   * `alien`: Also referred to as a "noncitizen authorized to work". This includes anyone who is authorized to work in the United States but is not a US citizen, US national or lawful permanent resident.
         */
        public Builder authorizationStatus(AuthorizationStatus authorizationStatus) {
            Utils.checkNotNull(authorizationStatus, "authorizationStatus");
            this.authorizationStatus = authorizationStatus;
            return this;
        }

        /**
         * The type of document an employee holds, based on their authorization status.
         * 
         * <p>  * This is unused for authorization status `citizen` or `noncitizen`.
         *   * If the authorization status is `permanent_resident`, this must be `uscis_alien_registration_number`.
         *   * If the authorization status is `alien`, this is required and may be any of the valid values.
         */
        public Builder documentType(DocumentType documentType) {
            Utils.checkNotNull(documentType, "documentType");
            this.documentType = Optional.ofNullable(documentType);
            return this;
        }

        /**
         * The type of document an employee holds, based on their authorization status.
         * 
         * <p>  * This is unused for authorization status `citizen` or `noncitizen`.
         *   * If the authorization status is `permanent_resident`, this must be `uscis_alien_registration_number`.
         *   * If the authorization status is `alien`, this is required and may be any of the valid values.
         */
        public Builder documentType(Optional<? extends DocumentType> documentType) {
            Utils.checkNotNull(documentType, "documentType");
            this.documentType = documentType;
            return this;
        }

        /**
         * The document number. Formatting depends on the employee's document type.
         * 
         * <p>  * For `document_type:'uscis_alien_registration_number'`, this must be a USCIS Number/A-Number, which is 7 to 9 digits.
         *   * For `document_type:'form_i94'`, this must be a Form I-94 Admission Number, which is 11 digits.
         *   * For `document_type:'foreign_passport'`, this must be the passport number.
         * 
         * <p>This is required when the document type is present.
         */
        public Builder documentNumber(String documentNumber) {
            Utils.checkNotNull(documentNumber, "documentNumber");
            this.documentNumber = Optional.ofNullable(documentNumber);
            return this;
        }

        /**
         * The document number. Formatting depends on the employee's document type.
         * 
         * <p>  * For `document_type:'uscis_alien_registration_number'`, this must be a USCIS Number/A-Number, which is 7 to 9 digits.
         *   * For `document_type:'form_i94'`, this must be a Form I-94 Admission Number, which is 11 digits.
         *   * For `document_type:'foreign_passport'`, this must be the passport number.
         * 
         * <p>This is required when the document type is present.
         */
        public Builder documentNumber(Optional<String> documentNumber) {
            Utils.checkNotNull(documentNumber, "documentNumber");
            this.documentNumber = documentNumber;
            return this;
        }

        /**
         * The document's country of issuance.
         * 
         * <p>This is required when the document type is `foreign_passport`.
         */
        public Builder country(String country) {
            Utils.checkNotNull(country, "country");
            this.country = Optional.ofNullable(country);
            return this;
        }

        /**
         * The document's country of issuance.
         * 
         * <p>This is required when the document type is `foreign_passport`.
         */
        public Builder country(Optional<String> country) {
            Utils.checkNotNull(country, "country");
            this.country = country;
            return this;
        }

        /**
         * The document's expiration date.
         * 
         * <p>This may only be used when the authorization status is `alien`.
         */
        public Builder expirationDate(String expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = Optional.ofNullable(expirationDate);
            return this;
        }

        /**
         * The document's expiration date.
         * 
         * <p>This may only be used when the authorization status is `alien`.
         */
        public Builder expirationDate(Optional<String> expirationDate) {
            Utils.checkNotNull(expirationDate, "expirationDate");
            this.expirationDate = expirationDate;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. If supplied, this endpoint will update the existing I-9 authorization if it exists.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field. If supplied, this endpoint will update the existing I-9 authorization if it exists.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public PutV1EmployeesEmployeeIdI9AuthorizationRequestBody build() {
            return new PutV1EmployeesEmployeeIdI9AuthorizationRequestBody(
                authorizationStatus,
                documentType,
                documentNumber,
                country,
                expirationDate,
                version);
        }
    }
}

