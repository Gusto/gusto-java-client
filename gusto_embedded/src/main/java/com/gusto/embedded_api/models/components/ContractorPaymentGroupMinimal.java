/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * ContractorPaymentGroupMinimal - The summary of a contractor payment group.
 */

public class ContractorPaymentGroupMinimal {

    /**
     * The unique identifier of the contractor payment group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * The UUID of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The check date of the contractor payment group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * The debit date of the contractor payment group.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debit_date")
    private Optional<String> debitDate;

    /**
     * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends ContractorPaymentGroupMinimalStatus> status;

    /**
     * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("creation_token")
    private JsonNullable<String> creationToken;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    private Optional<? extends ContractorPaymentGroupMinimalTotals> totals;

    @JsonCreator
    public ContractorPaymentGroupMinimal(
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("debit_date") Optional<String> debitDate,
            @JsonProperty("status") Optional<? extends ContractorPaymentGroupMinimalStatus> status,
            @JsonProperty("creation_token") JsonNullable<String> creationToken,
            @JsonProperty("totals") Optional<? extends ContractorPaymentGroupMinimalTotals> totals) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(debitDate, "debitDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(creationToken, "creationToken");
        Utils.checkNotNull(totals, "totals");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.checkDate = checkDate;
        this.debitDate = debitDate;
        this.status = status;
        this.creationToken = creationToken;
        this.totals = totals;
    }
    
    public ContractorPaymentGroupMinimal() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The unique identifier of the contractor payment group.
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * The UUID of the company.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The check date of the contractor payment group.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * The debit date of the contractor payment group.
     */
    @JsonIgnore
    public Optional<String> debitDate() {
        return debitDate;
    }

    /**
     * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorPaymentGroupMinimalStatus> status() {
        return (Optional<ContractorPaymentGroupMinimalStatus>) status;
    }

    /**
     * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
     */
    @JsonIgnore
    public JsonNullable<String> creationToken() {
        return creationToken;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorPaymentGroupMinimalTotals> totals() {
        return (Optional<ContractorPaymentGroupMinimalTotals>) totals;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The unique identifier of the contractor payment group.
     */
    public ContractorPaymentGroupMinimal withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * The unique identifier of the contractor payment group.
     */
    public ContractorPaymentGroupMinimal withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The UUID of the company.
     */
    public ContractorPaymentGroupMinimal withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * The UUID of the company.
     */
    public ContractorPaymentGroupMinimal withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The check date of the contractor payment group.
     */
    public ContractorPaymentGroupMinimal withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * The check date of the contractor payment group.
     */
    public ContractorPaymentGroupMinimal withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * The debit date of the contractor payment group.
     */
    public ContractorPaymentGroupMinimal withDebitDate(String debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = Optional.ofNullable(debitDate);
        return this;
    }

    /**
     * The debit date of the contractor payment group.
     */
    public ContractorPaymentGroupMinimal withDebitDate(Optional<String> debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = debitDate;
        return this;
    }

    /**
     * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
     */
    public ContractorPaymentGroupMinimal withStatus(ContractorPaymentGroupMinimalStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
     */
    public ContractorPaymentGroupMinimal withStatus(Optional<? extends ContractorPaymentGroupMinimalStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
     */
    public ContractorPaymentGroupMinimal withCreationToken(String creationToken) {
        Utils.checkNotNull(creationToken, "creationToken");
        this.creationToken = JsonNullable.of(creationToken);
        return this;
    }

    /**
     * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
     */
    public ContractorPaymentGroupMinimal withCreationToken(JsonNullable<String> creationToken) {
        Utils.checkNotNull(creationToken, "creationToken");
        this.creationToken = creationToken;
        return this;
    }

    public ContractorPaymentGroupMinimal withTotals(ContractorPaymentGroupMinimalTotals totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = Optional.ofNullable(totals);
        return this;
    }

    public ContractorPaymentGroupMinimal withTotals(Optional<? extends ContractorPaymentGroupMinimalTotals> totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = totals;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorPaymentGroupMinimal other = (ContractorPaymentGroupMinimal) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.debitDate, other.debitDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.creationToken, other.creationToken) &&
            Objects.deepEquals(this.totals, other.totals);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            checkDate,
            debitDate,
            status,
            creationToken,
            totals);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorPaymentGroupMinimal.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "checkDate", checkDate,
                "debitDate", debitDate,
                "status", status,
                "creationToken", creationToken,
                "totals", totals);
    }
    
    public final static class Builder {
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<String> debitDate = Optional.empty();
 
        private Optional<? extends ContractorPaymentGroupMinimalStatus> status = Optional.empty();
 
        private JsonNullable<String> creationToken = JsonNullable.undefined();
 
        private Optional<? extends ContractorPaymentGroupMinimalTotals> totals = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique identifier of the contractor payment group.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * The unique identifier of the contractor payment group.
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The UUID of the company.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * The UUID of the company.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The check date of the contractor payment group.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * The check date of the contractor payment group.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * The debit date of the contractor payment group.
         */
        public Builder debitDate(String debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = Optional.ofNullable(debitDate);
            return this;
        }

        /**
         * The debit date of the contractor payment group.
         */
        public Builder debitDate(Optional<String> debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = debitDate;
            return this;
        }

        /**
         * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
         */
        public Builder status(ContractorPaymentGroupMinimalStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the contractor payment group.  Will be `Funded` if all payments that should be funded (i.e. have `Direct Deposit` for payment method) are funded.  A group can have status `Funded` while having associated payments that have status `Unfunded`, i.e. payment with `Check` payment method.
         */
        public Builder status(Optional<? extends ContractorPaymentGroupMinimalStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
         */
        public Builder creationToken(String creationToken) {
            Utils.checkNotNull(creationToken, "creationToken");
            this.creationToken = JsonNullable.of(creationToken);
            return this;
        }

        /**
         * Token used to make contractor payment group creation idempotent.  Will error if attempting to create a group with a duplicate token.
         */
        public Builder creationToken(JsonNullable<String> creationToken) {
            Utils.checkNotNull(creationToken, "creationToken");
            this.creationToken = creationToken;
            return this;
        }

        public Builder totals(ContractorPaymentGroupMinimalTotals totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = Optional.ofNullable(totals);
            return this;
        }

        public Builder totals(Optional<? extends ContractorPaymentGroupMinimalTotals> totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = totals;
            return this;
        }
        
        public ContractorPaymentGroupMinimal build() {
            return new ContractorPaymentGroupMinimal(
                uuid,
                companyUuid,
                checkDate,
                debitDate,
                status,
                creationToken,
                totals);
        }
    }
}

