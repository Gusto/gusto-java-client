/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * Rehire - Example response
 */

public class Rehire {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * The day when the employee returns to work.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    private Optional<String> effectiveDate;

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_new_hire_report")
    private Optional<Boolean> fileNewHireReport;

    /**
     * The uuid of the employee's work location.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_location_uuid")
    private Optional<String> workLocationUuid;

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private Optional<? extends RehireEmploymentStatus> employmentStatus;

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("two_percent_shareholder")
    private Optional<Boolean> twoPercentShareholder;

    /**
     * The UUID of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * Whether the employee's rehire has gone into effect.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    @JsonCreator
    public Rehire(
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("effective_date") Optional<String> effectiveDate,
            @JsonProperty("file_new_hire_report") Optional<Boolean> fileNewHireReport,
            @JsonProperty("work_location_uuid") Optional<String> workLocationUuid,
            @JsonProperty("employment_status") Optional<? extends RehireEmploymentStatus> employmentStatus,
            @JsonProperty("two_percent_shareholder") Optional<Boolean> twoPercentShareholder,
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("active") Optional<Boolean> active) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        Utils.checkNotNull(workLocationUuid, "workLocationUuid");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(active, "active");
        this.version = version;
        this.effectiveDate = effectiveDate;
        this.fileNewHireReport = fileNewHireReport;
        this.workLocationUuid = workLocationUuid;
        this.employmentStatus = employmentStatus;
        this.twoPercentShareholder = twoPercentShareholder;
        this.employeeUuid = employeeUuid;
        this.active = active;
    }
    
    public Rehire() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * The day when the employee returns to work.
     */
    @JsonIgnore
    public Optional<String> effectiveDate() {
        return effectiveDate;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    @JsonIgnore
    public Optional<Boolean> fileNewHireReport() {
        return fileNewHireReport;
    }

    /**
     * The uuid of the employee's work location.
     */
    @JsonIgnore
    public Optional<String> workLocationUuid() {
        return workLocationUuid;
    }

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RehireEmploymentStatus> employmentStatus() {
        return (Optional<RehireEmploymentStatus>) employmentStatus;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    @JsonIgnore
    public Optional<Boolean> twoPercentShareholder() {
        return twoPercentShareholder;
    }

    /**
     * The UUID of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * Whether the employee's rehire has gone into effect.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public Rehire withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public Rehire withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The day when the employee returns to work.
     */
    public Rehire withEffectiveDate(String effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = Optional.ofNullable(effectiveDate);
        return this;
    }

    /**
     * The day when the employee returns to work.
     */
    public Rehire withEffectiveDate(Optional<String> effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    public Rehire withFileNewHireReport(boolean fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = Optional.ofNullable(fileNewHireReport);
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    public Rehire withFileNewHireReport(Optional<Boolean> fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = fileNewHireReport;
        return this;
    }

    /**
     * The uuid of the employee's work location.
     */
    public Rehire withWorkLocationUuid(String workLocationUuid) {
        Utils.checkNotNull(workLocationUuid, "workLocationUuid");
        this.workLocationUuid = Optional.ofNullable(workLocationUuid);
        return this;
    }

    /**
     * The uuid of the employee's work location.
     */
    public Rehire withWorkLocationUuid(Optional<String> workLocationUuid) {
        Utils.checkNotNull(workLocationUuid, "workLocationUuid");
        this.workLocationUuid = workLocationUuid;
        return this;
    }

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    public Rehire withEmploymentStatus(RehireEmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = Optional.ofNullable(employmentStatus);
        return this;
    }

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    public Rehire withEmploymentStatus(Optional<? extends RehireEmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    public Rehire withTwoPercentShareholder(boolean twoPercentShareholder) {
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.twoPercentShareholder = Optional.ofNullable(twoPercentShareholder);
        return this;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    public Rehire withTwoPercentShareholder(Optional<Boolean> twoPercentShareholder) {
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.twoPercentShareholder = twoPercentShareholder;
        return this;
    }

    /**
     * The UUID of the employee.
     */
    public Rehire withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * The UUID of the employee.
     */
    public Rehire withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * Whether the employee's rehire has gone into effect.
     */
    public Rehire withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Whether the employee's rehire has gone into effect.
     */
    public Rehire withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Rehire other = (Rehire) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.fileNewHireReport, other.fileNewHireReport) &&
            Objects.deepEquals(this.workLocationUuid, other.workLocationUuid) &&
            Objects.deepEquals(this.employmentStatus, other.employmentStatus) &&
            Objects.deepEquals(this.twoPercentShareholder, other.twoPercentShareholder) &&
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.active, other.active);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            effectiveDate,
            fileNewHireReport,
            workLocationUuid,
            employmentStatus,
            twoPercentShareholder,
            employeeUuid,
            active);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Rehire.class,
                "version", version,
                "effectiveDate", effectiveDate,
                "fileNewHireReport", fileNewHireReport,
                "workLocationUuid", workLocationUuid,
                "employmentStatus", employmentStatus,
                "twoPercentShareholder", twoPercentShareholder,
                "employeeUuid", employeeUuid,
                "active", active);
    }
    
    public final static class Builder {
 
        private Optional<String> version = Optional.empty();
 
        private Optional<String> effectiveDate = Optional.empty();
 
        private Optional<Boolean> fileNewHireReport = Optional.empty();
 
        private Optional<String> workLocationUuid = Optional.empty();
 
        private Optional<? extends RehireEmploymentStatus> employmentStatus = Optional.empty();
 
        private Optional<Boolean> twoPercentShareholder = Optional.empty();
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<Boolean> active = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The day when the employee returns to work.
         */
        public Builder effectiveDate(String effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = Optional.ofNullable(effectiveDate);
            return this;
        }

        /**
         * The day when the employee returns to work.
         */
        public Builder effectiveDate(Optional<String> effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the employee.
         */
        public Builder fileNewHireReport(boolean fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = Optional.ofNullable(fileNewHireReport);
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the employee.
         */
        public Builder fileNewHireReport(Optional<Boolean> fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }

        /**
         * The uuid of the employee's work location.
         */
        public Builder workLocationUuid(String workLocationUuid) {
            Utils.checkNotNull(workLocationUuid, "workLocationUuid");
            this.workLocationUuid = Optional.ofNullable(workLocationUuid);
            return this;
        }

        /**
         * The uuid of the employee's work location.
         */
        public Builder workLocationUuid(Optional<String> workLocationUuid) {
            Utils.checkNotNull(workLocationUuid, "workLocationUuid");
            this.workLocationUuid = workLocationUuid;
            return this;
        }

        /**
         * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
         */
        public Builder employmentStatus(RehireEmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = Optional.ofNullable(employmentStatus);
            return this;
        }

        /**
         * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
         */
        public Builder employmentStatus(Optional<? extends RehireEmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }

        /**
         * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
         */
        public Builder twoPercentShareholder(boolean twoPercentShareholder) {
            Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
            this.twoPercentShareholder = Optional.ofNullable(twoPercentShareholder);
            return this;
        }

        /**
         * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
         */
        public Builder twoPercentShareholder(Optional<Boolean> twoPercentShareholder) {
            Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }

        /**
         * The UUID of the employee.
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * The UUID of the employee.
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * Whether the employee's rehire has gone into effect.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Whether the employee's rehire has gone into effect.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }
        
        public Rehire build() {
            return new Rehire(
                version,
                effectiveDate,
                fileNewHireReport,
                workLocationUuid,
                employmentStatus,
                twoPercentShareholder,
                employeeUuid,
                active);
        }
    }
}

