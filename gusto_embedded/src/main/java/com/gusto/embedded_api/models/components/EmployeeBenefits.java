/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class EmployeeBenefits {

    /**
     * The UUID of the employee to which the benefit belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * The UUID of the company benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_uuid")
    private Optional<String> companyBenefitUuid;

    /**
     * Whether the employee benefit is active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deduct_as_percentage")
    private Optional<Boolean> deductAsPercentage;

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction")
    private Optional<String> employeeDeduction;

    /**
     * The value of the company contribution
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_contribution")
    private Optional<String> companyContribution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * An object representing the type and value of the company contribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contribution")
    private Optional<? extends CompanyBenefitWithEmployeeBenefitsContribution> contribution;

    @JsonCreator
    public EmployeeBenefits(
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("company_benefit_uuid") Optional<String> companyBenefitUuid,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("deduct_as_percentage") Optional<Boolean> deductAsPercentage,
            @JsonProperty("employee_deduction") Optional<String> employeeDeduction,
            @JsonProperty("company_contribution") Optional<String> companyContribution,
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("contribution") Optional<? extends CompanyBenefitWithEmployeeBenefitsContribution> contribution) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(companyBenefitUuid, "companyBenefitUuid");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        Utils.checkNotNull(companyContribution, "companyContribution");
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(contribution, "contribution");
        this.employeeUuid = employeeUuid;
        this.companyBenefitUuid = companyBenefitUuid;
        this.active = active;
        this.deductAsPercentage = deductAsPercentage;
        this.employeeDeduction = employeeDeduction;
        this.companyContribution = companyContribution;
        this.uuid = uuid;
        this.contribution = contribution;
    }
    
    public EmployeeBenefits() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the employee to which the benefit belongs.
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * The UUID of the company benefit.
     */
    @JsonIgnore
    public Optional<String> companyBenefitUuid() {
        return companyBenefitUuid;
    }

    /**
     * Whether the employee benefit is active.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    @JsonIgnore
    public Optional<Boolean> deductAsPercentage() {
        return deductAsPercentage;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    @JsonIgnore
    public Optional<String> employeeDeduction() {
        return employeeDeduction;
    }

    /**
     * The value of the company contribution
     */
    @JsonIgnore
    public Optional<String> companyContribution() {
        return companyContribution;
    }

    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyBenefitWithEmployeeBenefitsContribution> contribution() {
        return (Optional<CompanyBenefitWithEmployeeBenefitsContribution>) contribution;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the employee to which the benefit belongs.
     */
    public EmployeeBenefits withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * The UUID of the employee to which the benefit belongs.
     */
    public EmployeeBenefits withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * The UUID of the company benefit.
     */
    public EmployeeBenefits withCompanyBenefitUuid(String companyBenefitUuid) {
        Utils.checkNotNull(companyBenefitUuid, "companyBenefitUuid");
        this.companyBenefitUuid = Optional.ofNullable(companyBenefitUuid);
        return this;
    }

    /**
     * The UUID of the company benefit.
     */
    public EmployeeBenefits withCompanyBenefitUuid(Optional<String> companyBenefitUuid) {
        Utils.checkNotNull(companyBenefitUuid, "companyBenefitUuid");
        this.companyBenefitUuid = companyBenefitUuid;
        return this;
    }

    /**
     * Whether the employee benefit is active.
     */
    public EmployeeBenefits withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Whether the employee benefit is active.
     */
    public EmployeeBenefits withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    public EmployeeBenefits withDeductAsPercentage(boolean deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
        return this;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    public EmployeeBenefits withDeductAsPercentage(Optional<Boolean> deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = deductAsPercentage;
        return this;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    public EmployeeBenefits withEmployeeDeduction(String employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = Optional.ofNullable(employeeDeduction);
        return this;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    public EmployeeBenefits withEmployeeDeduction(Optional<String> employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = employeeDeduction;
        return this;
    }

    /**
     * The value of the company contribution
     */
    public EmployeeBenefits withCompanyContribution(String companyContribution) {
        Utils.checkNotNull(companyContribution, "companyContribution");
        this.companyContribution = Optional.ofNullable(companyContribution);
        return this;
    }

    /**
     * The value of the company contribution
     */
    public EmployeeBenefits withCompanyContribution(Optional<String> companyContribution) {
        Utils.checkNotNull(companyContribution, "companyContribution");
        this.companyContribution = companyContribution;
        return this;
    }

    public EmployeeBenefits withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    public EmployeeBenefits withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    public EmployeeBenefits withContribution(CompanyBenefitWithEmployeeBenefitsContribution contribution) {
        Utils.checkNotNull(contribution, "contribution");
        this.contribution = Optional.ofNullable(contribution);
        return this;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    public EmployeeBenefits withContribution(Optional<? extends CompanyBenefitWithEmployeeBenefitsContribution> contribution) {
        Utils.checkNotNull(contribution, "contribution");
        this.contribution = contribution;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeBenefits other = (EmployeeBenefits) o;
        return 
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.companyBenefitUuid, other.companyBenefitUuid) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.deductAsPercentage, other.deductAsPercentage) &&
            Objects.deepEquals(this.employeeDeduction, other.employeeDeduction) &&
            Objects.deepEquals(this.companyContribution, other.companyContribution) &&
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.contribution, other.contribution);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employeeUuid,
            companyBenefitUuid,
            active,
            deductAsPercentage,
            employeeDeduction,
            companyContribution,
            uuid,
            contribution);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeBenefits.class,
                "employeeUuid", employeeUuid,
                "companyBenefitUuid", companyBenefitUuid,
                "active", active,
                "deductAsPercentage", deductAsPercentage,
                "employeeDeduction", employeeDeduction,
                "companyContribution", companyContribution,
                "uuid", uuid,
                "contribution", contribution);
    }
    
    public final static class Builder {
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<String> companyBenefitUuid = Optional.empty();
 
        private Optional<Boolean> active;
 
        private Optional<Boolean> deductAsPercentage;
 
        private Optional<String> employeeDeduction;
 
        private Optional<String> companyContribution = Optional.empty();
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<? extends CompanyBenefitWithEmployeeBenefitsContribution> contribution = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the employee to which the benefit belongs.
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * The UUID of the employee to which the benefit belongs.
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * The UUID of the company benefit.
         */
        public Builder companyBenefitUuid(String companyBenefitUuid) {
            Utils.checkNotNull(companyBenefitUuid, "companyBenefitUuid");
            this.companyBenefitUuid = Optional.ofNullable(companyBenefitUuid);
            return this;
        }

        /**
         * The UUID of the company benefit.
         */
        public Builder companyBenefitUuid(Optional<String> companyBenefitUuid) {
            Utils.checkNotNull(companyBenefitUuid, "companyBenefitUuid");
            this.companyBenefitUuid = companyBenefitUuid;
            return this;
        }

        /**
         * Whether the employee benefit is active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Whether the employee benefit is active.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
         */
        public Builder deductAsPercentage(boolean deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
            return this;
        }

        /**
         * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
         */
        public Builder deductAsPercentage(Optional<Boolean> deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }

        /**
         * The amount to be deducted, per pay period, from the employee's pay.
         */
        public Builder employeeDeduction(String employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = Optional.ofNullable(employeeDeduction);
            return this;
        }

        /**
         * The amount to be deducted, per pay period, from the employee's pay.
         */
        public Builder employeeDeduction(Optional<String> employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = employeeDeduction;
            return this;
        }

        /**
         * The value of the company contribution
         */
        public Builder companyContribution(String companyContribution) {
            Utils.checkNotNull(companyContribution, "companyContribution");
            this.companyContribution = Optional.ofNullable(companyContribution);
            return this;
        }

        /**
         * The value of the company contribution
         */
        public Builder companyContribution(Optional<String> companyContribution) {
            Utils.checkNotNull(companyContribution, "companyContribution");
            this.companyContribution = companyContribution;
            return this;
        }

        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * An object representing the type and value of the company contribution.
         */
        public Builder contribution(CompanyBenefitWithEmployeeBenefitsContribution contribution) {
            Utils.checkNotNull(contribution, "contribution");
            this.contribution = Optional.ofNullable(contribution);
            return this;
        }

        /**
         * An object representing the type and value of the company contribution.
         */
        public Builder contribution(Optional<? extends CompanyBenefitWithEmployeeBenefitsContribution> contribution) {
            Utils.checkNotNull(contribution, "contribution");
            this.contribution = contribution;
            return this;
        }
        
        public EmployeeBenefits build() {
            if (active == null) {
                active = _SINGLETON_VALUE_Active.value();
            }
            if (deductAsPercentage == null) {
                deductAsPercentage = _SINGLETON_VALUE_DeductAsPercentage.value();
            }
            if (employeeDeduction == null) {
                employeeDeduction = _SINGLETON_VALUE_EmployeeDeduction.value();
            }            return new EmployeeBenefits(
                employeeUuid,
                companyBenefitUuid,
                active,
                deductAsPercentage,
                employeeDeduction,
                companyContribution,
                uuid,
                contribution);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Active =
                new LazySingletonValue<>(
                        "active",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_DeductAsPercentage =
                new LazySingletonValue<>(
                        "deduct_as_percentage",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_EmployeeDeduction =
                new LazySingletonValue<>(
                        "employee_deduction",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});
    }
}

