/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

/**
 * FormPdf - Example response
 */

public class FormPdf {

    /**
     * the UUID of the form
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * the URL of the form
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_url")
    private Optional<String> documentUrl;

    @JsonCreator
    public FormPdf(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("document_url") Optional<String> documentUrl) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(documentUrl, "documentUrl");
        this.uuid = uuid;
        this.documentUrl = documentUrl;
    }
    
    public FormPdf(
            String uuid) {
        this(uuid, Optional.empty());
    }

    /**
     * the UUID of the form
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * the URL of the form
     */
    @JsonIgnore
    public Optional<String> documentUrl() {
        return documentUrl;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * the UUID of the form
     */
    public FormPdf withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * the URL of the form
     */
    public FormPdf withDocumentUrl(String documentUrl) {
        Utils.checkNotNull(documentUrl, "documentUrl");
        this.documentUrl = Optional.ofNullable(documentUrl);
        return this;
    }

    /**
     * the URL of the form
     */
    public FormPdf withDocumentUrl(Optional<String> documentUrl) {
        Utils.checkNotNull(documentUrl, "documentUrl");
        this.documentUrl = documentUrl;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FormPdf other = (FormPdf) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.documentUrl, other.documentUrl);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            documentUrl);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FormPdf.class,
                "uuid", uuid,
                "documentUrl", documentUrl);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> documentUrl = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * the UUID of the form
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * the URL of the form
         */
        public Builder documentUrl(String documentUrl) {
            Utils.checkNotNull(documentUrl, "documentUrl");
            this.documentUrl = Optional.ofNullable(documentUrl);
            return this;
        }

        /**
         * the URL of the form
         */
        public Builder documentUrl(Optional<String> documentUrl) {
            Utils.checkNotNull(documentUrl, "documentUrl");
            this.documentUrl = documentUrl;
            return this;
        }
        
        public FormPdf build() {
            return new FormPdf(
                uuid,
                documentUrl);
        }
    }
}

