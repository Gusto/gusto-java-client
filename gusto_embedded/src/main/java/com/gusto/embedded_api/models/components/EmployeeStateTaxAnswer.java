/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class EmployeeStateTaxAnswer {

    /**
     * The answer to the corresponding question - this may be a string, number, boolean, or null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("value")
    private JsonNullable<? extends Value> value;

    /**
     * The effective date of the answer - currently always “2010-01-01”.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_from")
    private Optional<String> validFrom;

    /**
     * The effective end date of the answer - currently always null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_up_to")
    private JsonNullable<? extends Object> validUpTo;

    @JsonCreator
    public EmployeeStateTaxAnswer(
            @JsonProperty("value") JsonNullable<? extends Value> value,
            @JsonProperty("valid_from") Optional<String> validFrom,
            @JsonProperty("valid_up_to") JsonNullable<? extends Object> validUpTo) {
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(validFrom, "validFrom");
        Utils.checkNotNull(validUpTo, "validUpTo");
        this.value = value;
        this.validFrom = validFrom;
        this.validUpTo = validUpTo;
    }
    
    public EmployeeStateTaxAnswer() {
        this(JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The answer to the corresponding question - this may be a string, number, boolean, or null.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Value> value() {
        return (JsonNullable<Value>) value;
    }

    /**
     * The effective date of the answer - currently always “2010-01-01”.
     */
    @JsonIgnore
    public Optional<String> validFrom() {
        return validFrom;
    }

    /**
     * The effective end date of the answer - currently always null.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Object> validUpTo() {
        return (JsonNullable<Object>) validUpTo;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The answer to the corresponding question - this may be a string, number, boolean, or null.
     */
    public EmployeeStateTaxAnswer withValue(Value value) {
        Utils.checkNotNull(value, "value");
        this.value = JsonNullable.of(value);
        return this;
    }

    /**
     * The answer to the corresponding question - this may be a string, number, boolean, or null.
     */
    public EmployeeStateTaxAnswer withValue(JsonNullable<? extends Value> value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * The effective date of the answer - currently always “2010-01-01”.
     */
    public EmployeeStateTaxAnswer withValidFrom(String validFrom) {
        Utils.checkNotNull(validFrom, "validFrom");
        this.validFrom = Optional.ofNullable(validFrom);
        return this;
    }

    /**
     * The effective date of the answer - currently always “2010-01-01”.
     */
    public EmployeeStateTaxAnswer withValidFrom(Optional<String> validFrom) {
        Utils.checkNotNull(validFrom, "validFrom");
        this.validFrom = validFrom;
        return this;
    }

    /**
     * The effective end date of the answer - currently always null.
     */
    public EmployeeStateTaxAnswer withValidUpTo(Object validUpTo) {
        Utils.checkNotNull(validUpTo, "validUpTo");
        this.validUpTo = JsonNullable.of(validUpTo);
        return this;
    }

    /**
     * The effective end date of the answer - currently always null.
     */
    public EmployeeStateTaxAnswer withValidUpTo(JsonNullable<? extends Object> validUpTo) {
        Utils.checkNotNull(validUpTo, "validUpTo");
        this.validUpTo = validUpTo;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeStateTaxAnswer other = (EmployeeStateTaxAnswer) o;
        return 
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.validFrom, other.validFrom) &&
            Objects.deepEquals(this.validUpTo, other.validUpTo);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            value,
            validFrom,
            validUpTo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeStateTaxAnswer.class,
                "value", value,
                "validFrom", validFrom,
                "validUpTo", validUpTo);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Value> value = JsonNullable.undefined();
 
        private Optional<String> validFrom = Optional.empty();
 
        private JsonNullable<? extends Object> validUpTo = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The answer to the corresponding question - this may be a string, number, boolean, or null.
         */
        public Builder value(Value value) {
            Utils.checkNotNull(value, "value");
            this.value = JsonNullable.of(value);
            return this;
        }

        /**
         * The answer to the corresponding question - this may be a string, number, boolean, or null.
         */
        public Builder value(JsonNullable<? extends Value> value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * The effective date of the answer - currently always “2010-01-01”.
         */
        public Builder validFrom(String validFrom) {
            Utils.checkNotNull(validFrom, "validFrom");
            this.validFrom = Optional.ofNullable(validFrom);
            return this;
        }

        /**
         * The effective date of the answer - currently always “2010-01-01”.
         */
        public Builder validFrom(Optional<String> validFrom) {
            Utils.checkNotNull(validFrom, "validFrom");
            this.validFrom = validFrom;
            return this;
        }

        /**
         * The effective end date of the answer - currently always null.
         */
        public Builder validUpTo(Object validUpTo) {
            Utils.checkNotNull(validUpTo, "validUpTo");
            this.validUpTo = JsonNullable.of(validUpTo);
            return this;
        }

        /**
         * The effective end date of the answer - currently always null.
         */
        public Builder validUpTo(JsonNullable<? extends Object> validUpTo) {
            Utils.checkNotNull(validUpTo, "validUpTo");
            this.validUpTo = validUpTo;
            return this;
        }
        
        public EmployeeStateTaxAnswer build() {
            return new EmployeeStateTaxAnswer(
                value,
                validFrom,
                validUpTo);
        }
    }
}

