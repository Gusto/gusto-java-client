/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class TaxRequirementMetadataOptions {

    /**
     * A customer facing label for the answer
     */
    @JsonProperty("label")
    private String label;

    /**
     * The actual value to be submitted
     */
    @JsonProperty("value")
    private TaxRequirementMetadataValue value;

    /**
     * A less verbose label that may sometimes be available
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("short_label")
    private Optional<String> shortLabel;

    @JsonCreator
    public TaxRequirementMetadataOptions(
            @JsonProperty("label") String label,
            @JsonProperty("value") TaxRequirementMetadataValue value,
            @JsonProperty("short_label") Optional<String> shortLabel) {
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(shortLabel, "shortLabel");
        this.label = label;
        this.value = value;
        this.shortLabel = shortLabel;
    }
    
    public TaxRequirementMetadataOptions(
            String label,
            TaxRequirementMetadataValue value) {
        this(label, value, Optional.empty());
    }

    /**
     * A customer facing label for the answer
     */
    @JsonIgnore
    public String label() {
        return label;
    }

    /**
     * The actual value to be submitted
     */
    @JsonIgnore
    public TaxRequirementMetadataValue value() {
        return value;
    }

    /**
     * A less verbose label that may sometimes be available
     */
    @JsonIgnore
    public Optional<String> shortLabel() {
        return shortLabel;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A customer facing label for the answer
     */
    public TaxRequirementMetadataOptions withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * The actual value to be submitted
     */
    public TaxRequirementMetadataOptions withValue(TaxRequirementMetadataValue value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    /**
     * A less verbose label that may sometimes be available
     */
    public TaxRequirementMetadataOptions withShortLabel(String shortLabel) {
        Utils.checkNotNull(shortLabel, "shortLabel");
        this.shortLabel = Optional.ofNullable(shortLabel);
        return this;
    }

    /**
     * A less verbose label that may sometimes be available
     */
    public TaxRequirementMetadataOptions withShortLabel(Optional<String> shortLabel) {
        Utils.checkNotNull(shortLabel, "shortLabel");
        this.shortLabel = shortLabel;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRequirementMetadataOptions other = (TaxRequirementMetadataOptions) o;
        return 
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.shortLabel, other.shortLabel);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            label,
            value,
            shortLabel);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRequirementMetadataOptions.class,
                "label", label,
                "value", value,
                "shortLabel", shortLabel);
    }
    
    public final static class Builder {
 
        private String label;
 
        private TaxRequirementMetadataValue value;
 
        private Optional<String> shortLabel = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A customer facing label for the answer
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * The actual value to be submitted
         */
        public Builder value(TaxRequirementMetadataValue value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        /**
         * A less verbose label that may sometimes be available
         */
        public Builder shortLabel(String shortLabel) {
            Utils.checkNotNull(shortLabel, "shortLabel");
            this.shortLabel = Optional.ofNullable(shortLabel);
            return this;
        }

        /**
         * A less verbose label that may sometimes be available
         */
        public Builder shortLabel(Optional<String> shortLabel) {
            Utils.checkNotNull(shortLabel, "shortLabel");
            this.shortLabel = shortLabel;
            return this;
        }
        
        public TaxRequirementMetadataOptions build() {
            return new TaxRequirementMetadataOptions(
                label,
                value,
                shortLabel);
        }
    }
}

