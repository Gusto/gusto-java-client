/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * TaxLiabilitiesSelections - Example response
 */

public class TaxLiabilitiesSelections {

    /**
     * The ID of the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private Optional<Long> taxId;

    /**
     * The name of the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_name")
    private Optional<String> taxName;

    /**
     * The UUID of last unpaid external payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_unpaid_external_payroll_uuid")
    private JsonNullable<String> lastUnpaidExternalPayrollUuid;

    /**
     * Possible tax liabilities selections.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("possible_liabilities")
    private Optional<? extends List<PossibleLiabilities>> possibleLiabilities;

    @JsonCreator
    public TaxLiabilitiesSelections(
            @JsonProperty("tax_id") Optional<Long> taxId,
            @JsonProperty("tax_name") Optional<String> taxName,
            @JsonProperty("last_unpaid_external_payroll_uuid") JsonNullable<String> lastUnpaidExternalPayrollUuid,
            @JsonProperty("possible_liabilities") Optional<? extends List<PossibleLiabilities>> possibleLiabilities) {
        Utils.checkNotNull(taxId, "taxId");
        Utils.checkNotNull(taxName, "taxName");
        Utils.checkNotNull(lastUnpaidExternalPayrollUuid, "lastUnpaidExternalPayrollUuid");
        Utils.checkNotNull(possibleLiabilities, "possibleLiabilities");
        this.taxId = taxId;
        this.taxName = taxName;
        this.lastUnpaidExternalPayrollUuid = lastUnpaidExternalPayrollUuid;
        this.possibleLiabilities = possibleLiabilities;
    }
    
    public TaxLiabilitiesSelections() {
        this(Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The ID of the tax.
     */
    @JsonIgnore
    public Optional<Long> taxId() {
        return taxId;
    }

    /**
     * The name of the tax.
     */
    @JsonIgnore
    public Optional<String> taxName() {
        return taxName;
    }

    /**
     * The UUID of last unpaid external payroll.
     */
    @JsonIgnore
    public JsonNullable<String> lastUnpaidExternalPayrollUuid() {
        return lastUnpaidExternalPayrollUuid;
    }

    /**
     * Possible tax liabilities selections.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PossibleLiabilities>> possibleLiabilities() {
        return (Optional<List<PossibleLiabilities>>) possibleLiabilities;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the tax.
     */
    public TaxLiabilitiesSelections withTaxId(long taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = Optional.ofNullable(taxId);
        return this;
    }

    /**
     * The ID of the tax.
     */
    public TaxLiabilitiesSelections withTaxId(Optional<Long> taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }

    /**
     * The name of the tax.
     */
    public TaxLiabilitiesSelections withTaxName(String taxName) {
        Utils.checkNotNull(taxName, "taxName");
        this.taxName = Optional.ofNullable(taxName);
        return this;
    }

    /**
     * The name of the tax.
     */
    public TaxLiabilitiesSelections withTaxName(Optional<String> taxName) {
        Utils.checkNotNull(taxName, "taxName");
        this.taxName = taxName;
        return this;
    }

    /**
     * The UUID of last unpaid external payroll.
     */
    public TaxLiabilitiesSelections withLastUnpaidExternalPayrollUuid(String lastUnpaidExternalPayrollUuid) {
        Utils.checkNotNull(lastUnpaidExternalPayrollUuid, "lastUnpaidExternalPayrollUuid");
        this.lastUnpaidExternalPayrollUuid = JsonNullable.of(lastUnpaidExternalPayrollUuid);
        return this;
    }

    /**
     * The UUID of last unpaid external payroll.
     */
    public TaxLiabilitiesSelections withLastUnpaidExternalPayrollUuid(JsonNullable<String> lastUnpaidExternalPayrollUuid) {
        Utils.checkNotNull(lastUnpaidExternalPayrollUuid, "lastUnpaidExternalPayrollUuid");
        this.lastUnpaidExternalPayrollUuid = lastUnpaidExternalPayrollUuid;
        return this;
    }

    /**
     * Possible tax liabilities selections.
     */
    public TaxLiabilitiesSelections withPossibleLiabilities(List<PossibleLiabilities> possibleLiabilities) {
        Utils.checkNotNull(possibleLiabilities, "possibleLiabilities");
        this.possibleLiabilities = Optional.ofNullable(possibleLiabilities);
        return this;
    }

    /**
     * Possible tax liabilities selections.
     */
    public TaxLiabilitiesSelections withPossibleLiabilities(Optional<? extends List<PossibleLiabilities>> possibleLiabilities) {
        Utils.checkNotNull(possibleLiabilities, "possibleLiabilities");
        this.possibleLiabilities = possibleLiabilities;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxLiabilitiesSelections other = (TaxLiabilitiesSelections) o;
        return 
            Objects.deepEquals(this.taxId, other.taxId) &&
            Objects.deepEquals(this.taxName, other.taxName) &&
            Objects.deepEquals(this.lastUnpaidExternalPayrollUuid, other.lastUnpaidExternalPayrollUuid) &&
            Objects.deepEquals(this.possibleLiabilities, other.possibleLiabilities);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            taxId,
            taxName,
            lastUnpaidExternalPayrollUuid,
            possibleLiabilities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxLiabilitiesSelections.class,
                "taxId", taxId,
                "taxName", taxName,
                "lastUnpaidExternalPayrollUuid", lastUnpaidExternalPayrollUuid,
                "possibleLiabilities", possibleLiabilities);
    }
    
    public final static class Builder {
 
        private Optional<Long> taxId = Optional.empty();
 
        private Optional<String> taxName = Optional.empty();
 
        private JsonNullable<String> lastUnpaidExternalPayrollUuid = JsonNullable.undefined();
 
        private Optional<? extends List<PossibleLiabilities>> possibleLiabilities = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the tax.
         */
        public Builder taxId(long taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = Optional.ofNullable(taxId);
            return this;
        }

        /**
         * The ID of the tax.
         */
        public Builder taxId(Optional<Long> taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }

        /**
         * The name of the tax.
         */
        public Builder taxName(String taxName) {
            Utils.checkNotNull(taxName, "taxName");
            this.taxName = Optional.ofNullable(taxName);
            return this;
        }

        /**
         * The name of the tax.
         */
        public Builder taxName(Optional<String> taxName) {
            Utils.checkNotNull(taxName, "taxName");
            this.taxName = taxName;
            return this;
        }

        /**
         * The UUID of last unpaid external payroll.
         */
        public Builder lastUnpaidExternalPayrollUuid(String lastUnpaidExternalPayrollUuid) {
            Utils.checkNotNull(lastUnpaidExternalPayrollUuid, "lastUnpaidExternalPayrollUuid");
            this.lastUnpaidExternalPayrollUuid = JsonNullable.of(lastUnpaidExternalPayrollUuid);
            return this;
        }

        /**
         * The UUID of last unpaid external payroll.
         */
        public Builder lastUnpaidExternalPayrollUuid(JsonNullable<String> lastUnpaidExternalPayrollUuid) {
            Utils.checkNotNull(lastUnpaidExternalPayrollUuid, "lastUnpaidExternalPayrollUuid");
            this.lastUnpaidExternalPayrollUuid = lastUnpaidExternalPayrollUuid;
            return this;
        }

        /**
         * Possible tax liabilities selections.
         */
        public Builder possibleLiabilities(List<PossibleLiabilities> possibleLiabilities) {
            Utils.checkNotNull(possibleLiabilities, "possibleLiabilities");
            this.possibleLiabilities = Optional.ofNullable(possibleLiabilities);
            return this;
        }

        /**
         * Possible tax liabilities selections.
         */
        public Builder possibleLiabilities(Optional<? extends List<PossibleLiabilities>> possibleLiabilities) {
            Utils.checkNotNull(possibleLiabilities, "possibleLiabilities");
            this.possibleLiabilities = possibleLiabilities;
            return this;
        }
        
        public TaxLiabilitiesSelections build() {
            return new TaxLiabilitiesSelections(
                taxId,
                taxName,
                lastUnpaidExternalPayrollUuid,
                possibleLiabilities);
        }
    }
}

