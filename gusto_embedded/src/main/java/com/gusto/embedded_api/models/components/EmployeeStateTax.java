/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * EmployeeStateTax - Example response
 */

public class EmployeeStateTax {

    /**
     * The employee's uuid
     */
    @JsonProperty("employee_uuid")
    private String employeeUuid;

    /**
     * Two letter US state abbreviation
     */
    @JsonProperty("state")
    private String state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_new_hire_report")
    private JsonNullable<Boolean> fileNewHireReport;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_work_state")
    private Optional<Boolean> isWorkState;

    @JsonProperty("questions")
    private List<EmployeeStateTaxQuestion> questions;

    @JsonCreator
    public EmployeeStateTax(
            @JsonProperty("employee_uuid") String employeeUuid,
            @JsonProperty("state") String state,
            @JsonProperty("file_new_hire_report") JsonNullable<Boolean> fileNewHireReport,
            @JsonProperty("is_work_state") Optional<Boolean> isWorkState,
            @JsonProperty("questions") List<EmployeeStateTaxQuestion> questions) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        Utils.checkNotNull(isWorkState, "isWorkState");
        Utils.checkNotNull(questions, "questions");
        this.employeeUuid = employeeUuid;
        this.state = state;
        this.fileNewHireReport = fileNewHireReport;
        this.isWorkState = isWorkState;
        this.questions = questions;
    }
    
    public EmployeeStateTax(
            String employeeUuid,
            String state,
            List<EmployeeStateTaxQuestion> questions) {
        this(employeeUuid, state, JsonNullable.undefined(), Optional.empty(), questions);
    }

    /**
     * The employee's uuid
     */
    @JsonIgnore
    public String employeeUuid() {
        return employeeUuid;
    }

    /**
     * Two letter US state abbreviation
     */
    @JsonIgnore
    public String state() {
        return state;
    }

    @JsonIgnore
    public JsonNullable<Boolean> fileNewHireReport() {
        return fileNewHireReport;
    }

    @JsonIgnore
    public Optional<Boolean> isWorkState() {
        return isWorkState;
    }

    @JsonIgnore
    public List<EmployeeStateTaxQuestion> questions() {
        return questions;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The employee's uuid
     */
    public EmployeeStateTax withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * Two letter US state abbreviation
     */
    public EmployeeStateTax withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public EmployeeStateTax withFileNewHireReport(boolean fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = JsonNullable.of(fileNewHireReport);
        return this;
    }

    public EmployeeStateTax withFileNewHireReport(JsonNullable<Boolean> fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = fileNewHireReport;
        return this;
    }

    public EmployeeStateTax withIsWorkState(boolean isWorkState) {
        Utils.checkNotNull(isWorkState, "isWorkState");
        this.isWorkState = Optional.ofNullable(isWorkState);
        return this;
    }

    public EmployeeStateTax withIsWorkState(Optional<Boolean> isWorkState) {
        Utils.checkNotNull(isWorkState, "isWorkState");
        this.isWorkState = isWorkState;
        return this;
    }

    public EmployeeStateTax withQuestions(List<EmployeeStateTaxQuestion> questions) {
        Utils.checkNotNull(questions, "questions");
        this.questions = questions;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeStateTax other = (EmployeeStateTax) o;
        return 
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.fileNewHireReport, other.fileNewHireReport) &&
            Objects.deepEquals(this.isWorkState, other.isWorkState) &&
            Objects.deepEquals(this.questions, other.questions);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employeeUuid,
            state,
            fileNewHireReport,
            isWorkState,
            questions);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeStateTax.class,
                "employeeUuid", employeeUuid,
                "state", state,
                "fileNewHireReport", fileNewHireReport,
                "isWorkState", isWorkState,
                "questions", questions);
    }
    
    public final static class Builder {
 
        private String employeeUuid;
 
        private String state;
 
        private JsonNullable<Boolean> fileNewHireReport = JsonNullable.undefined();
 
        private Optional<Boolean> isWorkState = Optional.empty();
 
        private List<EmployeeStateTaxQuestion> questions;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The employee's uuid
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * Two letter US state abbreviation
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder fileNewHireReport(boolean fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = JsonNullable.of(fileNewHireReport);
            return this;
        }

        public Builder fileNewHireReport(JsonNullable<Boolean> fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }

        public Builder isWorkState(boolean isWorkState) {
            Utils.checkNotNull(isWorkState, "isWorkState");
            this.isWorkState = Optional.ofNullable(isWorkState);
            return this;
        }

        public Builder isWorkState(Optional<Boolean> isWorkState) {
            Utils.checkNotNull(isWorkState, "isWorkState");
            this.isWorkState = isWorkState;
            return this;
        }

        public Builder questions(List<EmployeeStateTaxQuestion> questions) {
            Utils.checkNotNull(questions, "questions");
            this.questions = questions;
            return this;
        }
        
        public EmployeeStateTax build() {
            return new EmployeeStateTax(
                employeeUuid,
                state,
                fileNewHireReport,
                isWorkState,
                questions);
        }
    }
}

