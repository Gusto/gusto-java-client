/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * PayrollReceipt - Example response
 */

public class PayrollReceipt {

    /**
     * A unique identifier of the payroll receipt.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_uuid")
    private Optional<String> payrollUuid;

    /**
     * A unique identifier of the company for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The name of the company by whom the payroll was paid
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_of_sender")
    private Optional<String> nameOfSender;

    /**
     * Always the fixed string "Payroll Recipients"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name_of_recipient")
    private Optional<String> nameOfRecipient;

    /**
     * Always the fixed string "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_notice")
    private Optional<String> recipientNotice;

    /**
     * The debit or funding date for the payroll
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debit_date")
    private Optional<String> debitDate;

    /**
     * Always the fixed string "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license")
    private Optional<String> license;

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("license_uri")
    private Optional<String> licenseUri;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("right_to_refund")
    private Optional<String> rightToRefund;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_of_licensee")
    private Optional<String> liabilityOfLicensee;

    /**
     * The subtotals for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("totals")
    private Optional<? extends Totals> totals;

    /**
     * An array of totaled employer and employee taxes for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxes")
    private Optional<? extends List<PayrollReceiptTaxes>> taxes;

    /**
     * An array of employee compensations and withholdings for this payroll
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_compensations")
    private Optional<? extends List<EmployeeCompensations>> employeeCompensations;

    /**
     * The licensed payroll processor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("licensee")
    private Optional<? extends Licensee> licensee;

    @JsonCreator
    public PayrollReceipt(
            @JsonProperty("payroll_uuid") Optional<String> payrollUuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("name_of_sender") Optional<String> nameOfSender,
            @JsonProperty("name_of_recipient") Optional<String> nameOfRecipient,
            @JsonProperty("recipient_notice") Optional<String> recipientNotice,
            @JsonProperty("debit_date") Optional<String> debitDate,
            @JsonProperty("license") Optional<String> license,
            @JsonProperty("license_uri") Optional<String> licenseUri,
            @JsonProperty("right_to_refund") Optional<String> rightToRefund,
            @JsonProperty("liability_of_licensee") Optional<String> liabilityOfLicensee,
            @JsonProperty("totals") Optional<? extends Totals> totals,
            @JsonProperty("taxes") Optional<? extends List<PayrollReceiptTaxes>> taxes,
            @JsonProperty("employee_compensations") Optional<? extends List<EmployeeCompensations>> employeeCompensations,
            @JsonProperty("licensee") Optional<? extends Licensee> licensee) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(nameOfSender, "nameOfSender");
        Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
        Utils.checkNotNull(recipientNotice, "recipientNotice");
        Utils.checkNotNull(debitDate, "debitDate");
        Utils.checkNotNull(license, "license");
        Utils.checkNotNull(licenseUri, "licenseUri");
        Utils.checkNotNull(rightToRefund, "rightToRefund");
        Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
        Utils.checkNotNull(totals, "totals");
        Utils.checkNotNull(taxes, "taxes");
        Utils.checkNotNull(employeeCompensations, "employeeCompensations");
        Utils.checkNotNull(licensee, "licensee");
        this.payrollUuid = payrollUuid;
        this.companyUuid = companyUuid;
        this.nameOfSender = nameOfSender;
        this.nameOfRecipient = nameOfRecipient;
        this.recipientNotice = recipientNotice;
        this.debitDate = debitDate;
        this.license = license;
        this.licenseUri = licenseUri;
        this.rightToRefund = rightToRefund;
        this.liabilityOfLicensee = liabilityOfLicensee;
        this.totals = totals;
        this.taxes = taxes;
        this.employeeCompensations = employeeCompensations;
        this.licensee = licensee;
    }
    
    public PayrollReceipt() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier of the payroll receipt.
     */
    @JsonIgnore
    public Optional<String> payrollUuid() {
        return payrollUuid;
    }

    /**
     * A unique identifier of the company for the payroll.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The name of the company by whom the payroll was paid
     */
    @JsonIgnore
    public Optional<String> nameOfSender() {
        return nameOfSender;
    }

    /**
     * Always the fixed string "Payroll Recipients"
     */
    @JsonIgnore
    public Optional<String> nameOfRecipient() {
        return nameOfRecipient;
    }

    /**
     * Always the fixed string "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below."
     */
    @JsonIgnore
    public Optional<String> recipientNotice() {
        return recipientNotice;
    }

    /**
     * The debit or funding date for the payroll
     */
    @JsonIgnore
    public Optional<String> debitDate() {
        return debitDate;
    }

    /**
     * Always the fixed string "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page."
     */
    @JsonIgnore
    public Optional<String> license() {
        return license;
    }

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    @JsonIgnore
    public Optional<String> licenseUri() {
        return licenseUri;
    }

    @JsonIgnore
    public Optional<String> rightToRefund() {
        return rightToRefund;
    }

    @JsonIgnore
    public Optional<String> liabilityOfLicensee() {
        return liabilityOfLicensee;
    }

    /**
     * The subtotals for the payroll.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Totals> totals() {
        return (Optional<Totals>) totals;
    }

    /**
     * An array of totaled employer and employee taxes for the pay period.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PayrollReceiptTaxes>> taxes() {
        return (Optional<List<PayrollReceiptTaxes>>) taxes;
    }

    /**
     * An array of employee compensations and withholdings for this payroll
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EmployeeCompensations>> employeeCompensations() {
        return (Optional<List<EmployeeCompensations>>) employeeCompensations;
    }

    /**
     * The licensed payroll processor
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Licensee> licensee() {
        return (Optional<Licensee>) licensee;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier of the payroll receipt.
     */
    public PayrollReceipt withPayrollUuid(String payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = Optional.ofNullable(payrollUuid);
        return this;
    }

    /**
     * A unique identifier of the payroll receipt.
     */
    public PayrollReceipt withPayrollUuid(Optional<String> payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = payrollUuid;
        return this;
    }

    /**
     * A unique identifier of the company for the payroll.
     */
    public PayrollReceipt withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * A unique identifier of the company for the payroll.
     */
    public PayrollReceipt withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The name of the company by whom the payroll was paid
     */
    public PayrollReceipt withNameOfSender(String nameOfSender) {
        Utils.checkNotNull(nameOfSender, "nameOfSender");
        this.nameOfSender = Optional.ofNullable(nameOfSender);
        return this;
    }

    /**
     * The name of the company by whom the payroll was paid
     */
    public PayrollReceipt withNameOfSender(Optional<String> nameOfSender) {
        Utils.checkNotNull(nameOfSender, "nameOfSender");
        this.nameOfSender = nameOfSender;
        return this;
    }

    /**
     * Always the fixed string "Payroll Recipients"
     */
    public PayrollReceipt withNameOfRecipient(String nameOfRecipient) {
        Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
        this.nameOfRecipient = Optional.ofNullable(nameOfRecipient);
        return this;
    }

    /**
     * Always the fixed string "Payroll Recipients"
     */
    public PayrollReceipt withNameOfRecipient(Optional<String> nameOfRecipient) {
        Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
        this.nameOfRecipient = nameOfRecipient;
        return this;
    }

    /**
     * Always the fixed string "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below."
     */
    public PayrollReceipt withRecipientNotice(String recipientNotice) {
        Utils.checkNotNull(recipientNotice, "recipientNotice");
        this.recipientNotice = Optional.ofNullable(recipientNotice);
        return this;
    }

    /**
     * Always the fixed string "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below."
     */
    public PayrollReceipt withRecipientNotice(Optional<String> recipientNotice) {
        Utils.checkNotNull(recipientNotice, "recipientNotice");
        this.recipientNotice = recipientNotice;
        return this;
    }

    /**
     * The debit or funding date for the payroll
     */
    public PayrollReceipt withDebitDate(String debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = Optional.ofNullable(debitDate);
        return this;
    }

    /**
     * The debit or funding date for the payroll
     */
    public PayrollReceipt withDebitDate(Optional<String> debitDate) {
        Utils.checkNotNull(debitDate, "debitDate");
        this.debitDate = debitDate;
        return this;
    }

    /**
     * Always the fixed string "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page."
     */
    public PayrollReceipt withLicense(String license) {
        Utils.checkNotNull(license, "license");
        this.license = Optional.ofNullable(license);
        return this;
    }

    /**
     * Always the fixed string "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page."
     */
    public PayrollReceipt withLicense(Optional<String> license) {
        Utils.checkNotNull(license, "license");
        this.license = license;
        return this;
    }

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    public PayrollReceipt withLicenseUri(String licenseUri) {
        Utils.checkNotNull(licenseUri, "licenseUri");
        this.licenseUri = Optional.ofNullable(licenseUri);
        return this;
    }

    /**
     * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
     */
    public PayrollReceipt withLicenseUri(Optional<String> licenseUri) {
        Utils.checkNotNull(licenseUri, "licenseUri");
        this.licenseUri = licenseUri;
        return this;
    }

    public PayrollReceipt withRightToRefund(String rightToRefund) {
        Utils.checkNotNull(rightToRefund, "rightToRefund");
        this.rightToRefund = Optional.ofNullable(rightToRefund);
        return this;
    }

    public PayrollReceipt withRightToRefund(Optional<String> rightToRefund) {
        Utils.checkNotNull(rightToRefund, "rightToRefund");
        this.rightToRefund = rightToRefund;
        return this;
    }

    public PayrollReceipt withLiabilityOfLicensee(String liabilityOfLicensee) {
        Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
        this.liabilityOfLicensee = Optional.ofNullable(liabilityOfLicensee);
        return this;
    }

    public PayrollReceipt withLiabilityOfLicensee(Optional<String> liabilityOfLicensee) {
        Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
        this.liabilityOfLicensee = liabilityOfLicensee;
        return this;
    }

    /**
     * The subtotals for the payroll.
     */
    public PayrollReceipt withTotals(Totals totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = Optional.ofNullable(totals);
        return this;
    }

    /**
     * The subtotals for the payroll.
     */
    public PayrollReceipt withTotals(Optional<? extends Totals> totals) {
        Utils.checkNotNull(totals, "totals");
        this.totals = totals;
        return this;
    }

    /**
     * An array of totaled employer and employee taxes for the pay period.
     */
    public PayrollReceipt withTaxes(List<PayrollReceiptTaxes> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = Optional.ofNullable(taxes);
        return this;
    }

    /**
     * An array of totaled employer and employee taxes for the pay period.
     */
    public PayrollReceipt withTaxes(Optional<? extends List<PayrollReceiptTaxes>> taxes) {
        Utils.checkNotNull(taxes, "taxes");
        this.taxes = taxes;
        return this;
    }

    /**
     * An array of employee compensations and withholdings for this payroll
     */
    public PayrollReceipt withEmployeeCompensations(List<EmployeeCompensations> employeeCompensations) {
        Utils.checkNotNull(employeeCompensations, "employeeCompensations");
        this.employeeCompensations = Optional.ofNullable(employeeCompensations);
        return this;
    }

    /**
     * An array of employee compensations and withholdings for this payroll
     */
    public PayrollReceipt withEmployeeCompensations(Optional<? extends List<EmployeeCompensations>> employeeCompensations) {
        Utils.checkNotNull(employeeCompensations, "employeeCompensations");
        this.employeeCompensations = employeeCompensations;
        return this;
    }

    /**
     * The licensed payroll processor
     */
    public PayrollReceipt withLicensee(Licensee licensee) {
        Utils.checkNotNull(licensee, "licensee");
        this.licensee = Optional.ofNullable(licensee);
        return this;
    }

    /**
     * The licensed payroll processor
     */
    public PayrollReceipt withLicensee(Optional<? extends Licensee> licensee) {
        Utils.checkNotNull(licensee, "licensee");
        this.licensee = licensee;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollReceipt other = (PayrollReceipt) o;
        return 
            Objects.deepEquals(this.payrollUuid, other.payrollUuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.nameOfSender, other.nameOfSender) &&
            Objects.deepEquals(this.nameOfRecipient, other.nameOfRecipient) &&
            Objects.deepEquals(this.recipientNotice, other.recipientNotice) &&
            Objects.deepEquals(this.debitDate, other.debitDate) &&
            Objects.deepEquals(this.license, other.license) &&
            Objects.deepEquals(this.licenseUri, other.licenseUri) &&
            Objects.deepEquals(this.rightToRefund, other.rightToRefund) &&
            Objects.deepEquals(this.liabilityOfLicensee, other.liabilityOfLicensee) &&
            Objects.deepEquals(this.totals, other.totals) &&
            Objects.deepEquals(this.taxes, other.taxes) &&
            Objects.deepEquals(this.employeeCompensations, other.employeeCompensations) &&
            Objects.deepEquals(this.licensee, other.licensee);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            payrollUuid,
            companyUuid,
            nameOfSender,
            nameOfRecipient,
            recipientNotice,
            debitDate,
            license,
            licenseUri,
            rightToRefund,
            liabilityOfLicensee,
            totals,
            taxes,
            employeeCompensations,
            licensee);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollReceipt.class,
                "payrollUuid", payrollUuid,
                "companyUuid", companyUuid,
                "nameOfSender", nameOfSender,
                "nameOfRecipient", nameOfRecipient,
                "recipientNotice", recipientNotice,
                "debitDate", debitDate,
                "license", license,
                "licenseUri", licenseUri,
                "rightToRefund", rightToRefund,
                "liabilityOfLicensee", liabilityOfLicensee,
                "totals", totals,
                "taxes", taxes,
                "employeeCompensations", employeeCompensations,
                "licensee", licensee);
    }
    
    public final static class Builder {
 
        private Optional<String> payrollUuid = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> nameOfSender = Optional.empty();
 
        private Optional<String> nameOfRecipient = Optional.empty();
 
        private Optional<String> recipientNotice = Optional.empty();
 
        private Optional<String> debitDate = Optional.empty();
 
        private Optional<String> license = Optional.empty();
 
        private Optional<String> licenseUri = Optional.empty();
 
        private Optional<String> rightToRefund = Optional.empty();
 
        private Optional<String> liabilityOfLicensee = Optional.empty();
 
        private Optional<? extends Totals> totals = Optional.empty();
 
        private Optional<? extends List<PayrollReceiptTaxes>> taxes = Optional.empty();
 
        private Optional<? extends List<EmployeeCompensations>> employeeCompensations = Optional.empty();
 
        private Optional<? extends Licensee> licensee = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier of the payroll receipt.
         */
        public Builder payrollUuid(String payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = Optional.ofNullable(payrollUuid);
            return this;
        }

        /**
         * A unique identifier of the payroll receipt.
         */
        public Builder payrollUuid(Optional<String> payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = payrollUuid;
            return this;
        }

        /**
         * A unique identifier of the company for the payroll.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * A unique identifier of the company for the payroll.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The name of the company by whom the payroll was paid
         */
        public Builder nameOfSender(String nameOfSender) {
            Utils.checkNotNull(nameOfSender, "nameOfSender");
            this.nameOfSender = Optional.ofNullable(nameOfSender);
            return this;
        }

        /**
         * The name of the company by whom the payroll was paid
         */
        public Builder nameOfSender(Optional<String> nameOfSender) {
            Utils.checkNotNull(nameOfSender, "nameOfSender");
            this.nameOfSender = nameOfSender;
            return this;
        }

        /**
         * Always the fixed string "Payroll Recipients"
         */
        public Builder nameOfRecipient(String nameOfRecipient) {
            Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
            this.nameOfRecipient = Optional.ofNullable(nameOfRecipient);
            return this;
        }

        /**
         * Always the fixed string "Payroll Recipients"
         */
        public Builder nameOfRecipient(Optional<String> nameOfRecipient) {
            Utils.checkNotNull(nameOfRecipient, "nameOfRecipient");
            this.nameOfRecipient = nameOfRecipient;
            return this;
        }

        /**
         * Always the fixed string "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below."
         */
        public Builder recipientNotice(String recipientNotice) {
            Utils.checkNotNull(recipientNotice, "recipientNotice");
            this.recipientNotice = Optional.ofNullable(recipientNotice);
            return this;
        }

        /**
         * Always the fixed string "Payroll recipients include the employees listed below plus the tax agencies for the taxes listed below."
         */
        public Builder recipientNotice(Optional<String> recipientNotice) {
            Utils.checkNotNull(recipientNotice, "recipientNotice");
            this.recipientNotice = recipientNotice;
            return this;
        }

        /**
         * The debit or funding date for the payroll
         */
        public Builder debitDate(String debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = Optional.ofNullable(debitDate);
            return this;
        }

        /**
         * The debit or funding date for the payroll
         */
        public Builder debitDate(Optional<String> debitDate) {
            Utils.checkNotNull(debitDate, "debitDate");
            this.debitDate = debitDate;
            return this;
        }

        /**
         * Always the fixed string "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page."
         */
        public Builder license(String license) {
            Utils.checkNotNull(license, "license");
            this.license = Optional.ofNullable(license);
            return this;
        }

        /**
         * Always the fixed string "ZenPayroll, Inc., dba Gusto is a licensed money transmitter. For more about Gusto’s licenses and your state-specific rights to request information, submit complaints, dispute errors, or cancel transactions, visit our license page."
         */
        public Builder license(Optional<String> license) {
            Utils.checkNotNull(license, "license");
            this.license = license;
            return this;
        }

        /**
         * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder licenseUri(String licenseUri) {
            Utils.checkNotNull(licenseUri, "licenseUri");
            this.licenseUri = Optional.ofNullable(licenseUri);
            return this;
        }

        /**
         * URL for the license information for the licensed payroll processor. Always the fixed string "https://gusto.com/about/licenses"
         */
        public Builder licenseUri(Optional<String> licenseUri) {
            Utils.checkNotNull(licenseUri, "licenseUri");
            this.licenseUri = licenseUri;
            return this;
        }

        public Builder rightToRefund(String rightToRefund) {
            Utils.checkNotNull(rightToRefund, "rightToRefund");
            this.rightToRefund = Optional.ofNullable(rightToRefund);
            return this;
        }

        public Builder rightToRefund(Optional<String> rightToRefund) {
            Utils.checkNotNull(rightToRefund, "rightToRefund");
            this.rightToRefund = rightToRefund;
            return this;
        }

        public Builder liabilityOfLicensee(String liabilityOfLicensee) {
            Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
            this.liabilityOfLicensee = Optional.ofNullable(liabilityOfLicensee);
            return this;
        }

        public Builder liabilityOfLicensee(Optional<String> liabilityOfLicensee) {
            Utils.checkNotNull(liabilityOfLicensee, "liabilityOfLicensee");
            this.liabilityOfLicensee = liabilityOfLicensee;
            return this;
        }

        /**
         * The subtotals for the payroll.
         */
        public Builder totals(Totals totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = Optional.ofNullable(totals);
            return this;
        }

        /**
         * The subtotals for the payroll.
         */
        public Builder totals(Optional<? extends Totals> totals) {
            Utils.checkNotNull(totals, "totals");
            this.totals = totals;
            return this;
        }

        /**
         * An array of totaled employer and employee taxes for the pay period.
         */
        public Builder taxes(List<PayrollReceiptTaxes> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = Optional.ofNullable(taxes);
            return this;
        }

        /**
         * An array of totaled employer and employee taxes for the pay period.
         */
        public Builder taxes(Optional<? extends List<PayrollReceiptTaxes>> taxes) {
            Utils.checkNotNull(taxes, "taxes");
            this.taxes = taxes;
            return this;
        }

        /**
         * An array of employee compensations and withholdings for this payroll
         */
        public Builder employeeCompensations(List<EmployeeCompensations> employeeCompensations) {
            Utils.checkNotNull(employeeCompensations, "employeeCompensations");
            this.employeeCompensations = Optional.ofNullable(employeeCompensations);
            return this;
        }

        /**
         * An array of employee compensations and withholdings for this payroll
         */
        public Builder employeeCompensations(Optional<? extends List<EmployeeCompensations>> employeeCompensations) {
            Utils.checkNotNull(employeeCompensations, "employeeCompensations");
            this.employeeCompensations = employeeCompensations;
            return this;
        }

        /**
         * The licensed payroll processor
         */
        public Builder licensee(Licensee licensee) {
            Utils.checkNotNull(licensee, "licensee");
            this.licensee = Optional.ofNullable(licensee);
            return this;
        }

        /**
         * The licensed payroll processor
         */
        public Builder licensee(Optional<? extends Licensee> licensee) {
            Utils.checkNotNull(licensee, "licensee");
            this.licensee = licensee;
            return this;
        }
        
        public PayrollReceipt build() {
            return new PayrollReceipt(
                payrollUuid,
                companyUuid,
                nameOfSender,
                nameOfRecipient,
                recipientNotice,
                debitDate,
                license,
                licenseUri,
                rightToRefund,
                liabilityOfLicensee,
                totals,
                taxes,
                employeeCompensations,
                licensee);
        }
    }
}

