/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody {

    /**
     * regular hours worked in this pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("regular_hours_worked")
    private Optional<Double> regularHoursWorked;

    /**
     * overtime hours worked in this pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("overtime_hours_worked")
    private Optional<Double> overtimeHoursWorked;

    /**
     * double overtime hours worked in this pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("double_overtime_hours_worked")
    private Optional<Double> doubleOvertimeHoursWorked;

    /**
     * paid time off hours used in this pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pto_hours_used")
    private Optional<Double> ptoHoursUsed;

    /**
     * sick hours used in this pay period
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("sick_hours_used")
    private Optional<Double> sickHoursUsed;

    @JsonCreator
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody(
            @JsonProperty("regular_hours_worked") Optional<Double> regularHoursWorked,
            @JsonProperty("overtime_hours_worked") Optional<Double> overtimeHoursWorked,
            @JsonProperty("double_overtime_hours_worked") Optional<Double> doubleOvertimeHoursWorked,
            @JsonProperty("pto_hours_used") Optional<Double> ptoHoursUsed,
            @JsonProperty("sick_hours_used") Optional<Double> sickHoursUsed) {
        Utils.checkNotNull(regularHoursWorked, "regularHoursWorked");
        Utils.checkNotNull(overtimeHoursWorked, "overtimeHoursWorked");
        Utils.checkNotNull(doubleOvertimeHoursWorked, "doubleOvertimeHoursWorked");
        Utils.checkNotNull(ptoHoursUsed, "ptoHoursUsed");
        Utils.checkNotNull(sickHoursUsed, "sickHoursUsed");
        this.regularHoursWorked = regularHoursWorked;
        this.overtimeHoursWorked = overtimeHoursWorked;
        this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked;
        this.ptoHoursUsed = ptoHoursUsed;
        this.sickHoursUsed = sickHoursUsed;
    }
    
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * regular hours worked in this pay period
     */
    @JsonIgnore
    public Optional<Double> regularHoursWorked() {
        return regularHoursWorked;
    }

    /**
     * overtime hours worked in this pay period
     */
    @JsonIgnore
    public Optional<Double> overtimeHoursWorked() {
        return overtimeHoursWorked;
    }

    /**
     * double overtime hours worked in this pay period
     */
    @JsonIgnore
    public Optional<Double> doubleOvertimeHoursWorked() {
        return doubleOvertimeHoursWorked;
    }

    /**
     * paid time off hours used in this pay period
     */
    @JsonIgnore
    public Optional<Double> ptoHoursUsed() {
        return ptoHoursUsed;
    }

    /**
     * sick hours used in this pay period
     */
    @JsonIgnore
    public Optional<Double> sickHoursUsed() {
        return sickHoursUsed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * regular hours worked in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withRegularHoursWorked(double regularHoursWorked) {
        Utils.checkNotNull(regularHoursWorked, "regularHoursWorked");
        this.regularHoursWorked = Optional.ofNullable(regularHoursWorked);
        return this;
    }

    /**
     * regular hours worked in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withRegularHoursWorked(Optional<Double> regularHoursWorked) {
        Utils.checkNotNull(regularHoursWorked, "regularHoursWorked");
        this.regularHoursWorked = regularHoursWorked;
        return this;
    }

    /**
     * overtime hours worked in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withOvertimeHoursWorked(double overtimeHoursWorked) {
        Utils.checkNotNull(overtimeHoursWorked, "overtimeHoursWorked");
        this.overtimeHoursWorked = Optional.ofNullable(overtimeHoursWorked);
        return this;
    }

    /**
     * overtime hours worked in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withOvertimeHoursWorked(Optional<Double> overtimeHoursWorked) {
        Utils.checkNotNull(overtimeHoursWorked, "overtimeHoursWorked");
        this.overtimeHoursWorked = overtimeHoursWorked;
        return this;
    }

    /**
     * double overtime hours worked in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withDoubleOvertimeHoursWorked(double doubleOvertimeHoursWorked) {
        Utils.checkNotNull(doubleOvertimeHoursWorked, "doubleOvertimeHoursWorked");
        this.doubleOvertimeHoursWorked = Optional.ofNullable(doubleOvertimeHoursWorked);
        return this;
    }

    /**
     * double overtime hours worked in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withDoubleOvertimeHoursWorked(Optional<Double> doubleOvertimeHoursWorked) {
        Utils.checkNotNull(doubleOvertimeHoursWorked, "doubleOvertimeHoursWorked");
        this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked;
        return this;
    }

    /**
     * paid time off hours used in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withPtoHoursUsed(double ptoHoursUsed) {
        Utils.checkNotNull(ptoHoursUsed, "ptoHoursUsed");
        this.ptoHoursUsed = Optional.ofNullable(ptoHoursUsed);
        return this;
    }

    /**
     * paid time off hours used in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withPtoHoursUsed(Optional<Double> ptoHoursUsed) {
        Utils.checkNotNull(ptoHoursUsed, "ptoHoursUsed");
        this.ptoHoursUsed = ptoHoursUsed;
        return this;
    }

    /**
     * sick hours used in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withSickHoursUsed(double sickHoursUsed) {
        Utils.checkNotNull(sickHoursUsed, "sickHoursUsed");
        this.sickHoursUsed = Optional.ofNullable(sickHoursUsed);
        return this;
    }

    /**
     * sick hours used in this pay period
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody withSickHoursUsed(Optional<Double> sickHoursUsed) {
        Utils.checkNotNull(sickHoursUsed, "sickHoursUsed");
        this.sickHoursUsed = sickHoursUsed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody other = (PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody) o;
        return 
            Objects.deepEquals(this.regularHoursWorked, other.regularHoursWorked) &&
            Objects.deepEquals(this.overtimeHoursWorked, other.overtimeHoursWorked) &&
            Objects.deepEquals(this.doubleOvertimeHoursWorked, other.doubleOvertimeHoursWorked) &&
            Objects.deepEquals(this.ptoHoursUsed, other.ptoHoursUsed) &&
            Objects.deepEquals(this.sickHoursUsed, other.sickHoursUsed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            regularHoursWorked,
            overtimeHoursWorked,
            doubleOvertimeHoursWorked,
            ptoHoursUsed,
            sickHoursUsed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody.class,
                "regularHoursWorked", regularHoursWorked,
                "overtimeHoursWorked", overtimeHoursWorked,
                "doubleOvertimeHoursWorked", doubleOvertimeHoursWorked,
                "ptoHoursUsed", ptoHoursUsed,
                "sickHoursUsed", sickHoursUsed);
    }
    
    public final static class Builder {
 
        private Optional<Double> regularHoursWorked = Optional.empty();
 
        private Optional<Double> overtimeHoursWorked = Optional.empty();
 
        private Optional<Double> doubleOvertimeHoursWorked = Optional.empty();
 
        private Optional<Double> ptoHoursUsed = Optional.empty();
 
        private Optional<Double> sickHoursUsed = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * regular hours worked in this pay period
         */
        public Builder regularHoursWorked(double regularHoursWorked) {
            Utils.checkNotNull(regularHoursWorked, "regularHoursWorked");
            this.regularHoursWorked = Optional.ofNullable(regularHoursWorked);
            return this;
        }

        /**
         * regular hours worked in this pay period
         */
        public Builder regularHoursWorked(Optional<Double> regularHoursWorked) {
            Utils.checkNotNull(regularHoursWorked, "regularHoursWorked");
            this.regularHoursWorked = regularHoursWorked;
            return this;
        }

        /**
         * overtime hours worked in this pay period
         */
        public Builder overtimeHoursWorked(double overtimeHoursWorked) {
            Utils.checkNotNull(overtimeHoursWorked, "overtimeHoursWorked");
            this.overtimeHoursWorked = Optional.ofNullable(overtimeHoursWorked);
            return this;
        }

        /**
         * overtime hours worked in this pay period
         */
        public Builder overtimeHoursWorked(Optional<Double> overtimeHoursWorked) {
            Utils.checkNotNull(overtimeHoursWorked, "overtimeHoursWorked");
            this.overtimeHoursWorked = overtimeHoursWorked;
            return this;
        }

        /**
         * double overtime hours worked in this pay period
         */
        public Builder doubleOvertimeHoursWorked(double doubleOvertimeHoursWorked) {
            Utils.checkNotNull(doubleOvertimeHoursWorked, "doubleOvertimeHoursWorked");
            this.doubleOvertimeHoursWorked = Optional.ofNullable(doubleOvertimeHoursWorked);
            return this;
        }

        /**
         * double overtime hours worked in this pay period
         */
        public Builder doubleOvertimeHoursWorked(Optional<Double> doubleOvertimeHoursWorked) {
            Utils.checkNotNull(doubleOvertimeHoursWorked, "doubleOvertimeHoursWorked");
            this.doubleOvertimeHoursWorked = doubleOvertimeHoursWorked;
            return this;
        }

        /**
         * paid time off hours used in this pay period
         */
        public Builder ptoHoursUsed(double ptoHoursUsed) {
            Utils.checkNotNull(ptoHoursUsed, "ptoHoursUsed");
            this.ptoHoursUsed = Optional.ofNullable(ptoHoursUsed);
            return this;
        }

        /**
         * paid time off hours used in this pay period
         */
        public Builder ptoHoursUsed(Optional<Double> ptoHoursUsed) {
            Utils.checkNotNull(ptoHoursUsed, "ptoHoursUsed");
            this.ptoHoursUsed = ptoHoursUsed;
            return this;
        }

        /**
         * sick hours used in this pay period
         */
        public Builder sickHoursUsed(double sickHoursUsed) {
            Utils.checkNotNull(sickHoursUsed, "sickHoursUsed");
            this.sickHoursUsed = Optional.ofNullable(sickHoursUsed);
            return this;
        }

        /**
         * sick hours used in this pay period
         */
        public Builder sickHoursUsed(Optional<Double> sickHoursUsed) {
            Utils.checkNotNull(sickHoursUsed, "sickHoursUsed");
            this.sickHoursUsed = sickHoursUsed;
            return this;
        }
        
        public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody build() {
            return new PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody(
                regularHoursWorked,
                overtimeHoursWorked,
                doubleOvertimeHoursWorked,
                ptoHoursUsed,
                sickHoursUsed);
        }
    }
}

