/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class PutV1TaxLiabilitiesRequestBody {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_selections")
    private Optional<? extends List<LiabilitySelections>> liabilitySelections;

    @JsonCreator
    public PutV1TaxLiabilitiesRequestBody(
            @JsonProperty("liability_selections") Optional<? extends List<LiabilitySelections>> liabilitySelections) {
        Utils.checkNotNull(liabilitySelections, "liabilitySelections");
        this.liabilitySelections = liabilitySelections;
    }
    
    public PutV1TaxLiabilitiesRequestBody() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<LiabilitySelections>> liabilitySelections() {
        return (Optional<List<LiabilitySelections>>) liabilitySelections;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PutV1TaxLiabilitiesRequestBody withLiabilitySelections(List<LiabilitySelections> liabilitySelections) {
        Utils.checkNotNull(liabilitySelections, "liabilitySelections");
        this.liabilitySelections = Optional.ofNullable(liabilitySelections);
        return this;
    }

    public PutV1TaxLiabilitiesRequestBody withLiabilitySelections(Optional<? extends List<LiabilitySelections>> liabilitySelections) {
        Utils.checkNotNull(liabilitySelections, "liabilitySelections");
        this.liabilitySelections = liabilitySelections;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1TaxLiabilitiesRequestBody other = (PutV1TaxLiabilitiesRequestBody) o;
        return 
            Objects.deepEquals(this.liabilitySelections, other.liabilitySelections);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            liabilitySelections);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1TaxLiabilitiesRequestBody.class,
                "liabilitySelections", liabilitySelections);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<LiabilitySelections>> liabilitySelections = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder liabilitySelections(List<LiabilitySelections> liabilitySelections) {
            Utils.checkNotNull(liabilitySelections, "liabilitySelections");
            this.liabilitySelections = Optional.ofNullable(liabilitySelections);
            return this;
        }

        public Builder liabilitySelections(Optional<? extends List<LiabilitySelections>> liabilitySelections) {
            Utils.checkNotNull(liabilitySelections, "liabilitySelections");
            this.liabilitySelections = liabilitySelections;
            return this;
        }
        
        public PutV1TaxLiabilitiesRequestBody build() {
            return new PutV1TaxLiabilitiesRequestBody(
                liabilitySelections);
        }
    }
}

