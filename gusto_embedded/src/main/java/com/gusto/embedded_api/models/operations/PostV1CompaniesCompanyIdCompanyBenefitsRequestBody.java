/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class PostV1CompaniesCompanyIdCompanyBenefitsRequestBody {

    /**
     * The ID of the benefit to which the company benefit belongs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefit_type")
    private Optional<Long> benefitType;

    /**
     * Whether this benefit is active for employee participation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.
     */
    @JsonProperty("description")
    private String description;

    /**
     * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsible_for_employer_taxes")
    private Optional<Boolean> responsibleForEmployerTaxes;

    /**
     * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("responsible_for_employee_w2")
    private Optional<Boolean> responsibleForEmployeeW2;

    @JsonCreator
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody(
            @JsonProperty("benefit_type") Optional<Long> benefitType,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("description") String description,
            @JsonProperty("responsible_for_employer_taxes") Optional<Boolean> responsibleForEmployerTaxes,
            @JsonProperty("responsible_for_employee_w2") Optional<Boolean> responsibleForEmployeeW2) {
        Utils.checkNotNull(benefitType, "benefitType");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(responsibleForEmployerTaxes, "responsibleForEmployerTaxes");
        Utils.checkNotNull(responsibleForEmployeeW2, "responsibleForEmployeeW2");
        this.benefitType = benefitType;
        this.active = active;
        this.description = description;
        this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
        this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
    }
    
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody(
            String description) {
        this(Optional.empty(), Optional.empty(), description, Optional.empty(), Optional.empty());
    }

    /**
     * The ID of the benefit to which the company benefit belongs.
     */
    @JsonIgnore
    public Optional<Long> benefitType() {
        return benefitType;
    }

    /**
     * Whether this benefit is active for employee participation.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
     */
    @JsonIgnore
    public Optional<Boolean> responsibleForEmployerTaxes() {
        return responsibleForEmployerTaxes;
    }

    /**
     * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
     */
    @JsonIgnore
    public Optional<Boolean> responsibleForEmployeeW2() {
        return responsibleForEmployeeW2;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The ID of the benefit to which the company benefit belongs.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withBenefitType(long benefitType) {
        Utils.checkNotNull(benefitType, "benefitType");
        this.benefitType = Optional.ofNullable(benefitType);
        return this;
    }

    /**
     * The ID of the benefit to which the company benefit belongs.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withBenefitType(Optional<Long> benefitType) {
        Utils.checkNotNull(benefitType, "benefitType");
        this.benefitType = benefitType;
        return this;
    }

    /**
     * Whether this benefit is active for employee participation.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Whether this benefit is active for employee participation.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withResponsibleForEmployerTaxes(boolean responsibleForEmployerTaxes) {
        Utils.checkNotNull(responsibleForEmployerTaxes, "responsibleForEmployerTaxes");
        this.responsibleForEmployerTaxes = Optional.ofNullable(responsibleForEmployerTaxes);
        return this;
    }

    /**
     * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withResponsibleForEmployerTaxes(Optional<Boolean> responsibleForEmployerTaxes) {
        Utils.checkNotNull(responsibleForEmployerTaxes, "responsibleForEmployerTaxes");
        this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
        return this;
    }

    /**
     * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withResponsibleForEmployeeW2(boolean responsibleForEmployeeW2) {
        Utils.checkNotNull(responsibleForEmployeeW2, "responsibleForEmployeeW2");
        this.responsibleForEmployeeW2 = Optional.ofNullable(responsibleForEmployeeW2);
        return this;
    }

    /**
     * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody withResponsibleForEmployeeW2(Optional<Boolean> responsibleForEmployeeW2) {
        Utils.checkNotNull(responsibleForEmployeeW2, "responsibleForEmployeeW2");
        this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1CompaniesCompanyIdCompanyBenefitsRequestBody other = (PostV1CompaniesCompanyIdCompanyBenefitsRequestBody) o;
        return 
            Objects.deepEquals(this.benefitType, other.benefitType) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.responsibleForEmployerTaxes, other.responsibleForEmployerTaxes) &&
            Objects.deepEquals(this.responsibleForEmployeeW2, other.responsibleForEmployeeW2);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            benefitType,
            active,
            description,
            responsibleForEmployerTaxes,
            responsibleForEmployeeW2);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1CompaniesCompanyIdCompanyBenefitsRequestBody.class,
                "benefitType", benefitType,
                "active", active,
                "description", description,
                "responsibleForEmployerTaxes", responsibleForEmployerTaxes,
                "responsibleForEmployeeW2", responsibleForEmployeeW2);
    }
    
    public final static class Builder {
 
        private Optional<Long> benefitType = Optional.empty();
 
        private Optional<Boolean> active;
 
        private String description;
 
        private Optional<Boolean> responsibleForEmployerTaxes = Optional.empty();
 
        private Optional<Boolean> responsibleForEmployeeW2 = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The ID of the benefit to which the company benefit belongs.
         */
        public Builder benefitType(long benefitType) {
            Utils.checkNotNull(benefitType, "benefitType");
            this.benefitType = Optional.ofNullable(benefitType);
            return this;
        }

        /**
         * The ID of the benefit to which the company benefit belongs.
         */
        public Builder benefitType(Optional<Long> benefitType) {
            Utils.checkNotNull(benefitType, "benefitType");
            this.benefitType = benefitType;
            return this;
        }

        /**
         * Whether this benefit is active for employee participation.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Whether this benefit is active for employee participation.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The description of the company benefit. For example, a company may offer multiple benefits with an ID of 1 (for Medical Insurance). The description would show something more specific like “Kaiser Permanente” or “Blue Cross/ Blue Shield”.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
         */
        public Builder responsibleForEmployerTaxes(boolean responsibleForEmployerTaxes) {
            Utils.checkNotNull(responsibleForEmployerTaxes, "responsibleForEmployerTaxes");
            this.responsibleForEmployerTaxes = Optional.ofNullable(responsibleForEmployerTaxes);
            return this;
        }

        /**
         * Whether the employer is subject to pay employer taxes when an employee is on leave. Only applicable to third party sick pay benefits.
         */
        public Builder responsibleForEmployerTaxes(Optional<Boolean> responsibleForEmployerTaxes) {
            Utils.checkNotNull(responsibleForEmployerTaxes, "responsibleForEmployerTaxes");
            this.responsibleForEmployerTaxes = responsibleForEmployerTaxes;
            return this;
        }

        /**
         * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
         */
        public Builder responsibleForEmployeeW2(boolean responsibleForEmployeeW2) {
            Utils.checkNotNull(responsibleForEmployeeW2, "responsibleForEmployeeW2");
            this.responsibleForEmployeeW2 = Optional.ofNullable(responsibleForEmployeeW2);
            return this;
        }

        /**
         * Whether the employer is subject to file W-2 forms for an employee on leave. Only applicable to third party sick pay benefits.
         */
        public Builder responsibleForEmployeeW2(Optional<Boolean> responsibleForEmployeeW2) {
            Utils.checkNotNull(responsibleForEmployeeW2, "responsibleForEmployeeW2");
            this.responsibleForEmployeeW2 = responsibleForEmployeeW2;
            return this;
        }
        
        public PostV1CompaniesCompanyIdCompanyBenefitsRequestBody build() {
            if (active == null) {
                active = _SINGLETON_VALUE_Active.value();
            }            return new PostV1CompaniesCompanyIdCompanyBenefitsRequestBody(
                benefitType,
                active,
                description,
                responsibleForEmployerTaxes,
                responsibleForEmployeeW2);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Active =
                new LazySingletonValue<>(
                        "active",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

