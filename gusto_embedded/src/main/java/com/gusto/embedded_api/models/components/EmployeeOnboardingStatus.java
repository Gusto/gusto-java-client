/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * EmployeeOnboardingStatus - The representation of an employee's onboarding status.
 */

public class EmployeeOnboardingStatus {

    /**
     * Unique identifier for this employee.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * One of the "onboarding_status" enum values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding_status")
    private Optional<String> onboardingStatus;

    /**
     * List of steps required to onboard an employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding_steps")
    private Optional<? extends List<EmployeeOnboardingStatusOnboardingStep>> onboardingSteps;

    @JsonCreator
    public EmployeeOnboardingStatus(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("onboarding_status") Optional<String> onboardingStatus,
            @JsonProperty("onboarding_steps") Optional<? extends List<EmployeeOnboardingStatusOnboardingStep>> onboardingSteps) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        Utils.checkNotNull(onboardingSteps, "onboardingSteps");
        this.uuid = uuid;
        this.onboardingStatus = onboardingStatus;
        this.onboardingSteps = onboardingSteps;
    }
    
    public EmployeeOnboardingStatus(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier for this employee.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * One of the "onboarding_status" enum values.
     */
    @JsonIgnore
    public Optional<String> onboardingStatus() {
        return onboardingStatus;
    }

    /**
     * List of steps required to onboard an employee.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EmployeeOnboardingStatusOnboardingStep>> onboardingSteps() {
        return (Optional<List<EmployeeOnboardingStatusOnboardingStep>>) onboardingSteps;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier for this employee.
     */
    public EmployeeOnboardingStatus withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * One of the "onboarding_status" enum values.
     */
    public EmployeeOnboardingStatus withOnboardingStatus(String onboardingStatus) {
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        this.onboardingStatus = Optional.ofNullable(onboardingStatus);
        return this;
    }

    /**
     * One of the "onboarding_status" enum values.
     */
    public EmployeeOnboardingStatus withOnboardingStatus(Optional<String> onboardingStatus) {
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        this.onboardingStatus = onboardingStatus;
        return this;
    }

    /**
     * List of steps required to onboard an employee.
     */
    public EmployeeOnboardingStatus withOnboardingSteps(List<EmployeeOnboardingStatusOnboardingStep> onboardingSteps) {
        Utils.checkNotNull(onboardingSteps, "onboardingSteps");
        this.onboardingSteps = Optional.ofNullable(onboardingSteps);
        return this;
    }

    /**
     * List of steps required to onboard an employee.
     */
    public EmployeeOnboardingStatus withOnboardingSteps(Optional<? extends List<EmployeeOnboardingStatusOnboardingStep>> onboardingSteps) {
        Utils.checkNotNull(onboardingSteps, "onboardingSteps");
        this.onboardingSteps = onboardingSteps;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeOnboardingStatus other = (EmployeeOnboardingStatus) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.onboardingStatus, other.onboardingStatus) &&
            Objects.deepEquals(this.onboardingSteps, other.onboardingSteps);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            onboardingStatus,
            onboardingSteps);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeOnboardingStatus.class,
                "uuid", uuid,
                "onboardingStatus", onboardingStatus,
                "onboardingSteps", onboardingSteps);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> onboardingStatus = Optional.empty();
 
        private Optional<? extends List<EmployeeOnboardingStatusOnboardingStep>> onboardingSteps = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier for this employee.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * One of the "onboarding_status" enum values.
         */
        public Builder onboardingStatus(String onboardingStatus) {
            Utils.checkNotNull(onboardingStatus, "onboardingStatus");
            this.onboardingStatus = Optional.ofNullable(onboardingStatus);
            return this;
        }

        /**
         * One of the "onboarding_status" enum values.
         */
        public Builder onboardingStatus(Optional<String> onboardingStatus) {
            Utils.checkNotNull(onboardingStatus, "onboardingStatus");
            this.onboardingStatus = onboardingStatus;
            return this;
        }

        /**
         * List of steps required to onboard an employee.
         */
        public Builder onboardingSteps(List<EmployeeOnboardingStatusOnboardingStep> onboardingSteps) {
            Utils.checkNotNull(onboardingSteps, "onboardingSteps");
            this.onboardingSteps = Optional.ofNullable(onboardingSteps);
            return this;
        }

        /**
         * List of steps required to onboard an employee.
         */
        public Builder onboardingSteps(Optional<? extends List<EmployeeOnboardingStatusOnboardingStep>> onboardingSteps) {
            Utils.checkNotNull(onboardingSteps, "onboardingSteps");
            this.onboardingSteps = onboardingSteps;
            return this;
        }
        
        public EmployeeOnboardingStatus build() {
            return new EmployeeOnboardingStatus(
                uuid,
                onboardingStatus,
                onboardingSteps);
        }
    }
}

