/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * PayScheduleAssignment - The representation of a pay schedule assignment.
 */

public class PayScheduleAssignment {

    /**
     * The pay schedule assignment type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private JsonNullable<? extends Type> type;

    /**
     * Pay schedule for hourly employees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_pay_schedule_uuid")
    private JsonNullable<String> hourlyPayScheduleUuid;

    /**
     * Pay schedule for salaried employees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("salaried_pay_schedule_uuid")
    private JsonNullable<String> salariedPayScheduleUuid;

    /**
     * Default pay schedule for employees.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("default_pay_schedule_uuid")
    private JsonNullable<String> defaultPayScheduleUuid;

    /**
     * List of employees and their pay schedules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees")
    private JsonNullable<? extends List<PayScheduleAssignmentEmployee>> employees;

    /**
     * List of departments and their pay schedules.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("departments")
    private JsonNullable<? extends List<PayScheduleAssignmentDepartment>> departments;

    @JsonCreator
    public PayScheduleAssignment(
            @JsonProperty("type") JsonNullable<? extends Type> type,
            @JsonProperty("hourly_pay_schedule_uuid") JsonNullable<String> hourlyPayScheduleUuid,
            @JsonProperty("salaried_pay_schedule_uuid") JsonNullable<String> salariedPayScheduleUuid,
            @JsonProperty("default_pay_schedule_uuid") JsonNullable<String> defaultPayScheduleUuid,
            @JsonProperty("employees") JsonNullable<? extends List<PayScheduleAssignmentEmployee>> employees,
            @JsonProperty("departments") JsonNullable<? extends List<PayScheduleAssignmentDepartment>> departments) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
        Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
        Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
        Utils.checkNotNull(employees, "employees");
        Utils.checkNotNull(departments, "departments");
        this.type = type;
        this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
        this.salariedPayScheduleUuid = salariedPayScheduleUuid;
        this.defaultPayScheduleUuid = defaultPayScheduleUuid;
        this.employees = employees;
        this.departments = departments;
    }
    
    public PayScheduleAssignment() {
        this(JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The pay schedule assignment type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Type> type() {
        return (JsonNullable<Type>) type;
    }

    /**
     * Pay schedule for hourly employees.
     */
    @JsonIgnore
    public JsonNullable<String> hourlyPayScheduleUuid() {
        return hourlyPayScheduleUuid;
    }

    /**
     * Pay schedule for salaried employees.
     */
    @JsonIgnore
    public JsonNullable<String> salariedPayScheduleUuid() {
        return salariedPayScheduleUuid;
    }

    /**
     * Default pay schedule for employees.
     */
    @JsonIgnore
    public JsonNullable<String> defaultPayScheduleUuid() {
        return defaultPayScheduleUuid;
    }

    /**
     * List of employees and their pay schedules.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PayScheduleAssignmentEmployee>> employees() {
        return (JsonNullable<List<PayScheduleAssignmentEmployee>>) employees;
    }

    /**
     * List of departments and their pay schedules.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<List<PayScheduleAssignmentDepartment>> departments() {
        return (JsonNullable<List<PayScheduleAssignmentDepartment>>) departments;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The pay schedule assignment type.
     */
    public PayScheduleAssignment withType(Type type) {
        Utils.checkNotNull(type, "type");
        this.type = JsonNullable.of(type);
        return this;
    }

    /**
     * The pay schedule assignment type.
     */
    public PayScheduleAssignment withType(JsonNullable<? extends Type> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * Pay schedule for hourly employees.
     */
    public PayScheduleAssignment withHourlyPayScheduleUuid(String hourlyPayScheduleUuid) {
        Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
        this.hourlyPayScheduleUuid = JsonNullable.of(hourlyPayScheduleUuid);
        return this;
    }

    /**
     * Pay schedule for hourly employees.
     */
    public PayScheduleAssignment withHourlyPayScheduleUuid(JsonNullable<String> hourlyPayScheduleUuid) {
        Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
        this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
        return this;
    }

    /**
     * Pay schedule for salaried employees.
     */
    public PayScheduleAssignment withSalariedPayScheduleUuid(String salariedPayScheduleUuid) {
        Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
        this.salariedPayScheduleUuid = JsonNullable.of(salariedPayScheduleUuid);
        return this;
    }

    /**
     * Pay schedule for salaried employees.
     */
    public PayScheduleAssignment withSalariedPayScheduleUuid(JsonNullable<String> salariedPayScheduleUuid) {
        Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
        this.salariedPayScheduleUuid = salariedPayScheduleUuid;
        return this;
    }

    /**
     * Default pay schedule for employees.
     */
    public PayScheduleAssignment withDefaultPayScheduleUuid(String defaultPayScheduleUuid) {
        Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
        this.defaultPayScheduleUuid = JsonNullable.of(defaultPayScheduleUuid);
        return this;
    }

    /**
     * Default pay schedule for employees.
     */
    public PayScheduleAssignment withDefaultPayScheduleUuid(JsonNullable<String> defaultPayScheduleUuid) {
        Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
        this.defaultPayScheduleUuid = defaultPayScheduleUuid;
        return this;
    }

    /**
     * List of employees and their pay schedules.
     */
    public PayScheduleAssignment withEmployees(List<PayScheduleAssignmentEmployee> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = JsonNullable.of(employees);
        return this;
    }

    /**
     * List of employees and their pay schedules.
     */
    public PayScheduleAssignment withEmployees(JsonNullable<? extends List<PayScheduleAssignmentEmployee>> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }

    /**
     * List of departments and their pay schedules.
     */
    public PayScheduleAssignment withDepartments(List<PayScheduleAssignmentDepartment> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = JsonNullable.of(departments);
        return this;
    }

    /**
     * List of departments and their pay schedules.
     */
    public PayScheduleAssignment withDepartments(JsonNullable<? extends List<PayScheduleAssignmentDepartment>> departments) {
        Utils.checkNotNull(departments, "departments");
        this.departments = departments;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayScheduleAssignment other = (PayScheduleAssignment) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.hourlyPayScheduleUuid, other.hourlyPayScheduleUuid) &&
            Objects.deepEquals(this.salariedPayScheduleUuid, other.salariedPayScheduleUuid) &&
            Objects.deepEquals(this.defaultPayScheduleUuid, other.defaultPayScheduleUuid) &&
            Objects.deepEquals(this.employees, other.employees) &&
            Objects.deepEquals(this.departments, other.departments);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            hourlyPayScheduleUuid,
            salariedPayScheduleUuid,
            defaultPayScheduleUuid,
            employees,
            departments);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayScheduleAssignment.class,
                "type", type,
                "hourlyPayScheduleUuid", hourlyPayScheduleUuid,
                "salariedPayScheduleUuid", salariedPayScheduleUuid,
                "defaultPayScheduleUuid", defaultPayScheduleUuid,
                "employees", employees,
                "departments", departments);
    }
    
    public final static class Builder {
 
        private JsonNullable<? extends Type> type = JsonNullable.undefined();
 
        private JsonNullable<String> hourlyPayScheduleUuid = JsonNullable.undefined();
 
        private JsonNullable<String> salariedPayScheduleUuid = JsonNullable.undefined();
 
        private JsonNullable<String> defaultPayScheduleUuid = JsonNullable.undefined();
 
        private JsonNullable<? extends List<PayScheduleAssignmentEmployee>> employees = JsonNullable.undefined();
 
        private JsonNullable<? extends List<PayScheduleAssignmentDepartment>> departments = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The pay schedule assignment type.
         */
        public Builder type(Type type) {
            Utils.checkNotNull(type, "type");
            this.type = JsonNullable.of(type);
            return this;
        }

        /**
         * The pay schedule assignment type.
         */
        public Builder type(JsonNullable<? extends Type> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * Pay schedule for hourly employees.
         */
        public Builder hourlyPayScheduleUuid(String hourlyPayScheduleUuid) {
            Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
            this.hourlyPayScheduleUuid = JsonNullable.of(hourlyPayScheduleUuid);
            return this;
        }

        /**
         * Pay schedule for hourly employees.
         */
        public Builder hourlyPayScheduleUuid(JsonNullable<String> hourlyPayScheduleUuid) {
            Utils.checkNotNull(hourlyPayScheduleUuid, "hourlyPayScheduleUuid");
            this.hourlyPayScheduleUuid = hourlyPayScheduleUuid;
            return this;
        }

        /**
         * Pay schedule for salaried employees.
         */
        public Builder salariedPayScheduleUuid(String salariedPayScheduleUuid) {
            Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
            this.salariedPayScheduleUuid = JsonNullable.of(salariedPayScheduleUuid);
            return this;
        }

        /**
         * Pay schedule for salaried employees.
         */
        public Builder salariedPayScheduleUuid(JsonNullable<String> salariedPayScheduleUuid) {
            Utils.checkNotNull(salariedPayScheduleUuid, "salariedPayScheduleUuid");
            this.salariedPayScheduleUuid = salariedPayScheduleUuid;
            return this;
        }

        /**
         * Default pay schedule for employees.
         */
        public Builder defaultPayScheduleUuid(String defaultPayScheduleUuid) {
            Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
            this.defaultPayScheduleUuid = JsonNullable.of(defaultPayScheduleUuid);
            return this;
        }

        /**
         * Default pay schedule for employees.
         */
        public Builder defaultPayScheduleUuid(JsonNullable<String> defaultPayScheduleUuid) {
            Utils.checkNotNull(defaultPayScheduleUuid, "defaultPayScheduleUuid");
            this.defaultPayScheduleUuid = defaultPayScheduleUuid;
            return this;
        }

        /**
         * List of employees and their pay schedules.
         */
        public Builder employees(List<PayScheduleAssignmentEmployee> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = JsonNullable.of(employees);
            return this;
        }

        /**
         * List of employees and their pay schedules.
         */
        public Builder employees(JsonNullable<? extends List<PayScheduleAssignmentEmployee>> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }

        /**
         * List of departments and their pay schedules.
         */
        public Builder departments(List<PayScheduleAssignmentDepartment> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = JsonNullable.of(departments);
            return this;
        }

        /**
         * List of departments and their pay schedules.
         */
        public Builder departments(JsonNullable<? extends List<PayScheduleAssignmentDepartment>> departments) {
            Utils.checkNotNull(departments, "departments");
            this.departments = departments;
            return this;
        }
        
        public PayScheduleAssignment build() {
            return new PayScheduleAssignment(
                type,
                hourlyPayScheduleUuid,
                salariedPayScheduleUuid,
                defaultPayScheduleUuid,
                employees,
                departments);
        }
    }
}

