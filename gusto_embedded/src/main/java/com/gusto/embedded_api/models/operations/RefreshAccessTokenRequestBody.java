/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class RefreshAccessTokenRequestBody {

    /**
     * Your client id
     */
    @JsonProperty("client_id")
    private String clientId;

    /**
     * Your client secret
     */
    @JsonProperty("client_secret")
    private String clientSecret;

    /**
     * The redirect URI you set up via the Developer Portal
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("redirect_uri")
    private Optional<String> redirectUri;

    /**
     * The `refresh_token` being exchanged for an access token code
     */
    @JsonProperty("refresh_token")
    private String refreshToken;

    /**
     * this should be the literal string 'refresh_token'
     */
    @JsonProperty("grant_type")
    private String grantType;

    @JsonCreator
    public RefreshAccessTokenRequestBody(
            @JsonProperty("client_id") String clientId,
            @JsonProperty("client_secret") String clientSecret,
            @JsonProperty("redirect_uri") Optional<String> redirectUri,
            @JsonProperty("refresh_token") String refreshToken,
            @JsonProperty("grant_type") String grantType) {
        Utils.checkNotNull(clientId, "clientId");
        Utils.checkNotNull(clientSecret, "clientSecret");
        Utils.checkNotNull(redirectUri, "redirectUri");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(grantType, "grantType");
        this.clientId = clientId;
        this.clientSecret = clientSecret;
        this.redirectUri = redirectUri;
        this.refreshToken = refreshToken;
        this.grantType = grantType;
    }
    
    public RefreshAccessTokenRequestBody(
            String clientId,
            String clientSecret,
            String refreshToken,
            String grantType) {
        this(clientId, clientSecret, Optional.empty(), refreshToken, grantType);
    }

    /**
     * Your client id
     */
    @JsonIgnore
    public String clientId() {
        return clientId;
    }

    /**
     * Your client secret
     */
    @JsonIgnore
    public String clientSecret() {
        return clientSecret;
    }

    /**
     * The redirect URI you set up via the Developer Portal
     */
    @JsonIgnore
    public Optional<String> redirectUri() {
        return redirectUri;
    }

    /**
     * The `refresh_token` being exchanged for an access token code
     */
    @JsonIgnore
    public String refreshToken() {
        return refreshToken;
    }

    /**
     * this should be the literal string 'refresh_token'
     */
    @JsonIgnore
    public String grantType() {
        return grantType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Your client id
     */
    public RefreshAccessTokenRequestBody withClientId(String clientId) {
        Utils.checkNotNull(clientId, "clientId");
        this.clientId = clientId;
        return this;
    }

    /**
     * Your client secret
     */
    public RefreshAccessTokenRequestBody withClientSecret(String clientSecret) {
        Utils.checkNotNull(clientSecret, "clientSecret");
        this.clientSecret = clientSecret;
        return this;
    }

    /**
     * The redirect URI you set up via the Developer Portal
     */
    public RefreshAccessTokenRequestBody withRedirectUri(String redirectUri) {
        Utils.checkNotNull(redirectUri, "redirectUri");
        this.redirectUri = Optional.ofNullable(redirectUri);
        return this;
    }

    /**
     * The redirect URI you set up via the Developer Portal
     */
    public RefreshAccessTokenRequestBody withRedirectUri(Optional<String> redirectUri) {
        Utils.checkNotNull(redirectUri, "redirectUri");
        this.redirectUri = redirectUri;
        return this;
    }

    /**
     * The `refresh_token` being exchanged for an access token code
     */
    public RefreshAccessTokenRequestBody withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * this should be the literal string 'refresh_token'
     */
    public RefreshAccessTokenRequestBody withGrantType(String grantType) {
        Utils.checkNotNull(grantType, "grantType");
        this.grantType = grantType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RefreshAccessTokenRequestBody other = (RefreshAccessTokenRequestBody) o;
        return 
            Objects.deepEquals(this.clientId, other.clientId) &&
            Objects.deepEquals(this.clientSecret, other.clientSecret) &&
            Objects.deepEquals(this.redirectUri, other.redirectUri) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.grantType, other.grantType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            clientId,
            clientSecret,
            redirectUri,
            refreshToken,
            grantType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RefreshAccessTokenRequestBody.class,
                "clientId", clientId,
                "clientSecret", clientSecret,
                "redirectUri", redirectUri,
                "refreshToken", refreshToken,
                "grantType", grantType);
    }
    
    public final static class Builder {
 
        private String clientId;
 
        private String clientSecret;
 
        private Optional<String> redirectUri = Optional.empty();
 
        private String refreshToken;
 
        private String grantType;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Your client id
         */
        public Builder clientId(String clientId) {
            Utils.checkNotNull(clientId, "clientId");
            this.clientId = clientId;
            return this;
        }

        /**
         * Your client secret
         */
        public Builder clientSecret(String clientSecret) {
            Utils.checkNotNull(clientSecret, "clientSecret");
            this.clientSecret = clientSecret;
            return this;
        }

        /**
         * The redirect URI you set up via the Developer Portal
         */
        public Builder redirectUri(String redirectUri) {
            Utils.checkNotNull(redirectUri, "redirectUri");
            this.redirectUri = Optional.ofNullable(redirectUri);
            return this;
        }

        /**
         * The redirect URI you set up via the Developer Portal
         */
        public Builder redirectUri(Optional<String> redirectUri) {
            Utils.checkNotNull(redirectUri, "redirectUri");
            this.redirectUri = redirectUri;
            return this;
        }

        /**
         * The `refresh_token` being exchanged for an access token code
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * this should be the literal string 'refresh_token'
         */
        public Builder grantType(String grantType) {
            Utils.checkNotNull(grantType, "grantType");
            this.grantType = grantType;
            return this;
        }
        
        public RefreshAccessTokenRequestBody build() {
            return new RefreshAccessTokenRequestBody(
                clientId,
                clientSecret,
                redirectUri,
                refreshToken,
                grantType);
        }
    }
}

