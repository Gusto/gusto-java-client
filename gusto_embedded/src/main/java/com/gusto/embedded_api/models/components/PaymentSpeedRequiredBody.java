/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class PaymentSpeedRequiredBody {

    /**
     * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fast_payment_limit")
    private Optional<String> fastPaymentLimit;

    /**
     * Gusto Embedded supports three payment speeds (1-day, 2-day, and 4-day). For next-day payments, funds are deposited in your team's bank account by the end of the next business day. Most people will see the funds arrive the next afternoon, but payments may arrive as late as the end of the business day.
     */
    @JsonProperty("payment_speed")
    private PaymentSpeedParam paymentSpeed;

    @JsonCreator
    public PaymentSpeedRequiredBody(
            @JsonProperty("fast_payment_limit") Optional<String> fastPaymentLimit,
            @JsonProperty("payment_speed") PaymentSpeedParam paymentSpeed) {
        Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
        Utils.checkNotNull(paymentSpeed, "paymentSpeed");
        this.fastPaymentLimit = fastPaymentLimit;
        this.paymentSpeed = paymentSpeed;
    }
    
    public PaymentSpeedRequiredBody(
            PaymentSpeedParam paymentSpeed) {
        this(Optional.empty(), paymentSpeed);
    }

    /**
     * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
     */
    @JsonIgnore
    public Optional<String> fastPaymentLimit() {
        return fastPaymentLimit;
    }

    /**
     * Gusto Embedded supports three payment speeds (1-day, 2-day, and 4-day). For next-day payments, funds are deposited in your team's bank account by the end of the next business day. Most people will see the funds arrive the next afternoon, but payments may arrive as late as the end of the business day.
     */
    @JsonIgnore
    public PaymentSpeedParam paymentSpeed() {
        return paymentSpeed;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
     */
    public PaymentSpeedRequiredBody withFastPaymentLimit(String fastPaymentLimit) {
        Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
        this.fastPaymentLimit = Optional.ofNullable(fastPaymentLimit);
        return this;
    }

    /**
     * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
     */
    public PaymentSpeedRequiredBody withFastPaymentLimit(Optional<String> fastPaymentLimit) {
        Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
        this.fastPaymentLimit = fastPaymentLimit;
        return this;
    }

    /**
     * Gusto Embedded supports three payment speeds (1-day, 2-day, and 4-day). For next-day payments, funds are deposited in your team's bank account by the end of the next business day. Most people will see the funds arrive the next afternoon, but payments may arrive as late as the end of the business day.
     */
    public PaymentSpeedRequiredBody withPaymentSpeed(PaymentSpeedParam paymentSpeed) {
        Utils.checkNotNull(paymentSpeed, "paymentSpeed");
        this.paymentSpeed = paymentSpeed;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaymentSpeedRequiredBody other = (PaymentSpeedRequiredBody) o;
        return 
            Objects.deepEquals(this.fastPaymentLimit, other.fastPaymentLimit) &&
            Objects.deepEquals(this.paymentSpeed, other.paymentSpeed);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fastPaymentLimit,
            paymentSpeed);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaymentSpeedRequiredBody.class,
                "fastPaymentLimit", fastPaymentLimit,
                "paymentSpeed", paymentSpeed);
    }
    
    public final static class Builder {
 
        private Optional<String> fastPaymentLimit = Optional.empty();
 
        private PaymentSpeedParam paymentSpeed;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
         */
        public Builder fastPaymentLimit(String fastPaymentLimit) {
            Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
            this.fastPaymentLimit = Optional.ofNullable(fastPaymentLimit);
            return this;
        }

        /**
         * Fast payment limit. This limit is an aggregate of all fast payrolls amount. This limit is only relevant when payment speed is 1-day or 2-day.
         */
        public Builder fastPaymentLimit(Optional<String> fastPaymentLimit) {
            Utils.checkNotNull(fastPaymentLimit, "fastPaymentLimit");
            this.fastPaymentLimit = fastPaymentLimit;
            return this;
        }

        /**
         * Gusto Embedded supports three payment speeds (1-day, 2-day, and 4-day). For next-day payments, funds are deposited in your team's bank account by the end of the next business day. Most people will see the funds arrive the next afternoon, but payments may arrive as late as the end of the business day.
         */
        public Builder paymentSpeed(PaymentSpeedParam paymentSpeed) {
            Utils.checkNotNull(paymentSpeed, "paymentSpeed");
            this.paymentSpeed = paymentSpeed;
            return this;
        }
        
        public PaymentSpeedRequiredBody build() {
            return new PaymentSpeedRequiredBody(
                fastPaymentLimit,
                paymentSpeed);
        }
    }
}

