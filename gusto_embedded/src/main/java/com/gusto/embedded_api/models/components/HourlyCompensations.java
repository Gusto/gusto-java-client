/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class HourlyCompensations {

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The number of hours to be compensated for this pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hours")
    private Optional<String> hours;

    /**
     * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * The UUID of the job for the compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_uuid")
    private Optional<String> jobUuid;

    /**
     * The amount multiplied by the base rate to calculate total compensation per hour worked.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensation_multiplier")
    private Optional<Double> compensationMultiplier;

    @JsonCreator
    public HourlyCompensations(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("hours") Optional<String> hours,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("job_uuid") Optional<String> jobUuid,
            @JsonProperty("compensation_multiplier") Optional<Double> compensationMultiplier) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(hours, "hours");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(jobUuid, "jobUuid");
        Utils.checkNotNull(compensationMultiplier, "compensationMultiplier");
        this.name = name;
        this.hours = hours;
        this.amount = amount;
        this.jobUuid = jobUuid;
        this.compensationMultiplier = compensationMultiplier;
    }
    
    public HourlyCompensations() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The number of hours to be compensated for this pay period.
     */
    @JsonIgnore
    public Optional<String> hours() {
        return hours;
    }

    /**
     * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * The UUID of the job for the compensation.
     */
    @JsonIgnore
    public Optional<String> jobUuid() {
        return jobUuid;
    }

    /**
     * The amount multiplied by the base rate to calculate total compensation per hour worked.
     */
    @JsonIgnore
    public Optional<Double> compensationMultiplier() {
        return compensationMultiplier;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    public HourlyCompensations withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    public HourlyCompensations withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The number of hours to be compensated for this pay period.
     */
    public HourlyCompensations withHours(String hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = Optional.ofNullable(hours);
        return this;
    }

    /**
     * The number of hours to be compensated for this pay period.
     */
    public HourlyCompensations withHours(Optional<String> hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = hours;
        return this;
    }

    /**
     * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
     */
    public HourlyCompensations withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
     */
    public HourlyCompensations withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The UUID of the job for the compensation.
     */
    public HourlyCompensations withJobUuid(String jobUuid) {
        Utils.checkNotNull(jobUuid, "jobUuid");
        this.jobUuid = Optional.ofNullable(jobUuid);
        return this;
    }

    /**
     * The UUID of the job for the compensation.
     */
    public HourlyCompensations withJobUuid(Optional<String> jobUuid) {
        Utils.checkNotNull(jobUuid, "jobUuid");
        this.jobUuid = jobUuid;
        return this;
    }

    /**
     * The amount multiplied by the base rate to calculate total compensation per hour worked.
     */
    public HourlyCompensations withCompensationMultiplier(double compensationMultiplier) {
        Utils.checkNotNull(compensationMultiplier, "compensationMultiplier");
        this.compensationMultiplier = Optional.ofNullable(compensationMultiplier);
        return this;
    }

    /**
     * The amount multiplied by the base rate to calculate total compensation per hour worked.
     */
    public HourlyCompensations withCompensationMultiplier(Optional<Double> compensationMultiplier) {
        Utils.checkNotNull(compensationMultiplier, "compensationMultiplier");
        this.compensationMultiplier = compensationMultiplier;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        HourlyCompensations other = (HourlyCompensations) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.hours, other.hours) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.jobUuid, other.jobUuid) &&
            Objects.deepEquals(this.compensationMultiplier, other.compensationMultiplier);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            hours,
            amount,
            jobUuid,
            compensationMultiplier);
    }
    
    @Override
    public String toString() {
        return Utils.toString(HourlyCompensations.class,
                "name", name,
                "hours", hours,
                "amount", amount,
                "jobUuid", jobUuid,
                "compensationMultiplier", compensationMultiplier);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> hours = Optional.empty();
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> jobUuid = Optional.empty();
 
        private Optional<Double> compensationMultiplier = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The number of hours to be compensated for this pay period.
         */
        public Builder hours(String hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        /**
         * The number of hours to be compensated for this pay period.
         */
        public Builder hours(Optional<String> hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = hours;
            return this;
        }

        /**
         * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of the compensation. This field is only available after the payroll is calculated and cannot be used for updating hourly compensations.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The UUID of the job for the compensation.
         */
        public Builder jobUuid(String jobUuid) {
            Utils.checkNotNull(jobUuid, "jobUuid");
            this.jobUuid = Optional.ofNullable(jobUuid);
            return this;
        }

        /**
         * The UUID of the job for the compensation.
         */
        public Builder jobUuid(Optional<String> jobUuid) {
            Utils.checkNotNull(jobUuid, "jobUuid");
            this.jobUuid = jobUuid;
            return this;
        }

        /**
         * The amount multiplied by the base rate to calculate total compensation per hour worked.
         */
        public Builder compensationMultiplier(double compensationMultiplier) {
            Utils.checkNotNull(compensationMultiplier, "compensationMultiplier");
            this.compensationMultiplier = Optional.ofNullable(compensationMultiplier);
            return this;
        }

        /**
         * The amount multiplied by the base rate to calculate total compensation per hour worked.
         */
        public Builder compensationMultiplier(Optional<Double> compensationMultiplier) {
            Utils.checkNotNull(compensationMultiplier, "compensationMultiplier");
            this.compensationMultiplier = compensationMultiplier;
            return this;
        }
        
        public HourlyCompensations build() {
            return new HourlyCompensations(
                name,
                hours,
                amount,
                jobUuid,
                compensationMultiplier);
        }
    }
}

