/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
/**
 * WireInRequest
 * 
 * <p>Representation of a wire in request
 */

public class WireInRequest {

    /**
     * Unique identifier of a wire in request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * Status of the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends WireInRequestStatus> status;

    /**
     * Name of bank receiving the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origination_bank")
    private Optional<String> originationBank;

    /**
     * Address of bank receiving the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("origination_bank_address")
    private Optional<String> originationBankAddress;

    /**
     * Name of the recipient of the wire In
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_name")
    private Optional<String> recipientName;

    /**
     * Address of the recipient of the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_address")
    private Optional<String> recipientAddress;

    /**
     * Recipient bank account number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_account_number")
    private Optional<String> recipientAccountNumber;

    /**
     * Recipient bank routing number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recipient_routing_number")
    private Optional<String> recipientRoutingNumber;

    /**
     * Notes for the wire in request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_notes")
    private Optional<String> additionalNotes;

    /**
     * Name of the bank initiating the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bank_name")
    private Optional<String> bankName;

    /**
     * Date the wire in was sent
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_sent")
    private Optional<String> dateSent;

    /**
     * Include in note with bank to track payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("unique_tracking_code")
    private Optional<String> uniqueTrackingCode;

    /**
     * Type of payment for the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_type")
    private Optional<String> paymentType;

    /**
     * Unique identifier of the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_uuid")
    private Optional<? extends PaymentUuid> paymentUuid;

    /**
     * Amount sent through wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_sent")
    private Optional<String> amountSent;

    /**
     * Requested amount for the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requested_amount")
    private Optional<String> requestedAmount;

    /**
     * Deadline to submit the wire in
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wire_in_deadline")
    private Optional<String> wireInDeadline;

    @JsonCreator
    public WireInRequest(
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("status") Optional<? extends WireInRequestStatus> status,
            @JsonProperty("origination_bank") Optional<String> originationBank,
            @JsonProperty("origination_bank_address") Optional<String> originationBankAddress,
            @JsonProperty("recipient_name") Optional<String> recipientName,
            @JsonProperty("recipient_address") Optional<String> recipientAddress,
            @JsonProperty("recipient_account_number") Optional<String> recipientAccountNumber,
            @JsonProperty("recipient_routing_number") Optional<String> recipientRoutingNumber,
            @JsonProperty("additional_notes") Optional<String> additionalNotes,
            @JsonProperty("bank_name") Optional<String> bankName,
            @JsonProperty("date_sent") Optional<String> dateSent,
            @JsonProperty("unique_tracking_code") Optional<String> uniqueTrackingCode,
            @JsonProperty("payment_type") Optional<String> paymentType,
            @JsonProperty("payment_uuid") Optional<? extends PaymentUuid> paymentUuid,
            @JsonProperty("amount_sent") Optional<String> amountSent,
            @JsonProperty("requested_amount") Optional<String> requestedAmount,
            @JsonProperty("wire_in_deadline") Optional<String> wireInDeadline) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(originationBank, "originationBank");
        Utils.checkNotNull(originationBankAddress, "originationBankAddress");
        Utils.checkNotNull(recipientName, "recipientName");
        Utils.checkNotNull(recipientAddress, "recipientAddress");
        Utils.checkNotNull(recipientAccountNumber, "recipientAccountNumber");
        Utils.checkNotNull(recipientRoutingNumber, "recipientRoutingNumber");
        Utils.checkNotNull(additionalNotes, "additionalNotes");
        Utils.checkNotNull(bankName, "bankName");
        Utils.checkNotNull(dateSent, "dateSent");
        Utils.checkNotNull(uniqueTrackingCode, "uniqueTrackingCode");
        Utils.checkNotNull(paymentType, "paymentType");
        Utils.checkNotNull(paymentUuid, "paymentUuid");
        Utils.checkNotNull(amountSent, "amountSent");
        Utils.checkNotNull(requestedAmount, "requestedAmount");
        Utils.checkNotNull(wireInDeadline, "wireInDeadline");
        this.uuid = uuid;
        this.status = status;
        this.originationBank = originationBank;
        this.originationBankAddress = originationBankAddress;
        this.recipientName = recipientName;
        this.recipientAddress = recipientAddress;
        this.recipientAccountNumber = recipientAccountNumber;
        this.recipientRoutingNumber = recipientRoutingNumber;
        this.additionalNotes = additionalNotes;
        this.bankName = bankName;
        this.dateSent = dateSent;
        this.uniqueTrackingCode = uniqueTrackingCode;
        this.paymentType = paymentType;
        this.paymentUuid = paymentUuid;
        this.amountSent = amountSent;
        this.requestedAmount = requestedAmount;
        this.wireInDeadline = wireInDeadline;
    }
    
    public WireInRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of a wire in request
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * Status of the wire in
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WireInRequestStatus> status() {
        return (Optional<WireInRequestStatus>) status;
    }

    /**
     * Name of bank receiving the wire in
     */
    @JsonIgnore
    public Optional<String> originationBank() {
        return originationBank;
    }

    /**
     * Address of bank receiving the wire in
     */
    @JsonIgnore
    public Optional<String> originationBankAddress() {
        return originationBankAddress;
    }

    /**
     * Name of the recipient of the wire In
     */
    @JsonIgnore
    public Optional<String> recipientName() {
        return recipientName;
    }

    /**
     * Address of the recipient of the wire in
     */
    @JsonIgnore
    public Optional<String> recipientAddress() {
        return recipientAddress;
    }

    /**
     * Recipient bank account number
     */
    @JsonIgnore
    public Optional<String> recipientAccountNumber() {
        return recipientAccountNumber;
    }

    /**
     * Recipient bank routing number
     */
    @JsonIgnore
    public Optional<String> recipientRoutingNumber() {
        return recipientRoutingNumber;
    }

    /**
     * Notes for the wire in request
     */
    @JsonIgnore
    public Optional<String> additionalNotes() {
        return additionalNotes;
    }

    /**
     * Name of the bank initiating the wire in
     */
    @JsonIgnore
    public Optional<String> bankName() {
        return bankName;
    }

    /**
     * Date the wire in was sent
     */
    @JsonIgnore
    public Optional<String> dateSent() {
        return dateSent;
    }

    /**
     * Include in note with bank to track payment
     */
    @JsonIgnore
    public Optional<String> uniqueTrackingCode() {
        return uniqueTrackingCode;
    }

    /**
     * Type of payment for the wire in
     */
    @JsonIgnore
    public Optional<String> paymentType() {
        return paymentType;
    }

    /**
     * Unique identifier of the payment
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentUuid> paymentUuid() {
        return (Optional<PaymentUuid>) paymentUuid;
    }

    /**
     * Amount sent through wire in
     */
    @JsonIgnore
    public Optional<String> amountSent() {
        return amountSent;
    }

    /**
     * Requested amount for the payment
     */
    @JsonIgnore
    public Optional<String> requestedAmount() {
        return requestedAmount;
    }

    /**
     * Deadline to submit the wire in
     */
    @JsonIgnore
    public Optional<String> wireInDeadline() {
        return wireInDeadline;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of a wire in request
     */
    public WireInRequest withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * Unique identifier of a wire in request
     */
    public WireInRequest withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Status of the wire in
     */
    public WireInRequest withStatus(WireInRequestStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the wire in
     */
    public WireInRequest withStatus(Optional<? extends WireInRequestStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Name of bank receiving the wire in
     */
    public WireInRequest withOriginationBank(String originationBank) {
        Utils.checkNotNull(originationBank, "originationBank");
        this.originationBank = Optional.ofNullable(originationBank);
        return this;
    }

    /**
     * Name of bank receiving the wire in
     */
    public WireInRequest withOriginationBank(Optional<String> originationBank) {
        Utils.checkNotNull(originationBank, "originationBank");
        this.originationBank = originationBank;
        return this;
    }

    /**
     * Address of bank receiving the wire in
     */
    public WireInRequest withOriginationBankAddress(String originationBankAddress) {
        Utils.checkNotNull(originationBankAddress, "originationBankAddress");
        this.originationBankAddress = Optional.ofNullable(originationBankAddress);
        return this;
    }

    /**
     * Address of bank receiving the wire in
     */
    public WireInRequest withOriginationBankAddress(Optional<String> originationBankAddress) {
        Utils.checkNotNull(originationBankAddress, "originationBankAddress");
        this.originationBankAddress = originationBankAddress;
        return this;
    }

    /**
     * Name of the recipient of the wire In
     */
    public WireInRequest withRecipientName(String recipientName) {
        Utils.checkNotNull(recipientName, "recipientName");
        this.recipientName = Optional.ofNullable(recipientName);
        return this;
    }

    /**
     * Name of the recipient of the wire In
     */
    public WireInRequest withRecipientName(Optional<String> recipientName) {
        Utils.checkNotNull(recipientName, "recipientName");
        this.recipientName = recipientName;
        return this;
    }

    /**
     * Address of the recipient of the wire in
     */
    public WireInRequest withRecipientAddress(String recipientAddress) {
        Utils.checkNotNull(recipientAddress, "recipientAddress");
        this.recipientAddress = Optional.ofNullable(recipientAddress);
        return this;
    }

    /**
     * Address of the recipient of the wire in
     */
    public WireInRequest withRecipientAddress(Optional<String> recipientAddress) {
        Utils.checkNotNull(recipientAddress, "recipientAddress");
        this.recipientAddress = recipientAddress;
        return this;
    }

    /**
     * Recipient bank account number
     */
    public WireInRequest withRecipientAccountNumber(String recipientAccountNumber) {
        Utils.checkNotNull(recipientAccountNumber, "recipientAccountNumber");
        this.recipientAccountNumber = Optional.ofNullable(recipientAccountNumber);
        return this;
    }

    /**
     * Recipient bank account number
     */
    public WireInRequest withRecipientAccountNumber(Optional<String> recipientAccountNumber) {
        Utils.checkNotNull(recipientAccountNumber, "recipientAccountNumber");
        this.recipientAccountNumber = recipientAccountNumber;
        return this;
    }

    /**
     * Recipient bank routing number
     */
    public WireInRequest withRecipientRoutingNumber(String recipientRoutingNumber) {
        Utils.checkNotNull(recipientRoutingNumber, "recipientRoutingNumber");
        this.recipientRoutingNumber = Optional.ofNullable(recipientRoutingNumber);
        return this;
    }

    /**
     * Recipient bank routing number
     */
    public WireInRequest withRecipientRoutingNumber(Optional<String> recipientRoutingNumber) {
        Utils.checkNotNull(recipientRoutingNumber, "recipientRoutingNumber");
        this.recipientRoutingNumber = recipientRoutingNumber;
        return this;
    }

    /**
     * Notes for the wire in request
     */
    public WireInRequest withAdditionalNotes(String additionalNotes) {
        Utils.checkNotNull(additionalNotes, "additionalNotes");
        this.additionalNotes = Optional.ofNullable(additionalNotes);
        return this;
    }

    /**
     * Notes for the wire in request
     */
    public WireInRequest withAdditionalNotes(Optional<String> additionalNotes) {
        Utils.checkNotNull(additionalNotes, "additionalNotes");
        this.additionalNotes = additionalNotes;
        return this;
    }

    /**
     * Name of the bank initiating the wire in
     */
    public WireInRequest withBankName(String bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = Optional.ofNullable(bankName);
        return this;
    }

    /**
     * Name of the bank initiating the wire in
     */
    public WireInRequest withBankName(Optional<String> bankName) {
        Utils.checkNotNull(bankName, "bankName");
        this.bankName = bankName;
        return this;
    }

    /**
     * Date the wire in was sent
     */
    public WireInRequest withDateSent(String dateSent) {
        Utils.checkNotNull(dateSent, "dateSent");
        this.dateSent = Optional.ofNullable(dateSent);
        return this;
    }

    /**
     * Date the wire in was sent
     */
    public WireInRequest withDateSent(Optional<String> dateSent) {
        Utils.checkNotNull(dateSent, "dateSent");
        this.dateSent = dateSent;
        return this;
    }

    /**
     * Include in note with bank to track payment
     */
    public WireInRequest withUniqueTrackingCode(String uniqueTrackingCode) {
        Utils.checkNotNull(uniqueTrackingCode, "uniqueTrackingCode");
        this.uniqueTrackingCode = Optional.ofNullable(uniqueTrackingCode);
        return this;
    }

    /**
     * Include in note with bank to track payment
     */
    public WireInRequest withUniqueTrackingCode(Optional<String> uniqueTrackingCode) {
        Utils.checkNotNull(uniqueTrackingCode, "uniqueTrackingCode");
        this.uniqueTrackingCode = uniqueTrackingCode;
        return this;
    }

    /**
     * Type of payment for the wire in
     */
    public WireInRequest withPaymentType(String paymentType) {
        Utils.checkNotNull(paymentType, "paymentType");
        this.paymentType = Optional.ofNullable(paymentType);
        return this;
    }

    /**
     * Type of payment for the wire in
     */
    public WireInRequest withPaymentType(Optional<String> paymentType) {
        Utils.checkNotNull(paymentType, "paymentType");
        this.paymentType = paymentType;
        return this;
    }

    /**
     * Unique identifier of the payment
     */
    public WireInRequest withPaymentUuid(PaymentUuid paymentUuid) {
        Utils.checkNotNull(paymentUuid, "paymentUuid");
        this.paymentUuid = Optional.ofNullable(paymentUuid);
        return this;
    }

    /**
     * Unique identifier of the payment
     */
    public WireInRequest withPaymentUuid(Optional<? extends PaymentUuid> paymentUuid) {
        Utils.checkNotNull(paymentUuid, "paymentUuid");
        this.paymentUuid = paymentUuid;
        return this;
    }

    /**
     * Amount sent through wire in
     */
    public WireInRequest withAmountSent(String amountSent) {
        Utils.checkNotNull(amountSent, "amountSent");
        this.amountSent = Optional.ofNullable(amountSent);
        return this;
    }

    /**
     * Amount sent through wire in
     */
    public WireInRequest withAmountSent(Optional<String> amountSent) {
        Utils.checkNotNull(amountSent, "amountSent");
        this.amountSent = amountSent;
        return this;
    }

    /**
     * Requested amount for the payment
     */
    public WireInRequest withRequestedAmount(String requestedAmount) {
        Utils.checkNotNull(requestedAmount, "requestedAmount");
        this.requestedAmount = Optional.ofNullable(requestedAmount);
        return this;
    }

    /**
     * Requested amount for the payment
     */
    public WireInRequest withRequestedAmount(Optional<String> requestedAmount) {
        Utils.checkNotNull(requestedAmount, "requestedAmount");
        this.requestedAmount = requestedAmount;
        return this;
    }

    /**
     * Deadline to submit the wire in
     */
    public WireInRequest withWireInDeadline(String wireInDeadline) {
        Utils.checkNotNull(wireInDeadline, "wireInDeadline");
        this.wireInDeadline = Optional.ofNullable(wireInDeadline);
        return this;
    }

    /**
     * Deadline to submit the wire in
     */
    public WireInRequest withWireInDeadline(Optional<String> wireInDeadline) {
        Utils.checkNotNull(wireInDeadline, "wireInDeadline");
        this.wireInDeadline = wireInDeadline;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WireInRequest other = (WireInRequest) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.originationBank, other.originationBank) &&
            Objects.deepEquals(this.originationBankAddress, other.originationBankAddress) &&
            Objects.deepEquals(this.recipientName, other.recipientName) &&
            Objects.deepEquals(this.recipientAddress, other.recipientAddress) &&
            Objects.deepEquals(this.recipientAccountNumber, other.recipientAccountNumber) &&
            Objects.deepEquals(this.recipientRoutingNumber, other.recipientRoutingNumber) &&
            Objects.deepEquals(this.additionalNotes, other.additionalNotes) &&
            Objects.deepEquals(this.bankName, other.bankName) &&
            Objects.deepEquals(this.dateSent, other.dateSent) &&
            Objects.deepEquals(this.uniqueTrackingCode, other.uniqueTrackingCode) &&
            Objects.deepEquals(this.paymentType, other.paymentType) &&
            Objects.deepEquals(this.paymentUuid, other.paymentUuid) &&
            Objects.deepEquals(this.amountSent, other.amountSent) &&
            Objects.deepEquals(this.requestedAmount, other.requestedAmount) &&
            Objects.deepEquals(this.wireInDeadline, other.wireInDeadline);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            status,
            originationBank,
            originationBankAddress,
            recipientName,
            recipientAddress,
            recipientAccountNumber,
            recipientRoutingNumber,
            additionalNotes,
            bankName,
            dateSent,
            uniqueTrackingCode,
            paymentType,
            paymentUuid,
            amountSent,
            requestedAmount,
            wireInDeadline);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WireInRequest.class,
                "uuid", uuid,
                "status", status,
                "originationBank", originationBank,
                "originationBankAddress", originationBankAddress,
                "recipientName", recipientName,
                "recipientAddress", recipientAddress,
                "recipientAccountNumber", recipientAccountNumber,
                "recipientRoutingNumber", recipientRoutingNumber,
                "additionalNotes", additionalNotes,
                "bankName", bankName,
                "dateSent", dateSent,
                "uniqueTrackingCode", uniqueTrackingCode,
                "paymentType", paymentType,
                "paymentUuid", paymentUuid,
                "amountSent", amountSent,
                "requestedAmount", requestedAmount,
                "wireInDeadline", wireInDeadline);
    }
    
    public final static class Builder {
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<? extends WireInRequestStatus> status = Optional.empty();
 
        private Optional<String> originationBank = Optional.empty();
 
        private Optional<String> originationBankAddress = Optional.empty();
 
        private Optional<String> recipientName = Optional.empty();
 
        private Optional<String> recipientAddress = Optional.empty();
 
        private Optional<String> recipientAccountNumber = Optional.empty();
 
        private Optional<String> recipientRoutingNumber = Optional.empty();
 
        private Optional<String> additionalNotes = Optional.empty();
 
        private Optional<String> bankName = Optional.empty();
 
        private Optional<String> dateSent = Optional.empty();
 
        private Optional<String> uniqueTrackingCode = Optional.empty();
 
        private Optional<String> paymentType = Optional.empty();
 
        private Optional<? extends PaymentUuid> paymentUuid = Optional.empty();
 
        private Optional<String> amountSent = Optional.empty();
 
        private Optional<String> requestedAmount = Optional.empty();
 
        private Optional<String> wireInDeadline = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of a wire in request
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * Unique identifier of a wire in request
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Status of the wire in
         */
        public Builder status(WireInRequestStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the wire in
         */
        public Builder status(Optional<? extends WireInRequestStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Name of bank receiving the wire in
         */
        public Builder originationBank(String originationBank) {
            Utils.checkNotNull(originationBank, "originationBank");
            this.originationBank = Optional.ofNullable(originationBank);
            return this;
        }

        /**
         * Name of bank receiving the wire in
         */
        public Builder originationBank(Optional<String> originationBank) {
            Utils.checkNotNull(originationBank, "originationBank");
            this.originationBank = originationBank;
            return this;
        }

        /**
         * Address of bank receiving the wire in
         */
        public Builder originationBankAddress(String originationBankAddress) {
            Utils.checkNotNull(originationBankAddress, "originationBankAddress");
            this.originationBankAddress = Optional.ofNullable(originationBankAddress);
            return this;
        }

        /**
         * Address of bank receiving the wire in
         */
        public Builder originationBankAddress(Optional<String> originationBankAddress) {
            Utils.checkNotNull(originationBankAddress, "originationBankAddress");
            this.originationBankAddress = originationBankAddress;
            return this;
        }

        /**
         * Name of the recipient of the wire In
         */
        public Builder recipientName(String recipientName) {
            Utils.checkNotNull(recipientName, "recipientName");
            this.recipientName = Optional.ofNullable(recipientName);
            return this;
        }

        /**
         * Name of the recipient of the wire In
         */
        public Builder recipientName(Optional<String> recipientName) {
            Utils.checkNotNull(recipientName, "recipientName");
            this.recipientName = recipientName;
            return this;
        }

        /**
         * Address of the recipient of the wire in
         */
        public Builder recipientAddress(String recipientAddress) {
            Utils.checkNotNull(recipientAddress, "recipientAddress");
            this.recipientAddress = Optional.ofNullable(recipientAddress);
            return this;
        }

        /**
         * Address of the recipient of the wire in
         */
        public Builder recipientAddress(Optional<String> recipientAddress) {
            Utils.checkNotNull(recipientAddress, "recipientAddress");
            this.recipientAddress = recipientAddress;
            return this;
        }

        /**
         * Recipient bank account number
         */
        public Builder recipientAccountNumber(String recipientAccountNumber) {
            Utils.checkNotNull(recipientAccountNumber, "recipientAccountNumber");
            this.recipientAccountNumber = Optional.ofNullable(recipientAccountNumber);
            return this;
        }

        /**
         * Recipient bank account number
         */
        public Builder recipientAccountNumber(Optional<String> recipientAccountNumber) {
            Utils.checkNotNull(recipientAccountNumber, "recipientAccountNumber");
            this.recipientAccountNumber = recipientAccountNumber;
            return this;
        }

        /**
         * Recipient bank routing number
         */
        public Builder recipientRoutingNumber(String recipientRoutingNumber) {
            Utils.checkNotNull(recipientRoutingNumber, "recipientRoutingNumber");
            this.recipientRoutingNumber = Optional.ofNullable(recipientRoutingNumber);
            return this;
        }

        /**
         * Recipient bank routing number
         */
        public Builder recipientRoutingNumber(Optional<String> recipientRoutingNumber) {
            Utils.checkNotNull(recipientRoutingNumber, "recipientRoutingNumber");
            this.recipientRoutingNumber = recipientRoutingNumber;
            return this;
        }

        /**
         * Notes for the wire in request
         */
        public Builder additionalNotes(String additionalNotes) {
            Utils.checkNotNull(additionalNotes, "additionalNotes");
            this.additionalNotes = Optional.ofNullable(additionalNotes);
            return this;
        }

        /**
         * Notes for the wire in request
         */
        public Builder additionalNotes(Optional<String> additionalNotes) {
            Utils.checkNotNull(additionalNotes, "additionalNotes");
            this.additionalNotes = additionalNotes;
            return this;
        }

        /**
         * Name of the bank initiating the wire in
         */
        public Builder bankName(String bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = Optional.ofNullable(bankName);
            return this;
        }

        /**
         * Name of the bank initiating the wire in
         */
        public Builder bankName(Optional<String> bankName) {
            Utils.checkNotNull(bankName, "bankName");
            this.bankName = bankName;
            return this;
        }

        /**
         * Date the wire in was sent
         */
        public Builder dateSent(String dateSent) {
            Utils.checkNotNull(dateSent, "dateSent");
            this.dateSent = Optional.ofNullable(dateSent);
            return this;
        }

        /**
         * Date the wire in was sent
         */
        public Builder dateSent(Optional<String> dateSent) {
            Utils.checkNotNull(dateSent, "dateSent");
            this.dateSent = dateSent;
            return this;
        }

        /**
         * Include in note with bank to track payment
         */
        public Builder uniqueTrackingCode(String uniqueTrackingCode) {
            Utils.checkNotNull(uniqueTrackingCode, "uniqueTrackingCode");
            this.uniqueTrackingCode = Optional.ofNullable(uniqueTrackingCode);
            return this;
        }

        /**
         * Include in note with bank to track payment
         */
        public Builder uniqueTrackingCode(Optional<String> uniqueTrackingCode) {
            Utils.checkNotNull(uniqueTrackingCode, "uniqueTrackingCode");
            this.uniqueTrackingCode = uniqueTrackingCode;
            return this;
        }

        /**
         * Type of payment for the wire in
         */
        public Builder paymentType(String paymentType) {
            Utils.checkNotNull(paymentType, "paymentType");
            this.paymentType = Optional.ofNullable(paymentType);
            return this;
        }

        /**
         * Type of payment for the wire in
         */
        public Builder paymentType(Optional<String> paymentType) {
            Utils.checkNotNull(paymentType, "paymentType");
            this.paymentType = paymentType;
            return this;
        }

        /**
         * Unique identifier of the payment
         */
        public Builder paymentUuid(PaymentUuid paymentUuid) {
            Utils.checkNotNull(paymentUuid, "paymentUuid");
            this.paymentUuid = Optional.ofNullable(paymentUuid);
            return this;
        }

        /**
         * Unique identifier of the payment
         */
        public Builder paymentUuid(Optional<? extends PaymentUuid> paymentUuid) {
            Utils.checkNotNull(paymentUuid, "paymentUuid");
            this.paymentUuid = paymentUuid;
            return this;
        }

        /**
         * Amount sent through wire in
         */
        public Builder amountSent(String amountSent) {
            Utils.checkNotNull(amountSent, "amountSent");
            this.amountSent = Optional.ofNullable(amountSent);
            return this;
        }

        /**
         * Amount sent through wire in
         */
        public Builder amountSent(Optional<String> amountSent) {
            Utils.checkNotNull(amountSent, "amountSent");
            this.amountSent = amountSent;
            return this;
        }

        /**
         * Requested amount for the payment
         */
        public Builder requestedAmount(String requestedAmount) {
            Utils.checkNotNull(requestedAmount, "requestedAmount");
            this.requestedAmount = Optional.ofNullable(requestedAmount);
            return this;
        }

        /**
         * Requested amount for the payment
         */
        public Builder requestedAmount(Optional<String> requestedAmount) {
            Utils.checkNotNull(requestedAmount, "requestedAmount");
            this.requestedAmount = requestedAmount;
            return this;
        }

        /**
         * Deadline to submit the wire in
         */
        public Builder wireInDeadline(String wireInDeadline) {
            Utils.checkNotNull(wireInDeadline, "wireInDeadline");
            this.wireInDeadline = Optional.ofNullable(wireInDeadline);
            return this;
        }

        /**
         * Deadline to submit the wire in
         */
        public Builder wireInDeadline(Optional<String> wireInDeadline) {
            Utils.checkNotNull(wireInDeadline, "wireInDeadline");
            this.wireInDeadline = wireInDeadline;
            return this;
        }
        
        public WireInRequest build() {
            return new WireInRequest(
                uuid,
                status,
                originationBank,
                originationBankAddress,
                recipientName,
                recipientAddress,
                recipientAccountNumber,
                recipientRoutingNumber,
                additionalNotes,
                bankName,
                dateSent,
                uniqueTrackingCode,
                paymentType,
                paymentUuid,
                amountSent,
                requestedAmount,
                wireInDeadline);
        }
    }
}

