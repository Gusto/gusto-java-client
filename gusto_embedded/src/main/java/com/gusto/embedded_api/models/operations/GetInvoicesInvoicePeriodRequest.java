/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.utils.SpeakeasyMetadata;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetInvoicesInvoicePeriodRequest {

    /**
     * The month we are calculating the invoice for. Must be in YYYY-MM format
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=invoice_period")
    private String invoicePeriod;

    /**
     * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=page")
    private Optional<Long> page;

    /**
     * Number of objects per page. For majority of endpoints will default to 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=per")
    private Optional<Long> per;

    /**
     * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=company_uuids")
    private Optional<String> companyUuids;

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Gusto-API-Version")
    private Optional<? extends VersionHeader> xGustoAPIVersion;

    @JsonCreator
    public GetInvoicesInvoicePeriodRequest(
            String invoicePeriod,
            Optional<Long> page,
            Optional<Long> per,
            Optional<String> companyUuids,
            Optional<? extends VersionHeader> xGustoAPIVersion) {
        Utils.checkNotNull(invoicePeriod, "invoicePeriod");
        Utils.checkNotNull(page, "page");
        Utils.checkNotNull(per, "per");
        Utils.checkNotNull(companyUuids, "companyUuids");
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.invoicePeriod = invoicePeriod;
        this.page = page;
        this.per = per;
        this.companyUuids = companyUuids;
        this.xGustoAPIVersion = xGustoAPIVersion;
    }
    
    public GetInvoicesInvoicePeriodRequest(
            String invoicePeriod) {
        this(invoicePeriod, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The month we are calculating the invoice for. Must be in YYYY-MM format
     */
    @JsonIgnore
    public String invoicePeriod() {
        return invoicePeriod;
    }

    /**
     * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     */
    @JsonIgnore
    public Optional<Long> page() {
        return page;
    }

    /**
     * Number of objects per page. For majority of endpoints will default to 25
     */
    @JsonIgnore
    public Optional<Long> per() {
        return per;
    }

    /**
     * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
     */
    @JsonIgnore
    public Optional<String> companyUuids() {
        return companyUuids;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VersionHeader> xGustoAPIVersion() {
        return (Optional<VersionHeader>) xGustoAPIVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The month we are calculating the invoice for. Must be in YYYY-MM format
     */
    public GetInvoicesInvoicePeriodRequest withInvoicePeriod(String invoicePeriod) {
        Utils.checkNotNull(invoicePeriod, "invoicePeriod");
        this.invoicePeriod = invoicePeriod;
        return this;
    }

    /**
     * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     */
    public GetInvoicesInvoicePeriodRequest withPage(long page) {
        Utils.checkNotNull(page, "page");
        this.page = Optional.ofNullable(page);
        return this;
    }

    /**
     * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     */
    public GetInvoicesInvoicePeriodRequest withPage(Optional<Long> page) {
        Utils.checkNotNull(page, "page");
        this.page = page;
        return this;
    }

    /**
     * Number of objects per page. For majority of endpoints will default to 25
     */
    public GetInvoicesInvoicePeriodRequest withPer(long per) {
        Utils.checkNotNull(per, "per");
        this.per = Optional.ofNullable(per);
        return this;
    }

    /**
     * Number of objects per page. For majority of endpoints will default to 25
     */
    public GetInvoicesInvoicePeriodRequest withPer(Optional<Long> per) {
        Utils.checkNotNull(per, "per");
        this.per = per;
        return this;
    }

    /**
     * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
     */
    public GetInvoicesInvoicePeriodRequest withCompanyUuids(String companyUuids) {
        Utils.checkNotNull(companyUuids, "companyUuids");
        this.companyUuids = Optional.ofNullable(companyUuids);
        return this;
    }

    /**
     * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
     */
    public GetInvoicesInvoicePeriodRequest withCompanyUuids(Optional<String> companyUuids) {
        Utils.checkNotNull(companyUuids, "companyUuids");
        this.companyUuids = companyUuids;
        return this;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    public GetInvoicesInvoicePeriodRequest withXGustoAPIVersion(VersionHeader xGustoAPIVersion) {
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.xGustoAPIVersion = Optional.ofNullable(xGustoAPIVersion);
        return this;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    public GetInvoicesInvoicePeriodRequest withXGustoAPIVersion(Optional<? extends VersionHeader> xGustoAPIVersion) {
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.xGustoAPIVersion = xGustoAPIVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetInvoicesInvoicePeriodRequest other = (GetInvoicesInvoicePeriodRequest) o;
        return 
            Objects.deepEquals(this.invoicePeriod, other.invoicePeriod) &&
            Objects.deepEquals(this.page, other.page) &&
            Objects.deepEquals(this.per, other.per) &&
            Objects.deepEquals(this.companyUuids, other.companyUuids) &&
            Objects.deepEquals(this.xGustoAPIVersion, other.xGustoAPIVersion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            invoicePeriod,
            page,
            per,
            companyUuids,
            xGustoAPIVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetInvoicesInvoicePeriodRequest.class,
                "invoicePeriod", invoicePeriod,
                "page", page,
                "per", per,
                "companyUuids", companyUuids,
                "xGustoAPIVersion", xGustoAPIVersion);
    }
    
    public final static class Builder {
 
        private String invoicePeriod;
 
        private Optional<Long> page = Optional.empty();
 
        private Optional<Long> per = Optional.empty();
 
        private Optional<String> companyUuids = Optional.empty();
 
        private Optional<? extends VersionHeader> xGustoAPIVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The month we are calculating the invoice for. Must be in YYYY-MM format
         */
        public Builder invoicePeriod(String invoicePeriod) {
            Utils.checkNotNull(invoicePeriod, "invoicePeriod");
            this.invoicePeriod = invoicePeriod;
            return this;
        }

        /**
         * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         */
        public Builder page(long page) {
            Utils.checkNotNull(page, "page");
            this.page = Optional.ofNullable(page);
            return this;
        }

        /**
         * The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
         */
        public Builder page(Optional<Long> page) {
            Utils.checkNotNull(page, "page");
            this.page = page;
            return this;
        }

        /**
         * Number of objects per page. For majority of endpoints will default to 25
         */
        public Builder per(long per) {
            Utils.checkNotNull(per, "per");
            this.per = Optional.ofNullable(per);
            return this;
        }

        /**
         * Number of objects per page. For majority of endpoints will default to 25
         */
        public Builder per(Optional<Long> per) {
            Utils.checkNotNull(per, "per");
            this.per = per;
            return this;
        }

        /**
         * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
         */
        public Builder companyUuids(String companyUuids) {
            Utils.checkNotNull(companyUuids, "companyUuids");
            this.companyUuids = Optional.ofNullable(companyUuids);
            return this;
        }

        /**
         * Filter companies returned in the active_companies response, will return an error if company not active during provided invoice period. i.e. `?company_uuids=781922d8-e780-4b6b-bf74-ee303166d022,bbbca930-7322-491c-ba7f-98707a52a9c5`
         */
        public Builder companyUuids(Optional<String> companyUuids) {
            Utils.checkNotNull(companyUuids, "companyUuids");
            this.companyUuids = companyUuids;
            return this;
        }

        /**
         * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         */
        public Builder xGustoAPIVersion(VersionHeader xGustoAPIVersion) {
            Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
            this.xGustoAPIVersion = Optional.ofNullable(xGustoAPIVersion);
            return this;
        }

        /**
         * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         */
        public Builder xGustoAPIVersion(Optional<? extends VersionHeader> xGustoAPIVersion) {
            Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        public GetInvoicesInvoicePeriodRequest build() {
            return new GetInvoicesInvoicePeriodRequest(
                invoicePeriod,
                page,
                per,
                companyUuids,
                xGustoAPIVersion);
        }
    }
}

