/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.errors;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.models.components.EntityErrorObject;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * UnprocessableEntityErrorObject
 * 
 * <p>Unprocessable Entity
 * 
 * <p>This may happen when the body of your request contains errors such as `invalid_attribute_value`, or the request fails due to an `invalid_operation`. See the [Errors Categories](https://docs.gusto.com/embedded-payroll/docs/error-categories) guide for more details.
 */
@SuppressWarnings("serial")
public class UnprocessableEntityErrorObject extends RuntimeException {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<EntityErrorObject>> errors;

    @JsonCreator
    public UnprocessableEntityErrorObject(
            @JsonProperty("errors") Optional<? extends List<EntityErrorObject>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
    }
    
    public UnprocessableEntityErrorObject() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    public Optional<List<EntityErrorObject>> errors(){
        return (Optional<List<EntityErrorObject>>) errors;
    }
    
    public final static Builder builder() {
        return new Builder();
    }

    public UnprocessableEntityErrorObject withErrors(List<EntityErrorObject> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }
    
    public UnprocessableEntityErrorObject withErrors(Optional<? extends List<EntityErrorObject>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }

    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        UnprocessableEntityErrorObject other = (UnprocessableEntityErrorObject) o;
        return
            Objects.deepEquals(this.errors, other.errors);
    }

    @Override
    public int hashCode() {
        return java.util.Objects.hash(
            errors);
    }

    @Override
    public String toString() {
        return Utils.toString(UnprocessableEntityErrorObject.class,
                "errors", errors);
    }

    public final static class Builder {

        private Optional<? extends List<EntityErrorObject>> errors = Optional.empty();

        private Builder() {
          // force use of static builder() method
        }

        public Builder errors(List<EntityErrorObject> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }
        
        public Builder errors(Optional<? extends List<EntityErrorObject>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }

        public UnprocessableEntityErrorObject build() {
            return new UnprocessableEntityErrorObject(
                errors);
        }
    }
}
