/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PayrollBenefits {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_uuid")
    private Optional<String> payrollUuid;

    /**
     * Whether it is regular or bonus payroll
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_type")
    private Optional<String> payrollType;

    /**
     * Check date of this payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * Gross pay for this employee on the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_pay")
    private Optional<String> grossPay;

    /**
     * Total imputed pay for this employee on the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imputed_pay")
    private Optional<String> imputedPay;

    /**
     * The employee benefit deduction amount for this employee on the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_deduction")
    private Optional<String> companyBenefitDeduction;

    /**
     * The company contribution amount for this employee on the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_contribution")
    private Optional<String> companyBenefitContribution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_period")
    private Optional<? extends BenefitSummaryPayPeriod> payPeriod;

    @JsonCreator
    public PayrollBenefits(
            @JsonProperty("payroll_uuid") Optional<String> payrollUuid,
            @JsonProperty("payroll_type") Optional<String> payrollType,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("gross_pay") Optional<String> grossPay,
            @JsonProperty("imputed_pay") Optional<String> imputedPay,
            @JsonProperty("company_benefit_deduction") Optional<String> companyBenefitDeduction,
            @JsonProperty("company_benefit_contribution") Optional<String> companyBenefitContribution,
            @JsonProperty("pay_period") Optional<? extends BenefitSummaryPayPeriod> payPeriod) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        Utils.checkNotNull(payrollType, "payrollType");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(grossPay, "grossPay");
        Utils.checkNotNull(imputedPay, "imputedPay");
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payrollUuid = payrollUuid;
        this.payrollType = payrollType;
        this.checkDate = checkDate;
        this.grossPay = grossPay;
        this.imputedPay = imputedPay;
        this.companyBenefitDeduction = companyBenefitDeduction;
        this.companyBenefitContribution = companyBenefitContribution;
        this.payPeriod = payPeriod;
    }
    
    public PayrollBenefits() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> payrollUuid() {
        return payrollUuid;
    }

    /**
     * Whether it is regular or bonus payroll
     */
    @JsonIgnore
    public Optional<String> payrollType() {
        return payrollType;
    }

    /**
     * Check date of this payroll.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * Gross pay for this employee on the payroll.
     */
    @JsonIgnore
    public Optional<String> grossPay() {
        return grossPay;
    }

    /**
     * Total imputed pay for this employee on the payroll.
     */
    @JsonIgnore
    public Optional<String> imputedPay() {
        return imputedPay;
    }

    /**
     * The employee benefit deduction amount for this employee on the payroll.
     */
    @JsonIgnore
    public Optional<String> companyBenefitDeduction() {
        return companyBenefitDeduction;
    }

    /**
     * The company contribution amount for this employee on the payroll.
     */
    @JsonIgnore
    public Optional<String> companyBenefitContribution() {
        return companyBenefitContribution;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BenefitSummaryPayPeriod> payPeriod() {
        return (Optional<BenefitSummaryPayPeriod>) payPeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PayrollBenefits withPayrollUuid(String payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = Optional.ofNullable(payrollUuid);
        return this;
    }

    public PayrollBenefits withPayrollUuid(Optional<String> payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = payrollUuid;
        return this;
    }

    /**
     * Whether it is regular or bonus payroll
     */
    public PayrollBenefits withPayrollType(String payrollType) {
        Utils.checkNotNull(payrollType, "payrollType");
        this.payrollType = Optional.ofNullable(payrollType);
        return this;
    }

    /**
     * Whether it is regular or bonus payroll
     */
    public PayrollBenefits withPayrollType(Optional<String> payrollType) {
        Utils.checkNotNull(payrollType, "payrollType");
        this.payrollType = payrollType;
        return this;
    }

    /**
     * Check date of this payroll.
     */
    public PayrollBenefits withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * Check date of this payroll.
     */
    public PayrollBenefits withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * Gross pay for this employee on the payroll.
     */
    public PayrollBenefits withGrossPay(String grossPay) {
        Utils.checkNotNull(grossPay, "grossPay");
        this.grossPay = Optional.ofNullable(grossPay);
        return this;
    }

    /**
     * Gross pay for this employee on the payroll.
     */
    public PayrollBenefits withGrossPay(Optional<String> grossPay) {
        Utils.checkNotNull(grossPay, "grossPay");
        this.grossPay = grossPay;
        return this;
    }

    /**
     * Total imputed pay for this employee on the payroll.
     */
    public PayrollBenefits withImputedPay(String imputedPay) {
        Utils.checkNotNull(imputedPay, "imputedPay");
        this.imputedPay = Optional.ofNullable(imputedPay);
        return this;
    }

    /**
     * Total imputed pay for this employee on the payroll.
     */
    public PayrollBenefits withImputedPay(Optional<String> imputedPay) {
        Utils.checkNotNull(imputedPay, "imputedPay");
        this.imputedPay = imputedPay;
        return this;
    }

    /**
     * The employee benefit deduction amount for this employee on the payroll.
     */
    public PayrollBenefits withCompanyBenefitDeduction(String companyBenefitDeduction) {
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        this.companyBenefitDeduction = Optional.ofNullable(companyBenefitDeduction);
        return this;
    }

    /**
     * The employee benefit deduction amount for this employee on the payroll.
     */
    public PayrollBenefits withCompanyBenefitDeduction(Optional<String> companyBenefitDeduction) {
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        this.companyBenefitDeduction = companyBenefitDeduction;
        return this;
    }

    /**
     * The company contribution amount for this employee on the payroll.
     */
    public PayrollBenefits withCompanyBenefitContribution(String companyBenefitContribution) {
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        this.companyBenefitContribution = Optional.ofNullable(companyBenefitContribution);
        return this;
    }

    /**
     * The company contribution amount for this employee on the payroll.
     */
    public PayrollBenefits withCompanyBenefitContribution(Optional<String> companyBenefitContribution) {
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        this.companyBenefitContribution = companyBenefitContribution;
        return this;
    }

    public PayrollBenefits withPayPeriod(BenefitSummaryPayPeriod payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = Optional.ofNullable(payPeriod);
        return this;
    }

    public PayrollBenefits withPayPeriod(Optional<? extends BenefitSummaryPayPeriod> payPeriod) {
        Utils.checkNotNull(payPeriod, "payPeriod");
        this.payPeriod = payPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollBenefits other = (PayrollBenefits) o;
        return 
            Objects.deepEquals(this.payrollUuid, other.payrollUuid) &&
            Objects.deepEquals(this.payrollType, other.payrollType) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.grossPay, other.grossPay) &&
            Objects.deepEquals(this.imputedPay, other.imputedPay) &&
            Objects.deepEquals(this.companyBenefitDeduction, other.companyBenefitDeduction) &&
            Objects.deepEquals(this.companyBenefitContribution, other.companyBenefitContribution) &&
            Objects.deepEquals(this.payPeriod, other.payPeriod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            payrollUuid,
            payrollType,
            checkDate,
            grossPay,
            imputedPay,
            companyBenefitDeduction,
            companyBenefitContribution,
            payPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollBenefits.class,
                "payrollUuid", payrollUuid,
                "payrollType", payrollType,
                "checkDate", checkDate,
                "grossPay", grossPay,
                "imputedPay", imputedPay,
                "companyBenefitDeduction", companyBenefitDeduction,
                "companyBenefitContribution", companyBenefitContribution,
                "payPeriod", payPeriod);
    }
    
    public final static class Builder {
 
        private Optional<String> payrollUuid = Optional.empty();
 
        private Optional<String> payrollType = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<String> grossPay = Optional.empty();
 
        private Optional<String> imputedPay = Optional.empty();
 
        private Optional<String> companyBenefitDeduction = Optional.empty();
 
        private Optional<String> companyBenefitContribution = Optional.empty();
 
        private Optional<? extends BenefitSummaryPayPeriod> payPeriod = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder payrollUuid(String payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = Optional.ofNullable(payrollUuid);
            return this;
        }

        public Builder payrollUuid(Optional<String> payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = payrollUuid;
            return this;
        }

        /**
         * Whether it is regular or bonus payroll
         */
        public Builder payrollType(String payrollType) {
            Utils.checkNotNull(payrollType, "payrollType");
            this.payrollType = Optional.ofNullable(payrollType);
            return this;
        }

        /**
         * Whether it is regular or bonus payroll
         */
        public Builder payrollType(Optional<String> payrollType) {
            Utils.checkNotNull(payrollType, "payrollType");
            this.payrollType = payrollType;
            return this;
        }

        /**
         * Check date of this payroll.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * Check date of this payroll.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * Gross pay for this employee on the payroll.
         */
        public Builder grossPay(String grossPay) {
            Utils.checkNotNull(grossPay, "grossPay");
            this.grossPay = Optional.ofNullable(grossPay);
            return this;
        }

        /**
         * Gross pay for this employee on the payroll.
         */
        public Builder grossPay(Optional<String> grossPay) {
            Utils.checkNotNull(grossPay, "grossPay");
            this.grossPay = grossPay;
            return this;
        }

        /**
         * Total imputed pay for this employee on the payroll.
         */
        public Builder imputedPay(String imputedPay) {
            Utils.checkNotNull(imputedPay, "imputedPay");
            this.imputedPay = Optional.ofNullable(imputedPay);
            return this;
        }

        /**
         * Total imputed pay for this employee on the payroll.
         */
        public Builder imputedPay(Optional<String> imputedPay) {
            Utils.checkNotNull(imputedPay, "imputedPay");
            this.imputedPay = imputedPay;
            return this;
        }

        /**
         * The employee benefit deduction amount for this employee on the payroll.
         */
        public Builder companyBenefitDeduction(String companyBenefitDeduction) {
            Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
            this.companyBenefitDeduction = Optional.ofNullable(companyBenefitDeduction);
            return this;
        }

        /**
         * The employee benefit deduction amount for this employee on the payroll.
         */
        public Builder companyBenefitDeduction(Optional<String> companyBenefitDeduction) {
            Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
            this.companyBenefitDeduction = companyBenefitDeduction;
            return this;
        }

        /**
         * The company contribution amount for this employee on the payroll.
         */
        public Builder companyBenefitContribution(String companyBenefitContribution) {
            Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
            this.companyBenefitContribution = Optional.ofNullable(companyBenefitContribution);
            return this;
        }

        /**
         * The company contribution amount for this employee on the payroll.
         */
        public Builder companyBenefitContribution(Optional<String> companyBenefitContribution) {
            Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
            this.companyBenefitContribution = companyBenefitContribution;
            return this;
        }

        public Builder payPeriod(BenefitSummaryPayPeriod payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = Optional.ofNullable(payPeriod);
            return this;
        }

        public Builder payPeriod(Optional<? extends BenefitSummaryPayPeriod> payPeriod) {
            Utils.checkNotNull(payPeriod, "payPeriod");
            this.payPeriod = payPeriod;
            return this;
        }
        
        public PayrollBenefits build() {
            return new PayrollBenefits(
                payrollUuid,
                payrollType,
                checkDate,
                grossPay,
                imputedPay,
                companyBenefitDeduction,
                companyBenefitContribution,
                payPeriod);
        }
    }
}

