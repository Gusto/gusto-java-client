/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * AccruingTimeOffHour - The representation of an unprocessed termination pay period.
 */

public class AccruingTimeOffHour {

    /**
     * A unique identifier of the time off policy.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("time_off_policy_uuid")
    private Optional<String> timeOffPolicyUuid;

    /**
     * Hours accrued during this pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hours")
    private Optional<String> hours;

    @JsonCreator
    public AccruingTimeOffHour(
            @JsonProperty("time_off_policy_uuid") Optional<String> timeOffPolicyUuid,
            @JsonProperty("hours") Optional<String> hours) {
        Utils.checkNotNull(timeOffPolicyUuid, "timeOffPolicyUuid");
        Utils.checkNotNull(hours, "hours");
        this.timeOffPolicyUuid = timeOffPolicyUuid;
        this.hours = hours;
    }
    
    public AccruingTimeOffHour() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier of the time off policy.
     */
    @JsonIgnore
    public Optional<String> timeOffPolicyUuid() {
        return timeOffPolicyUuid;
    }

    /**
     * Hours accrued during this pay period.
     */
    @JsonIgnore
    public Optional<String> hours() {
        return hours;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier of the time off policy.
     */
    public AccruingTimeOffHour withTimeOffPolicyUuid(String timeOffPolicyUuid) {
        Utils.checkNotNull(timeOffPolicyUuid, "timeOffPolicyUuid");
        this.timeOffPolicyUuid = Optional.ofNullable(timeOffPolicyUuid);
        return this;
    }

    /**
     * A unique identifier of the time off policy.
     */
    public AccruingTimeOffHour withTimeOffPolicyUuid(Optional<String> timeOffPolicyUuid) {
        Utils.checkNotNull(timeOffPolicyUuid, "timeOffPolicyUuid");
        this.timeOffPolicyUuid = timeOffPolicyUuid;
        return this;
    }

    /**
     * Hours accrued during this pay period.
     */
    public AccruingTimeOffHour withHours(String hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = Optional.ofNullable(hours);
        return this;
    }

    /**
     * Hours accrued during this pay period.
     */
    public AccruingTimeOffHour withHours(Optional<String> hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = hours;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        AccruingTimeOffHour other = (AccruingTimeOffHour) o;
        return 
            Objects.deepEquals(this.timeOffPolicyUuid, other.timeOffPolicyUuid) &&
            Objects.deepEquals(this.hours, other.hours);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            timeOffPolicyUuid,
            hours);
    }
    
    @Override
    public String toString() {
        return Utils.toString(AccruingTimeOffHour.class,
                "timeOffPolicyUuid", timeOffPolicyUuid,
                "hours", hours);
    }
    
    public final static class Builder {
 
        private Optional<String> timeOffPolicyUuid = Optional.empty();
 
        private Optional<String> hours = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier of the time off policy.
         */
        public Builder timeOffPolicyUuid(String timeOffPolicyUuid) {
            Utils.checkNotNull(timeOffPolicyUuid, "timeOffPolicyUuid");
            this.timeOffPolicyUuid = Optional.ofNullable(timeOffPolicyUuid);
            return this;
        }

        /**
         * A unique identifier of the time off policy.
         */
        public Builder timeOffPolicyUuid(Optional<String> timeOffPolicyUuid) {
            Utils.checkNotNull(timeOffPolicyUuid, "timeOffPolicyUuid");
            this.timeOffPolicyUuid = timeOffPolicyUuid;
            return this;
        }

        /**
         * Hours accrued during this pay period.
         */
        public Builder hours(String hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        /**
         * Hours accrued during this pay period.
         */
        public Builder hours(Optional<String> hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = hours;
            return this;
        }
        
        public AccruingTimeOffHour build() {
            return new AccruingTimeOffHour(
                timeOffPolicyUuid,
                hours);
        }
    }
}

