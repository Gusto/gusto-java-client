/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PostCompaniesCompanyUuidSuspensionsRequestBody {

    /**
     * Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
     */
    @JsonProperty("file_quarterly_forms")
    private boolean fileQuarterlyForms;

    /**
     * Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
     */
    @JsonProperty("file_yearly_forms")
    private boolean fileYearlyForms;

    /**
     * How Gusto will handle taxes already collected.
     */
    @JsonProperty("reconcile_tax_method")
    private ReconcileTaxMethod reconcileTaxMethod;

    /**
     * User-supplied comments describing why they are suspending their account.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("comments")
    private Optional<String> comments;

    /**
     * Explanation for why the company is suspending their account.
     * 
     * <p>&gt; ðŸš§ FEIN or entity type changes require Customer Support
     * &gt;
     * &gt; If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
     */
    @JsonProperty("reason")
    private Reason reason;

    /**
     * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("leaving_for")
    private Optional<? extends LeavingFor> leavingFor;

    @JsonCreator
    public PostCompaniesCompanyUuidSuspensionsRequestBody(
            @JsonProperty("file_quarterly_forms") boolean fileQuarterlyForms,
            @JsonProperty("file_yearly_forms") boolean fileYearlyForms,
            @JsonProperty("reconcile_tax_method") ReconcileTaxMethod reconcileTaxMethod,
            @JsonProperty("comments") Optional<String> comments,
            @JsonProperty("reason") Reason reason,
            @JsonProperty("leaving_for") Optional<? extends LeavingFor> leavingFor) {
        Utils.checkNotNull(fileQuarterlyForms, "fileQuarterlyForms");
        Utils.checkNotNull(fileYearlyForms, "fileYearlyForms");
        Utils.checkNotNull(reconcileTaxMethod, "reconcileTaxMethod");
        Utils.checkNotNull(comments, "comments");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(leavingFor, "leavingFor");
        this.fileQuarterlyForms = fileQuarterlyForms;
        this.fileYearlyForms = fileYearlyForms;
        this.reconcileTaxMethod = reconcileTaxMethod;
        this.comments = comments;
        this.reason = reason;
        this.leavingFor = leavingFor;
    }
    
    public PostCompaniesCompanyUuidSuspensionsRequestBody(
            boolean fileQuarterlyForms,
            boolean fileYearlyForms,
            ReconcileTaxMethod reconcileTaxMethod,
            Reason reason) {
        this(fileQuarterlyForms, fileYearlyForms, reconcileTaxMethod, Optional.empty(), reason, Optional.empty());
    }

    /**
     * Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
     */
    @JsonIgnore
    public boolean fileQuarterlyForms() {
        return fileQuarterlyForms;
    }

    /**
     * Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
     */
    @JsonIgnore
    public boolean fileYearlyForms() {
        return fileYearlyForms;
    }

    /**
     * How Gusto will handle taxes already collected.
     */
    @JsonIgnore
    public ReconcileTaxMethod reconcileTaxMethod() {
        return reconcileTaxMethod;
    }

    /**
     * User-supplied comments describing why they are suspending their account.
     */
    @JsonIgnore
    public Optional<String> comments() {
        return comments;
    }

    /**
     * Explanation for why the company is suspending their account.
     * 
     * <p>&gt; ðŸš§ FEIN or entity type changes require Customer Support
     * &gt;
     * &gt; If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
     */
    @JsonIgnore
    public Reason reason() {
        return reason;
    }

    /**
     * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<LeavingFor> leavingFor() {
        return (Optional<LeavingFor>) leavingFor;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withFileQuarterlyForms(boolean fileQuarterlyForms) {
        Utils.checkNotNull(fileQuarterlyForms, "fileQuarterlyForms");
        this.fileQuarterlyForms = fileQuarterlyForms;
        return this;
    }

    /**
     * Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withFileYearlyForms(boolean fileYearlyForms) {
        Utils.checkNotNull(fileYearlyForms, "fileYearlyForms");
        this.fileYearlyForms = fileYearlyForms;
        return this;
    }

    /**
     * How Gusto will handle taxes already collected.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withReconcileTaxMethod(ReconcileTaxMethod reconcileTaxMethod) {
        Utils.checkNotNull(reconcileTaxMethod, "reconcileTaxMethod");
        this.reconcileTaxMethod = reconcileTaxMethod;
        return this;
    }

    /**
     * User-supplied comments describing why they are suspending their account.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withComments(String comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = Optional.ofNullable(comments);
        return this;
    }

    /**
     * User-supplied comments describing why they are suspending their account.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withComments(Optional<String> comments) {
        Utils.checkNotNull(comments, "comments");
        this.comments = comments;
        return this;
    }

    /**
     * Explanation for why the company is suspending their account.
     * 
     * <p>&gt; ðŸš§ FEIN or entity type changes require Customer Support
     * &gt;
     * &gt; If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withReason(Reason reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    /**
     * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withLeavingFor(LeavingFor leavingFor) {
        Utils.checkNotNull(leavingFor, "leavingFor");
        this.leavingFor = Optional.ofNullable(leavingFor);
        return this;
    }

    /**
     * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
     */
    public PostCompaniesCompanyUuidSuspensionsRequestBody withLeavingFor(Optional<? extends LeavingFor> leavingFor) {
        Utils.checkNotNull(leavingFor, "leavingFor");
        this.leavingFor = leavingFor;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostCompaniesCompanyUuidSuspensionsRequestBody other = (PostCompaniesCompanyUuidSuspensionsRequestBody) o;
        return 
            Objects.deepEquals(this.fileQuarterlyForms, other.fileQuarterlyForms) &&
            Objects.deepEquals(this.fileYearlyForms, other.fileYearlyForms) &&
            Objects.deepEquals(this.reconcileTaxMethod, other.reconcileTaxMethod) &&
            Objects.deepEquals(this.comments, other.comments) &&
            Objects.deepEquals(this.reason, other.reason) &&
            Objects.deepEquals(this.leavingFor, other.leavingFor);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            fileQuarterlyForms,
            fileYearlyForms,
            reconcileTaxMethod,
            comments,
            reason,
            leavingFor);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostCompaniesCompanyUuidSuspensionsRequestBody.class,
                "fileQuarterlyForms", fileQuarterlyForms,
                "fileYearlyForms", fileYearlyForms,
                "reconcileTaxMethod", reconcileTaxMethod,
                "comments", comments,
                "reason", reason,
                "leavingFor", leavingFor);
    }
    
    public final static class Builder {
 
        private Boolean fileQuarterlyForms;
 
        private Boolean fileYearlyForms;
 
        private ReconcileTaxMethod reconcileTaxMethod;
 
        private Optional<String> comments = Optional.empty();
 
        private Reason reason;
 
        private Optional<? extends LeavingFor> leavingFor = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Should Gusto file quarterly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
         */
        public Builder fileQuarterlyForms(boolean fileQuarterlyForms) {
            Utils.checkNotNull(fileQuarterlyForms, "fileQuarterlyForms");
            this.fileQuarterlyForms = fileQuarterlyForms;
            return this;
        }

        /**
         * Should Gusto file yearly tax forms on behalf of the company? The correct answer can depend on why the company is suspending their account, and how taxes are being reconciled.
         */
        public Builder fileYearlyForms(boolean fileYearlyForms) {
            Utils.checkNotNull(fileYearlyForms, "fileYearlyForms");
            this.fileYearlyForms = fileYearlyForms;
            return this;
        }

        /**
         * How Gusto will handle taxes already collected.
         */
        public Builder reconcileTaxMethod(ReconcileTaxMethod reconcileTaxMethod) {
            Utils.checkNotNull(reconcileTaxMethod, "reconcileTaxMethod");
            this.reconcileTaxMethod = reconcileTaxMethod;
            return this;
        }

        /**
         * User-supplied comments describing why they are suspending their account.
         */
        public Builder comments(String comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = Optional.ofNullable(comments);
            return this;
        }

        /**
         * User-supplied comments describing why they are suspending their account.
         */
        public Builder comments(Optional<String> comments) {
            Utils.checkNotNull(comments, "comments");
            this.comments = comments;
            return this;
        }

        /**
         * Explanation for why the company is suspending their account.
         * 
         * <p>&gt; ðŸš§ FEIN or entity type changes require Customer Support
         * &gt;
         * &gt; If a company is switching FEIN or changing their entity type, this change must be performed by Gusto Customer Support and cannot be performed via the API at this time.
         */
        public Builder reason(Reason reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        /**
         * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
         */
        public Builder leavingFor(LeavingFor leavingFor) {
            Utils.checkNotNull(leavingFor, "leavingFor");
            this.leavingFor = Optional.ofNullable(leavingFor);
            return this;
        }

        /**
         * Which competitor the company is joining instead. Required if `reason` is `'switching_provider'`.
         */
        public Builder leavingFor(Optional<? extends LeavingFor> leavingFor) {
            Utils.checkNotNull(leavingFor, "leavingFor");
            this.leavingFor = leavingFor;
            return this;
        }
        
        public PostCompaniesCompanyUuidSuspensionsRequestBody build() {
            return new PostCompaniesCompanyUuidSuspensionsRequestBody(
                fileQuarterlyForms,
                fileYearlyForms,
                reconcileTaxMethod,
                comments,
                reason,
                leavingFor);
        }
    }
}

