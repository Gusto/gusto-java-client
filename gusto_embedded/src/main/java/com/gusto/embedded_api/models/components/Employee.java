/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Employee - The representation of an employee in Gusto.
 */

public class Employee {

    /**
     * The UUID of the employee in Gusto.
     */
    @JsonProperty("uuid")
    private String uuid;

    @JsonProperty("first_name")
    private String firstName;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_initial")
    private JsonNullable<String> middleInitial;

    @JsonProperty("last_name")
    private String lastName;

    /**
     * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * The UUID of the company the employee is employed by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The UUID of the employee's manager.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("manager_uuid")
    private JsonNullable<String> managerUuid;

    /**
     * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * The employee's department in the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department")
    private JsonNullable<String> department;

    /**
     * Whether the employee is terminated.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminated")
    private Optional<Boolean> terminated;

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("two_percent_shareholder")
    private JsonNullable<Boolean> twoPercentShareholder;

    /**
     * Whether the employee has completed onboarding.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarded")
    private Optional<Boolean> onboarded;

    /**
     * The current onboarding status of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding_status")
    private Optional<? extends OnboardingStatus> onboardingStatus;

    /**
     * Configuration for an employee onboarding documents during onboarding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding_documents_config")
    private Optional<? extends OnboardingDocumentsConfig> onboardingDocumentsConfig;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("jobs")
    private Optional<? extends List<Job>> jobs;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("eligible_paid_time_off")
    private Optional<? extends List<PaidTimeOff>> eligiblePaidTimeOff;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("terminations")
    private Optional<? extends List<Termination>> terminations;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("garnishments")
    private Optional<? extends List<Garnishment>> garnishments;

    /**
     * Custom fields are only included for the employee if the include param has the custom_fields value set
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_fields")
    private Optional<? extends List<EmployeeCustomField>> customFields;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date_of_birth")
    private JsonNullable<String> dateOfBirth;

    /**
     * Indicates whether the employee has an SSN in Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_ssn")
    private Optional<Boolean> hasSsn;

    /**
     * Deprecated. This field always returns an empty string.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssn")
    private Optional<String> ssn;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private JsonNullable<String> phone;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("preferred_first_name")
    private JsonNullable<String> preferredFirstName;

    /**
     * The employee's payment method
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private Optional<? extends PaymentMethod> paymentMethod;

    /**
     * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_email")
    private JsonNullable<String> workEmail;

    /**
     * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_employment_status")
    private JsonNullable<? extends CurrentEmploymentStatus> currentEmploymentStatus;

    @JsonCreator
    public Employee(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("first_name") String firstName,
            @JsonProperty("middle_initial") JsonNullable<String> middleInitial,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("manager_uuid") JsonNullable<String> managerUuid,
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("department") JsonNullable<String> department,
            @JsonProperty("terminated") Optional<Boolean> terminated,
            @JsonProperty("two_percent_shareholder") JsonNullable<Boolean> twoPercentShareholder,
            @JsonProperty("onboarded") Optional<Boolean> onboarded,
            @JsonProperty("onboarding_status") Optional<? extends OnboardingStatus> onboardingStatus,
            @JsonProperty("onboarding_documents_config") Optional<? extends OnboardingDocumentsConfig> onboardingDocumentsConfig,
            @JsonProperty("jobs") Optional<? extends List<Job>> jobs,
            @JsonProperty("eligible_paid_time_off") Optional<? extends List<PaidTimeOff>> eligiblePaidTimeOff,
            @JsonProperty("terminations") Optional<? extends List<Termination>> terminations,
            @JsonProperty("garnishments") Optional<? extends List<Garnishment>> garnishments,
            @JsonProperty("custom_fields") Optional<? extends List<EmployeeCustomField>> customFields,
            @JsonProperty("date_of_birth") JsonNullable<String> dateOfBirth,
            @JsonProperty("has_ssn") Optional<Boolean> hasSsn,
            @JsonProperty("ssn") Optional<String> ssn,
            @JsonProperty("phone") JsonNullable<String> phone,
            @JsonProperty("preferred_first_name") JsonNullable<String> preferredFirstName,
            @JsonProperty("payment_method") Optional<? extends PaymentMethod> paymentMethod,
            @JsonProperty("work_email") JsonNullable<String> workEmail,
            @JsonProperty("current_employment_status") JsonNullable<? extends CurrentEmploymentStatus> currentEmploymentStatus) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(middleInitial, "middleInitial");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(managerUuid, "managerUuid");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(department, "department");
        Utils.checkNotNull(terminated, "terminated");
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        Utils.checkNotNull(onboarded, "onboarded");
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        Utils.checkNotNull(onboardingDocumentsConfig, "onboardingDocumentsConfig");
        Utils.checkNotNull(jobs, "jobs");
        Utils.checkNotNull(eligiblePaidTimeOff, "eligiblePaidTimeOff");
        Utils.checkNotNull(terminations, "terminations");
        Utils.checkNotNull(garnishments, "garnishments");
        Utils.checkNotNull(customFields, "customFields");
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        Utils.checkNotNull(hasSsn, "hasSsn");
        Utils.checkNotNull(ssn, "ssn");
        Utils.checkNotNull(phone, "phone");
        Utils.checkNotNull(preferredFirstName, "preferredFirstName");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(workEmail, "workEmail");
        Utils.checkNotNull(currentEmploymentStatus, "currentEmploymentStatus");
        this.uuid = uuid;
        this.firstName = firstName;
        this.middleInitial = middleInitial;
        this.lastName = lastName;
        this.email = email;
        this.companyUuid = companyUuid;
        this.managerUuid = managerUuid;
        this.version = version;
        this.department = department;
        this.terminated = terminated;
        this.twoPercentShareholder = twoPercentShareholder;
        this.onboarded = onboarded;
        this.onboardingStatus = onboardingStatus;
        this.onboardingDocumentsConfig = onboardingDocumentsConfig;
        this.jobs = jobs;
        this.eligiblePaidTimeOff = eligiblePaidTimeOff;
        this.terminations = terminations;
        this.garnishments = garnishments;
        this.customFields = customFields;
        this.dateOfBirth = dateOfBirth;
        this.hasSsn = hasSsn;
        this.ssn = ssn;
        this.phone = phone;
        this.preferredFirstName = preferredFirstName;
        this.paymentMethod = paymentMethod;
        this.workEmail = workEmail;
        this.currentEmploymentStatus = currentEmploymentStatus;
    }
    
    public Employee(
            String uuid,
            String firstName,
            String lastName) {
        this(uuid, firstName, JsonNullable.undefined(), lastName, JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * The UUID of the employee in Gusto.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    @JsonIgnore
    public JsonNullable<String> middleInitial() {
        return middleInitial;
    }

    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * The UUID of the company the employee is employed by.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The UUID of the employee's manager.
     */
    @JsonIgnore
    public JsonNullable<String> managerUuid() {
        return managerUuid;
    }

    /**
     * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * The employee's department in the company.
     */
    @JsonIgnore
    public JsonNullable<String> department() {
        return department;
    }

    /**
     * Whether the employee is terminated.
     */
    @JsonIgnore
    public Optional<Boolean> terminated() {
        return terminated;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    @JsonIgnore
    public JsonNullable<Boolean> twoPercentShareholder() {
        return twoPercentShareholder;
    }

    /**
     * Whether the employee has completed onboarding.
     */
    @JsonIgnore
    public Optional<Boolean> onboarded() {
        return onboarded;
    }

    /**
     * The current onboarding status of the employee
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OnboardingStatus> onboardingStatus() {
        return (Optional<OnboardingStatus>) onboardingStatus;
    }

    /**
     * Configuration for an employee onboarding documents during onboarding
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<OnboardingDocumentsConfig> onboardingDocumentsConfig() {
        return (Optional<OnboardingDocumentsConfig>) onboardingDocumentsConfig;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Job>> jobs() {
        return (Optional<List<Job>>) jobs;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<PaidTimeOff>> eligiblePaidTimeOff() {
        return (Optional<List<PaidTimeOff>>) eligiblePaidTimeOff;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Termination>> terminations() {
        return (Optional<List<Termination>>) terminations;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Garnishment>> garnishments() {
        return (Optional<List<Garnishment>>) garnishments;
    }

    /**
     * Custom fields are only included for the employee if the include param has the custom_fields value set
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EmployeeCustomField>> customFields() {
        return (Optional<List<EmployeeCustomField>>) customFields;
    }

    @JsonIgnore
    public JsonNullable<String> dateOfBirth() {
        return dateOfBirth;
    }

    /**
     * Indicates whether the employee has an SSN in Gusto.
     */
    @JsonIgnore
    public Optional<Boolean> hasSsn() {
        return hasSsn;
    }

    /**
     * Deprecated. This field always returns an empty string.
     */
    @JsonIgnore
    public Optional<String> ssn() {
        return ssn;
    }

    @JsonIgnore
    public JsonNullable<String> phone() {
        return phone;
    }

    @JsonIgnore
    public JsonNullable<String> preferredFirstName() {
        return preferredFirstName;
    }

    /**
     * The employee's payment method
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PaymentMethod> paymentMethod() {
        return (Optional<PaymentMethod>) paymentMethod;
    }

    /**
     * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    @JsonIgnore
    public JsonNullable<String> workEmail() {
        return workEmail;
    }

    /**
     * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<CurrentEmploymentStatus> currentEmploymentStatus() {
        return (JsonNullable<CurrentEmploymentStatus>) currentEmploymentStatus;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the employee in Gusto.
     */
    public Employee withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    public Employee withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    public Employee withMiddleInitial(String middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = JsonNullable.of(middleInitial);
        return this;
    }

    public Employee withMiddleInitial(JsonNullable<String> middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = middleInitial;
        return this;
    }

    public Employee withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    public Employee withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    public Employee withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The UUID of the company the employee is employed by.
     */
    public Employee withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * The UUID of the company the employee is employed by.
     */
    public Employee withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The UUID of the employee's manager.
     */
    public Employee withManagerUuid(String managerUuid) {
        Utils.checkNotNull(managerUuid, "managerUuid");
        this.managerUuid = JsonNullable.of(managerUuid);
        return this;
    }

    /**
     * The UUID of the employee's manager.
     */
    public Employee withManagerUuid(JsonNullable<String> managerUuid) {
        Utils.checkNotNull(managerUuid, "managerUuid");
        this.managerUuid = managerUuid;
        return this;
    }

    /**
     * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Employee withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Employee withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The employee's department in the company.
     */
    public Employee withDepartment(String department) {
        Utils.checkNotNull(department, "department");
        this.department = JsonNullable.of(department);
        return this;
    }

    /**
     * The employee's department in the company.
     */
    public Employee withDepartment(JsonNullable<String> department) {
        Utils.checkNotNull(department, "department");
        this.department = department;
        return this;
    }

    /**
     * Whether the employee is terminated.
     */
    public Employee withTerminated(boolean terminated) {
        Utils.checkNotNull(terminated, "terminated");
        this.terminated = Optional.ofNullable(terminated);
        return this;
    }

    /**
     * Whether the employee is terminated.
     */
    public Employee withTerminated(Optional<Boolean> terminated) {
        Utils.checkNotNull(terminated, "terminated");
        this.terminated = terminated;
        return this;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    public Employee withTwoPercentShareholder(boolean twoPercentShareholder) {
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.twoPercentShareholder = JsonNullable.of(twoPercentShareholder);
        return this;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    public Employee withTwoPercentShareholder(JsonNullable<Boolean> twoPercentShareholder) {
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.twoPercentShareholder = twoPercentShareholder;
        return this;
    }

    /**
     * Whether the employee has completed onboarding.
     */
    public Employee withOnboarded(boolean onboarded) {
        Utils.checkNotNull(onboarded, "onboarded");
        this.onboarded = Optional.ofNullable(onboarded);
        return this;
    }

    /**
     * Whether the employee has completed onboarding.
     */
    public Employee withOnboarded(Optional<Boolean> onboarded) {
        Utils.checkNotNull(onboarded, "onboarded");
        this.onboarded = onboarded;
        return this;
    }

    /**
     * The current onboarding status of the employee
     */
    public Employee withOnboardingStatus(OnboardingStatus onboardingStatus) {
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        this.onboardingStatus = Optional.ofNullable(onboardingStatus);
        return this;
    }

    /**
     * The current onboarding status of the employee
     */
    public Employee withOnboardingStatus(Optional<? extends OnboardingStatus> onboardingStatus) {
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        this.onboardingStatus = onboardingStatus;
        return this;
    }

    /**
     * Configuration for an employee onboarding documents during onboarding
     */
    public Employee withOnboardingDocumentsConfig(OnboardingDocumentsConfig onboardingDocumentsConfig) {
        Utils.checkNotNull(onboardingDocumentsConfig, "onboardingDocumentsConfig");
        this.onboardingDocumentsConfig = Optional.ofNullable(onboardingDocumentsConfig);
        return this;
    }

    /**
     * Configuration for an employee onboarding documents during onboarding
     */
    public Employee withOnboardingDocumentsConfig(Optional<? extends OnboardingDocumentsConfig> onboardingDocumentsConfig) {
        Utils.checkNotNull(onboardingDocumentsConfig, "onboardingDocumentsConfig");
        this.onboardingDocumentsConfig = onboardingDocumentsConfig;
        return this;
    }

    public Employee withJobs(List<Job> jobs) {
        Utils.checkNotNull(jobs, "jobs");
        this.jobs = Optional.ofNullable(jobs);
        return this;
    }

    public Employee withJobs(Optional<? extends List<Job>> jobs) {
        Utils.checkNotNull(jobs, "jobs");
        this.jobs = jobs;
        return this;
    }

    public Employee withEligiblePaidTimeOff(List<PaidTimeOff> eligiblePaidTimeOff) {
        Utils.checkNotNull(eligiblePaidTimeOff, "eligiblePaidTimeOff");
        this.eligiblePaidTimeOff = Optional.ofNullable(eligiblePaidTimeOff);
        return this;
    }

    public Employee withEligiblePaidTimeOff(Optional<? extends List<PaidTimeOff>> eligiblePaidTimeOff) {
        Utils.checkNotNull(eligiblePaidTimeOff, "eligiblePaidTimeOff");
        this.eligiblePaidTimeOff = eligiblePaidTimeOff;
        return this;
    }

    public Employee withTerminations(List<Termination> terminations) {
        Utils.checkNotNull(terminations, "terminations");
        this.terminations = Optional.ofNullable(terminations);
        return this;
    }

    public Employee withTerminations(Optional<? extends List<Termination>> terminations) {
        Utils.checkNotNull(terminations, "terminations");
        this.terminations = terminations;
        return this;
    }

    public Employee withGarnishments(List<Garnishment> garnishments) {
        Utils.checkNotNull(garnishments, "garnishments");
        this.garnishments = Optional.ofNullable(garnishments);
        return this;
    }

    public Employee withGarnishments(Optional<? extends List<Garnishment>> garnishments) {
        Utils.checkNotNull(garnishments, "garnishments");
        this.garnishments = garnishments;
        return this;
    }

    /**
     * Custom fields are only included for the employee if the include param has the custom_fields value set
     */
    public Employee withCustomFields(List<EmployeeCustomField> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = Optional.ofNullable(customFields);
        return this;
    }

    /**
     * Custom fields are only included for the employee if the include param has the custom_fields value set
     */
    public Employee withCustomFields(Optional<? extends List<EmployeeCustomField>> customFields) {
        Utils.checkNotNull(customFields, "customFields");
        this.customFields = customFields;
        return this;
    }

    public Employee withDateOfBirth(String dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = JsonNullable.of(dateOfBirth);
        return this;
    }

    public Employee withDateOfBirth(JsonNullable<String> dateOfBirth) {
        Utils.checkNotNull(dateOfBirth, "dateOfBirth");
        this.dateOfBirth = dateOfBirth;
        return this;
    }

    /**
     * Indicates whether the employee has an SSN in Gusto.
     */
    public Employee withHasSsn(boolean hasSsn) {
        Utils.checkNotNull(hasSsn, "hasSsn");
        this.hasSsn = Optional.ofNullable(hasSsn);
        return this;
    }

    /**
     * Indicates whether the employee has an SSN in Gusto.
     */
    public Employee withHasSsn(Optional<Boolean> hasSsn) {
        Utils.checkNotNull(hasSsn, "hasSsn");
        this.hasSsn = hasSsn;
        return this;
    }

    /**
     * Deprecated. This field always returns an empty string.
     */
    public Employee withSsn(String ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = Optional.ofNullable(ssn);
        return this;
    }

    /**
     * Deprecated. This field always returns an empty string.
     */
    public Employee withSsn(Optional<String> ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = ssn;
        return this;
    }

    public Employee withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = JsonNullable.of(phone);
        return this;
    }

    public Employee withPhone(JsonNullable<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }

    public Employee withPreferredFirstName(String preferredFirstName) {
        Utils.checkNotNull(preferredFirstName, "preferredFirstName");
        this.preferredFirstName = JsonNullable.of(preferredFirstName);
        return this;
    }

    public Employee withPreferredFirstName(JsonNullable<String> preferredFirstName) {
        Utils.checkNotNull(preferredFirstName, "preferredFirstName");
        this.preferredFirstName = preferredFirstName;
        return this;
    }

    /**
     * The employee's payment method
     */
    public Employee withPaymentMethod(PaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = Optional.ofNullable(paymentMethod);
        return this;
    }

    /**
     * The employee's payment method
     */
    public Employee withPaymentMethod(Optional<? extends PaymentMethod> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    public Employee withWorkEmail(String workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = JsonNullable.of(workEmail);
        return this;
    }

    /**
     * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
     */
    public Employee withWorkEmail(JsonNullable<String> workEmail) {
        Utils.checkNotNull(workEmail, "workEmail");
        this.workEmail = workEmail;
        return this;
    }

    /**
     * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
     */
    public Employee withCurrentEmploymentStatus(CurrentEmploymentStatus currentEmploymentStatus) {
        Utils.checkNotNull(currentEmploymentStatus, "currentEmploymentStatus");
        this.currentEmploymentStatus = JsonNullable.of(currentEmploymentStatus);
        return this;
    }

    /**
     * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
     */
    public Employee withCurrentEmploymentStatus(JsonNullable<? extends CurrentEmploymentStatus> currentEmploymentStatus) {
        Utils.checkNotNull(currentEmploymentStatus, "currentEmploymentStatus");
        this.currentEmploymentStatus = currentEmploymentStatus;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Employee other = (Employee) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.middleInitial, other.middleInitial) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.managerUuid, other.managerUuid) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.department, other.department) &&
            Objects.deepEquals(this.terminated, other.terminated) &&
            Objects.deepEquals(this.twoPercentShareholder, other.twoPercentShareholder) &&
            Objects.deepEquals(this.onboarded, other.onboarded) &&
            Objects.deepEquals(this.onboardingStatus, other.onboardingStatus) &&
            Objects.deepEquals(this.onboardingDocumentsConfig, other.onboardingDocumentsConfig) &&
            Objects.deepEquals(this.jobs, other.jobs) &&
            Objects.deepEquals(this.eligiblePaidTimeOff, other.eligiblePaidTimeOff) &&
            Objects.deepEquals(this.terminations, other.terminations) &&
            Objects.deepEquals(this.garnishments, other.garnishments) &&
            Objects.deepEquals(this.customFields, other.customFields) &&
            Objects.deepEquals(this.dateOfBirth, other.dateOfBirth) &&
            Objects.deepEquals(this.hasSsn, other.hasSsn) &&
            Objects.deepEquals(this.ssn, other.ssn) &&
            Objects.deepEquals(this.phone, other.phone) &&
            Objects.deepEquals(this.preferredFirstName, other.preferredFirstName) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.workEmail, other.workEmail) &&
            Objects.deepEquals(this.currentEmploymentStatus, other.currentEmploymentStatus);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            firstName,
            middleInitial,
            lastName,
            email,
            companyUuid,
            managerUuid,
            version,
            department,
            terminated,
            twoPercentShareholder,
            onboarded,
            onboardingStatus,
            onboardingDocumentsConfig,
            jobs,
            eligiblePaidTimeOff,
            terminations,
            garnishments,
            customFields,
            dateOfBirth,
            hasSsn,
            ssn,
            phone,
            preferredFirstName,
            paymentMethod,
            workEmail,
            currentEmploymentStatus);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Employee.class,
                "uuid", uuid,
                "firstName", firstName,
                "middleInitial", middleInitial,
                "lastName", lastName,
                "email", email,
                "companyUuid", companyUuid,
                "managerUuid", managerUuid,
                "version", version,
                "department", department,
                "terminated", terminated,
                "twoPercentShareholder", twoPercentShareholder,
                "onboarded", onboarded,
                "onboardingStatus", onboardingStatus,
                "onboardingDocumentsConfig", onboardingDocumentsConfig,
                "jobs", jobs,
                "eligiblePaidTimeOff", eligiblePaidTimeOff,
                "terminations", terminations,
                "garnishments", garnishments,
                "customFields", customFields,
                "dateOfBirth", dateOfBirth,
                "hasSsn", hasSsn,
                "ssn", ssn,
                "phone", phone,
                "preferredFirstName", preferredFirstName,
                "paymentMethod", paymentMethod,
                "workEmail", workEmail,
                "currentEmploymentStatus", currentEmploymentStatus);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private String firstName;
 
        private JsonNullable<String> middleInitial = JsonNullable.undefined();
 
        private String lastName;
 
        private JsonNullable<String> email = JsonNullable.undefined();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private JsonNullable<String> managerUuid = JsonNullable.undefined();
 
        private Optional<String> version = Optional.empty();
 
        private JsonNullable<String> department = JsonNullable.undefined();
 
        private Optional<Boolean> terminated = Optional.empty();
 
        private JsonNullable<Boolean> twoPercentShareholder = JsonNullable.undefined();
 
        private Optional<Boolean> onboarded = Optional.empty();
 
        private Optional<? extends OnboardingStatus> onboardingStatus = Optional.empty();
 
        private Optional<? extends OnboardingDocumentsConfig> onboardingDocumentsConfig = Optional.empty();
 
        private Optional<? extends List<Job>> jobs = Optional.empty();
 
        private Optional<? extends List<PaidTimeOff>> eligiblePaidTimeOff = Optional.empty();
 
        private Optional<? extends List<Termination>> terminations = Optional.empty();
 
        private Optional<? extends List<Garnishment>> garnishments = Optional.empty();
 
        private Optional<? extends List<EmployeeCustomField>> customFields = Optional.empty();
 
        private JsonNullable<String> dateOfBirth = JsonNullable.undefined();
 
        private Optional<Boolean> hasSsn = Optional.empty();
 
        private Optional<String> ssn = Optional.empty();
 
        private JsonNullable<String> phone = JsonNullable.undefined();
 
        private JsonNullable<String> preferredFirstName = JsonNullable.undefined();
 
        private Optional<? extends PaymentMethod> paymentMethod;
 
        private JsonNullable<String> workEmail = JsonNullable.undefined();
 
        private JsonNullable<? extends CurrentEmploymentStatus> currentEmploymentStatus = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the employee in Gusto.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        public Builder middleInitial(String middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = JsonNullable.of(middleInitial);
            return this;
        }

        public Builder middleInitial(JsonNullable<String> middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = middleInitial;
            return this;
        }

        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * The personal email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The UUID of the company the employee is employed by.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * The UUID of the company the employee is employed by.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The UUID of the employee's manager.
         */
        public Builder managerUuid(String managerUuid) {
            Utils.checkNotNull(managerUuid, "managerUuid");
            this.managerUuid = JsonNullable.of(managerUuid);
            return this;
        }

        /**
         * The UUID of the employee's manager.
         */
        public Builder managerUuid(JsonNullable<String> managerUuid) {
            Utils.checkNotNull(managerUuid, "managerUuid");
            this.managerUuid = managerUuid;
            return this;
        }

        /**
         * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the employee. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The employee's department in the company.
         */
        public Builder department(String department) {
            Utils.checkNotNull(department, "department");
            this.department = JsonNullable.of(department);
            return this;
        }

        /**
         * The employee's department in the company.
         */
        public Builder department(JsonNullable<String> department) {
            Utils.checkNotNull(department, "department");
            this.department = department;
            return this;
        }

        /**
         * Whether the employee is terminated.
         */
        public Builder terminated(boolean terminated) {
            Utils.checkNotNull(terminated, "terminated");
            this.terminated = Optional.ofNullable(terminated);
            return this;
        }

        /**
         * Whether the employee is terminated.
         */
        public Builder terminated(Optional<Boolean> terminated) {
            Utils.checkNotNull(terminated, "terminated");
            this.terminated = terminated;
            return this;
        }

        /**
         * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
         */
        public Builder twoPercentShareholder(boolean twoPercentShareholder) {
            Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
            this.twoPercentShareholder = JsonNullable.of(twoPercentShareholder);
            return this;
        }

        /**
         * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
         */
        public Builder twoPercentShareholder(JsonNullable<Boolean> twoPercentShareholder) {
            Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }

        /**
         * Whether the employee has completed onboarding.
         */
        public Builder onboarded(boolean onboarded) {
            Utils.checkNotNull(onboarded, "onboarded");
            this.onboarded = Optional.ofNullable(onboarded);
            return this;
        }

        /**
         * Whether the employee has completed onboarding.
         */
        public Builder onboarded(Optional<Boolean> onboarded) {
            Utils.checkNotNull(onboarded, "onboarded");
            this.onboarded = onboarded;
            return this;
        }

        /**
         * The current onboarding status of the employee
         */
        public Builder onboardingStatus(OnboardingStatus onboardingStatus) {
            Utils.checkNotNull(onboardingStatus, "onboardingStatus");
            this.onboardingStatus = Optional.ofNullable(onboardingStatus);
            return this;
        }

        /**
         * The current onboarding status of the employee
         */
        public Builder onboardingStatus(Optional<? extends OnboardingStatus> onboardingStatus) {
            Utils.checkNotNull(onboardingStatus, "onboardingStatus");
            this.onboardingStatus = onboardingStatus;
            return this;
        }

        /**
         * Configuration for an employee onboarding documents during onboarding
         */
        public Builder onboardingDocumentsConfig(OnboardingDocumentsConfig onboardingDocumentsConfig) {
            Utils.checkNotNull(onboardingDocumentsConfig, "onboardingDocumentsConfig");
            this.onboardingDocumentsConfig = Optional.ofNullable(onboardingDocumentsConfig);
            return this;
        }

        /**
         * Configuration for an employee onboarding documents during onboarding
         */
        public Builder onboardingDocumentsConfig(Optional<? extends OnboardingDocumentsConfig> onboardingDocumentsConfig) {
            Utils.checkNotNull(onboardingDocumentsConfig, "onboardingDocumentsConfig");
            this.onboardingDocumentsConfig = onboardingDocumentsConfig;
            return this;
        }

        public Builder jobs(List<Job> jobs) {
            Utils.checkNotNull(jobs, "jobs");
            this.jobs = Optional.ofNullable(jobs);
            return this;
        }

        public Builder jobs(Optional<? extends List<Job>> jobs) {
            Utils.checkNotNull(jobs, "jobs");
            this.jobs = jobs;
            return this;
        }

        public Builder eligiblePaidTimeOff(List<PaidTimeOff> eligiblePaidTimeOff) {
            Utils.checkNotNull(eligiblePaidTimeOff, "eligiblePaidTimeOff");
            this.eligiblePaidTimeOff = Optional.ofNullable(eligiblePaidTimeOff);
            return this;
        }

        public Builder eligiblePaidTimeOff(Optional<? extends List<PaidTimeOff>> eligiblePaidTimeOff) {
            Utils.checkNotNull(eligiblePaidTimeOff, "eligiblePaidTimeOff");
            this.eligiblePaidTimeOff = eligiblePaidTimeOff;
            return this;
        }

        public Builder terminations(List<Termination> terminations) {
            Utils.checkNotNull(terminations, "terminations");
            this.terminations = Optional.ofNullable(terminations);
            return this;
        }

        public Builder terminations(Optional<? extends List<Termination>> terminations) {
            Utils.checkNotNull(terminations, "terminations");
            this.terminations = terminations;
            return this;
        }

        public Builder garnishments(List<Garnishment> garnishments) {
            Utils.checkNotNull(garnishments, "garnishments");
            this.garnishments = Optional.ofNullable(garnishments);
            return this;
        }

        public Builder garnishments(Optional<? extends List<Garnishment>> garnishments) {
            Utils.checkNotNull(garnishments, "garnishments");
            this.garnishments = garnishments;
            return this;
        }

        /**
         * Custom fields are only included for the employee if the include param has the custom_fields value set
         */
        public Builder customFields(List<EmployeeCustomField> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = Optional.ofNullable(customFields);
            return this;
        }

        /**
         * Custom fields are only included for the employee if the include param has the custom_fields value set
         */
        public Builder customFields(Optional<? extends List<EmployeeCustomField>> customFields) {
            Utils.checkNotNull(customFields, "customFields");
            this.customFields = customFields;
            return this;
        }

        public Builder dateOfBirth(String dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = JsonNullable.of(dateOfBirth);
            return this;
        }

        public Builder dateOfBirth(JsonNullable<String> dateOfBirth) {
            Utils.checkNotNull(dateOfBirth, "dateOfBirth");
            this.dateOfBirth = dateOfBirth;
            return this;
        }

        /**
         * Indicates whether the employee has an SSN in Gusto.
         */
        public Builder hasSsn(boolean hasSsn) {
            Utils.checkNotNull(hasSsn, "hasSsn");
            this.hasSsn = Optional.ofNullable(hasSsn);
            return this;
        }

        /**
         * Indicates whether the employee has an SSN in Gusto.
         */
        public Builder hasSsn(Optional<Boolean> hasSsn) {
            Utils.checkNotNull(hasSsn, "hasSsn");
            this.hasSsn = hasSsn;
            return this;
        }

        /**
         * Deprecated. This field always returns an empty string.
         */
        public Builder ssn(String ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        /**
         * Deprecated. This field always returns an empty string.
         */
        public Builder ssn(Optional<String> ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = ssn;
            return this;
        }

        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = JsonNullable.of(phone);
            return this;
        }

        public Builder phone(JsonNullable<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }

        public Builder preferredFirstName(String preferredFirstName) {
            Utils.checkNotNull(preferredFirstName, "preferredFirstName");
            this.preferredFirstName = JsonNullable.of(preferredFirstName);
            return this;
        }

        public Builder preferredFirstName(JsonNullable<String> preferredFirstName) {
            Utils.checkNotNull(preferredFirstName, "preferredFirstName");
            this.preferredFirstName = preferredFirstName;
            return this;
        }

        /**
         * The employee's payment method
         */
        public Builder paymentMethod(PaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * The employee's payment method
         */
        public Builder paymentMethod(Optional<? extends PaymentMethod> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
         */
        public Builder workEmail(String workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = JsonNullable.of(workEmail);
            return this;
        }

        /**
         * The work email address of the employee. This is provided to support syncing users between our system and yours. You may not use this email address for any other purpose (e.g. marketing).
         */
        public Builder workEmail(JsonNullable<String> workEmail) {
            Utils.checkNotNull(workEmail, "workEmail");
            this.workEmail = workEmail;
            return this;
        }

        /**
         * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
         */
        public Builder currentEmploymentStatus(CurrentEmploymentStatus currentEmploymentStatus) {
            Utils.checkNotNull(currentEmploymentStatus, "currentEmploymentStatus");
            this.currentEmploymentStatus = JsonNullable.of(currentEmploymentStatus);
            return this;
        }

        /**
         * The current employment status of the employee. Full-time employees work 30+ hours per week. Part-time employees are split into two groups: those that work 20-29 hours a week, and those that work under 20 hours a week. Variable employees have hours that vary each week. Seasonal employees are hired for 6 months of the year or less.
         */
        public Builder currentEmploymentStatus(JsonNullable<? extends CurrentEmploymentStatus> currentEmploymentStatus) {
            Utils.checkNotNull(currentEmploymentStatus, "currentEmploymentStatus");
            this.currentEmploymentStatus = currentEmploymentStatus;
            return this;
        }
        
        public Employee build() {
            if (paymentMethod == null) {
                paymentMethod = _SINGLETON_VALUE_PaymentMethod.value();
            }            return new Employee(
                uuid,
                firstName,
                middleInitial,
                lastName,
                email,
                companyUuid,
                managerUuid,
                version,
                department,
                terminated,
                twoPercentShareholder,
                onboarded,
                onboardingStatus,
                onboardingDocumentsConfig,
                jobs,
                eligiblePaidTimeOff,
                terminations,
                garnishments,
                customFields,
                dateOfBirth,
                hasSsn,
                ssn,
                phone,
                preferredFirstName,
                paymentMethod,
                workEmail,
                currentEmploymentStatus);
        }

        private static final LazySingletonValue<Optional<? extends PaymentMethod>> _SINGLETON_VALUE_PaymentMethod =
                new LazySingletonValue<>(
                        "payment_method",
                        "\"Check\"",
                        new TypeReference<Optional<? extends PaymentMethod>>() {});
    }
}

