/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * PayrollReversal
 * 
 * <p>Example response
 */

public class PayrollReversal {

    /**
     * The UUID for the payroll run being reversed.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversed_payroll_uuid")
    private Optional<String> reversedPayrollUuid;

    /**
     * The UUID of the payroll where the reversal was applied.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversal_payroll_uuid")
    private Optional<String> reversalPayrollUuid;

    /**
     * A reason provided by the admin who created the reversal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<String> reason;

    /**
     * Timestamp of when the reversal was approved.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("approved_at")
    private JsonNullable<String> approvedAt;

    /**
     * Category chosen by the admin who requested the reversal.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Optional<String> category;

    /**
     * Array of affected employee UUIDs.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reversed_employee_uuids")
    private Optional<? extends List<String>> reversedEmployeeUuids;

    @JsonCreator
    public PayrollReversal(
            @JsonProperty("reversed_payroll_uuid") Optional<String> reversedPayrollUuid,
            @JsonProperty("reversal_payroll_uuid") Optional<String> reversalPayrollUuid,
            @JsonProperty("reason") Optional<String> reason,
            @JsonProperty("approved_at") JsonNullable<String> approvedAt,
            @JsonProperty("category") Optional<String> category,
            @JsonProperty("reversed_employee_uuids") Optional<? extends List<String>> reversedEmployeeUuids) {
        Utils.checkNotNull(reversedPayrollUuid, "reversedPayrollUuid");
        Utils.checkNotNull(reversalPayrollUuid, "reversalPayrollUuid");
        Utils.checkNotNull(reason, "reason");
        Utils.checkNotNull(approvedAt, "approvedAt");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(reversedEmployeeUuids, "reversedEmployeeUuids");
        this.reversedPayrollUuid = reversedPayrollUuid;
        this.reversalPayrollUuid = reversalPayrollUuid;
        this.reason = reason;
        this.approvedAt = approvedAt;
        this.category = category;
        this.reversedEmployeeUuids = reversedEmployeeUuids;
    }
    
    public PayrollReversal() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID for the payroll run being reversed.
     */
    @JsonIgnore
    public Optional<String> reversedPayrollUuid() {
        return reversedPayrollUuid;
    }

    /**
     * The UUID of the payroll where the reversal was applied.
     */
    @JsonIgnore
    public Optional<String> reversalPayrollUuid() {
        return reversalPayrollUuid;
    }

    /**
     * A reason provided by the admin who created the reversal.
     */
    @JsonIgnore
    public Optional<String> reason() {
        return reason;
    }

    /**
     * Timestamp of when the reversal was approved.
     */
    @JsonIgnore
    public JsonNullable<String> approvedAt() {
        return approvedAt;
    }

    /**
     * Category chosen by the admin who requested the reversal.
     */
    @JsonIgnore
    public Optional<String> category() {
        return category;
    }

    /**
     * Array of affected employee UUIDs.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> reversedEmployeeUuids() {
        return (Optional<List<String>>) reversedEmployeeUuids;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID for the payroll run being reversed.
     */
    public PayrollReversal withReversedPayrollUuid(String reversedPayrollUuid) {
        Utils.checkNotNull(reversedPayrollUuid, "reversedPayrollUuid");
        this.reversedPayrollUuid = Optional.ofNullable(reversedPayrollUuid);
        return this;
    }

    /**
     * The UUID for the payroll run being reversed.
     */
    public PayrollReversal withReversedPayrollUuid(Optional<String> reversedPayrollUuid) {
        Utils.checkNotNull(reversedPayrollUuid, "reversedPayrollUuid");
        this.reversedPayrollUuid = reversedPayrollUuid;
        return this;
    }

    /**
     * The UUID of the payroll where the reversal was applied.
     */
    public PayrollReversal withReversalPayrollUuid(String reversalPayrollUuid) {
        Utils.checkNotNull(reversalPayrollUuid, "reversalPayrollUuid");
        this.reversalPayrollUuid = Optional.ofNullable(reversalPayrollUuid);
        return this;
    }

    /**
     * The UUID of the payroll where the reversal was applied.
     */
    public PayrollReversal withReversalPayrollUuid(Optional<String> reversalPayrollUuid) {
        Utils.checkNotNull(reversalPayrollUuid, "reversalPayrollUuid");
        this.reversalPayrollUuid = reversalPayrollUuid;
        return this;
    }

    /**
     * A reason provided by the admin who created the reversal.
     */
    public PayrollReversal withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }

    /**
     * A reason provided by the admin who created the reversal.
     */
    public PayrollReversal withReason(Optional<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }

    /**
     * Timestamp of when the reversal was approved.
     */
    public PayrollReversal withApprovedAt(String approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = JsonNullable.of(approvedAt);
        return this;
    }

    /**
     * Timestamp of when the reversal was approved.
     */
    public PayrollReversal withApprovedAt(JsonNullable<String> approvedAt) {
        Utils.checkNotNull(approvedAt, "approvedAt");
        this.approvedAt = approvedAt;
        return this;
    }

    /**
     * Category chosen by the admin who requested the reversal.
     */
    public PayrollReversal withCategory(String category) {
        Utils.checkNotNull(category, "category");
        this.category = Optional.ofNullable(category);
        return this;
    }

    /**
     * Category chosen by the admin who requested the reversal.
     */
    public PayrollReversal withCategory(Optional<String> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * Array of affected employee UUIDs.
     */
    public PayrollReversal withReversedEmployeeUuids(List<String> reversedEmployeeUuids) {
        Utils.checkNotNull(reversedEmployeeUuids, "reversedEmployeeUuids");
        this.reversedEmployeeUuids = Optional.ofNullable(reversedEmployeeUuids);
        return this;
    }

    /**
     * Array of affected employee UUIDs.
     */
    public PayrollReversal withReversedEmployeeUuids(Optional<? extends List<String>> reversedEmployeeUuids) {
        Utils.checkNotNull(reversedEmployeeUuids, "reversedEmployeeUuids");
        this.reversedEmployeeUuids = reversedEmployeeUuids;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollReversal other = (PayrollReversal) o;
        return 
            Objects.deepEquals(this.reversedPayrollUuid, other.reversedPayrollUuid) &&
            Objects.deepEquals(this.reversalPayrollUuid, other.reversalPayrollUuid) &&
            Objects.deepEquals(this.reason, other.reason) &&
            Objects.deepEquals(this.approvedAt, other.approvedAt) &&
            Objects.deepEquals(this.category, other.category) &&
            Objects.deepEquals(this.reversedEmployeeUuids, other.reversedEmployeeUuids);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            reversedPayrollUuid,
            reversalPayrollUuid,
            reason,
            approvedAt,
            category,
            reversedEmployeeUuids);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollReversal.class,
                "reversedPayrollUuid", reversedPayrollUuid,
                "reversalPayrollUuid", reversalPayrollUuid,
                "reason", reason,
                "approvedAt", approvedAt,
                "category", category,
                "reversedEmployeeUuids", reversedEmployeeUuids);
    }
    
    public final static class Builder {
 
        private Optional<String> reversedPayrollUuid = Optional.empty();
 
        private Optional<String> reversalPayrollUuid = Optional.empty();
 
        private Optional<String> reason = Optional.empty();
 
        private JsonNullable<String> approvedAt = JsonNullable.undefined();
 
        private Optional<String> category = Optional.empty();
 
        private Optional<? extends List<String>> reversedEmployeeUuids = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID for the payroll run being reversed.
         */
        public Builder reversedPayrollUuid(String reversedPayrollUuid) {
            Utils.checkNotNull(reversedPayrollUuid, "reversedPayrollUuid");
            this.reversedPayrollUuid = Optional.ofNullable(reversedPayrollUuid);
            return this;
        }

        /**
         * The UUID for the payroll run being reversed.
         */
        public Builder reversedPayrollUuid(Optional<String> reversedPayrollUuid) {
            Utils.checkNotNull(reversedPayrollUuid, "reversedPayrollUuid");
            this.reversedPayrollUuid = reversedPayrollUuid;
            return this;
        }

        /**
         * The UUID of the payroll where the reversal was applied.
         */
        public Builder reversalPayrollUuid(String reversalPayrollUuid) {
            Utils.checkNotNull(reversalPayrollUuid, "reversalPayrollUuid");
            this.reversalPayrollUuid = Optional.ofNullable(reversalPayrollUuid);
            return this;
        }

        /**
         * The UUID of the payroll where the reversal was applied.
         */
        public Builder reversalPayrollUuid(Optional<String> reversalPayrollUuid) {
            Utils.checkNotNull(reversalPayrollUuid, "reversalPayrollUuid");
            this.reversalPayrollUuid = reversalPayrollUuid;
            return this;
        }

        /**
         * A reason provided by the admin who created the reversal.
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * A reason provided by the admin who created the reversal.
         */
        public Builder reason(Optional<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }

        /**
         * Timestamp of when the reversal was approved.
         */
        public Builder approvedAt(String approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = JsonNullable.of(approvedAt);
            return this;
        }

        /**
         * Timestamp of when the reversal was approved.
         */
        public Builder approvedAt(JsonNullable<String> approvedAt) {
            Utils.checkNotNull(approvedAt, "approvedAt");
            this.approvedAt = approvedAt;
            return this;
        }

        /**
         * Category chosen by the admin who requested the reversal.
         */
        public Builder category(String category) {
            Utils.checkNotNull(category, "category");
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * Category chosen by the admin who requested the reversal.
         */
        public Builder category(Optional<String> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        /**
         * Array of affected employee UUIDs.
         */
        public Builder reversedEmployeeUuids(List<String> reversedEmployeeUuids) {
            Utils.checkNotNull(reversedEmployeeUuids, "reversedEmployeeUuids");
            this.reversedEmployeeUuids = Optional.ofNullable(reversedEmployeeUuids);
            return this;
        }

        /**
         * Array of affected employee UUIDs.
         */
        public Builder reversedEmployeeUuids(Optional<? extends List<String>> reversedEmployeeUuids) {
            Utils.checkNotNull(reversedEmployeeUuids, "reversedEmployeeUuids");
            this.reversedEmployeeUuids = reversedEmployeeUuids;
            return this;
        }
        
        public PayrollReversal build() {
            return new PayrollReversal(
                reversedPayrollUuid,
                reversalPayrollUuid,
                reason,
                approvedAt,
                category,
                reversedEmployeeUuids);
        }
    }
}

