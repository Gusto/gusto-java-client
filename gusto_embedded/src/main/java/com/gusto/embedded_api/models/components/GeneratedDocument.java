/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

/**
 * GeneratedDocument - Example response
 */

public class GeneratedDocument {

    /**
     * A unique identifier of the Generated Document request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_uuid")
    private Optional<String> requestUuid;

    /**
     * Current status of the Generated Document
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends GeneratedDocumentStatus> status;

    /**
     * The array of urls to access the documents.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("document_urls")
    private Optional<? extends List<String>> documentUrls;

    @JsonCreator
    public GeneratedDocument(
            @JsonProperty("request_uuid") Optional<String> requestUuid,
            @JsonProperty("status") Optional<? extends GeneratedDocumentStatus> status,
            @JsonProperty("document_urls") Optional<? extends List<String>> documentUrls) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(documentUrls, "documentUrls");
        this.requestUuid = requestUuid;
        this.status = status;
        this.documentUrls = documentUrls;
    }
    
    public GeneratedDocument() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier of the Generated Document request
     */
    @JsonIgnore
    public Optional<String> requestUuid() {
        return requestUuid;
    }

    /**
     * Current status of the Generated Document
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<GeneratedDocumentStatus> status() {
        return (Optional<GeneratedDocumentStatus>) status;
    }

    /**
     * The array of urls to access the documents.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> documentUrls() {
        return (Optional<List<String>>) documentUrls;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier of the Generated Document request
     */
    public GeneratedDocument withRequestUuid(String requestUuid) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.requestUuid = Optional.ofNullable(requestUuid);
        return this;
    }

    /**
     * A unique identifier of the Generated Document request
     */
    public GeneratedDocument withRequestUuid(Optional<String> requestUuid) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.requestUuid = requestUuid;
        return this;
    }

    /**
     * Current status of the Generated Document
     */
    public GeneratedDocument withStatus(GeneratedDocumentStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Current status of the Generated Document
     */
    public GeneratedDocument withStatus(Optional<? extends GeneratedDocumentStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The array of urls to access the documents.
     */
    public GeneratedDocument withDocumentUrls(List<String> documentUrls) {
        Utils.checkNotNull(documentUrls, "documentUrls");
        this.documentUrls = Optional.ofNullable(documentUrls);
        return this;
    }

    /**
     * The array of urls to access the documents.
     */
    public GeneratedDocument withDocumentUrls(Optional<? extends List<String>> documentUrls) {
        Utils.checkNotNull(documentUrls, "documentUrls");
        this.documentUrls = documentUrls;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GeneratedDocument other = (GeneratedDocument) o;
        return 
            Objects.deepEquals(this.requestUuid, other.requestUuid) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.documentUrls, other.documentUrls);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestUuid,
            status,
            documentUrls);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GeneratedDocument.class,
                "requestUuid", requestUuid,
                "status", status,
                "documentUrls", documentUrls);
    }
    
    public final static class Builder {
 
        private Optional<String> requestUuid = Optional.empty();
 
        private Optional<? extends GeneratedDocumentStatus> status = Optional.empty();
 
        private Optional<? extends List<String>> documentUrls = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier of the Generated Document request
         */
        public Builder requestUuid(String requestUuid) {
            Utils.checkNotNull(requestUuid, "requestUuid");
            this.requestUuid = Optional.ofNullable(requestUuid);
            return this;
        }

        /**
         * A unique identifier of the Generated Document request
         */
        public Builder requestUuid(Optional<String> requestUuid) {
            Utils.checkNotNull(requestUuid, "requestUuid");
            this.requestUuid = requestUuid;
            return this;
        }

        /**
         * Current status of the Generated Document
         */
        public Builder status(GeneratedDocumentStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Current status of the Generated Document
         */
        public Builder status(Optional<? extends GeneratedDocumentStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The array of urls to access the documents.
         */
        public Builder documentUrls(List<String> documentUrls) {
            Utils.checkNotNull(documentUrls, "documentUrls");
            this.documentUrls = Optional.ofNullable(documentUrls);
            return this;
        }

        /**
         * The array of urls to access the documents.
         */
        public Builder documentUrls(Optional<? extends List<String>> documentUrls) {
            Utils.checkNotNull(documentUrls, "documentUrls");
            this.documentUrls = documentUrls;
            return this;
        }
        
        public GeneratedDocument build() {
            return new GeneratedDocument(
                requestUuid,
                status,
                documentUrls);
        }
    }
}

