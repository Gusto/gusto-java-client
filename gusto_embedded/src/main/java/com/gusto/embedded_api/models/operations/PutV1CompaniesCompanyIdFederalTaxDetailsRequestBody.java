/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody - Attributes related to federal tax details that can be updated via this endpoint include:
 */

public class PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody {

    /**
     * The legal name of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("legal_name")
    private Optional<String> legalName;

    /**
     * The EIN of of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ein")
    private Optional<String> ein;

    /**
     * What type of tax entity the company is
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_payer_type")
    private Optional<? extends TaxPayerType> taxPayerType;

    /**
     * The form used by the company for federal tax filing. One of:
     * - 941 (Quarterly federal tax return)
     * - 944 (Annual federal tax return)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("filing_form")
    private Optional<? extends FilingForm> filingForm;

    /**
     * Whether this company should be taxed as an S-Corporation
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("taxable_as_scorp")
    private Optional<Boolean> taxableAsScorp;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    @JsonCreator
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody(
            @JsonProperty("legal_name") Optional<String> legalName,
            @JsonProperty("ein") Optional<String> ein,
            @JsonProperty("tax_payer_type") Optional<? extends TaxPayerType> taxPayerType,
            @JsonProperty("filing_form") Optional<? extends FilingForm> filingForm,
            @JsonProperty("taxable_as_scorp") Optional<Boolean> taxableAsScorp,
            @JsonProperty("version") String version) {
        Utils.checkNotNull(legalName, "legalName");
        Utils.checkNotNull(ein, "ein");
        Utils.checkNotNull(taxPayerType, "taxPayerType");
        Utils.checkNotNull(filingForm, "filingForm");
        Utils.checkNotNull(taxableAsScorp, "taxableAsScorp");
        Utils.checkNotNull(version, "version");
        this.legalName = legalName;
        this.ein = ein;
        this.taxPayerType = taxPayerType;
        this.filingForm = filingForm;
        this.taxableAsScorp = taxableAsScorp;
        this.version = version;
    }
    
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody(
            String version) {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), version);
    }

    /**
     * The legal name of the company
     */
    @JsonIgnore
    public Optional<String> legalName() {
        return legalName;
    }

    /**
     * The EIN of of the company
     */
    @JsonIgnore
    public Optional<String> ein() {
        return ein;
    }

    /**
     * What type of tax entity the company is
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<TaxPayerType> taxPayerType() {
        return (Optional<TaxPayerType>) taxPayerType;
    }

    /**
     * The form used by the company for federal tax filing. One of:
     * - 941 (Quarterly federal tax return)
     * - 944 (Annual federal tax return)
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<FilingForm> filingForm() {
        return (Optional<FilingForm>) filingForm;
    }

    /**
     * Whether this company should be taxed as an S-Corporation
     */
    @JsonIgnore
    public Optional<Boolean> taxableAsScorp() {
        return taxableAsScorp;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The legal name of the company
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withLegalName(String legalName) {
        Utils.checkNotNull(legalName, "legalName");
        this.legalName = Optional.ofNullable(legalName);
        return this;
    }

    /**
     * The legal name of the company
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withLegalName(Optional<String> legalName) {
        Utils.checkNotNull(legalName, "legalName");
        this.legalName = legalName;
        return this;
    }

    /**
     * The EIN of of the company
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withEin(String ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = Optional.ofNullable(ein);
        return this;
    }

    /**
     * The EIN of of the company
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withEin(Optional<String> ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = ein;
        return this;
    }

    /**
     * What type of tax entity the company is
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withTaxPayerType(TaxPayerType taxPayerType) {
        Utils.checkNotNull(taxPayerType, "taxPayerType");
        this.taxPayerType = Optional.ofNullable(taxPayerType);
        return this;
    }

    /**
     * What type of tax entity the company is
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withTaxPayerType(Optional<? extends TaxPayerType> taxPayerType) {
        Utils.checkNotNull(taxPayerType, "taxPayerType");
        this.taxPayerType = taxPayerType;
        return this;
    }

    /**
     * The form used by the company for federal tax filing. One of:
     * - 941 (Quarterly federal tax return)
     * - 944 (Annual federal tax return)
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withFilingForm(FilingForm filingForm) {
        Utils.checkNotNull(filingForm, "filingForm");
        this.filingForm = Optional.ofNullable(filingForm);
        return this;
    }

    /**
     * The form used by the company for federal tax filing. One of:
     * - 941 (Quarterly federal tax return)
     * - 944 (Annual federal tax return)
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withFilingForm(Optional<? extends FilingForm> filingForm) {
        Utils.checkNotNull(filingForm, "filingForm");
        this.filingForm = filingForm;
        return this;
    }

    /**
     * Whether this company should be taxed as an S-Corporation
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withTaxableAsScorp(boolean taxableAsScorp) {
        Utils.checkNotNull(taxableAsScorp, "taxableAsScorp");
        this.taxableAsScorp = Optional.ofNullable(taxableAsScorp);
        return this;
    }

    /**
     * Whether this company should be taxed as an S-Corporation
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withTaxableAsScorp(Optional<Boolean> taxableAsScorp) {
        Utils.checkNotNull(taxableAsScorp, "taxableAsScorp");
        this.taxableAsScorp = taxableAsScorp;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody other = (PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody) o;
        return 
            Objects.deepEquals(this.legalName, other.legalName) &&
            Objects.deepEquals(this.ein, other.ein) &&
            Objects.deepEquals(this.taxPayerType, other.taxPayerType) &&
            Objects.deepEquals(this.filingForm, other.filingForm) &&
            Objects.deepEquals(this.taxableAsScorp, other.taxableAsScorp) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            legalName,
            ein,
            taxPayerType,
            filingForm,
            taxableAsScorp,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody.class,
                "legalName", legalName,
                "ein", ein,
                "taxPayerType", taxPayerType,
                "filingForm", filingForm,
                "taxableAsScorp", taxableAsScorp,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<String> legalName = Optional.empty();
 
        private Optional<String> ein = Optional.empty();
 
        private Optional<? extends TaxPayerType> taxPayerType = Optional.empty();
 
        private Optional<? extends FilingForm> filingForm = Optional.empty();
 
        private Optional<Boolean> taxableAsScorp = Optional.empty();
 
        private String version;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The legal name of the company
         */
        public Builder legalName(String legalName) {
            Utils.checkNotNull(legalName, "legalName");
            this.legalName = Optional.ofNullable(legalName);
            return this;
        }

        /**
         * The legal name of the company
         */
        public Builder legalName(Optional<String> legalName) {
            Utils.checkNotNull(legalName, "legalName");
            this.legalName = legalName;
            return this;
        }

        /**
         * The EIN of of the company
         */
        public Builder ein(String ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        /**
         * The EIN of of the company
         */
        public Builder ein(Optional<String> ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = ein;
            return this;
        }

        /**
         * What type of tax entity the company is
         */
        public Builder taxPayerType(TaxPayerType taxPayerType) {
            Utils.checkNotNull(taxPayerType, "taxPayerType");
            this.taxPayerType = Optional.ofNullable(taxPayerType);
            return this;
        }

        /**
         * What type of tax entity the company is
         */
        public Builder taxPayerType(Optional<? extends TaxPayerType> taxPayerType) {
            Utils.checkNotNull(taxPayerType, "taxPayerType");
            this.taxPayerType = taxPayerType;
            return this;
        }

        /**
         * The form used by the company for federal tax filing. One of:
         * - 941 (Quarterly federal tax return)
         * - 944 (Annual federal tax return)
         */
        public Builder filingForm(FilingForm filingForm) {
            Utils.checkNotNull(filingForm, "filingForm");
            this.filingForm = Optional.ofNullable(filingForm);
            return this;
        }

        /**
         * The form used by the company for federal tax filing. One of:
         * - 941 (Quarterly federal tax return)
         * - 944 (Annual federal tax return)
         */
        public Builder filingForm(Optional<? extends FilingForm> filingForm) {
            Utils.checkNotNull(filingForm, "filingForm");
            this.filingForm = filingForm;
            return this;
        }

        /**
         * Whether this company should be taxed as an S-Corporation
         */
        public Builder taxableAsScorp(boolean taxableAsScorp) {
            Utils.checkNotNull(taxableAsScorp, "taxableAsScorp");
            this.taxableAsScorp = Optional.ofNullable(taxableAsScorp);
            return this;
        }

        /**
         * Whether this company should be taxed as an S-Corporation
         */
        public Builder taxableAsScorp(Optional<Boolean> taxableAsScorp) {
            Utils.checkNotNull(taxableAsScorp, "taxableAsScorp");
            this.taxableAsScorp = taxableAsScorp;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody build() {
            return new PutV1CompaniesCompanyIdFederalTaxDetailsRequestBody(
                legalName,
                ein,
                taxPayerType,
                filingForm,
                taxableAsScorp,
                version);
        }
    }
}

