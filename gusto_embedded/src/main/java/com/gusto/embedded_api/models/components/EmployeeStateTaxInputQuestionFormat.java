/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class EmployeeStateTaxInputQuestionFormat {

    /**
     * Describes the type of question - Text, Number, Select, Currency, Date
     */
    @JsonProperty("type")
    private String type;

    /**
     * For "Select" type questions, the allowed values and display labels.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("options")
    private Optional<? extends List<Options>> options;

    @JsonCreator
    public EmployeeStateTaxInputQuestionFormat(
            @JsonProperty("type") String type,
            @JsonProperty("options") Optional<? extends List<Options>> options) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(options, "options");
        this.type = type;
        this.options = options;
    }
    
    public EmployeeStateTaxInputQuestionFormat(
            String type) {
        this(type, Optional.empty());
    }

    /**
     * Describes the type of question - Text, Number, Select, Currency, Date
     */
    @JsonIgnore
    public String type() {
        return type;
    }

    /**
     * For "Select" type questions, the allowed values and display labels.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Options>> options() {
        return (Optional<List<Options>>) options;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Describes the type of question - Text, Number, Select, Currency, Date
     */
    public EmployeeStateTaxInputQuestionFormat withType(String type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * For "Select" type questions, the allowed values and display labels.
     */
    public EmployeeStateTaxInputQuestionFormat withOptions(List<Options> options) {
        Utils.checkNotNull(options, "options");
        this.options = Optional.ofNullable(options);
        return this;
    }

    /**
     * For "Select" type questions, the allowed values and display labels.
     */
    public EmployeeStateTaxInputQuestionFormat withOptions(Optional<? extends List<Options>> options) {
        Utils.checkNotNull(options, "options");
        this.options = options;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeStateTaxInputQuestionFormat other = (EmployeeStateTaxInputQuestionFormat) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.options, other.options);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            options);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeStateTaxInputQuestionFormat.class,
                "type", type,
                "options", options);
    }
    
    public final static class Builder {
 
        private String type;
 
        private Optional<? extends List<Options>> options = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Describes the type of question - Text, Number, Select, Currency, Date
         */
        public Builder type(String type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * For "Select" type questions, the allowed values and display labels.
         */
        public Builder options(List<Options> options) {
            Utils.checkNotNull(options, "options");
            this.options = Optional.ofNullable(options);
            return this;
        }

        /**
         * For "Select" type questions, the allowed values and display labels.
         */
        public Builder options(Optional<? extends List<Options>> options) {
            Utils.checkNotNull(options, "options");
            this.options = options;
            return this;
        }
        
        public EmployeeStateTaxInputQuestionFormat build() {
            return new EmployeeStateTaxInputQuestionFormat(
                type,
                options);
        }
    }
}

