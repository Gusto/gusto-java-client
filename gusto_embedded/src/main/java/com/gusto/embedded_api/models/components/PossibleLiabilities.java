/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PossibleLiabilities {

    /**
     * Liability amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("liability_amount")
    private Optional<String> liabilityAmount;

    /**
     * The external payroll check date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_check_date")
    private JsonNullable<String> payrollCheckDate;

    /**
     * The UUID of the external payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_payroll_uuid")
    private JsonNullable<String> externalPayrollUuid;

    @JsonCreator
    public PossibleLiabilities(
            @JsonProperty("liability_amount") Optional<String> liabilityAmount,
            @JsonProperty("payroll_check_date") JsonNullable<String> payrollCheckDate,
            @JsonProperty("external_payroll_uuid") JsonNullable<String> externalPayrollUuid) {
        Utils.checkNotNull(liabilityAmount, "liabilityAmount");
        Utils.checkNotNull(payrollCheckDate, "payrollCheckDate");
        Utils.checkNotNull(externalPayrollUuid, "externalPayrollUuid");
        this.liabilityAmount = liabilityAmount;
        this.payrollCheckDate = payrollCheckDate;
        this.externalPayrollUuid = externalPayrollUuid;
    }
    
    public PossibleLiabilities() {
        this(Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined());
    }

    /**
     * Liability amount.
     */
    @JsonIgnore
    public Optional<String> liabilityAmount() {
        return liabilityAmount;
    }

    /**
     * The external payroll check date.
     */
    @JsonIgnore
    public JsonNullable<String> payrollCheckDate() {
        return payrollCheckDate;
    }

    /**
     * The UUID of the external payroll.
     */
    @JsonIgnore
    public JsonNullable<String> externalPayrollUuid() {
        return externalPayrollUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Liability amount.
     */
    public PossibleLiabilities withLiabilityAmount(String liabilityAmount) {
        Utils.checkNotNull(liabilityAmount, "liabilityAmount");
        this.liabilityAmount = Optional.ofNullable(liabilityAmount);
        return this;
    }

    /**
     * Liability amount.
     */
    public PossibleLiabilities withLiabilityAmount(Optional<String> liabilityAmount) {
        Utils.checkNotNull(liabilityAmount, "liabilityAmount");
        this.liabilityAmount = liabilityAmount;
        return this;
    }

    /**
     * The external payroll check date.
     */
    public PossibleLiabilities withPayrollCheckDate(String payrollCheckDate) {
        Utils.checkNotNull(payrollCheckDate, "payrollCheckDate");
        this.payrollCheckDate = JsonNullable.of(payrollCheckDate);
        return this;
    }

    /**
     * The external payroll check date.
     */
    public PossibleLiabilities withPayrollCheckDate(JsonNullable<String> payrollCheckDate) {
        Utils.checkNotNull(payrollCheckDate, "payrollCheckDate");
        this.payrollCheckDate = payrollCheckDate;
        return this;
    }

    /**
     * The UUID of the external payroll.
     */
    public PossibleLiabilities withExternalPayrollUuid(String externalPayrollUuid) {
        Utils.checkNotNull(externalPayrollUuid, "externalPayrollUuid");
        this.externalPayrollUuid = JsonNullable.of(externalPayrollUuid);
        return this;
    }

    /**
     * The UUID of the external payroll.
     */
    public PossibleLiabilities withExternalPayrollUuid(JsonNullable<String> externalPayrollUuid) {
        Utils.checkNotNull(externalPayrollUuid, "externalPayrollUuid");
        this.externalPayrollUuid = externalPayrollUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PossibleLiabilities other = (PossibleLiabilities) o;
        return 
            Objects.deepEquals(this.liabilityAmount, other.liabilityAmount) &&
            Objects.deepEquals(this.payrollCheckDate, other.payrollCheckDate) &&
            Objects.deepEquals(this.externalPayrollUuid, other.externalPayrollUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            liabilityAmount,
            payrollCheckDate,
            externalPayrollUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PossibleLiabilities.class,
                "liabilityAmount", liabilityAmount,
                "payrollCheckDate", payrollCheckDate,
                "externalPayrollUuid", externalPayrollUuid);
    }
    
    public final static class Builder {
 
        private Optional<String> liabilityAmount = Optional.empty();
 
        private JsonNullable<String> payrollCheckDate = JsonNullable.undefined();
 
        private JsonNullable<String> externalPayrollUuid = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Liability amount.
         */
        public Builder liabilityAmount(String liabilityAmount) {
            Utils.checkNotNull(liabilityAmount, "liabilityAmount");
            this.liabilityAmount = Optional.ofNullable(liabilityAmount);
            return this;
        }

        /**
         * Liability amount.
         */
        public Builder liabilityAmount(Optional<String> liabilityAmount) {
            Utils.checkNotNull(liabilityAmount, "liabilityAmount");
            this.liabilityAmount = liabilityAmount;
            return this;
        }

        /**
         * The external payroll check date.
         */
        public Builder payrollCheckDate(String payrollCheckDate) {
            Utils.checkNotNull(payrollCheckDate, "payrollCheckDate");
            this.payrollCheckDate = JsonNullable.of(payrollCheckDate);
            return this;
        }

        /**
         * The external payroll check date.
         */
        public Builder payrollCheckDate(JsonNullable<String> payrollCheckDate) {
            Utils.checkNotNull(payrollCheckDate, "payrollCheckDate");
            this.payrollCheckDate = payrollCheckDate;
            return this;
        }

        /**
         * The UUID of the external payroll.
         */
        public Builder externalPayrollUuid(String externalPayrollUuid) {
            Utils.checkNotNull(externalPayrollUuid, "externalPayrollUuid");
            this.externalPayrollUuid = JsonNullable.of(externalPayrollUuid);
            return this;
        }

        /**
         * The UUID of the external payroll.
         */
        public Builder externalPayrollUuid(JsonNullable<String> externalPayrollUuid) {
            Utils.checkNotNull(externalPayrollUuid, "externalPayrollUuid");
            this.externalPayrollUuid = externalPayrollUuid;
            return this;
        }
        
        public PossibleLiabilities build() {
            return new PossibleLiabilities(
                liabilityAmount,
                payrollCheckDate,
                externalPayrollUuid);
        }
    }
}

