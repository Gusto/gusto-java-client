/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class TaxRequirementsState {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requirement_sets")
    private Optional<? extends List<TaxRequirementSet>> requirementSets;

    @JsonCreator
    public TaxRequirementsState(
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("requirement_sets") Optional<? extends List<TaxRequirementSet>> requirementSets) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(requirementSets, "requirementSets");
        this.companyUuid = companyUuid;
        this.state = state;
        this.requirementSets = requirementSets;
    }
    
    public TaxRequirementsState() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<TaxRequirementSet>> requirementSets() {
        return (Optional<List<TaxRequirementSet>>) requirementSets;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public TaxRequirementsState withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    public TaxRequirementsState withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
     */
    public TaxRequirementsState withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
     */
    public TaxRequirementsState withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    public TaxRequirementsState withRequirementSets(List<TaxRequirementSet> requirementSets) {
        Utils.checkNotNull(requirementSets, "requirementSets");
        this.requirementSets = Optional.ofNullable(requirementSets);
        return this;
    }

    public TaxRequirementsState withRequirementSets(Optional<? extends List<TaxRequirementSet>> requirementSets) {
        Utils.checkNotNull(requirementSets, "requirementSets");
        this.requirementSets = requirementSets;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        TaxRequirementsState other = (TaxRequirementsState) o;
        return 
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.requirementSets, other.requirementSets);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyUuid,
            state,
            requirementSets);
    }
    
    @Override
    public String toString() {
        return Utils.toString(TaxRequirementsState.class,
                "companyUuid", companyUuid,
                "state", state,
                "requirementSets", requirementSets);
    }
    
    public final static class Builder {
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<? extends List<TaxRequirementSet>> requirementSets = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * One of the two-letter state abbreviations for the fifty United States and the District of Columbia (DC)
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        public Builder requirementSets(List<TaxRequirementSet> requirementSets) {
            Utils.checkNotNull(requirementSets, "requirementSets");
            this.requirementSets = Optional.ofNullable(requirementSets);
            return this;
        }

        public Builder requirementSets(Optional<? extends List<TaxRequirementSet>> requirementSets) {
            Utils.checkNotNull(requirementSets, "requirementSets");
            this.requirementSets = requirementSets;
            return this;
        }
        
        public TaxRequirementsState build() {
            return new TaxRequirementsState(
                companyUuid,
                state,
                requirementSets);
        }
    }
}

