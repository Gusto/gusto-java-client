/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * ContractorPaymentSummaryByDatesTotal
 * 
 * <p>The wage and reimbursement totals for all contractor payments within a given time period.
 */

public class ContractorPaymentSummaryByDatesTotal {

    /**
     * The total reimbursements for contractor payments within a given time period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursements")
    private Optional<String> reimbursements;

    /**
     * The total wages for contractor payments within a given time period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wages")
    private Optional<String> wages;

    @JsonCreator
    public ContractorPaymentSummaryByDatesTotal(
            @JsonProperty("reimbursements") Optional<String> reimbursements,
            @JsonProperty("wages") Optional<String> wages) {
        Utils.checkNotNull(reimbursements, "reimbursements");
        Utils.checkNotNull(wages, "wages");
        this.reimbursements = reimbursements;
        this.wages = wages;
    }
    
    public ContractorPaymentSummaryByDatesTotal() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The total reimbursements for contractor payments within a given time period.
     */
    @JsonIgnore
    public Optional<String> reimbursements() {
        return reimbursements;
    }

    /**
     * The total wages for contractor payments within a given time period.
     */
    @JsonIgnore
    public Optional<String> wages() {
        return wages;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The total reimbursements for contractor payments within a given time period.
     */
    public ContractorPaymentSummaryByDatesTotal withReimbursements(String reimbursements) {
        Utils.checkNotNull(reimbursements, "reimbursements");
        this.reimbursements = Optional.ofNullable(reimbursements);
        return this;
    }

    /**
     * The total reimbursements for contractor payments within a given time period.
     */
    public ContractorPaymentSummaryByDatesTotal withReimbursements(Optional<String> reimbursements) {
        Utils.checkNotNull(reimbursements, "reimbursements");
        this.reimbursements = reimbursements;
        return this;
    }

    /**
     * The total wages for contractor payments within a given time period.
     */
    public ContractorPaymentSummaryByDatesTotal withWages(String wages) {
        Utils.checkNotNull(wages, "wages");
        this.wages = Optional.ofNullable(wages);
        return this;
    }

    /**
     * The total wages for contractor payments within a given time period.
     */
    public ContractorPaymentSummaryByDatesTotal withWages(Optional<String> wages) {
        Utils.checkNotNull(wages, "wages");
        this.wages = wages;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorPaymentSummaryByDatesTotal other = (ContractorPaymentSummaryByDatesTotal) o;
        return 
            Objects.deepEquals(this.reimbursements, other.reimbursements) &&
            Objects.deepEquals(this.wages, other.wages);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            reimbursements,
            wages);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorPaymentSummaryByDatesTotal.class,
                "reimbursements", reimbursements,
                "wages", wages);
    }
    
    public final static class Builder {
 
        private Optional<String> reimbursements = Optional.empty();
 
        private Optional<String> wages = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total reimbursements for contractor payments within a given time period.
         */
        public Builder reimbursements(String reimbursements) {
            Utils.checkNotNull(reimbursements, "reimbursements");
            this.reimbursements = Optional.ofNullable(reimbursements);
            return this;
        }

        /**
         * The total reimbursements for contractor payments within a given time period.
         */
        public Builder reimbursements(Optional<String> reimbursements) {
            Utils.checkNotNull(reimbursements, "reimbursements");
            this.reimbursements = reimbursements;
            return this;
        }

        /**
         * The total wages for contractor payments within a given time period.
         */
        public Builder wages(String wages) {
            Utils.checkNotNull(wages, "wages");
            this.wages = Optional.ofNullable(wages);
            return this;
        }

        /**
         * The total wages for contractor payments within a given time period.
         */
        public Builder wages(Optional<String> wages) {
            Utils.checkNotNull(wages, "wages");
            this.wages = wages;
            return this;
        }
        
        public ContractorPaymentSummaryByDatesTotal build() {
            return new ContractorPaymentSummaryByDatesTotal(
                reimbursements,
                wages);
        }
    }
}

