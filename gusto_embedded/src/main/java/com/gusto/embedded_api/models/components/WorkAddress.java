/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class WorkAddress {

    /**
     * Reference to a company location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_uuid")
    private Optional<String> locationUuid;

    @JsonCreator
    public WorkAddress(
            @JsonProperty("location_uuid") Optional<String> locationUuid) {
        Utils.checkNotNull(locationUuid, "locationUuid");
        this.locationUuid = locationUuid;
    }
    
    public WorkAddress() {
        this(Optional.empty());
    }

    /**
     * Reference to a company location
     */
    @JsonIgnore
    public Optional<String> locationUuid() {
        return locationUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference to a company location
     */
    public WorkAddress withLocationUuid(String locationUuid) {
        Utils.checkNotNull(locationUuid, "locationUuid");
        this.locationUuid = Optional.ofNullable(locationUuid);
        return this;
    }

    /**
     * Reference to a company location
     */
    public WorkAddress withLocationUuid(Optional<String> locationUuid) {
        Utils.checkNotNull(locationUuid, "locationUuid");
        this.locationUuid = locationUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WorkAddress other = (WorkAddress) o;
        return 
            Objects.deepEquals(this.locationUuid, other.locationUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            locationUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WorkAddress.class,
                "locationUuid", locationUuid);
    }
    
    public final static class Builder {
 
        private Optional<String> locationUuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference to a company location
         */
        public Builder locationUuid(String locationUuid) {
            Utils.checkNotNull(locationUuid, "locationUuid");
            this.locationUuid = Optional.ofNullable(locationUuid);
            return this;
        }

        /**
         * Reference to a company location
         */
        public Builder locationUuid(Optional<String> locationUuid) {
            Utils.checkNotNull(locationUuid, "locationUuid");
            this.locationUuid = locationUuid;
            return this;
        }
        
        public WorkAddress build() {
            return new WorkAddress(
                locationUuid);
        }
    }
}

