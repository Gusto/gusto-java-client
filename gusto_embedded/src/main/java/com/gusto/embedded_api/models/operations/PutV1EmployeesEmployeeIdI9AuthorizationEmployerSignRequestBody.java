/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody {

    /**
     * The signature
     */
    @JsonProperty("signature_text")
    private String signatureText;

    /**
     * The signer's job title
     */
    @JsonProperty("signer_title")
    private String signerTitle;

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("signed_by_ip_address")
    private Optional<String> signedByIpAddress;

    /**
     * Whether you agree to sign electronically
     */
    @JsonProperty("agree")
    private boolean agree;

    /**
     * Any additional notes
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("additional_info")
    private Optional<String> additionalInfo;

    /**
     * Whether an alternative procedure authorized by DHS to examine documents was used
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("alt_procedure")
    private Optional<Boolean> altProcedure;

    @JsonCreator
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody(
            @JsonProperty("signature_text") String signatureText,
            @JsonProperty("signer_title") String signerTitle,
            @JsonProperty("signed_by_ip_address") Optional<String> signedByIpAddress,
            @JsonProperty("agree") boolean agree,
            @JsonProperty("additional_info") Optional<String> additionalInfo,
            @JsonProperty("alt_procedure") Optional<Boolean> altProcedure) {
        Utils.checkNotNull(signatureText, "signatureText");
        Utils.checkNotNull(signerTitle, "signerTitle");
        Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
        Utils.checkNotNull(agree, "agree");
        Utils.checkNotNull(additionalInfo, "additionalInfo");
        Utils.checkNotNull(altProcedure, "altProcedure");
        this.signatureText = signatureText;
        this.signerTitle = signerTitle;
        this.signedByIpAddress = signedByIpAddress;
        this.agree = agree;
        this.additionalInfo = additionalInfo;
        this.altProcedure = altProcedure;
    }
    
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody(
            String signatureText,
            String signerTitle,
            boolean agree) {
        this(signatureText, signerTitle, Optional.empty(), agree, Optional.empty(), Optional.empty());
    }

    /**
     * The signature
     */
    @JsonIgnore
    public String signatureText() {
        return signatureText;
    }

    /**
     * The signer's job title
     */
    @JsonIgnore
    public String signerTitle() {
        return signerTitle;
    }

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    @JsonIgnore
    public Optional<String> signedByIpAddress() {
        return signedByIpAddress;
    }

    /**
     * Whether you agree to sign electronically
     */
    @JsonIgnore
    public boolean agree() {
        return agree;
    }

    /**
     * Any additional notes
     */
    @JsonIgnore
    public Optional<String> additionalInfo() {
        return additionalInfo;
    }

    /**
     * Whether an alternative procedure authorized by DHS to examine documents was used
     */
    @JsonIgnore
    public Optional<Boolean> altProcedure() {
        return altProcedure;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The signature
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withSignatureText(String signatureText) {
        Utils.checkNotNull(signatureText, "signatureText");
        this.signatureText = signatureText;
        return this;
    }

    /**
     * The signer's job title
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withSignerTitle(String signerTitle) {
        Utils.checkNotNull(signerTitle, "signerTitle");
        this.signerTitle = signerTitle;
        return this;
    }

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withSignedByIpAddress(String signedByIpAddress) {
        Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
        this.signedByIpAddress = Optional.ofNullable(signedByIpAddress);
        return this;
    }

    /**
     * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withSignedByIpAddress(Optional<String> signedByIpAddress) {
        Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
        this.signedByIpAddress = signedByIpAddress;
        return this;
    }

    /**
     * Whether you agree to sign electronically
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withAgree(boolean agree) {
        Utils.checkNotNull(agree, "agree");
        this.agree = agree;
        return this;
    }

    /**
     * Any additional notes
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withAdditionalInfo(String additionalInfo) {
        Utils.checkNotNull(additionalInfo, "additionalInfo");
        this.additionalInfo = Optional.ofNullable(additionalInfo);
        return this;
    }

    /**
     * Any additional notes
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withAdditionalInfo(Optional<String> additionalInfo) {
        Utils.checkNotNull(additionalInfo, "additionalInfo");
        this.additionalInfo = additionalInfo;
        return this;
    }

    /**
     * Whether an alternative procedure authorized by DHS to examine documents was used
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withAltProcedure(boolean altProcedure) {
        Utils.checkNotNull(altProcedure, "altProcedure");
        this.altProcedure = Optional.ofNullable(altProcedure);
        return this;
    }

    /**
     * Whether an alternative procedure authorized by DHS to examine documents was used
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody withAltProcedure(Optional<Boolean> altProcedure) {
        Utils.checkNotNull(altProcedure, "altProcedure");
        this.altProcedure = altProcedure;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody other = (PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody) o;
        return 
            Objects.deepEquals(this.signatureText, other.signatureText) &&
            Objects.deepEquals(this.signerTitle, other.signerTitle) &&
            Objects.deepEquals(this.signedByIpAddress, other.signedByIpAddress) &&
            Objects.deepEquals(this.agree, other.agree) &&
            Objects.deepEquals(this.additionalInfo, other.additionalInfo) &&
            Objects.deepEquals(this.altProcedure, other.altProcedure);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            signatureText,
            signerTitle,
            signedByIpAddress,
            agree,
            additionalInfo,
            altProcedure);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody.class,
                "signatureText", signatureText,
                "signerTitle", signerTitle,
                "signedByIpAddress", signedByIpAddress,
                "agree", agree,
                "additionalInfo", additionalInfo,
                "altProcedure", altProcedure);
    }
    
    public final static class Builder {
 
        private String signatureText;
 
        private String signerTitle;
 
        private Optional<String> signedByIpAddress = Optional.empty();
 
        private Boolean agree;
 
        private Optional<String> additionalInfo = Optional.empty();
 
        private Optional<Boolean> altProcedure = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The signature
         */
        public Builder signatureText(String signatureText) {
            Utils.checkNotNull(signatureText, "signatureText");
            this.signatureText = signatureText;
            return this;
        }

        /**
         * The signer's job title
         */
        public Builder signerTitle(String signerTitle) {
            Utils.checkNotNull(signerTitle, "signerTitle");
            this.signerTitle = signerTitle;
            return this;
        }

        /**
         * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
         */
        public Builder signedByIpAddress(String signedByIpAddress) {
            Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
            this.signedByIpAddress = Optional.ofNullable(signedByIpAddress);
            return this;
        }

        /**
         * The IP address of the signatory who signed the form. Both IPv4 AND IPv6 are supported. You must provide the IP address with either this parameter OR you can leave out this parameter and set the IP address in the request header using the `x-gusto-client-ip` header instead.
         */
        public Builder signedByIpAddress(Optional<String> signedByIpAddress) {
            Utils.checkNotNull(signedByIpAddress, "signedByIpAddress");
            this.signedByIpAddress = signedByIpAddress;
            return this;
        }

        /**
         * Whether you agree to sign electronically
         */
        public Builder agree(boolean agree) {
            Utils.checkNotNull(agree, "agree");
            this.agree = agree;
            return this;
        }

        /**
         * Any additional notes
         */
        public Builder additionalInfo(String additionalInfo) {
            Utils.checkNotNull(additionalInfo, "additionalInfo");
            this.additionalInfo = Optional.ofNullable(additionalInfo);
            return this;
        }

        /**
         * Any additional notes
         */
        public Builder additionalInfo(Optional<String> additionalInfo) {
            Utils.checkNotNull(additionalInfo, "additionalInfo");
            this.additionalInfo = additionalInfo;
            return this;
        }

        /**
         * Whether an alternative procedure authorized by DHS to examine documents was used
         */
        public Builder altProcedure(boolean altProcedure) {
            Utils.checkNotNull(altProcedure, "altProcedure");
            this.altProcedure = Optional.ofNullable(altProcedure);
            return this;
        }

        /**
         * Whether an alternative procedure authorized by DHS to examine documents was used
         */
        public Builder altProcedure(Optional<Boolean> altProcedure) {
            Utils.checkNotNull(altProcedure, "altProcedure");
            this.altProcedure = altProcedure;
            return this;
        }
        
        public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody build() {
            return new PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody(
                signatureText,
                signerTitle,
                signedByIpAddress,
                agree,
                additionalInfo,
                altProcedure);
        }
    }
}

