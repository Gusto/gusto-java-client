/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.utils.SpeakeasyMetadata;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class GetV1CompaniesCompanyIdPayPeriodsRequest {

    /**
     * The UUID of the company
     */
    @SpeakeasyMetadata("pathParam:style=simple,explode=false,name=company_id")
    private String companyId;

    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=start_date")
    private Optional<String> startDate;

    /**
     * If left empty, defaults to today's date.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=end_date")
    private Optional<String> endDate;

    /**
     * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=payroll_types")
    private Optional<String> payrollTypes;

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Gusto-API-Version")
    private Optional<? extends VersionHeader> xGustoAPIVersion;

    @JsonCreator
    public GetV1CompaniesCompanyIdPayPeriodsRequest(
            String companyId,
            Optional<String> startDate,
            Optional<String> endDate,
            Optional<String> payrollTypes,
            Optional<? extends VersionHeader> xGustoAPIVersion) {
        Utils.checkNotNull(companyId, "companyId");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(payrollTypes, "payrollTypes");
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.companyId = companyId;
        this.startDate = startDate;
        this.endDate = endDate;
        this.payrollTypes = payrollTypes;
        this.xGustoAPIVersion = xGustoAPIVersion;
    }
    
    public GetV1CompaniesCompanyIdPayPeriodsRequest(
            String companyId) {
        this(companyId, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the company
     */
    @JsonIgnore
    public String companyId() {
        return companyId;
    }

    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * If left empty, defaults to today's date.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
     */
    @JsonIgnore
    public Optional<String> payrollTypes() {
        return payrollTypes;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VersionHeader> xGustoAPIVersion() {
        return (Optional<VersionHeader>) xGustoAPIVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the company
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withCompanyId(String companyId) {
        Utils.checkNotNull(companyId, "companyId");
        this.companyId = companyId;
        return this;
    }

    public GetV1CompaniesCompanyIdPayPeriodsRequest withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    public GetV1CompaniesCompanyIdPayPeriodsRequest withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * If left empty, defaults to today's date.
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * If left empty, defaults to today's date.
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withPayrollTypes(String payrollTypes) {
        Utils.checkNotNull(payrollTypes, "payrollTypes");
        this.payrollTypes = Optional.ofNullable(payrollTypes);
        return this;
    }

    /**
     * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withPayrollTypes(Optional<String> payrollTypes) {
        Utils.checkNotNull(payrollTypes, "payrollTypes");
        this.payrollTypes = payrollTypes;
        return this;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withXGustoAPIVersion(VersionHeader xGustoAPIVersion) {
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.xGustoAPIVersion = Optional.ofNullable(xGustoAPIVersion);
        return this;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    public GetV1CompaniesCompanyIdPayPeriodsRequest withXGustoAPIVersion(Optional<? extends VersionHeader> xGustoAPIVersion) {
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.xGustoAPIVersion = xGustoAPIVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetV1CompaniesCompanyIdPayPeriodsRequest other = (GetV1CompaniesCompanyIdPayPeriodsRequest) o;
        return 
            Objects.deepEquals(this.companyId, other.companyId) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.payrollTypes, other.payrollTypes) &&
            Objects.deepEquals(this.xGustoAPIVersion, other.xGustoAPIVersion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyId,
            startDate,
            endDate,
            payrollTypes,
            xGustoAPIVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetV1CompaniesCompanyIdPayPeriodsRequest.class,
                "companyId", companyId,
                "startDate", startDate,
                "endDate", endDate,
                "payrollTypes", payrollTypes,
                "xGustoAPIVersion", xGustoAPIVersion);
    }
    
    public final static class Builder {
 
        private String companyId;
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<String> payrollTypes = Optional.empty();
 
        private Optional<? extends VersionHeader> xGustoAPIVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the company
         */
        public Builder companyId(String companyId) {
            Utils.checkNotNull(companyId, "companyId");
            this.companyId = companyId;
            return this;
        }

        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * If left empty, defaults to today's date.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * If left empty, defaults to today's date.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
         */
        public Builder payrollTypes(String payrollTypes) {
            Utils.checkNotNull(payrollTypes, "payrollTypes");
            this.payrollTypes = Optional.ofNullable(payrollTypes);
            return this;
        }

        /**
         * regular and/or transition. Multiple options are comma separated. The default is regular pay periods if nothing is passed in.
         */
        public Builder payrollTypes(Optional<String> payrollTypes) {
            Utils.checkNotNull(payrollTypes, "payrollTypes");
            this.payrollTypes = payrollTypes;
            return this;
        }

        /**
         * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         */
        public Builder xGustoAPIVersion(VersionHeader xGustoAPIVersion) {
            Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
            this.xGustoAPIVersion = Optional.ofNullable(xGustoAPIVersion);
            return this;
        }

        /**
         * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         */
        public Builder xGustoAPIVersion(Optional<? extends VersionHeader> xGustoAPIVersion) {
            Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        public GetV1CompaniesCompanyIdPayPeriodsRequest build() {
            return new GetV1CompaniesCompanyIdPayPeriodsRequest(
                companyId,
                startDate,
                endDate,
                payrollTypes,
                xGustoAPIVersion);
        }
    }
}

