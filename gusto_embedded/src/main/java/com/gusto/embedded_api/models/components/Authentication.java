/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * Authentication
 * 
 * <p>Example response
 */

public class Authentication {

    /**
     * A new access token that can be used for subsequent authenticated requests
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private Optional<String> accessToken;

    /**
     * The literal string 'bearer'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("token_type")
    private Optional<String> tokenType;

    /**
     * The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    private Optional<Double> expiresIn;

    /**
     * A token that must be passed to the refresh token endpoint to get a new authenticated token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    private Optional<String> refreshToken;

    /**
     * Datetime for when the new access token is created.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("created_at")
    private Optional<String> createdAt;

    /**
     * All of the scopes for which the access token provides access.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("scope")
    private Optional<String> scope;

    @JsonCreator
    public Authentication(
            @JsonProperty("access_token") Optional<String> accessToken,
            @JsonProperty("token_type") Optional<String> tokenType,
            @JsonProperty("expires_in") Optional<Double> expiresIn,
            @JsonProperty("refresh_token") Optional<String> refreshToken,
            @JsonProperty("created_at") Optional<String> createdAt,
            @JsonProperty("scope") Optional<String> scope) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(tokenType, "tokenType");
        Utils.checkNotNull(expiresIn, "expiresIn");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(createdAt, "createdAt");
        Utils.checkNotNull(scope, "scope");
        this.accessToken = accessToken;
        this.tokenType = tokenType;
        this.expiresIn = expiresIn;
        this.refreshToken = refreshToken;
        this.createdAt = createdAt;
        this.scope = scope;
    }
    
    public Authentication() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A new access token that can be used for subsequent authenticated requests
     */
    @JsonIgnore
    public Optional<String> accessToken() {
        return accessToken;
    }

    /**
     * The literal string 'bearer'
     */
    @JsonIgnore
    public Optional<String> tokenType() {
        return tokenType;
    }

    /**
     * The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
     */
    @JsonIgnore
    public Optional<Double> expiresIn() {
        return expiresIn;
    }

    /**
     * A token that must be passed to the refresh token endpoint to get a new authenticated token.
     */
    @JsonIgnore
    public Optional<String> refreshToken() {
        return refreshToken;
    }

    /**
     * Datetime for when the new access token is created.
     */
    @JsonIgnore
    public Optional<String> createdAt() {
        return createdAt;
    }

    /**
     * All of the scopes for which the access token provides access.
     */
    @JsonIgnore
    public Optional<String> scope() {
        return scope;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A new access token that can be used for subsequent authenticated requests
     */
    public Authentication withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = Optional.ofNullable(accessToken);
        return this;
    }

    /**
     * A new access token that can be used for subsequent authenticated requests
     */
    public Authentication withAccessToken(Optional<String> accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * The literal string 'bearer'
     */
    public Authentication withTokenType(String tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = Optional.ofNullable(tokenType);
        return this;
    }

    /**
     * The literal string 'bearer'
     */
    public Authentication withTokenType(Optional<String> tokenType) {
        Utils.checkNotNull(tokenType, "tokenType");
        this.tokenType = tokenType;
        return this;
    }

    /**
     * The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
     */
    public Authentication withExpiresIn(double expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = Optional.ofNullable(expiresIn);
        return this;
    }

    /**
     * The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
     */
    public Authentication withExpiresIn(Optional<Double> expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }

    /**
     * A token that must be passed to the refresh token endpoint to get a new authenticated token.
     */
    public Authentication withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = Optional.ofNullable(refreshToken);
        return this;
    }

    /**
     * A token that must be passed to the refresh token endpoint to get a new authenticated token.
     */
    public Authentication withRefreshToken(Optional<String> refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Datetime for when the new access token is created.
     */
    public Authentication withCreatedAt(String createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = Optional.ofNullable(createdAt);
        return this;
    }

    /**
     * Datetime for when the new access token is created.
     */
    public Authentication withCreatedAt(Optional<String> createdAt) {
        Utils.checkNotNull(createdAt, "createdAt");
        this.createdAt = createdAt;
        return this;
    }

    /**
     * All of the scopes for which the access token provides access.
     */
    public Authentication withScope(String scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = Optional.ofNullable(scope);
        return this;
    }

    /**
     * All of the scopes for which the access token provides access.
     */
    public Authentication withScope(Optional<String> scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Authentication other = (Authentication) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.tokenType, other.tokenType) &&
            Objects.deepEquals(this.expiresIn, other.expiresIn) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.createdAt, other.createdAt) &&
            Objects.deepEquals(this.scope, other.scope);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            tokenType,
            expiresIn,
            refreshToken,
            createdAt,
            scope);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Authentication.class,
                "accessToken", accessToken,
                "tokenType", tokenType,
                "expiresIn", expiresIn,
                "refreshToken", refreshToken,
                "createdAt", createdAt,
                "scope", scope);
    }
    
    public final static class Builder {
 
        private Optional<String> accessToken = Optional.empty();
 
        private Optional<String> tokenType;
 
        private Optional<Double> expiresIn;
 
        private Optional<String> refreshToken = Optional.empty();
 
        private Optional<String> createdAt = Optional.empty();
 
        private Optional<String> scope = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A new access token that can be used for subsequent authenticated requests
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * A new access token that can be used for subsequent authenticated requests
         */
        public Builder accessToken(Optional<String> accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * The literal string 'bearer'
         */
        public Builder tokenType(String tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = Optional.ofNullable(tokenType);
            return this;
        }

        /**
         * The literal string 'bearer'
         */
        public Builder tokenType(Optional<String> tokenType) {
            Utils.checkNotNull(tokenType, "tokenType");
            this.tokenType = tokenType;
            return this;
        }

        /**
         * The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
         */
        public Builder expiresIn(double expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = Optional.ofNullable(expiresIn);
            return this;
        }

        /**
         * The TTL of this token. After this amount of time, you must hit the refresh token endpoint to continue making authenticated requests.
         */
        public Builder expiresIn(Optional<Double> expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }

        /**
         * A token that must be passed to the refresh token endpoint to get a new authenticated token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        /**
         * A token that must be passed to the refresh token endpoint to get a new authenticated token.
         */
        public Builder refreshToken(Optional<String> refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Datetime for when the new access token is created.
         */
        public Builder createdAt(String createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = Optional.ofNullable(createdAt);
            return this;
        }

        /**
         * Datetime for when the new access token is created.
         */
        public Builder createdAt(Optional<String> createdAt) {
            Utils.checkNotNull(createdAt, "createdAt");
            this.createdAt = createdAt;
            return this;
        }

        /**
         * All of the scopes for which the access token provides access.
         */
        public Builder scope(String scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = Optional.ofNullable(scope);
            return this;
        }

        /**
         * All of the scopes for which the access token provides access.
         */
        public Builder scope(Optional<String> scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }
        
        public Authentication build() {
            if (tokenType == null) {
                tokenType = _SINGLETON_VALUE_TokenType.value();
            }
            if (expiresIn == null) {
                expiresIn = _SINGLETON_VALUE_ExpiresIn.value();
            }            return new Authentication(
                accessToken,
                tokenType,
                expiresIn,
                refreshToken,
                createdAt,
                scope);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_TokenType =
                new LazySingletonValue<>(
                        "token_type",
                        "\"bearer\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Double>> _SINGLETON_VALUE_ExpiresIn =
                new LazySingletonValue<>(
                        "expires_in",
                        "7200",
                        new TypeReference<Optional<Double>>() {});
    }
}

