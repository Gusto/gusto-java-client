/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;


public class OnboardingStep {

    /**
     * The display name of the onboarding step
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * The string identifier for each onboarding step
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<? extends Id> id;

    /**
     * The boolean flag indicating whether the step is required or optional
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("required")
    private Optional<Boolean> required;

    /**
     * The boolean flag indicating whether the step is completed or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("completed")
    private Optional<Boolean> completed;

    /**
     * The boolean flag indicating whether the step can be skipped or not.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skippable")
    private Optional<Boolean> skippable;

    /**
     * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("requirements")
    private Optional<? extends List<Requirements>> requirements;

    @JsonCreator
    public OnboardingStep(
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("id") Optional<? extends Id> id,
            @JsonProperty("required") Optional<Boolean> required,
            @JsonProperty("completed") Optional<Boolean> completed,
            @JsonProperty("skippable") Optional<Boolean> skippable,
            @JsonProperty("requirements") Optional<? extends List<Requirements>> requirements) {
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(required, "required");
        Utils.checkNotNull(completed, "completed");
        Utils.checkNotNull(skippable, "skippable");
        Utils.checkNotNull(requirements, "requirements");
        this.title = title;
        this.id = id;
        this.required = required;
        this.completed = completed;
        this.skippable = skippable;
        this.requirements = requirements;
    }
    
    public OnboardingStep() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The display name of the onboarding step
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * The string identifier for each onboarding step
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Id> id() {
        return (Optional<Id>) id;
    }

    /**
     * The boolean flag indicating whether the step is required or optional
     */
    @JsonIgnore
    public Optional<Boolean> required() {
        return required;
    }

    /**
     * The boolean flag indicating whether the step is completed or not.
     */
    @JsonIgnore
    public Optional<Boolean> completed() {
        return completed;
    }

    /**
     * The boolean flag indicating whether the step can be skipped or not.
     */
    @JsonIgnore
    public Optional<Boolean> skippable() {
        return skippable;
    }

    /**
     * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Requirements>> requirements() {
        return (Optional<List<Requirements>>) requirements;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The display name of the onboarding step
     */
    public OnboardingStep withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * The display name of the onboarding step
     */
    public OnboardingStep withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * The string identifier for each onboarding step
     */
    public OnboardingStep withId(Id id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    /**
     * The string identifier for each onboarding step
     */
    public OnboardingStep withId(Optional<? extends Id> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    /**
     * The boolean flag indicating whether the step is required or optional
     */
    public OnboardingStep withRequired(boolean required) {
        Utils.checkNotNull(required, "required");
        this.required = Optional.ofNullable(required);
        return this;
    }

    /**
     * The boolean flag indicating whether the step is required or optional
     */
    public OnboardingStep withRequired(Optional<Boolean> required) {
        Utils.checkNotNull(required, "required");
        this.required = required;
        return this;
    }

    /**
     * The boolean flag indicating whether the step is completed or not.
     */
    public OnboardingStep withCompleted(boolean completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = Optional.ofNullable(completed);
        return this;
    }

    /**
     * The boolean flag indicating whether the step is completed or not.
     */
    public OnboardingStep withCompleted(Optional<Boolean> completed) {
        Utils.checkNotNull(completed, "completed");
        this.completed = completed;
        return this;
    }

    /**
     * The boolean flag indicating whether the step can be skipped or not.
     */
    public OnboardingStep withSkippable(boolean skippable) {
        Utils.checkNotNull(skippable, "skippable");
        this.skippable = Optional.ofNullable(skippable);
        return this;
    }

    /**
     * The boolean flag indicating whether the step can be skipped or not.
     */
    public OnboardingStep withSkippable(Optional<Boolean> skippable) {
        Utils.checkNotNull(skippable, "skippable");
        this.skippable = skippable;
        return this;
    }

    /**
     * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
     */
    public OnboardingStep withRequirements(List<Requirements> requirements) {
        Utils.checkNotNull(requirements, "requirements");
        this.requirements = Optional.ofNullable(requirements);
        return this;
    }

    /**
     * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
     */
    public OnboardingStep withRequirements(Optional<? extends List<Requirements>> requirements) {
        Utils.checkNotNull(requirements, "requirements");
        this.requirements = requirements;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        OnboardingStep other = (OnboardingStep) o;
        return 
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.required, other.required) &&
            Objects.deepEquals(this.completed, other.completed) &&
            Objects.deepEquals(this.skippable, other.skippable) &&
            Objects.deepEquals(this.requirements, other.requirements);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            title,
            id,
            required,
            completed,
            skippable,
            requirements);
    }
    
    @Override
    public String toString() {
        return Utils.toString(OnboardingStep.class,
                "title", title,
                "id", id,
                "required", required,
                "completed", completed,
                "skippable", skippable,
                "requirements", requirements);
    }
    
    public final static class Builder {
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends Id> id = Optional.empty();
 
        private Optional<Boolean> required = Optional.empty();
 
        private Optional<Boolean> completed = Optional.empty();
 
        private Optional<Boolean> skippable = Optional.empty();
 
        private Optional<? extends List<Requirements>> requirements = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The display name of the onboarding step
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * The display name of the onboarding step
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * The string identifier for each onboarding step
         */
        public Builder id(Id id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        /**
         * The string identifier for each onboarding step
         */
        public Builder id(Optional<? extends Id> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        /**
         * The boolean flag indicating whether the step is required or optional
         */
        public Builder required(boolean required) {
            Utils.checkNotNull(required, "required");
            this.required = Optional.ofNullable(required);
            return this;
        }

        /**
         * The boolean flag indicating whether the step is required or optional
         */
        public Builder required(Optional<Boolean> required) {
            Utils.checkNotNull(required, "required");
            this.required = required;
            return this;
        }

        /**
         * The boolean flag indicating whether the step is completed or not.
         */
        public Builder completed(boolean completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = Optional.ofNullable(completed);
            return this;
        }

        /**
         * The boolean flag indicating whether the step is completed or not.
         */
        public Builder completed(Optional<Boolean> completed) {
            Utils.checkNotNull(completed, "completed");
            this.completed = completed;
            return this;
        }

        /**
         * The boolean flag indicating whether the step can be skipped or not.
         */
        public Builder skippable(boolean skippable) {
            Utils.checkNotNull(skippable, "skippable");
            this.skippable = Optional.ofNullable(skippable);
            return this;
        }

        /**
         * The boolean flag indicating whether the step can be skipped or not.
         */
        public Builder skippable(Optional<Boolean> skippable) {
            Utils.checkNotNull(skippable, "skippable");
            this.skippable = skippable;
            return this;
        }

        /**
         * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
         */
        public Builder requirements(List<Requirements> requirements) {
            Utils.checkNotNull(requirements, "requirements");
            this.requirements = Optional.ofNullable(requirements);
            return this;
        }

        /**
         * A list of onboarding step that are required to be completed in order to proceed with the current onboarding step.
         */
        public Builder requirements(Optional<? extends List<Requirements>> requirements) {
            Utils.checkNotNull(requirements, "requirements");
            this.requirements = requirements;
            return this;
        }
        
        public OnboardingStep build() {
            return new OnboardingStep(
                title,
                id,
                required,
                completed,
                skippable,
                requirements);
        }
    }
}

