/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;


public class PutV1WorkAddressesWorkAddressUuidRequestBody {

    /**
     * Reference to a company location
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("location_uuid")
    private Optional<String> locationUuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    private Optional<LocalDate> effectiveDate;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    @JsonCreator
    public PutV1WorkAddressesWorkAddressUuidRequestBody(
            @JsonProperty("location_uuid") Optional<String> locationUuid,
            @JsonProperty("effective_date") Optional<LocalDate> effectiveDate,
            @JsonProperty("version") String version) {
        Utils.checkNotNull(locationUuid, "locationUuid");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(version, "version");
        this.locationUuid = locationUuid;
        this.effectiveDate = effectiveDate;
        this.version = version;
    }
    
    public PutV1WorkAddressesWorkAddressUuidRequestBody(
            String version) {
        this(Optional.empty(), Optional.empty(), version);
    }

    /**
     * Reference to a company location
     */
    @JsonIgnore
    public Optional<String> locationUuid() {
        return locationUuid;
    }

    @JsonIgnore
    public Optional<LocalDate> effectiveDate() {
        return effectiveDate;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Reference to a company location
     */
    public PutV1WorkAddressesWorkAddressUuidRequestBody withLocationUuid(String locationUuid) {
        Utils.checkNotNull(locationUuid, "locationUuid");
        this.locationUuid = Optional.ofNullable(locationUuid);
        return this;
    }

    /**
     * Reference to a company location
     */
    public PutV1WorkAddressesWorkAddressUuidRequestBody withLocationUuid(Optional<String> locationUuid) {
        Utils.checkNotNull(locationUuid, "locationUuid");
        this.locationUuid = locationUuid;
        return this;
    }

    public PutV1WorkAddressesWorkAddressUuidRequestBody withEffectiveDate(LocalDate effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = Optional.ofNullable(effectiveDate);
        return this;
    }

    public PutV1WorkAddressesWorkAddressUuidRequestBody withEffectiveDate(Optional<LocalDate> effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public PutV1WorkAddressesWorkAddressUuidRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1WorkAddressesWorkAddressUuidRequestBody other = (PutV1WorkAddressesWorkAddressUuidRequestBody) o;
        return 
            Objects.deepEquals(this.locationUuid, other.locationUuid) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.version, other.version);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            locationUuid,
            effectiveDate,
            version);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1WorkAddressesWorkAddressUuidRequestBody.class,
                "locationUuid", locationUuid,
                "effectiveDate", effectiveDate,
                "version", version);
    }
    
    public final static class Builder {
 
        private Optional<String> locationUuid = Optional.empty();
 
        private Optional<LocalDate> effectiveDate = Optional.empty();
 
        private String version;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Reference to a company location
         */
        public Builder locationUuid(String locationUuid) {
            Utils.checkNotNull(locationUuid, "locationUuid");
            this.locationUuid = Optional.ofNullable(locationUuid);
            return this;
        }

        /**
         * Reference to a company location
         */
        public Builder locationUuid(Optional<String> locationUuid) {
            Utils.checkNotNull(locationUuid, "locationUuid");
            this.locationUuid = locationUuid;
            return this;
        }

        public Builder effectiveDate(LocalDate effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = Optional.ofNullable(effectiveDate);
            return this;
        }

        public Builder effectiveDate(Optional<LocalDate> effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }
        
        public PutV1WorkAddressesWorkAddressUuidRequestBody build() {
            return new PutV1WorkAddressesWorkAddressUuidRequestBody(
                locationUuid,
                effectiveDate,
                version);
        }
    }
}

