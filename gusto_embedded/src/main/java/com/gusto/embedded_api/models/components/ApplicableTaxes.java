/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;

public class ApplicableTaxes {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("id")
    private Optional<Long> id;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employer_tax")
    private Optional<Boolean> employerTax;

    /**
     * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("resident_tax")
    private Optional<Boolean> residentTax;

    @JsonCreator
    public ApplicableTaxes(
            @JsonProperty("id") Optional<Long> id,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("employer_tax") Optional<Boolean> employerTax,
            @JsonProperty("resident_tax") Optional<Boolean> residentTax) {
        Utils.checkNotNull(id, "id");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(employerTax, "employerTax");
        Utils.checkNotNull(residentTax, "residentTax");
        this.id = id;
        this.name = name;
        this.employerTax = employerTax;
        this.residentTax = residentTax;
    }
    
    public ApplicableTaxes() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> id() {
        return id;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
     */
    @JsonIgnore
    public Optional<Boolean> employerTax() {
        return employerTax;
    }

    /**
     * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
     */
    @JsonIgnore
    public Optional<Boolean> residentTax() {
        return residentTax;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApplicableTaxes withId(long id) {
        Utils.checkNotNull(id, "id");
        this.id = Optional.ofNullable(id);
        return this;
    }

    public ApplicableTaxes withId(Optional<Long> id) {
        Utils.checkNotNull(id, "id");
        this.id = id;
        return this;
    }

    public ApplicableTaxes withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ApplicableTaxes withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
     */
    public ApplicableTaxes withEmployerTax(boolean employerTax) {
        Utils.checkNotNull(employerTax, "employerTax");
        this.employerTax = Optional.ofNullable(employerTax);
        return this;
    }

    /**
     * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
     */
    public ApplicableTaxes withEmployerTax(Optional<Boolean> employerTax) {
        Utils.checkNotNull(employerTax, "employerTax");
        this.employerTax = employerTax;
        return this;
    }

    /**
     * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
     */
    public ApplicableTaxes withResidentTax(boolean residentTax) {
        Utils.checkNotNull(residentTax, "residentTax");
        this.residentTax = Optional.ofNullable(residentTax);
        return this;
    }

    /**
     * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
     */
    public ApplicableTaxes withResidentTax(Optional<Boolean> residentTax) {
        Utils.checkNotNull(residentTax, "residentTax");
        this.residentTax = residentTax;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicableTaxes other = (ApplicableTaxes) o;
        return 
            Objects.deepEquals(this.id, other.id) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.employerTax, other.employerTax) &&
            Objects.deepEquals(this.residentTax, other.residentTax);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            id,
            name,
            employerTax,
            residentTax);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicableTaxes.class,
                "id", id,
                "name", name,
                "employerTax", employerTax,
                "residentTax", residentTax);
    }
    
    public final static class Builder {
 
        private Optional<Long> id = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<Boolean> employerTax = Optional.empty();
 
        private Optional<Boolean> residentTax = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder id(long id) {
            Utils.checkNotNull(id, "id");
            this.id = Optional.ofNullable(id);
            return this;
        }

        public Builder id(Optional<Long> id) {
            Utils.checkNotNull(id, "id");
            this.id = id;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
         */
        public Builder employerTax(boolean employerTax) {
            Utils.checkNotNull(employerTax, "employerTax");
            this.employerTax = Optional.ofNullable(employerTax);
            return this;
        }

        /**
         * Some taxes may have an amount withheld from the employee and an amount withheld from the employer, e.g. Social Security. A `true` value indicates this is the employer's amount.
         */
        public Builder employerTax(Optional<Boolean> employerTax) {
            Utils.checkNotNull(employerTax, "employerTax");
            this.employerTax = employerTax;
            return this;
        }

        /**
         * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
         */
        public Builder residentTax(boolean residentTax) {
            Utils.checkNotNull(residentTax, "residentTax");
            this.residentTax = Optional.ofNullable(residentTax);
            return this;
        }

        /**
         * Some taxes may have different rates or reporting requirements depending on if the employee is a resident or non-resident of the tax jurisdiction.
         */
        public Builder residentTax(Optional<Boolean> residentTax) {
            Utils.checkNotNull(residentTax, "residentTax");
            this.residentTax = residentTax;
            return this;
        }
        
        public ApplicableTaxes build() {
            return new ApplicableTaxes(
                id,
                name,
                employerTax,
                residentTax);
        }
    }
}

