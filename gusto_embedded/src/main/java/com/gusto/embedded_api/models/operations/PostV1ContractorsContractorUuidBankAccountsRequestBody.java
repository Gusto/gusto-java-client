/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;


public class PostV1ContractorsContractorUuidBankAccountsRequestBody {

    @JsonProperty("name")
    private String name;

    @JsonProperty("routing_number")
    private String routingNumber;

    @JsonProperty("account_number")
    private String accountNumber;

    @JsonProperty("account_type")
    private PostV1ContractorsContractorUuidBankAccountsAccountType accountType;

    @JsonCreator
    public PostV1ContractorsContractorUuidBankAccountsRequestBody(
            @JsonProperty("name") String name,
            @JsonProperty("routing_number") String routingNumber,
            @JsonProperty("account_number") String accountNumber,
            @JsonProperty("account_type") PostV1ContractorsContractorUuidBankAccountsAccountType accountType) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(routingNumber, "routingNumber");
        Utils.checkNotNull(accountNumber, "accountNumber");
        Utils.checkNotNull(accountType, "accountType");
        this.name = name;
        this.routingNumber = routingNumber;
        this.accountNumber = accountNumber;
        this.accountType = accountType;
    }

    @JsonIgnore
    public String name() {
        return name;
    }

    @JsonIgnore
    public String routingNumber() {
        return routingNumber;
    }

    @JsonIgnore
    public String accountNumber() {
        return accountNumber;
    }

    @JsonIgnore
    public PostV1ContractorsContractorUuidBankAccountsAccountType accountType() {
        return accountType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PostV1ContractorsContractorUuidBankAccountsRequestBody withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public PostV1ContractorsContractorUuidBankAccountsRequestBody withRoutingNumber(String routingNumber) {
        Utils.checkNotNull(routingNumber, "routingNumber");
        this.routingNumber = routingNumber;
        return this;
    }

    public PostV1ContractorsContractorUuidBankAccountsRequestBody withAccountNumber(String accountNumber) {
        Utils.checkNotNull(accountNumber, "accountNumber");
        this.accountNumber = accountNumber;
        return this;
    }

    public PostV1ContractorsContractorUuidBankAccountsRequestBody withAccountType(PostV1ContractorsContractorUuidBankAccountsAccountType accountType) {
        Utils.checkNotNull(accountType, "accountType");
        this.accountType = accountType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1ContractorsContractorUuidBankAccountsRequestBody other = (PostV1ContractorsContractorUuidBankAccountsRequestBody) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.routingNumber, other.routingNumber) &&
            Objects.deepEquals(this.accountNumber, other.accountNumber) &&
            Objects.deepEquals(this.accountType, other.accountType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            routingNumber,
            accountNumber,
            accountType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1ContractorsContractorUuidBankAccountsRequestBody.class,
                "name", name,
                "routingNumber", routingNumber,
                "accountNumber", accountNumber,
                "accountType", accountType);
    }
    
    public final static class Builder {
 
        private String name;
 
        private String routingNumber;
 
        private String accountNumber;
 
        private PostV1ContractorsContractorUuidBankAccountsAccountType accountType;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder routingNumber(String routingNumber) {
            Utils.checkNotNull(routingNumber, "routingNumber");
            this.routingNumber = routingNumber;
            return this;
        }

        public Builder accountNumber(String accountNumber) {
            Utils.checkNotNull(accountNumber, "accountNumber");
            this.accountNumber = accountNumber;
            return this;
        }

        public Builder accountType(PostV1ContractorsContractorUuidBankAccountsAccountType accountType) {
            Utils.checkNotNull(accountType, "accountType");
            this.accountType = accountType;
            return this;
        }
        
        public PostV1ContractorsContractorUuidBankAccountsRequestBody build() {
            return new PostV1ContractorsContractorUuidBankAccountsRequestBody(
                name,
                routingNumber,
                accountNumber,
                accountType);
        }
    }
}

