/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;

public class Department {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * The UUID of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * The UUID of the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * Name of the department
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("title")
    private Optional<String> title;

    /**
     * Array of employees assigned to the department.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees")
    private Optional<? extends List<DepartmentEmployees>> employees;

    /**
     * Array of contractors assigned to the department.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractors")
    private Optional<? extends List<Contractors>> contractors;

    @JsonCreator
    public Department(
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("title") Optional<String> title,
            @JsonProperty("employees") Optional<? extends List<DepartmentEmployees>> employees,
            @JsonProperty("contractors") Optional<? extends List<Contractors>> contractors) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(title, "title");
        Utils.checkNotNull(employees, "employees");
        Utils.checkNotNull(contractors, "contractors");
        this.version = version;
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.title = title;
        this.employees = employees;
        this.contractors = contractors;
    }
    
    public Department() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * The UUID of the department
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * The UUID of the company
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * Name of the department
     */
    @JsonIgnore
    public Optional<String> title() {
        return title;
    }

    /**
     * Array of employees assigned to the department.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<DepartmentEmployees>> employees() {
        return (Optional<List<DepartmentEmployees>>) employees;
    }

    /**
     * Array of contractors assigned to the department.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Contractors>> contractors() {
        return (Optional<List<Contractors>>) contractors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Department withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Department withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The UUID of the department
     */
    public Department withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * The UUID of the department
     */
    public Department withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The UUID of the company
     */
    public Department withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * The UUID of the company
     */
    public Department withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * Name of the department
     */
    public Department withTitle(String title) {
        Utils.checkNotNull(title, "title");
        this.title = Optional.ofNullable(title);
        return this;
    }

    /**
     * Name of the department
     */
    public Department withTitle(Optional<String> title) {
        Utils.checkNotNull(title, "title");
        this.title = title;
        return this;
    }

    /**
     * Array of employees assigned to the department.
     */
    public Department withEmployees(List<DepartmentEmployees> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = Optional.ofNullable(employees);
        return this;
    }

    /**
     * Array of employees assigned to the department.
     */
    public Department withEmployees(Optional<? extends List<DepartmentEmployees>> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }

    /**
     * Array of contractors assigned to the department.
     */
    public Department withContractors(List<Contractors> contractors) {
        Utils.checkNotNull(contractors, "contractors");
        this.contractors = Optional.ofNullable(contractors);
        return this;
    }

    /**
     * Array of contractors assigned to the department.
     */
    public Department withContractors(Optional<? extends List<Contractors>> contractors) {
        Utils.checkNotNull(contractors, "contractors");
        this.contractors = contractors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Department other = (Department) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.title, other.title) &&
            Objects.deepEquals(this.employees, other.employees) &&
            Objects.deepEquals(this.contractors, other.contractors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            uuid,
            companyUuid,
            title,
            employees,
            contractors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Department.class,
                "version", version,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "title", title,
                "employees", employees,
                "contractors", contractors);
    }
    
    public final static class Builder {
 
        private Optional<String> version = Optional.empty();
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> title = Optional.empty();
 
        private Optional<? extends List<DepartmentEmployees>> employees = Optional.empty();
 
        private Optional<? extends List<Contractors>> contractors = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The UUID of the department
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * The UUID of the department
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The UUID of the company
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * The UUID of the company
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * Name of the department
         */
        public Builder title(String title) {
            Utils.checkNotNull(title, "title");
            this.title = Optional.ofNullable(title);
            return this;
        }

        /**
         * Name of the department
         */
        public Builder title(Optional<String> title) {
            Utils.checkNotNull(title, "title");
            this.title = title;
            return this;
        }

        /**
         * Array of employees assigned to the department.
         */
        public Builder employees(List<DepartmentEmployees> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = Optional.ofNullable(employees);
            return this;
        }

        /**
         * Array of employees assigned to the department.
         */
        public Builder employees(Optional<? extends List<DepartmentEmployees>> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }

        /**
         * Array of contractors assigned to the department.
         */
        public Builder contractors(List<Contractors> contractors) {
            Utils.checkNotNull(contractors, "contractors");
            this.contractors = Optional.ofNullable(contractors);
            return this;
        }

        /**
         * Array of contractors assigned to the department.
         */
        public Builder contractors(Optional<? extends List<Contractors>> contractors) {
            Utils.checkNotNull(contractors, "contractors");
            this.contractors = contractors;
            return this;
        }
        
        public Department build() {
            return new Department(
                version,
                uuid,
                companyUuid,
                title,
                employees,
                contractors);
        }
    }
}

