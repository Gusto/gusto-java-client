/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class MinimumWages {

    /**
     * The UUID of the minimum wage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * The wage amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage")
    private Optional<String> wage;

    /**
     * The effective date of the minimum wage.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("effective_date")
    private Optional<String> effectiveDate;

    @JsonCreator
    public MinimumWages(
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("wage") Optional<String> wage,
            @JsonProperty("effective_date") Optional<String> effectiveDate) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(wage, "wage");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.uuid = uuid;
        this.wage = wage;
        this.effectiveDate = effectiveDate;
    }
    
    public MinimumWages() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the minimum wage.
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * The wage amount.
     */
    @JsonIgnore
    public Optional<String> wage() {
        return wage;
    }

    /**
     * The effective date of the minimum wage.
     */
    @JsonIgnore
    public Optional<String> effectiveDate() {
        return effectiveDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the minimum wage.
     */
    public MinimumWages withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * The UUID of the minimum wage.
     */
    public MinimumWages withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The wage amount.
     */
    public MinimumWages withWage(String wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = Optional.ofNullable(wage);
        return this;
    }

    /**
     * The wage amount.
     */
    public MinimumWages withWage(Optional<String> wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = wage;
        return this;
    }

    /**
     * The effective date of the minimum wage.
     */
    public MinimumWages withEffectiveDate(String effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = Optional.ofNullable(effectiveDate);
        return this;
    }

    /**
     * The effective date of the minimum wage.
     */
    public MinimumWages withEffectiveDate(Optional<String> effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MinimumWages other = (MinimumWages) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.wage, other.wage) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            wage,
            effectiveDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MinimumWages.class,
                "uuid", uuid,
                "wage", wage,
                "effectiveDate", effectiveDate);
    }
    
    public final static class Builder {
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<String> wage = Optional.empty();
 
        private Optional<String> effectiveDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the minimum wage.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * The UUID of the minimum wage.
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The wage amount.
         */
        public Builder wage(String wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = Optional.ofNullable(wage);
            return this;
        }

        /**
         * The wage amount.
         */
        public Builder wage(Optional<String> wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = wage;
            return this;
        }

        /**
         * The effective date of the minimum wage.
         */
        public Builder effectiveDate(String effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = Optional.ofNullable(effectiveDate);
            return this;
        }

        /**
         * The effective date of the minimum wage.
         */
        public Builder effectiveDate(Optional<String> effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }
        
        public MinimumWages build() {
            return new MinimumWages(
                uuid,
                wage,
                effectiveDate);
        }
    }
}

