/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;
/**
 * Contractor - The representation of a contractor (individual or business) in Gusto.
 */

public class Contractor {

    /**
     * The UUID of the contractor in Gusto.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The UUID of the company the contractor is employed by.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * The contractor's wage type, either "Fixed" or "Hourly".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage_type")
    private Optional<? extends WageType> wageType;

    /**
     * The status of the contractor with the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("version")
    private Optional<String> version;

    /**
     * The contractor's type, either "Individual" or "Business". 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends ContractorType> type;

    /**
     * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private JsonNullable<String> firstName;

    /**
     * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private JsonNullable<String> lastName;

    /**
     * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_initial")
    private JsonNullable<String> middleInitial;

    /**
     * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("business_name")
    private JsonNullable<String> businessName;

    /**
     * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ein")
    private JsonNullable<String> ein;

    /**
     * Whether company's Employer Identification Number (EIN) is present
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_ein")
    private JsonNullable<Boolean> hasEin;

    /**
     * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors. 
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private JsonNullable<String> email;

    /**
     * The contractor's start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * The contractor’s home address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private JsonNullable<? extends Address> address;

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_rate")
    private Optional<String> hourlyRate;

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_new_hire_report")
    private Optional<Boolean> fileNewHireReport;

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_state")
    private JsonNullable<String> workState;

    /**
     * The updated onboarding status for the contractor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarded")
    private Optional<Boolean> onboarded;

    /**
     * One of the "onboarding_status" enum values.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("onboarding_status")
    private Optional<? extends ContractorOnboardingStatus1> onboardingStatus;

    /**
     * The contractor's payment method.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private JsonNullable<? extends ContractorPaymentMethod1> paymentMethod;

    /**
     * Indicates whether the contractor has an SSN in Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("has_ssn")
    private Optional<Boolean> hasSsn;

    /**
     * The UUID of the department the contractor is under
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("department_uuid")
    private JsonNullable<String> departmentUuid;

    @JsonCreator
    public Contractor(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("wage_type") Optional<? extends WageType> wageType,
            @JsonProperty("is_active") Optional<Boolean> isActive,
            @JsonProperty("version") Optional<String> version,
            @JsonProperty("type") Optional<? extends ContractorType> type,
            @JsonProperty("first_name") JsonNullable<String> firstName,
            @JsonProperty("last_name") JsonNullable<String> lastName,
            @JsonProperty("middle_initial") JsonNullable<String> middleInitial,
            @JsonProperty("business_name") JsonNullable<String> businessName,
            @JsonProperty("ein") JsonNullable<String> ein,
            @JsonProperty("has_ein") JsonNullable<Boolean> hasEin,
            @JsonProperty("email") JsonNullable<String> email,
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("address") JsonNullable<? extends Address> address,
            @JsonProperty("hourly_rate") Optional<String> hourlyRate,
            @JsonProperty("file_new_hire_report") Optional<Boolean> fileNewHireReport,
            @JsonProperty("work_state") JsonNullable<String> workState,
            @JsonProperty("onboarded") Optional<Boolean> onboarded,
            @JsonProperty("onboarding_status") Optional<? extends ContractorOnboardingStatus1> onboardingStatus,
            @JsonProperty("payment_method") JsonNullable<? extends ContractorPaymentMethod1> paymentMethod,
            @JsonProperty("has_ssn") Optional<Boolean> hasSsn,
            @JsonProperty("department_uuid") JsonNullable<String> departmentUuid) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(wageType, "wageType");
        Utils.checkNotNull(isActive, "isActive");
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleInitial, "middleInitial");
        Utils.checkNotNull(businessName, "businessName");
        Utils.checkNotNull(ein, "ein");
        Utils.checkNotNull(hasEin, "hasEin");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        Utils.checkNotNull(workState, "workState");
        Utils.checkNotNull(onboarded, "onboarded");
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(hasSsn, "hasSsn");
        Utils.checkNotNull(departmentUuid, "departmentUuid");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.wageType = wageType;
        this.isActive = isActive;
        this.version = version;
        this.type = type;
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleInitial = middleInitial;
        this.businessName = businessName;
        this.ein = ein;
        this.hasEin = hasEin;
        this.email = email;
        this.startDate = startDate;
        this.address = address;
        this.hourlyRate = hourlyRate;
        this.fileNewHireReport = fileNewHireReport;
        this.workState = workState;
        this.onboarded = onboarded;
        this.onboardingStatus = onboardingStatus;
        this.paymentMethod = paymentMethod;
        this.hasSsn = hasSsn;
        this.departmentUuid = departmentUuid;
    }
    
    public Contractor(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * The UUID of the contractor in Gusto.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The UUID of the company the contractor is employed by.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * The contractor's wage type, either "Fixed" or "Hourly".
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WageType> wageType() {
        return (Optional<WageType>) wageType;
    }

    /**
     * The status of the contractor with the company.
     */
    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public Optional<String> version() {
        return version;
    }

    /**
     * The contractor's type, either "Individual" or "Business". 
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorType> type() {
        return (Optional<ContractorType>) type;
    }

    /**
     * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    @JsonIgnore
    public JsonNullable<String> firstName() {
        return firstName;
    }

    /**
     * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    @JsonIgnore
    public JsonNullable<String> lastName() {
        return lastName;
    }

    /**
     * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
     */
    @JsonIgnore
    public JsonNullable<String> middleInitial() {
        return middleInitial;
    }

    /**
     * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
     */
    @JsonIgnore
    public JsonNullable<String> businessName() {
        return businessName;
    }

    /**
     * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
     */
    @JsonIgnore
    public JsonNullable<String> ein() {
        return ein;
    }

    /**
     * Whether company's Employer Identification Number (EIN) is present
     */
    @JsonIgnore
    public JsonNullable<Boolean> hasEin() {
        return hasEin;
    }

    /**
     * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors. 
     */
    @JsonIgnore
    public JsonNullable<String> email() {
        return email;
    }

    /**
     * The contractor's start date.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The contractor’s home address.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Address> address() {
        return (JsonNullable<Address>) address;
    }

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
     */
    @JsonIgnore
    public Optional<String> hourlyRate() {
        return hourlyRate;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor
     */
    @JsonIgnore
    public Optional<Boolean> fileNewHireReport() {
        return fileNewHireReport;
    }

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     */
    @JsonIgnore
    public JsonNullable<String> workState() {
        return workState;
    }

    /**
     * The updated onboarding status for the contractor
     */
    @JsonIgnore
    public Optional<Boolean> onboarded() {
        return onboarded;
    }

    /**
     * One of the "onboarding_status" enum values.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ContractorOnboardingStatus1> onboardingStatus() {
        return (Optional<ContractorOnboardingStatus1>) onboardingStatus;
    }

    /**
     * The contractor's payment method.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<ContractorPaymentMethod1> paymentMethod() {
        return (JsonNullable<ContractorPaymentMethod1>) paymentMethod;
    }

    /**
     * Indicates whether the contractor has an SSN in Gusto.
     */
    @JsonIgnore
    public Optional<Boolean> hasSsn() {
        return hasSsn;
    }

    /**
     * The UUID of the department the contractor is under
     */
    @JsonIgnore
    public JsonNullable<String> departmentUuid() {
        return departmentUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the contractor in Gusto.
     */
    public Contractor withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The UUID of the company the contractor is employed by.
     */
    public Contractor withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * The UUID of the company the contractor is employed by.
     */
    public Contractor withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * The contractor's wage type, either "Fixed" or "Hourly".
     */
    public Contractor withWageType(WageType wageType) {
        Utils.checkNotNull(wageType, "wageType");
        this.wageType = Optional.ofNullable(wageType);
        return this;
    }

    /**
     * The contractor's wage type, either "Fixed" or "Hourly".
     */
    public Contractor withWageType(Optional<? extends WageType> wageType) {
        Utils.checkNotNull(wageType, "wageType");
        this.wageType = wageType;
        return this;
    }

    /**
     * The status of the contractor with the company.
     */
    public Contractor withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    /**
     * The status of the contractor with the company.
     */
    public Contractor withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Contractor withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = Optional.ofNullable(version);
        return this;
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public Contractor withVersion(Optional<String> version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The contractor's type, either "Individual" or "Business". 
     */
    public Contractor withType(ContractorType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The contractor's type, either "Individual" or "Business". 
     */
    public Contractor withType(Optional<? extends ContractorType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    public Contractor withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = JsonNullable.of(firstName);
        return this;
    }

    /**
     * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    public Contractor withFirstName(JsonNullable<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    public Contractor withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = JsonNullable.of(lastName);
        return this;
    }

    /**
     * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
     */
    public Contractor withLastName(JsonNullable<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
     */
    public Contractor withMiddleInitial(String middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = JsonNullable.of(middleInitial);
        return this;
    }

    /**
     * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
     */
    public Contractor withMiddleInitial(JsonNullable<String> middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = middleInitial;
        return this;
    }

    /**
     * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
     */
    public Contractor withBusinessName(String businessName) {
        Utils.checkNotNull(businessName, "businessName");
        this.businessName = JsonNullable.of(businessName);
        return this;
    }

    /**
     * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
     */
    public Contractor withBusinessName(JsonNullable<String> businessName) {
        Utils.checkNotNull(businessName, "businessName");
        this.businessName = businessName;
        return this;
    }

    /**
     * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
     */
    public Contractor withEin(String ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = JsonNullable.of(ein);
        return this;
    }

    /**
     * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
     */
    public Contractor withEin(JsonNullable<String> ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = ein;
        return this;
    }

    /**
     * Whether company's Employer Identification Number (EIN) is present
     */
    public Contractor withHasEin(boolean hasEin) {
        Utils.checkNotNull(hasEin, "hasEin");
        this.hasEin = JsonNullable.of(hasEin);
        return this;
    }

    /**
     * Whether company's Employer Identification Number (EIN) is present
     */
    public Contractor withHasEin(JsonNullable<Boolean> hasEin) {
        Utils.checkNotNull(hasEin, "hasEin");
        this.hasEin = hasEin;
        return this;
    }

    /**
     * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors. 
     */
    public Contractor withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = JsonNullable.of(email);
        return this;
    }

    /**
     * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors. 
     */
    public Contractor withEmail(JsonNullable<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The contractor's start date.
     */
    public Contractor withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The contractor's start date.
     */
    public Contractor withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The contractor’s home address.
     */
    public Contractor withAddress(Address address) {
        Utils.checkNotNull(address, "address");
        this.address = JsonNullable.of(address);
        return this;
    }

    /**
     * The contractor’s home address.
     */
    public Contractor withAddress(JsonNullable<? extends Address> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
     */
    public Contractor withHourlyRate(String hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = Optional.ofNullable(hourlyRate);
        return this;
    }

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
     */
    public Contractor withHourlyRate(Optional<String> hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = hourlyRate;
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor
     */
    public Contractor withFileNewHireReport(boolean fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = Optional.ofNullable(fileNewHireReport);
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor
     */
    public Contractor withFileNewHireReport(Optional<Boolean> fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = fileNewHireReport;
        return this;
    }

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     */
    public Contractor withWorkState(String workState) {
        Utils.checkNotNull(workState, "workState");
        this.workState = JsonNullable.of(workState);
        return this;
    }

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     */
    public Contractor withWorkState(JsonNullable<String> workState) {
        Utils.checkNotNull(workState, "workState");
        this.workState = workState;
        return this;
    }

    /**
     * The updated onboarding status for the contractor
     */
    public Contractor withOnboarded(boolean onboarded) {
        Utils.checkNotNull(onboarded, "onboarded");
        this.onboarded = Optional.ofNullable(onboarded);
        return this;
    }

    /**
     * The updated onboarding status for the contractor
     */
    public Contractor withOnboarded(Optional<Boolean> onboarded) {
        Utils.checkNotNull(onboarded, "onboarded");
        this.onboarded = onboarded;
        return this;
    }

    /**
     * One of the "onboarding_status" enum values.
     */
    public Contractor withOnboardingStatus(ContractorOnboardingStatus1 onboardingStatus) {
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        this.onboardingStatus = Optional.ofNullable(onboardingStatus);
        return this;
    }

    /**
     * One of the "onboarding_status" enum values.
     */
    public Contractor withOnboardingStatus(Optional<? extends ContractorOnboardingStatus1> onboardingStatus) {
        Utils.checkNotNull(onboardingStatus, "onboardingStatus");
        this.onboardingStatus = onboardingStatus;
        return this;
    }

    /**
     * The contractor's payment method.
     */
    public Contractor withPaymentMethod(ContractorPaymentMethod1 paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = JsonNullable.of(paymentMethod);
        return this;
    }

    /**
     * The contractor's payment method.
     */
    public Contractor withPaymentMethod(JsonNullable<? extends ContractorPaymentMethod1> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * Indicates whether the contractor has an SSN in Gusto.
     */
    public Contractor withHasSsn(boolean hasSsn) {
        Utils.checkNotNull(hasSsn, "hasSsn");
        this.hasSsn = Optional.ofNullable(hasSsn);
        return this;
    }

    /**
     * Indicates whether the contractor has an SSN in Gusto.
     */
    public Contractor withHasSsn(Optional<Boolean> hasSsn) {
        Utils.checkNotNull(hasSsn, "hasSsn");
        this.hasSsn = hasSsn;
        return this;
    }

    /**
     * The UUID of the department the contractor is under
     */
    public Contractor withDepartmentUuid(String departmentUuid) {
        Utils.checkNotNull(departmentUuid, "departmentUuid");
        this.departmentUuid = JsonNullable.of(departmentUuid);
        return this;
    }

    /**
     * The UUID of the department the contractor is under
     */
    public Contractor withDepartmentUuid(JsonNullable<String> departmentUuid) {
        Utils.checkNotNull(departmentUuid, "departmentUuid");
        this.departmentUuid = departmentUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Contractor other = (Contractor) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.wageType, other.wageType) &&
            Objects.deepEquals(this.isActive, other.isActive) &&
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.middleInitial, other.middleInitial) &&
            Objects.deepEquals(this.businessName, other.businessName) &&
            Objects.deepEquals(this.ein, other.ein) &&
            Objects.deepEquals(this.hasEin, other.hasEin) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.hourlyRate, other.hourlyRate) &&
            Objects.deepEquals(this.fileNewHireReport, other.fileNewHireReport) &&
            Objects.deepEquals(this.workState, other.workState) &&
            Objects.deepEquals(this.onboarded, other.onboarded) &&
            Objects.deepEquals(this.onboardingStatus, other.onboardingStatus) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.hasSsn, other.hasSsn) &&
            Objects.deepEquals(this.departmentUuid, other.departmentUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            wageType,
            isActive,
            version,
            type,
            firstName,
            lastName,
            middleInitial,
            businessName,
            ein,
            hasEin,
            email,
            startDate,
            address,
            hourlyRate,
            fileNewHireReport,
            workState,
            onboarded,
            onboardingStatus,
            paymentMethod,
            hasSsn,
            departmentUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Contractor.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "wageType", wageType,
                "isActive", isActive,
                "version", version,
                "type", type,
                "firstName", firstName,
                "lastName", lastName,
                "middleInitial", middleInitial,
                "businessName", businessName,
                "ein", ein,
                "hasEin", hasEin,
                "email", email,
                "startDate", startDate,
                "address", address,
                "hourlyRate", hourlyRate,
                "fileNewHireReport", fileNewHireReport,
                "workState", workState,
                "onboarded", onboarded,
                "onboardingStatus", onboardingStatus,
                "paymentMethod", paymentMethod,
                "hasSsn", hasSsn,
                "departmentUuid", departmentUuid);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<? extends WageType> wageType = Optional.empty();
 
        private Optional<Boolean> isActive;
 
        private Optional<String> version = Optional.empty();
 
        private Optional<? extends ContractorType> type = Optional.empty();
 
        private JsonNullable<String> firstName = JsonNullable.undefined();
 
        private JsonNullable<String> lastName = JsonNullable.undefined();
 
        private JsonNullable<String> middleInitial = JsonNullable.undefined();
 
        private JsonNullable<String> businessName = JsonNullable.undefined();
 
        private JsonNullable<String> ein = JsonNullable.undefined();
 
        private JsonNullable<Boolean> hasEin = JsonNullable.undefined();
 
        private JsonNullable<String> email = JsonNullable.undefined();
 
        private Optional<String> startDate = Optional.empty();
 
        private JsonNullable<? extends Address> address = JsonNullable.undefined();
 
        private Optional<String> hourlyRate = Optional.empty();
 
        private Optional<Boolean> fileNewHireReport;
 
        private JsonNullable<String> workState = JsonNullable.undefined();
 
        private Optional<Boolean> onboarded = Optional.empty();
 
        private Optional<? extends ContractorOnboardingStatus1> onboardingStatus = Optional.empty();
 
        private JsonNullable<? extends ContractorPaymentMethod1> paymentMethod = JsonNullable.undefined();
 
        private Optional<Boolean> hasSsn = Optional.empty();
 
        private JsonNullable<String> departmentUuid = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the contractor in Gusto.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The UUID of the company the contractor is employed by.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * The UUID of the company the contractor is employed by.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * The contractor's wage type, either "Fixed" or "Hourly".
         */
        public Builder wageType(WageType wageType) {
            Utils.checkNotNull(wageType, "wageType");
            this.wageType = Optional.ofNullable(wageType);
            return this;
        }

        /**
         * The contractor's wage type, either "Fixed" or "Hourly".
         */
        public Builder wageType(Optional<? extends WageType> wageType) {
            Utils.checkNotNull(wageType, "wageType");
            this.wageType = wageType;
            return this;
        }

        /**
         * The status of the contractor with the company.
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        /**
         * The status of the contractor with the company.
         */
        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = Optional.ofNullable(version);
            return this;
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(Optional<String> version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The contractor's type, either "Individual" or "Business". 
         */
        public Builder type(ContractorType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The contractor's type, either "Individual" or "Business". 
         */
        public Builder type(Optional<? extends ContractorType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = JsonNullable.of(firstName);
            return this;
        }

        /**
         * The contractor’s first name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
         */
        public Builder firstName(JsonNullable<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = JsonNullable.of(lastName);
            return this;
        }

        /**
         * The contractor’s last name. This attribute is required for “Individual” contractors and will be ignored for “Business” contractors.
         */
        public Builder lastName(JsonNullable<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
         */
        public Builder middleInitial(String middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = JsonNullable.of(middleInitial);
            return this;
        }

        /**
         * The contractor’s middle initial. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors.
         */
        public Builder middleInitial(JsonNullable<String> middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = middleInitial;
            return this;
        }

        /**
         * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
         */
        public Builder businessName(String businessName) {
            Utils.checkNotNull(businessName, "businessName");
            this.businessName = JsonNullable.of(businessName);
            return this;
        }

        /**
         * The name of the contractor business. This attribute is required for “Business” contractors and will be ignored for “Individual” contractors.
         */
        public Builder businessName(JsonNullable<String> businessName) {
            Utils.checkNotNull(businessName, "businessName");
            this.businessName = businessName;
            return this;
        }

        /**
         * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
         */
        public Builder ein(String ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = JsonNullable.of(ein);
            return this;
        }

        /**
         * The Federal Employer Identification Number of the contractor business. This attribute is optional for “Business” contractors and will be ignored for “Individual” contractors.
         */
        public Builder ein(JsonNullable<String> ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = ein;
            return this;
        }

        /**
         * Whether company's Employer Identification Number (EIN) is present
         */
        public Builder hasEin(boolean hasEin) {
            Utils.checkNotNull(hasEin, "hasEin");
            this.hasEin = JsonNullable.of(hasEin);
            return this;
        }

        /**
         * Whether company's Employer Identification Number (EIN) is present
         */
        public Builder hasEin(JsonNullable<Boolean> hasEin) {
            Utils.checkNotNull(hasEin, "hasEin");
            this.hasEin = hasEin;
            return this;
        }

        /**
         * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors. 
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = JsonNullable.of(email);
            return this;
        }

        /**
         * The contractor’s email address. This attribute is optional for “Individual” contractors and will be ignored for “Business” contractors. 
         */
        public Builder email(JsonNullable<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The contractor's start date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The contractor's start date.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The contractor’s home address.
         */
        public Builder address(Address address) {
            Utils.checkNotNull(address, "address");
            this.address = JsonNullable.of(address);
            return this;
        }

        /**
         * The contractor’s home address.
         */
        public Builder address(JsonNullable<? extends Address> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
         */
        public Builder hourlyRate(String hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = Optional.ofNullable(hourlyRate);
            return this;
        }

        /**
         * The contractor’s hourly rate. This attribute is required if the wage_type is “Hourly”.
         */
        public Builder hourlyRate(Optional<String> hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = hourlyRate;
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the contractor
         */
        public Builder fileNewHireReport(boolean fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = Optional.ofNullable(fileNewHireReport);
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the contractor
         */
        public Builder fileNewHireReport(Optional<Boolean> fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }

        /**
         * State where the contractor will be conducting the majority of their work for the company.
         * This value is used when generating the new hire report.
         */
        public Builder workState(String workState) {
            Utils.checkNotNull(workState, "workState");
            this.workState = JsonNullable.of(workState);
            return this;
        }

        /**
         * State where the contractor will be conducting the majority of their work for the company.
         * This value is used when generating the new hire report.
         */
        public Builder workState(JsonNullable<String> workState) {
            Utils.checkNotNull(workState, "workState");
            this.workState = workState;
            return this;
        }

        /**
         * The updated onboarding status for the contractor
         */
        public Builder onboarded(boolean onboarded) {
            Utils.checkNotNull(onboarded, "onboarded");
            this.onboarded = Optional.ofNullable(onboarded);
            return this;
        }

        /**
         * The updated onboarding status for the contractor
         */
        public Builder onboarded(Optional<Boolean> onboarded) {
            Utils.checkNotNull(onboarded, "onboarded");
            this.onboarded = onboarded;
            return this;
        }

        /**
         * One of the "onboarding_status" enum values.
         */
        public Builder onboardingStatus(ContractorOnboardingStatus1 onboardingStatus) {
            Utils.checkNotNull(onboardingStatus, "onboardingStatus");
            this.onboardingStatus = Optional.ofNullable(onboardingStatus);
            return this;
        }

        /**
         * One of the "onboarding_status" enum values.
         */
        public Builder onboardingStatus(Optional<? extends ContractorOnboardingStatus1> onboardingStatus) {
            Utils.checkNotNull(onboardingStatus, "onboardingStatus");
            this.onboardingStatus = onboardingStatus;
            return this;
        }

        /**
         * The contractor's payment method.
         */
        public Builder paymentMethod(ContractorPaymentMethod1 paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = JsonNullable.of(paymentMethod);
            return this;
        }

        /**
         * The contractor's payment method.
         */
        public Builder paymentMethod(JsonNullable<? extends ContractorPaymentMethod1> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * Indicates whether the contractor has an SSN in Gusto.
         */
        public Builder hasSsn(boolean hasSsn) {
            Utils.checkNotNull(hasSsn, "hasSsn");
            this.hasSsn = Optional.ofNullable(hasSsn);
            return this;
        }

        /**
         * Indicates whether the contractor has an SSN in Gusto.
         */
        public Builder hasSsn(Optional<Boolean> hasSsn) {
            Utils.checkNotNull(hasSsn, "hasSsn");
            this.hasSsn = hasSsn;
            return this;
        }

        /**
         * The UUID of the department the contractor is under
         */
        public Builder departmentUuid(String departmentUuid) {
            Utils.checkNotNull(departmentUuid, "departmentUuid");
            this.departmentUuid = JsonNullable.of(departmentUuid);
            return this;
        }

        /**
         * The UUID of the department the contractor is under
         */
        public Builder departmentUuid(JsonNullable<String> departmentUuid) {
            Utils.checkNotNull(departmentUuid, "departmentUuid");
            this.departmentUuid = departmentUuid;
            return this;
        }
        
        public Contractor build() {
            if (isActive == null) {
                isActive = _SINGLETON_VALUE_IsActive.value();
            }
            if (fileNewHireReport == null) {
                fileNewHireReport = _SINGLETON_VALUE_FileNewHireReport.value();
            }            return new Contractor(
                uuid,
                companyUuid,
                wageType,
                isActive,
                version,
                type,
                firstName,
                lastName,
                middleInitial,
                businessName,
                ein,
                hasEin,
                email,
                startDate,
                address,
                hourlyRate,
                fileNewHireReport,
                workState,
                onboarded,
                onboardingStatus,
                paymentMethod,
                hasSsn,
                departmentUuid);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_IsActive =
                new LazySingletonValue<>(
                        "is_active",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_FileNewHireReport =
                new LazySingletonValue<>(
                        "file_new_hire_report",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

