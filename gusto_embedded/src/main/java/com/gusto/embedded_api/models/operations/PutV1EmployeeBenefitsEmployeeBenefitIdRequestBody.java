/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Deprecated;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;

public class PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    /**
     * Whether the employee benefit is active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction")
    private Optional<String> employeeDeduction;

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deduct_as_percentage")
    private Optional<Boolean> deductAsPercentage;

    /**
     * The maximum employee deduction amount per year. A null value signifies no limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction_annual_maximum")
    private JsonNullable<String> employeeDeductionAnnualMaximum;

    /**
     * An object representing the type and value of the company contribution.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contribution")
    private Optional<? extends PutV1EmployeeBenefitsEmployeeBenefitIdContribution> contribution;

    /**
     * Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("elective")
    private Optional<Boolean> elective;

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_contribution_annual_maximum")
    private JsonNullable<String> companyContributionAnnualMaximum;

    /**
     * Some benefits require additional information to determine
     * their limit.
     * 
     * `Family` or `Individual`: Applicable to HSA benefit.
     * 
     * `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("limit_option")
    private JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption> limitOption;

    /**
     * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("catch_up")
    private Optional<Boolean> catchUp;

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverage_amount")
    private JsonNullable<String> coverageAmount;

    /**
     * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deduction_reduces_taxable_income")
    private JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome> deductionReducesTaxableIncome;

    /**
     * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("coverage_salary_multiplier")
    private Optional<String> coverageSalaryMultiplier;

    /**
     * The amount to be paid, per pay period, by the company.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_contribution")
    @Deprecated
    private Optional<String> companyContribution;

    /**
     * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contribute_as_percentage")
    @Deprecated
    private Optional<Boolean> contributeAsPercentage;

    @JsonCreator
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody(
            @JsonProperty("version") String version,
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("employee_deduction") Optional<String> employeeDeduction,
            @JsonProperty("deduct_as_percentage") Optional<Boolean> deductAsPercentage,
            @JsonProperty("employee_deduction_annual_maximum") JsonNullable<String> employeeDeductionAnnualMaximum,
            @JsonProperty("contribution") Optional<? extends PutV1EmployeeBenefitsEmployeeBenefitIdContribution> contribution,
            @JsonProperty("elective") Optional<Boolean> elective,
            @JsonProperty("company_contribution_annual_maximum") JsonNullable<String> companyContributionAnnualMaximum,
            @JsonProperty("limit_option") JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption> limitOption,
            @JsonProperty("catch_up") Optional<Boolean> catchUp,
            @JsonProperty("coverage_amount") JsonNullable<String> coverageAmount,
            @JsonProperty("deduction_reduces_taxable_income") JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome> deductionReducesTaxableIncome,
            @JsonProperty("coverage_salary_multiplier") Optional<String> coverageSalaryMultiplier,
            @JsonProperty("company_contribution") Optional<String> companyContribution,
            @JsonProperty("contribute_as_percentage") Optional<Boolean> contributeAsPercentage) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        Utils.checkNotNull(employeeDeductionAnnualMaximum, "employeeDeductionAnnualMaximum");
        Utils.checkNotNull(contribution, "contribution");
        Utils.checkNotNull(elective, "elective");
        Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
        Utils.checkNotNull(limitOption, "limitOption");
        Utils.checkNotNull(catchUp, "catchUp");
        Utils.checkNotNull(coverageAmount, "coverageAmount");
        Utils.checkNotNull(deductionReducesTaxableIncome, "deductionReducesTaxableIncome");
        Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
        Utils.checkNotNull(companyContribution, "companyContribution");
        Utils.checkNotNull(contributeAsPercentage, "contributeAsPercentage");
        this.version = version;
        this.active = active;
        this.employeeDeduction = employeeDeduction;
        this.deductAsPercentage = deductAsPercentage;
        this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
        this.contribution = contribution;
        this.elective = elective;
        this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
        this.limitOption = limitOption;
        this.catchUp = catchUp;
        this.coverageAmount = coverageAmount;
        this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
        this.coverageSalaryMultiplier = coverageSalaryMultiplier;
        this.companyContribution = companyContribution;
        this.contributeAsPercentage = contributeAsPercentage;
    }
    
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody(
            String version) {
        this(version, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * Whether the employee benefit is active.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    @JsonIgnore
    public Optional<String> employeeDeduction() {
        return employeeDeduction;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    @JsonIgnore
    public Optional<Boolean> deductAsPercentage() {
        return deductAsPercentage;
    }

    /**
     * The maximum employee deduction amount per year. A null value signifies no limit.
     */
    @JsonIgnore
    public JsonNullable<String> employeeDeductionAnnualMaximum() {
        return employeeDeductionAnnualMaximum;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PutV1EmployeeBenefitsEmployeeBenefitIdContribution> contribution() {
        return (Optional<PutV1EmployeeBenefitsEmployeeBenefitIdContribution>) contribution;
    }

    /**
     * Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
     */
    @JsonIgnore
    public Optional<Boolean> elective() {
        return elective;
    }

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    @JsonIgnore
    public JsonNullable<String> companyContributionAnnualMaximum() {
        return companyContributionAnnualMaximum;
    }

    /**
     * Some benefits require additional information to determine
     * their limit.
     * 
     * `Family` or `Individual`: Applicable to HSA benefit.
     * 
     * `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption> limitOption() {
        return (JsonNullable<PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption>) limitOption;
    }

    /**
     * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    @JsonIgnore
    public Optional<Boolean> catchUp() {
        return catchUp;
    }

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    @JsonIgnore
    public JsonNullable<String> coverageAmount() {
        return coverageAmount;
    }

    /**
     * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome> deductionReducesTaxableIncome() {
        return (JsonNullable<PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome>) deductionReducesTaxableIncome;
    }

    /**
     * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    @JsonIgnore
    public Optional<String> coverageSalaryMultiplier() {
        return coverageSalaryMultiplier;
    }

    /**
     * The amount to be paid, per pay period, by the company.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<String> companyContribution() {
        return companyContribution;
    }

    /**
     * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    @JsonIgnore
    public Optional<Boolean> contributeAsPercentage() {
        return contributeAsPercentage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * Whether the employee benefit is active.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Whether the employee benefit is active.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withEmployeeDeduction(String employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = Optional.ofNullable(employeeDeduction);
        return this;
    }

    /**
     * The amount to be deducted, per pay period, from the employee's pay.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withEmployeeDeduction(Optional<String> employeeDeduction) {
        Utils.checkNotNull(employeeDeduction, "employeeDeduction");
        this.employeeDeduction = employeeDeduction;
        return this;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withDeductAsPercentage(boolean deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
        return this;
    }

    /**
     * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withDeductAsPercentage(Optional<Boolean> deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = deductAsPercentage;
        return this;
    }

    /**
     * The maximum employee deduction amount per year. A null value signifies no limit.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withEmployeeDeductionAnnualMaximum(String employeeDeductionAnnualMaximum) {
        Utils.checkNotNull(employeeDeductionAnnualMaximum, "employeeDeductionAnnualMaximum");
        this.employeeDeductionAnnualMaximum = JsonNullable.of(employeeDeductionAnnualMaximum);
        return this;
    }

    /**
     * The maximum employee deduction amount per year. A null value signifies no limit.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withEmployeeDeductionAnnualMaximum(JsonNullable<String> employeeDeductionAnnualMaximum) {
        Utils.checkNotNull(employeeDeductionAnnualMaximum, "employeeDeductionAnnualMaximum");
        this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
        return this;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withContribution(PutV1EmployeeBenefitsEmployeeBenefitIdContribution contribution) {
        Utils.checkNotNull(contribution, "contribution");
        this.contribution = Optional.ofNullable(contribution);
        return this;
    }

    /**
     * An object representing the type and value of the company contribution.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withContribution(Optional<? extends PutV1EmployeeBenefitsEmployeeBenefitIdContribution> contribution) {
        Utils.checkNotNull(contribution, "contribution");
        this.contribution = contribution;
        return this;
    }

    /**
     * Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withElective(boolean elective) {
        Utils.checkNotNull(elective, "elective");
        this.elective = Optional.ofNullable(elective);
        return this;
    }

    /**
     * Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withElective(Optional<Boolean> elective) {
        Utils.checkNotNull(elective, "elective");
        this.elective = elective;
        return this;
    }

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCompanyContributionAnnualMaximum(String companyContributionAnnualMaximum) {
        Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
        this.companyContributionAnnualMaximum = JsonNullable.of(companyContributionAnnualMaximum);
        return this;
    }

    /**
     * The maximum company contribution amount per year. A null value signifies no limit.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCompanyContributionAnnualMaximum(JsonNullable<String> companyContributionAnnualMaximum) {
        Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
        this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
        return this;
    }

    /**
     * Some benefits require additional information to determine
     * their limit.
     * 
     * `Family` or `Individual`: Applicable to HSA benefit.
     * 
     * `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withLimitOption(PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption limitOption) {
        Utils.checkNotNull(limitOption, "limitOption");
        this.limitOption = JsonNullable.of(limitOption);
        return this;
    }

    /**
     * Some benefits require additional information to determine
     * their limit.
     * 
     * `Family` or `Individual`: Applicable to HSA benefit.
     * 
     * `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withLimitOption(JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption> limitOption) {
        Utils.checkNotNull(limitOption, "limitOption");
        this.limitOption = limitOption;
        return this;
    }

    /**
     * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCatchUp(boolean catchUp) {
        Utils.checkNotNull(catchUp, "catchUp");
        this.catchUp = Optional.ofNullable(catchUp);
        return this;
    }

    /**
     * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCatchUp(Optional<Boolean> catchUp) {
        Utils.checkNotNull(catchUp, "catchUp");
        this.catchUp = catchUp;
        return this;
    }

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCoverageAmount(String coverageAmount) {
        Utils.checkNotNull(coverageAmount, "coverageAmount");
        this.coverageAmount = JsonNullable.of(coverageAmount);
        return this;
    }

    /**
     * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCoverageAmount(JsonNullable<String> coverageAmount) {
        Utils.checkNotNull(coverageAmount, "coverageAmount");
        this.coverageAmount = coverageAmount;
        return this;
    }

    /**
     * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withDeductionReducesTaxableIncome(PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome deductionReducesTaxableIncome) {
        Utils.checkNotNull(deductionReducesTaxableIncome, "deductionReducesTaxableIncome");
        this.deductionReducesTaxableIncome = JsonNullable.of(deductionReducesTaxableIncome);
        return this;
    }

    /**
     * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withDeductionReducesTaxableIncome(JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome> deductionReducesTaxableIncome) {
        Utils.checkNotNull(deductionReducesTaxableIncome, "deductionReducesTaxableIncome");
        this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
        return this;
    }

    /**
     * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCoverageSalaryMultiplier(String coverageSalaryMultiplier) {
        Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
        this.coverageSalaryMultiplier = Optional.ofNullable(coverageSalaryMultiplier);
        return this;
    }

    /**
     * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCoverageSalaryMultiplier(Optional<String> coverageSalaryMultiplier) {
        Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
        this.coverageSalaryMultiplier = coverageSalaryMultiplier;
        return this;
    }

    /**
     * The amount to be paid, per pay period, by the company.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCompanyContribution(String companyContribution) {
        Utils.checkNotNull(companyContribution, "companyContribution");
        this.companyContribution = Optional.ofNullable(companyContribution);
        return this;
    }

    /**
     * The amount to be paid, per pay period, by the company.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withCompanyContribution(Optional<String> companyContribution) {
        Utils.checkNotNull(companyContribution, "companyContribution");
        this.companyContribution = companyContribution;
        return this;
    }

    /**
     * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withContributeAsPercentage(boolean contributeAsPercentage) {
        Utils.checkNotNull(contributeAsPercentage, "contributeAsPercentage");
        this.contributeAsPercentage = Optional.ofNullable(contributeAsPercentage);
        return this;
    }

    /**
     * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
     * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
     */
    @Deprecated
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody withContributeAsPercentage(Optional<Boolean> contributeAsPercentage) {
        Utils.checkNotNull(contributeAsPercentage, "contributeAsPercentage");
        this.contributeAsPercentage = contributeAsPercentage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody other = (PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.employeeDeduction, other.employeeDeduction) &&
            Objects.deepEquals(this.deductAsPercentage, other.deductAsPercentage) &&
            Objects.deepEquals(this.employeeDeductionAnnualMaximum, other.employeeDeductionAnnualMaximum) &&
            Objects.deepEquals(this.contribution, other.contribution) &&
            Objects.deepEquals(this.elective, other.elective) &&
            Objects.deepEquals(this.companyContributionAnnualMaximum, other.companyContributionAnnualMaximum) &&
            Objects.deepEquals(this.limitOption, other.limitOption) &&
            Objects.deepEquals(this.catchUp, other.catchUp) &&
            Objects.deepEquals(this.coverageAmount, other.coverageAmount) &&
            Objects.deepEquals(this.deductionReducesTaxableIncome, other.deductionReducesTaxableIncome) &&
            Objects.deepEquals(this.coverageSalaryMultiplier, other.coverageSalaryMultiplier) &&
            Objects.deepEquals(this.companyContribution, other.companyContribution) &&
            Objects.deepEquals(this.contributeAsPercentage, other.contributeAsPercentage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            active,
            employeeDeduction,
            deductAsPercentage,
            employeeDeductionAnnualMaximum,
            contribution,
            elective,
            companyContributionAnnualMaximum,
            limitOption,
            catchUp,
            coverageAmount,
            deductionReducesTaxableIncome,
            coverageSalaryMultiplier,
            companyContribution,
            contributeAsPercentage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody.class,
                "version", version,
                "active", active,
                "employeeDeduction", employeeDeduction,
                "deductAsPercentage", deductAsPercentage,
                "employeeDeductionAnnualMaximum", employeeDeductionAnnualMaximum,
                "contribution", contribution,
                "elective", elective,
                "companyContributionAnnualMaximum", companyContributionAnnualMaximum,
                "limitOption", limitOption,
                "catchUp", catchUp,
                "coverageAmount", coverageAmount,
                "deductionReducesTaxableIncome", deductionReducesTaxableIncome,
                "coverageSalaryMultiplier", coverageSalaryMultiplier,
                "companyContribution", companyContribution,
                "contributeAsPercentage", contributeAsPercentage);
    }
    
    public final static class Builder {
 
        private String version;
 
        private Optional<Boolean> active = Optional.empty();
 
        private Optional<String> employeeDeduction;
 
        private Optional<Boolean> deductAsPercentage = Optional.empty();
 
        private JsonNullable<String> employeeDeductionAnnualMaximum = JsonNullable.undefined();
 
        private Optional<? extends PutV1EmployeeBenefitsEmployeeBenefitIdContribution> contribution = Optional.empty();
 
        private Optional<Boolean> elective;
 
        private JsonNullable<String> companyContributionAnnualMaximum = JsonNullable.undefined();
 
        private JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption> limitOption = JsonNullable.undefined();
 
        private Optional<Boolean> catchUp;
 
        private JsonNullable<String> coverageAmount = JsonNullable.undefined();
 
        private JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome> deductionReducesTaxableIncome;
 
        private Optional<String> coverageSalaryMultiplier;
 
        @Deprecated
        private Optional<String> companyContribution;
 
        @Deprecated
        private Optional<Boolean> contributeAsPercentage;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * Whether the employee benefit is active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Whether the employee benefit is active.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The amount to be deducted, per pay period, from the employee's pay.
         */
        public Builder employeeDeduction(String employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = Optional.ofNullable(employeeDeduction);
            return this;
        }

        /**
         * The amount to be deducted, per pay period, from the employee's pay.
         */
        public Builder employeeDeduction(Optional<String> employeeDeduction) {
            Utils.checkNotNull(employeeDeduction, "employeeDeduction");
            this.employeeDeduction = employeeDeduction;
            return this;
        }

        /**
         * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
         */
        public Builder deductAsPercentage(boolean deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
            return this;
        }

        /**
         * Whether the employee deduction amount should be treated as a percentage to be deducted from each payroll.
         */
        public Builder deductAsPercentage(Optional<Boolean> deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }

        /**
         * The maximum employee deduction amount per year. A null value signifies no limit.
         */
        public Builder employeeDeductionAnnualMaximum(String employeeDeductionAnnualMaximum) {
            Utils.checkNotNull(employeeDeductionAnnualMaximum, "employeeDeductionAnnualMaximum");
            this.employeeDeductionAnnualMaximum = JsonNullable.of(employeeDeductionAnnualMaximum);
            return this;
        }

        /**
         * The maximum employee deduction amount per year. A null value signifies no limit.
         */
        public Builder employeeDeductionAnnualMaximum(JsonNullable<String> employeeDeductionAnnualMaximum) {
            Utils.checkNotNull(employeeDeductionAnnualMaximum, "employeeDeductionAnnualMaximum");
            this.employeeDeductionAnnualMaximum = employeeDeductionAnnualMaximum;
            return this;
        }

        /**
         * An object representing the type and value of the company contribution.
         */
        public Builder contribution(PutV1EmployeeBenefitsEmployeeBenefitIdContribution contribution) {
            Utils.checkNotNull(contribution, "contribution");
            this.contribution = Optional.ofNullable(contribution);
            return this;
        }

        /**
         * An object representing the type and value of the company contribution.
         */
        public Builder contribution(Optional<? extends PutV1EmployeeBenefitsEmployeeBenefitIdContribution> contribution) {
            Utils.checkNotNull(contribution, "contribution");
            this.contribution = contribution;
            return this;
        }

        /**
         * Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
         */
        public Builder elective(boolean elective) {
            Utils.checkNotNull(elective, "elective");
            this.elective = Optional.ofNullable(elective);
            return this;
        }

        /**
         * Whether the company contribution is elective (aka "matching"). For `tiered`, `elective_amount`, and `elective_percentage` contribution types this is ignored and assumed to be `true`.
         */
        public Builder elective(Optional<Boolean> elective) {
            Utils.checkNotNull(elective, "elective");
            this.elective = elective;
            return this;
        }

        /**
         * The maximum company contribution amount per year. A null value signifies no limit.
         */
        public Builder companyContributionAnnualMaximum(String companyContributionAnnualMaximum) {
            Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
            this.companyContributionAnnualMaximum = JsonNullable.of(companyContributionAnnualMaximum);
            return this;
        }

        /**
         * The maximum company contribution amount per year. A null value signifies no limit.
         */
        public Builder companyContributionAnnualMaximum(JsonNullable<String> companyContributionAnnualMaximum) {
            Utils.checkNotNull(companyContributionAnnualMaximum, "companyContributionAnnualMaximum");
            this.companyContributionAnnualMaximum = companyContributionAnnualMaximum;
            return this;
        }

        /**
         * Some benefits require additional information to determine
         * their limit.
         * 
         * `Family` or `Individual`: Applicable to HSA benefit.
         * 
         * `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
         */
        public Builder limitOption(PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption limitOption) {
            Utils.checkNotNull(limitOption, "limitOption");
            this.limitOption = JsonNullable.of(limitOption);
            return this;
        }

        /**
         * Some benefits require additional information to determine
         * their limit.
         * 
         * `Family` or `Individual`: Applicable to HSA benefit.
         * 
         * `Joint Filing or Single` or `Married and Filing Separately`: Applicable to Dependent Care FSA benefit.
         */
        public Builder limitOption(JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdLimitOption> limitOption) {
            Utils.checkNotNull(limitOption, "limitOption");
            this.limitOption = limitOption;
            return this;
        }

        /**
         * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
         */
        public Builder catchUp(boolean catchUp) {
            Utils.checkNotNull(catchUp, "catchUp");
            this.catchUp = Optional.ofNullable(catchUp);
            return this;
        }

        /**
         * Whether the employee should use a benefit’s "catch up" rate. Only Roth 401k and 401k benefits use this value for employees over 50.
         */
        public Builder catchUp(Optional<Boolean> catchUp) {
            Utils.checkNotNull(catchUp, "catchUp");
            this.catchUp = catchUp;
            return this;
        }

        /**
         * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
         */
        public Builder coverageAmount(String coverageAmount) {
            Utils.checkNotNull(coverageAmount, "coverageAmount");
            this.coverageAmount = JsonNullable.of(coverageAmount);
            return this;
        }

        /**
         * The amount that the employee is insured for. Note: company contribution cannot be present if coverage amount is set.
         */
        public Builder coverageAmount(JsonNullable<String> coverageAmount) {
            Utils.checkNotNull(coverageAmount, "coverageAmount");
            this.coverageAmount = coverageAmount;
            return this;
        }

        /**
         * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
         */
        public Builder deductionReducesTaxableIncome(PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome deductionReducesTaxableIncome) {
            Utils.checkNotNull(deductionReducesTaxableIncome, "deductionReducesTaxableIncome");
            this.deductionReducesTaxableIncome = JsonNullable.of(deductionReducesTaxableIncome);
            return this;
        }

        /**
         * Whether the employee deduction reduces taxable income or not. Only valid for Group Term Life benefits. Note: when the value is not "unset", coverage amount and coverage salary multiplier are ignored.
         */
        public Builder deductionReducesTaxableIncome(JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome> deductionReducesTaxableIncome) {
            Utils.checkNotNull(deductionReducesTaxableIncome, "deductionReducesTaxableIncome");
            this.deductionReducesTaxableIncome = deductionReducesTaxableIncome;
            return this;
        }

        /**
         * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
         */
        public Builder coverageSalaryMultiplier(String coverageSalaryMultiplier) {
            Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
            this.coverageSalaryMultiplier = Optional.ofNullable(coverageSalaryMultiplier);
            return this;
        }

        /**
         * The coverage amount as a multiple of the employee’s salary. Only applicable for Group Term Life benefits. Note: cannot be set if coverage amount is also set.
         */
        public Builder coverageSalaryMultiplier(Optional<String> coverageSalaryMultiplier) {
            Utils.checkNotNull(coverageSalaryMultiplier, "coverageSalaryMultiplier");
            this.coverageSalaryMultiplier = coverageSalaryMultiplier;
            return this;
        }

        /**
         * The amount to be paid, per pay period, by the company.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyContribution(String companyContribution) {
            Utils.checkNotNull(companyContribution, "companyContribution");
            this.companyContribution = Optional.ofNullable(companyContribution);
            return this;
        }

        /**
         * The amount to be paid, per pay period, by the company.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder companyContribution(Optional<String> companyContribution) {
            Utils.checkNotNull(companyContribution, "companyContribution");
            this.companyContribution = companyContribution;
            return this;
        }

        /**
         * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder contributeAsPercentage(boolean contributeAsPercentage) {
            Utils.checkNotNull(contributeAsPercentage, "contributeAsPercentage");
            this.contributeAsPercentage = Optional.ofNullable(contributeAsPercentage);
            return this;
        }

        /**
         * Whether the company contribution amount should be treated as a percentage to be deducted from each payroll.
         * @deprecated field: This will be removed in a future release, please migrate away from it as soon as possible.
         */
        @Deprecated
        public Builder contributeAsPercentage(Optional<Boolean> contributeAsPercentage) {
            Utils.checkNotNull(contributeAsPercentage, "contributeAsPercentage");
            this.contributeAsPercentage = contributeAsPercentage;
            return this;
        }
        
        public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody build() {
            if (employeeDeduction == null) {
                employeeDeduction = _SINGLETON_VALUE_EmployeeDeduction.value();
            }
            if (elective == null) {
                elective = _SINGLETON_VALUE_Elective.value();
            }
            if (catchUp == null) {
                catchUp = _SINGLETON_VALUE_CatchUp.value();
            }
            if (deductionReducesTaxableIncome == null) {
                deductionReducesTaxableIncome = _SINGLETON_VALUE_DeductionReducesTaxableIncome.value();
            }
            if (coverageSalaryMultiplier == null) {
                coverageSalaryMultiplier = _SINGLETON_VALUE_CoverageSalaryMultiplier.value();
            }
            if (companyContribution == null) {
                companyContribution = _SINGLETON_VALUE_CompanyContribution.value();
            }
            if (contributeAsPercentage == null) {
                contributeAsPercentage = _SINGLETON_VALUE_ContributeAsPercentage.value();
            }            return new PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody(
                version,
                active,
                employeeDeduction,
                deductAsPercentage,
                employeeDeductionAnnualMaximum,
                contribution,
                elective,
                companyContributionAnnualMaximum,
                limitOption,
                catchUp,
                coverageAmount,
                deductionReducesTaxableIncome,
                coverageSalaryMultiplier,
                companyContribution,
                contributeAsPercentage);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_EmployeeDeduction =
                new LazySingletonValue<>(
                        "employee_deduction",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Elective =
                new LazySingletonValue<>(
                        "elective",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_CatchUp =
                new LazySingletonValue<>(
                        "catch_up",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome>> _SINGLETON_VALUE_DeductionReducesTaxableIncome =
                new LazySingletonValue<>(
                        "deduction_reduces_taxable_income",
                        "\"unset\"",
                        new TypeReference<JsonNullable<? extends PutV1EmployeeBenefitsEmployeeBenefitIdDeductionReducesTaxableIncome>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_CoverageSalaryMultiplier =
                new LazySingletonValue<>(
                        "coverage_salary_multiplier",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_CompanyContribution =
                new LazySingletonValue<>(
                        "company_contribution",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_ContributeAsPercentage =
                new LazySingletonValue<>(
                        "contribute_as_percentage",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

