/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * EarningType - Example response
 */

public class EarningType {

    /**
     * The name of the earning type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The ID of the earning type.
     */
    @JsonProperty("uuid")
    private String uuid;

    @JsonCreator
    public EarningType(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("uuid") String uuid) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(uuid, "uuid");
        this.name = name;
        this.uuid = uuid;
    }
    
    public EarningType(
            String uuid) {
        this(Optional.empty(), uuid);
    }

    /**
     * The name of the earning type.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The ID of the earning type.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the earning type.
     */
    public EarningType withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the earning type.
     */
    public EarningType withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The ID of the earning type.
     */
    public EarningType withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EarningType other = (EarningType) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.uuid, other.uuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            uuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EarningType.class,
                "name", name,
                "uuid", uuid);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private String uuid;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the earning type.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the earning type.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The ID of the earning type.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }
        
        public EarningType build() {
            return new EarningType(
                name,
                uuid);
        }
    }
}

