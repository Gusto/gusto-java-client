/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.GarnishmentChildSupportInput;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapitools.jackson.nullable.JsonNullable;


public class PostV1EmployeesEmployeeIdGarnishmentsRequestBody {

    /**
     * Whether or not this garnishment is currently active.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("active")
    private Optional<Boolean> active;

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    @JsonProperty("amount")
    private String amount;

    /**
     * The description of the garnishment.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether the garnishment is court ordered.
     */
    @JsonProperty("court_ordered")
    private boolean courtOrdered;

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("garnishment_type")
    private JsonNullable<? extends GarnishmentType> garnishmentType;

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("times")
    private JsonNullable<Long> times;

    /**
     * Whether the garnishment should recur indefinitely.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("recurring")
    private Optional<Boolean> recurring;

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("annual_maximum")
    private JsonNullable<String> annualMaximum;

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_period_maximum")
    private JsonNullable<String> payPeriodMaximum;

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("deduct_as_percentage")
    private Optional<Boolean> deductAsPercentage;

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_amount")
    private Optional<String> totalAmount;

    /**
     * Additional child support order details
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_support")
    private JsonNullable<? extends GarnishmentChildSupportInput> childSupport;

    @JsonCreator
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody(
            @JsonProperty("active") Optional<Boolean> active,
            @JsonProperty("amount") String amount,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("court_ordered") boolean courtOrdered,
            @JsonProperty("garnishment_type") JsonNullable<? extends GarnishmentType> garnishmentType,
            @JsonProperty("times") JsonNullable<Long> times,
            @JsonProperty("recurring") Optional<Boolean> recurring,
            @JsonProperty("annual_maximum") JsonNullable<String> annualMaximum,
            @JsonProperty("pay_period_maximum") JsonNullable<String> payPeriodMaximum,
            @JsonProperty("deduct_as_percentage") Optional<Boolean> deductAsPercentage,
            @JsonProperty("total_amount") Optional<String> totalAmount,
            @JsonProperty("child_support") JsonNullable<? extends GarnishmentChildSupportInput> childSupport) {
        Utils.checkNotNull(active, "active");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(courtOrdered, "courtOrdered");
        Utils.checkNotNull(garnishmentType, "garnishmentType");
        Utils.checkNotNull(times, "times");
        Utils.checkNotNull(recurring, "recurring");
        Utils.checkNotNull(annualMaximum, "annualMaximum");
        Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        Utils.checkNotNull(totalAmount, "totalAmount");
        Utils.checkNotNull(childSupport, "childSupport");
        this.active = active;
        this.amount = amount;
        this.description = description;
        this.courtOrdered = courtOrdered;
        this.garnishmentType = garnishmentType;
        this.times = times;
        this.recurring = recurring;
        this.annualMaximum = annualMaximum;
        this.payPeriodMaximum = payPeriodMaximum;
        this.deductAsPercentage = deductAsPercentage;
        this.totalAmount = totalAmount;
        this.childSupport = childSupport;
    }
    
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody(
            String amount,
            boolean courtOrdered) {
        this(Optional.empty(), amount, Optional.empty(), courtOrdered, JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined());
    }

    /**
     * Whether or not this garnishment is currently active.
     */
    @JsonIgnore
    public Optional<Boolean> active() {
        return active;
    }

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    @JsonIgnore
    public String amount() {
        return amount;
    }

    /**
     * The description of the garnishment.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether the garnishment is court ordered.
     */
    @JsonIgnore
    public boolean courtOrdered() {
        return courtOrdered;
    }

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GarnishmentType> garnishmentType() {
        return (JsonNullable<GarnishmentType>) garnishmentType;
    }

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    @JsonIgnore
    public JsonNullable<Long> times() {
        return times;
    }

    /**
     * Whether the garnishment should recur indefinitely.
     */
    @JsonIgnore
    public Optional<Boolean> recurring() {
        return recurring;
    }

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    @JsonIgnore
    public JsonNullable<String> annualMaximum() {
        return annualMaximum;
    }

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    @JsonIgnore
    public JsonNullable<String> payPeriodMaximum() {
        return payPeriodMaximum;
    }

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    @JsonIgnore
    public Optional<Boolean> deductAsPercentage() {
        return deductAsPercentage;
    }

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    @JsonIgnore
    public Optional<String> totalAmount() {
        return totalAmount;
    }

    /**
     * Additional child support order details
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<GarnishmentChildSupportInput> childSupport() {
        return (JsonNullable<GarnishmentChildSupportInput>) childSupport;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether or not this garnishment is currently active.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withActive(boolean active) {
        Utils.checkNotNull(active, "active");
        this.active = Optional.ofNullable(active);
        return this;
    }

    /**
     * Whether or not this garnishment is currently active.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withActive(Optional<Boolean> active) {
        Utils.checkNotNull(active, "active");
        this.active = active;
        return this;
    }

    /**
     * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The description of the garnishment.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the garnishment.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether the garnishment is court ordered.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withCourtOrdered(boolean courtOrdered) {
        Utils.checkNotNull(courtOrdered, "courtOrdered");
        this.courtOrdered = courtOrdered;
        return this;
    }

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withGarnishmentType(GarnishmentType garnishmentType) {
        Utils.checkNotNull(garnishmentType, "garnishmentType");
        this.garnishmentType = JsonNullable.of(garnishmentType);
        return this;
    }

    /**
     * The specific type of garnishment for court ordered garnishments.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withGarnishmentType(JsonNullable<? extends GarnishmentType> garnishmentType) {
        Utils.checkNotNull(garnishmentType, "garnishmentType");
        this.garnishmentType = garnishmentType;
        return this;
    }

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withTimes(long times) {
        Utils.checkNotNull(times, "times");
        this.times = JsonNullable.of(times);
        return this;
    }

    /**
     * The number of times to apply the garnishment. Ignored if recurring is true.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withTimes(JsonNullable<Long> times) {
        Utils.checkNotNull(times, "times");
        this.times = times;
        return this;
    }

    /**
     * Whether the garnishment should recur indefinitely.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withRecurring(boolean recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = Optional.ofNullable(recurring);
        return this;
    }

    /**
     * Whether the garnishment should recur indefinitely.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withRecurring(Optional<Boolean> recurring) {
        Utils.checkNotNull(recurring, "recurring");
        this.recurring = recurring;
        return this;
    }

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withAnnualMaximum(String annualMaximum) {
        Utils.checkNotNull(annualMaximum, "annualMaximum");
        this.annualMaximum = JsonNullable.of(annualMaximum);
        return this;
    }

    /**
     * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withAnnualMaximum(JsonNullable<String> annualMaximum) {
        Utils.checkNotNull(annualMaximum, "annualMaximum");
        this.annualMaximum = annualMaximum;
        return this;
    }

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withPayPeriodMaximum(String payPeriodMaximum) {
        Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
        this.payPeriodMaximum = JsonNullable.of(payPeriodMaximum);
        return this;
    }

    /**
     * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withPayPeriodMaximum(JsonNullable<String> payPeriodMaximum) {
        Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
        this.payPeriodMaximum = payPeriodMaximum;
        return this;
    }

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withDeductAsPercentage(boolean deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
        return this;
    }

    /**
     * Whether the amount should be treated as a percentage to be deducted per pay period.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withDeductAsPercentage(Optional<Boolean> deductAsPercentage) {
        Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
        this.deductAsPercentage = deductAsPercentage;
        return this;
    }

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withTotalAmount(String totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = Optional.ofNullable(totalAmount);
        return this;
    }

    /**
     * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withTotalAmount(Optional<String> totalAmount) {
        Utils.checkNotNull(totalAmount, "totalAmount");
        this.totalAmount = totalAmount;
        return this;
    }

    /**
     * Additional child support order details
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withChildSupport(GarnishmentChildSupportInput childSupport) {
        Utils.checkNotNull(childSupport, "childSupport");
        this.childSupport = JsonNullable.of(childSupport);
        return this;
    }

    /**
     * Additional child support order details
     */
    public PostV1EmployeesEmployeeIdGarnishmentsRequestBody withChildSupport(JsonNullable<? extends GarnishmentChildSupportInput> childSupport) {
        Utils.checkNotNull(childSupport, "childSupport");
        this.childSupport = childSupport;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1EmployeesEmployeeIdGarnishmentsRequestBody other = (PostV1EmployeesEmployeeIdGarnishmentsRequestBody) o;
        return 
            Objects.deepEquals(this.active, other.active) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.courtOrdered, other.courtOrdered) &&
            Objects.deepEquals(this.garnishmentType, other.garnishmentType) &&
            Objects.deepEquals(this.times, other.times) &&
            Objects.deepEquals(this.recurring, other.recurring) &&
            Objects.deepEquals(this.annualMaximum, other.annualMaximum) &&
            Objects.deepEquals(this.payPeriodMaximum, other.payPeriodMaximum) &&
            Objects.deepEquals(this.deductAsPercentage, other.deductAsPercentage) &&
            Objects.deepEquals(this.totalAmount, other.totalAmount) &&
            Objects.deepEquals(this.childSupport, other.childSupport);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            active,
            amount,
            description,
            courtOrdered,
            garnishmentType,
            times,
            recurring,
            annualMaximum,
            payPeriodMaximum,
            deductAsPercentage,
            totalAmount,
            childSupport);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1EmployeesEmployeeIdGarnishmentsRequestBody.class,
                "active", active,
                "amount", amount,
                "description", description,
                "courtOrdered", courtOrdered,
                "garnishmentType", garnishmentType,
                "times", times,
                "recurring", recurring,
                "annualMaximum", annualMaximum,
                "payPeriodMaximum", payPeriodMaximum,
                "deductAsPercentage", deductAsPercentage,
                "totalAmount", totalAmount,
                "childSupport", childSupport);
    }
    
    public final static class Builder {
 
        private Optional<Boolean> active;
 
        private String amount;
 
        private Optional<String> description = Optional.empty();
 
        private Boolean courtOrdered;
 
        private JsonNullable<? extends GarnishmentType> garnishmentType = JsonNullable.undefined();
 
        private JsonNullable<Long> times;
 
        private Optional<Boolean> recurring;
 
        private JsonNullable<String> annualMaximum;
 
        private JsonNullable<String> payPeriodMaximum;
 
        private Optional<Boolean> deductAsPercentage;
 
        private Optional<String> totalAmount = Optional.empty();
 
        private JsonNullable<? extends GarnishmentChildSupportInput> childSupport = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether or not this garnishment is currently active.
         */
        public Builder active(boolean active) {
            Utils.checkNotNull(active, "active");
            this.active = Optional.ofNullable(active);
            return this;
        }

        /**
         * Whether or not this garnishment is currently active.
         */
        public Builder active(Optional<Boolean> active) {
            Utils.checkNotNull(active, "active");
            this.active = active;
            return this;
        }

        /**
         * The amount of the garnishment. Either a percentage or a fixed dollar amount. Represented as a float, e.g. "8.00".
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The description of the garnishment.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the garnishment.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether the garnishment is court ordered.
         */
        public Builder courtOrdered(boolean courtOrdered) {
            Utils.checkNotNull(courtOrdered, "courtOrdered");
            this.courtOrdered = courtOrdered;
            return this;
        }

        /**
         * The specific type of garnishment for court ordered garnishments.
         */
        public Builder garnishmentType(GarnishmentType garnishmentType) {
            Utils.checkNotNull(garnishmentType, "garnishmentType");
            this.garnishmentType = JsonNullable.of(garnishmentType);
            return this;
        }

        /**
         * The specific type of garnishment for court ordered garnishments.
         */
        public Builder garnishmentType(JsonNullable<? extends GarnishmentType> garnishmentType) {
            Utils.checkNotNull(garnishmentType, "garnishmentType");
            this.garnishmentType = garnishmentType;
            return this;
        }

        /**
         * The number of times to apply the garnishment. Ignored if recurring is true.
         */
        public Builder times(long times) {
            Utils.checkNotNull(times, "times");
            this.times = JsonNullable.of(times);
            return this;
        }

        /**
         * The number of times to apply the garnishment. Ignored if recurring is true.
         */
        public Builder times(JsonNullable<Long> times) {
            Utils.checkNotNull(times, "times");
            this.times = times;
            return this;
        }

        /**
         * Whether the garnishment should recur indefinitely.
         */
        public Builder recurring(boolean recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = Optional.ofNullable(recurring);
            return this;
        }

        /**
         * Whether the garnishment should recur indefinitely.
         */
        public Builder recurring(Optional<Boolean> recurring) {
            Utils.checkNotNull(recurring, "recurring");
            this.recurring = recurring;
            return this;
        }

        /**
         * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
         */
        public Builder annualMaximum(String annualMaximum) {
            Utils.checkNotNull(annualMaximum, "annualMaximum");
            this.annualMaximum = JsonNullable.of(annualMaximum);
            return this;
        }

        /**
         * The maximum deduction per annum. A null value indicates no maximum. Represented as a float, e.g. "200.00".
         */
        public Builder annualMaximum(JsonNullable<String> annualMaximum) {
            Utils.checkNotNull(annualMaximum, "annualMaximum");
            this.annualMaximum = annualMaximum;
            return this;
        }

        /**
         * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
         */
        public Builder payPeriodMaximum(String payPeriodMaximum) {
            Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
            this.payPeriodMaximum = JsonNullable.of(payPeriodMaximum);
            return this;
        }

        /**
         * The maximum deduction per pay period. A null value indicates no maximum. Represented as a float, e.g. "16.00".
         */
        public Builder payPeriodMaximum(JsonNullable<String> payPeriodMaximum) {
            Utils.checkNotNull(payPeriodMaximum, "payPeriodMaximum");
            this.payPeriodMaximum = payPeriodMaximum;
            return this;
        }

        /**
         * Whether the amount should be treated as a percentage to be deducted per pay period.
         */
        public Builder deductAsPercentage(boolean deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = Optional.ofNullable(deductAsPercentage);
            return this;
        }

        /**
         * Whether the amount should be treated as a percentage to be deducted per pay period.
         */
        public Builder deductAsPercentage(Optional<Boolean> deductAsPercentage) {
            Utils.checkNotNull(deductAsPercentage, "deductAsPercentage");
            this.deductAsPercentage = deductAsPercentage;
            return this;
        }

        /**
         * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
         */
        public Builder totalAmount(String totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = Optional.ofNullable(totalAmount);
            return this;
        }

        /**
         * A maximum total deduction for the lifetime of this garnishment. A null value indicates no maximum.
         */
        public Builder totalAmount(Optional<String> totalAmount) {
            Utils.checkNotNull(totalAmount, "totalAmount");
            this.totalAmount = totalAmount;
            return this;
        }

        /**
         * Additional child support order details
         */
        public Builder childSupport(GarnishmentChildSupportInput childSupport) {
            Utils.checkNotNull(childSupport, "childSupport");
            this.childSupport = JsonNullable.of(childSupport);
            return this;
        }

        /**
         * Additional child support order details
         */
        public Builder childSupport(JsonNullable<? extends GarnishmentChildSupportInput> childSupport) {
            Utils.checkNotNull(childSupport, "childSupport");
            this.childSupport = childSupport;
            return this;
        }
        
        public PostV1EmployeesEmployeeIdGarnishmentsRequestBody build() {
            if (active == null) {
                active = _SINGLETON_VALUE_Active.value();
            }
            if (times == null) {
                times = _SINGLETON_VALUE_Times.value();
            }
            if (recurring == null) {
                recurring = _SINGLETON_VALUE_Recurring.value();
            }
            if (annualMaximum == null) {
                annualMaximum = _SINGLETON_VALUE_AnnualMaximum.value();
            }
            if (payPeriodMaximum == null) {
                payPeriodMaximum = _SINGLETON_VALUE_PayPeriodMaximum.value();
            }
            if (deductAsPercentage == null) {
                deductAsPercentage = _SINGLETON_VALUE_DeductAsPercentage.value();
            }            return new PostV1EmployeesEmployeeIdGarnishmentsRequestBody(
                active,
                amount,
                description,
                courtOrdered,
                garnishmentType,
                times,
                recurring,
                annualMaximum,
                payPeriodMaximum,
                deductAsPercentage,
                totalAmount,
                childSupport);
        }

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Active =
                new LazySingletonValue<>(
                        "active",
                        "true",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<Long>> _SINGLETON_VALUE_Times =
                new LazySingletonValue<>(
                        "times",
                        "null",
                        new TypeReference<JsonNullable<Long>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_Recurring =
                new LazySingletonValue<>(
                        "recurring",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_AnnualMaximum =
                new LazySingletonValue<>(
                        "annual_maximum",
                        "null",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<JsonNullable<String>> _SINGLETON_VALUE_PayPeriodMaximum =
                new LazySingletonValue<>(
                        "pay_period_maximum",
                        "null",
                        new TypeReference<JsonNullable<String>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_DeductAsPercentage =
                new LazySingletonValue<>(
                        "deduct_as_percentage",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

