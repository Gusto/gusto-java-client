/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

public class PayScheduleAssignmentEmployeeChange {

    /**
     * The UUID of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * The employee's first name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private Optional<String> firstName;

    /**
     * The employee's last name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private Optional<String> lastName;

    /**
     * New pay schedule frequency and name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_frequency")
    private Optional<String> payFrequency;

    /**
     * Pay schedule assignment first pay period information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_pay_period")
    private Optional<? extends PayScheduleAssignmentPayPeriod> firstPayPeriod;

    /**
     * Pay schedule assignment transition pay period information.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("transition_pay_period")
    private Optional<? extends PayScheduleAssignmentTransitionPayPeriod> transitionPayPeriod;

    @JsonCreator
    public PayScheduleAssignmentEmployeeChange(
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("last_name") Optional<String> lastName,
            @JsonProperty("pay_frequency") Optional<String> payFrequency,
            @JsonProperty("first_pay_period") Optional<? extends PayScheduleAssignmentPayPeriod> firstPayPeriod,
            @JsonProperty("transition_pay_period") Optional<? extends PayScheduleAssignmentTransitionPayPeriod> transitionPayPeriod) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(payFrequency, "payFrequency");
        Utils.checkNotNull(firstPayPeriod, "firstPayPeriod");
        Utils.checkNotNull(transitionPayPeriod, "transitionPayPeriod");
        this.employeeUuid = employeeUuid;
        this.firstName = firstName;
        this.lastName = lastName;
        this.payFrequency = payFrequency;
        this.firstPayPeriod = firstPayPeriod;
        this.transitionPayPeriod = transitionPayPeriod;
    }
    
    public PayScheduleAssignmentEmployeeChange() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * The employee's first name.
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The employee's last name.
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * New pay schedule frequency and name.
     */
    @JsonIgnore
    public Optional<String> payFrequency() {
        return payFrequency;
    }

    /**
     * Pay schedule assignment first pay period information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayScheduleAssignmentPayPeriod> firstPayPeriod() {
        return (Optional<PayScheduleAssignmentPayPeriod>) firstPayPeriod;
    }

    /**
     * Pay schedule assignment transition pay period information.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayScheduleAssignmentTransitionPayPeriod> transitionPayPeriod() {
        return (Optional<PayScheduleAssignmentTransitionPayPeriod>) transitionPayPeriod;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the employee.
     */
    public PayScheduleAssignmentEmployeeChange withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * The UUID of the employee.
     */
    public PayScheduleAssignmentEmployeeChange withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * The employee's first name.
     */
    public PayScheduleAssignmentEmployeeChange withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The employee's first name.
     */
    public PayScheduleAssignmentEmployeeChange withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The employee's last name.
     */
    public PayScheduleAssignmentEmployeeChange withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The employee's last name.
     */
    public PayScheduleAssignmentEmployeeChange withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * New pay schedule frequency and name.
     */
    public PayScheduleAssignmentEmployeeChange withPayFrequency(String payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = Optional.ofNullable(payFrequency);
        return this;
    }

    /**
     * New pay schedule frequency and name.
     */
    public PayScheduleAssignmentEmployeeChange withPayFrequency(Optional<String> payFrequency) {
        Utils.checkNotNull(payFrequency, "payFrequency");
        this.payFrequency = payFrequency;
        return this;
    }

    /**
     * Pay schedule assignment first pay period information.
     */
    public PayScheduleAssignmentEmployeeChange withFirstPayPeriod(PayScheduleAssignmentPayPeriod firstPayPeriod) {
        Utils.checkNotNull(firstPayPeriod, "firstPayPeriod");
        this.firstPayPeriod = Optional.ofNullable(firstPayPeriod);
        return this;
    }

    /**
     * Pay schedule assignment first pay period information.
     */
    public PayScheduleAssignmentEmployeeChange withFirstPayPeriod(Optional<? extends PayScheduleAssignmentPayPeriod> firstPayPeriod) {
        Utils.checkNotNull(firstPayPeriod, "firstPayPeriod");
        this.firstPayPeriod = firstPayPeriod;
        return this;
    }

    /**
     * Pay schedule assignment transition pay period information.
     */
    public PayScheduleAssignmentEmployeeChange withTransitionPayPeriod(PayScheduleAssignmentTransitionPayPeriod transitionPayPeriod) {
        Utils.checkNotNull(transitionPayPeriod, "transitionPayPeriod");
        this.transitionPayPeriod = Optional.ofNullable(transitionPayPeriod);
        return this;
    }

    /**
     * Pay schedule assignment transition pay period information.
     */
    public PayScheduleAssignmentEmployeeChange withTransitionPayPeriod(Optional<? extends PayScheduleAssignmentTransitionPayPeriod> transitionPayPeriod) {
        Utils.checkNotNull(transitionPayPeriod, "transitionPayPeriod");
        this.transitionPayPeriod = transitionPayPeriod;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayScheduleAssignmentEmployeeChange other = (PayScheduleAssignmentEmployeeChange) o;
        return 
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.payFrequency, other.payFrequency) &&
            Objects.deepEquals(this.firstPayPeriod, other.firstPayPeriod) &&
            Objects.deepEquals(this.transitionPayPeriod, other.transitionPayPeriod);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employeeUuid,
            firstName,
            lastName,
            payFrequency,
            firstPayPeriod,
            transitionPayPeriod);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayScheduleAssignmentEmployeeChange.class,
                "employeeUuid", employeeUuid,
                "firstName", firstName,
                "lastName", lastName,
                "payFrequency", payFrequency,
                "firstPayPeriod", firstPayPeriod,
                "transitionPayPeriod", transitionPayPeriod);
    }
    
    public final static class Builder {
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> payFrequency = Optional.empty();
 
        private Optional<? extends PayScheduleAssignmentPayPeriod> firstPayPeriod = Optional.empty();
 
        private Optional<? extends PayScheduleAssignmentTransitionPayPeriod> transitionPayPeriod = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the employee.
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * The UUID of the employee.
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * The employee's first name.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The employee's first name.
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The employee's last name.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The employee's last name.
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * New pay schedule frequency and name.
         */
        public Builder payFrequency(String payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = Optional.ofNullable(payFrequency);
            return this;
        }

        /**
         * New pay schedule frequency and name.
         */
        public Builder payFrequency(Optional<String> payFrequency) {
            Utils.checkNotNull(payFrequency, "payFrequency");
            this.payFrequency = payFrequency;
            return this;
        }

        /**
         * Pay schedule assignment first pay period information.
         */
        public Builder firstPayPeriod(PayScheduleAssignmentPayPeriod firstPayPeriod) {
            Utils.checkNotNull(firstPayPeriod, "firstPayPeriod");
            this.firstPayPeriod = Optional.ofNullable(firstPayPeriod);
            return this;
        }

        /**
         * Pay schedule assignment first pay period information.
         */
        public Builder firstPayPeriod(Optional<? extends PayScheduleAssignmentPayPeriod> firstPayPeriod) {
            Utils.checkNotNull(firstPayPeriod, "firstPayPeriod");
            this.firstPayPeriod = firstPayPeriod;
            return this;
        }

        /**
         * Pay schedule assignment transition pay period information.
         */
        public Builder transitionPayPeriod(PayScheduleAssignmentTransitionPayPeriod transitionPayPeriod) {
            Utils.checkNotNull(transitionPayPeriod, "transitionPayPeriod");
            this.transitionPayPeriod = Optional.ofNullable(transitionPayPeriod);
            return this;
        }

        /**
         * Pay schedule assignment transition pay period information.
         */
        public Builder transitionPayPeriod(Optional<? extends PayScheduleAssignmentTransitionPayPeriod> transitionPayPeriod) {
            Utils.checkNotNull(transitionPayPeriod, "transitionPayPeriod");
            this.transitionPayPeriod = transitionPayPeriod;
            return this;
        }
        
        public PayScheduleAssignmentEmployeeChange build() {
            return new PayScheduleAssignmentEmployeeChange(
                employeeUuid,
                firstName,
                lastName,
                payFrequency,
                firstPayPeriod,
                transitionPayPeriod);
        }
    }
}

