/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * Benefits
 * 
 * <p>An array of benefits for the employee. Depends on your company selections, benefits include 401k, health insurance and more.
 */

public class Benefits {

    /**
     * Company contribution amount towards the benefit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_contribution_amount")
    private Optional<String> companyContributionAmount;

    /**
     * Employee deduction amount towards the benefit
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_deduction_amount")
    private Optional<String> employeeDeductionAmount;

    /**
     * The ID of the benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefit_id")
    private Optional<Long> benefitId;

    @JsonCreator
    public Benefits(
            @JsonProperty("company_contribution_amount") Optional<String> companyContributionAmount,
            @JsonProperty("employee_deduction_amount") Optional<String> employeeDeductionAmount,
            @JsonProperty("benefit_id") Optional<Long> benefitId) {
        Utils.checkNotNull(companyContributionAmount, "companyContributionAmount");
        Utils.checkNotNull(employeeDeductionAmount, "employeeDeductionAmount");
        Utils.checkNotNull(benefitId, "benefitId");
        this.companyContributionAmount = companyContributionAmount;
        this.employeeDeductionAmount = employeeDeductionAmount;
        this.benefitId = benefitId;
    }
    
    public Benefits() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Company contribution amount towards the benefit
     */
    @JsonIgnore
    public Optional<String> companyContributionAmount() {
        return companyContributionAmount;
    }

    /**
     * Employee deduction amount towards the benefit
     */
    @JsonIgnore
    public Optional<String> employeeDeductionAmount() {
        return employeeDeductionAmount;
    }

    /**
     * The ID of the benefit.
     */
    @JsonIgnore
    public Optional<Long> benefitId() {
        return benefitId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Company contribution amount towards the benefit
     */
    public Benefits withCompanyContributionAmount(String companyContributionAmount) {
        Utils.checkNotNull(companyContributionAmount, "companyContributionAmount");
        this.companyContributionAmount = Optional.ofNullable(companyContributionAmount);
        return this;
    }

    /**
     * Company contribution amount towards the benefit
     */
    public Benefits withCompanyContributionAmount(Optional<String> companyContributionAmount) {
        Utils.checkNotNull(companyContributionAmount, "companyContributionAmount");
        this.companyContributionAmount = companyContributionAmount;
        return this;
    }

    /**
     * Employee deduction amount towards the benefit
     */
    public Benefits withEmployeeDeductionAmount(String employeeDeductionAmount) {
        Utils.checkNotNull(employeeDeductionAmount, "employeeDeductionAmount");
        this.employeeDeductionAmount = Optional.ofNullable(employeeDeductionAmount);
        return this;
    }

    /**
     * Employee deduction amount towards the benefit
     */
    public Benefits withEmployeeDeductionAmount(Optional<String> employeeDeductionAmount) {
        Utils.checkNotNull(employeeDeductionAmount, "employeeDeductionAmount");
        this.employeeDeductionAmount = employeeDeductionAmount;
        return this;
    }

    /**
     * The ID of the benefit.
     */
    public Benefits withBenefitId(long benefitId) {
        Utils.checkNotNull(benefitId, "benefitId");
        this.benefitId = Optional.ofNullable(benefitId);
        return this;
    }

    /**
     * The ID of the benefit.
     */
    public Benefits withBenefitId(Optional<Long> benefitId) {
        Utils.checkNotNull(benefitId, "benefitId");
        this.benefitId = benefitId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Benefits other = (Benefits) o;
        return 
            Objects.deepEquals(this.companyContributionAmount, other.companyContributionAmount) &&
            Objects.deepEquals(this.employeeDeductionAmount, other.employeeDeductionAmount) &&
            Objects.deepEquals(this.benefitId, other.benefitId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyContributionAmount,
            employeeDeductionAmount,
            benefitId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Benefits.class,
                "companyContributionAmount", companyContributionAmount,
                "employeeDeductionAmount", employeeDeductionAmount,
                "benefitId", benefitId);
    }
    
    public final static class Builder {
 
        private Optional<String> companyContributionAmount = Optional.empty();
 
        private Optional<String> employeeDeductionAmount = Optional.empty();
 
        private Optional<Long> benefitId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Company contribution amount towards the benefit
         */
        public Builder companyContributionAmount(String companyContributionAmount) {
            Utils.checkNotNull(companyContributionAmount, "companyContributionAmount");
            this.companyContributionAmount = Optional.ofNullable(companyContributionAmount);
            return this;
        }

        /**
         * Company contribution amount towards the benefit
         */
        public Builder companyContributionAmount(Optional<String> companyContributionAmount) {
            Utils.checkNotNull(companyContributionAmount, "companyContributionAmount");
            this.companyContributionAmount = companyContributionAmount;
            return this;
        }

        /**
         * Employee deduction amount towards the benefit
         */
        public Builder employeeDeductionAmount(String employeeDeductionAmount) {
            Utils.checkNotNull(employeeDeductionAmount, "employeeDeductionAmount");
            this.employeeDeductionAmount = Optional.ofNullable(employeeDeductionAmount);
            return this;
        }

        /**
         * Employee deduction amount towards the benefit
         */
        public Builder employeeDeductionAmount(Optional<String> employeeDeductionAmount) {
            Utils.checkNotNull(employeeDeductionAmount, "employeeDeductionAmount");
            this.employeeDeductionAmount = employeeDeductionAmount;
            return this;
        }

        /**
         * The ID of the benefit.
         */
        public Builder benefitId(long benefitId) {
            Utils.checkNotNull(benefitId, "benefitId");
            this.benefitId = Optional.ofNullable(benefitId);
            return this;
        }

        /**
         * The ID of the benefit.
         */
        public Builder benefitId(Optional<Long> benefitId) {
            Utils.checkNotNull(benefitId, "benefitId");
            this.benefitId = benefitId;
            return this;
        }
        
        public Benefits build() {
            return new Benefits(
                companyContributionAmount,
                employeeDeductionAmount,
                benefitId);
        }
    }
}

