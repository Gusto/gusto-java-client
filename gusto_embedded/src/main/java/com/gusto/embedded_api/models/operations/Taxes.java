/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;


public class Taxes {

    /**
     * The amount of the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * The ID of the tax.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_id")
    private Optional<Long> taxId;

    @JsonCreator
    public Taxes(
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("tax_id") Optional<Long> taxId) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(taxId, "taxId");
        this.amount = amount;
        this.taxId = taxId;
    }
    
    public Taxes() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The amount of the tax.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * The ID of the tax.
     */
    @JsonIgnore
    public Optional<Long> taxId() {
        return taxId;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The amount of the tax.
     */
    public Taxes withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of the tax.
     */
    public Taxes withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The ID of the tax.
     */
    public Taxes withTaxId(long taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = Optional.ofNullable(taxId);
        return this;
    }

    /**
     * The ID of the tax.
     */
    public Taxes withTaxId(Optional<Long> taxId) {
        Utils.checkNotNull(taxId, "taxId");
        this.taxId = taxId;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Taxes other = (Taxes) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.taxId, other.taxId);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            taxId);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Taxes.class,
                "amount", amount,
                "taxId", taxId);
    }
    
    public final static class Builder {
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<Long> taxId = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The amount of the tax.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of the tax.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The ID of the tax.
         */
        public Builder taxId(long taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = Optional.ofNullable(taxId);
            return this;
        }

        /**
         * The ID of the tax.
         */
        public Builder taxId(Optional<Long> taxId) {
            Utils.checkNotNull(taxId, "taxId");
            this.taxId = taxId;
            return this;
        }
        
        public Taxes build() {
            return new Taxes(
                amount,
                taxId);
        }
    }
}

