/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * Admin
 * 
 * <p>The representation of an admin user in Gusto.
 */

public class Admin {

    /**
     * The unique id of the admin.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * The first name of the admin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private Optional<String> firstName;

    /**
     * The last name of the admin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private Optional<String> lastName;

    @JsonCreator
    public Admin(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("last_name") Optional<String> lastName) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        this.uuid = uuid;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
    }
    
    public Admin(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The unique id of the admin.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * The first name of the admin.
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The last name of the admin.
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The unique id of the admin.
     */
    public Admin withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
     */
    public Admin withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
     */
    public Admin withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The first name of the admin.
     */
    public Admin withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The first name of the admin.
     */
    public Admin withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the admin.
     */
    public Admin withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The last name of the admin.
     */
    public Admin withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Admin other = (Admin) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            email,
            firstName,
            lastName);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Admin.class,
                "uuid", uuid,
                "email", email,
                "firstName", firstName,
                "lastName", lastName);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The unique id of the admin.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The email of the admin for Gusto's system. If the email matches an existing user, this will create an admin account for them.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The first name of the admin.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The first name of the admin.
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the admin.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The last name of the admin.
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }
        
        public Admin build() {
            return new Admin(
                uuid,
                email,
                firstName,
                lastName);
        }
    }
}

