/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;

/**
 * GetV1TokenInfoResponseBody - Example response
 */

public class GetV1TokenInfoResponseBody {

    /**
     * Space delimited string of accessible scopes.
     */
    @JsonProperty("scope")
    private String scope;

    /**
     * Information about the token resource.
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("resource")
    private Optional<? extends Resource> resource;

    /**
     * Information about the token owner
     */
    @JsonInclude(Include.ALWAYS)
    @JsonProperty("resource_owner")
    private Optional<? extends ResourceOwner> resourceOwner;

    @JsonCreator
    public GetV1TokenInfoResponseBody(
            @JsonProperty("scope") String scope,
            @JsonProperty("resource") Optional<? extends Resource> resource,
            @JsonProperty("resource_owner") Optional<? extends ResourceOwner> resourceOwner) {
        Utils.checkNotNull(scope, "scope");
        Utils.checkNotNull(resource, "resource");
        Utils.checkNotNull(resourceOwner, "resourceOwner");
        this.scope = scope;
        this.resource = resource;
        this.resourceOwner = resourceOwner;
    }
    
    public GetV1TokenInfoResponseBody(
            String scope) {
        this(scope, Optional.empty(), Optional.empty());
    }

    /**
     * Space delimited string of accessible scopes.
     */
    @JsonIgnore
    public String scope() {
        return scope;
    }

    /**
     * Information about the token resource.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Resource> resource() {
        return (Optional<Resource>) resource;
    }

    /**
     * Information about the token owner
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ResourceOwner> resourceOwner() {
        return (Optional<ResourceOwner>) resourceOwner;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Space delimited string of accessible scopes.
     */
    public GetV1TokenInfoResponseBody withScope(String scope) {
        Utils.checkNotNull(scope, "scope");
        this.scope = scope;
        return this;
    }

    /**
     * Information about the token resource.
     */
    public GetV1TokenInfoResponseBody withResource(Resource resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = Optional.ofNullable(resource);
        return this;
    }

    /**
     * Information about the token resource.
     */
    public GetV1TokenInfoResponseBody withResource(Optional<? extends Resource> resource) {
        Utils.checkNotNull(resource, "resource");
        this.resource = resource;
        return this;
    }

    /**
     * Information about the token owner
     */
    public GetV1TokenInfoResponseBody withResourceOwner(ResourceOwner resourceOwner) {
        Utils.checkNotNull(resourceOwner, "resourceOwner");
        this.resourceOwner = Optional.ofNullable(resourceOwner);
        return this;
    }

    /**
     * Information about the token owner
     */
    public GetV1TokenInfoResponseBody withResourceOwner(Optional<? extends ResourceOwner> resourceOwner) {
        Utils.checkNotNull(resourceOwner, "resourceOwner");
        this.resourceOwner = resourceOwner;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetV1TokenInfoResponseBody other = (GetV1TokenInfoResponseBody) o;
        return 
            Objects.deepEquals(this.scope, other.scope) &&
            Objects.deepEquals(this.resource, other.resource) &&
            Objects.deepEquals(this.resourceOwner, other.resourceOwner);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            scope,
            resource,
            resourceOwner);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetV1TokenInfoResponseBody.class,
                "scope", scope,
                "resource", resource,
                "resourceOwner", resourceOwner);
    }
    
    public final static class Builder {
 
        private String scope;
 
        private Optional<? extends Resource> resource = Optional.empty();
 
        private Optional<? extends ResourceOwner> resourceOwner = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Space delimited string of accessible scopes.
         */
        public Builder scope(String scope) {
            Utils.checkNotNull(scope, "scope");
            this.scope = scope;
            return this;
        }

        /**
         * Information about the token resource.
         */
        public Builder resource(Resource resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = Optional.ofNullable(resource);
            return this;
        }

        /**
         * Information about the token resource.
         */
        public Builder resource(Optional<? extends Resource> resource) {
            Utils.checkNotNull(resource, "resource");
            this.resource = resource;
            return this;
        }

        /**
         * Information about the token owner
         */
        public Builder resourceOwner(ResourceOwner resourceOwner) {
            Utils.checkNotNull(resourceOwner, "resourceOwner");
            this.resourceOwner = Optional.ofNullable(resourceOwner);
            return this;
        }

        /**
         * Information about the token owner
         */
        public Builder resourceOwner(Optional<? extends ResourceOwner> resourceOwner) {
            Utils.checkNotNull(resourceOwner, "resourceOwner");
            this.resourceOwner = resourceOwner;
            return this;
        }
        
        public GetV1TokenInfoResponseBody build() {
            return new GetV1TokenInfoResponseBody(
                scope,
                resource,
                resourceOwner);
        }
    }
}

