/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
/**
 * ContractorPaymentReceiptLicensee
 * 
 * <p>The licensed payroll processor
 */

public class ContractorPaymentReceiptLicensee {

    /**
     * Always the fixed string "Gusto, Zenpayroll Inc."
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * Always the fixed string "525 20th St"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("address")
    private Optional<String> address;

    /**
     * Always the fixed string "San Francisco"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("city")
    private Optional<String> city;

    /**
     * Always the fixed string "CA"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("state")
    private Optional<String> state;

    /**
     * Always the fixed string "94107"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("postal_code")
    private Optional<String> postalCode;

    /**
     * Always the fixed string "4157778888"
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone_number")
    private Optional<String> phoneNumber;

    @JsonCreator
    public ContractorPaymentReceiptLicensee(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("address") Optional<String> address,
            @JsonProperty("city") Optional<String> city,
            @JsonProperty("state") Optional<String> state,
            @JsonProperty("postal_code") Optional<String> postalCode,
            @JsonProperty("phone_number") Optional<String> phoneNumber) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(address, "address");
        Utils.checkNotNull(city, "city");
        Utils.checkNotNull(state, "state");
        Utils.checkNotNull(postalCode, "postalCode");
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.name = name;
        this.address = address;
        this.city = city;
        this.state = state;
        this.postalCode = postalCode;
        this.phoneNumber = phoneNumber;
    }
    
    public ContractorPaymentReceiptLicensee() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Always the fixed string "Gusto, Zenpayroll Inc."
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * Always the fixed string "525 20th St"
     */
    @JsonIgnore
    public Optional<String> address() {
        return address;
    }

    /**
     * Always the fixed string "San Francisco"
     */
    @JsonIgnore
    public Optional<String> city() {
        return city;
    }

    /**
     * Always the fixed string "CA"
     */
    @JsonIgnore
    public Optional<String> state() {
        return state;
    }

    /**
     * Always the fixed string "94107"
     */
    @JsonIgnore
    public Optional<String> postalCode() {
        return postalCode;
    }

    /**
     * Always the fixed string "4157778888"
     */
    @JsonIgnore
    public Optional<String> phoneNumber() {
        return phoneNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Always the fixed string "Gusto, Zenpayroll Inc."
     */
    public ContractorPaymentReceiptLicensee withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * Always the fixed string "Gusto, Zenpayroll Inc."
     */
    public ContractorPaymentReceiptLicensee withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * Always the fixed string "525 20th St"
     */
    public ContractorPaymentReceiptLicensee withAddress(String address) {
        Utils.checkNotNull(address, "address");
        this.address = Optional.ofNullable(address);
        return this;
    }

    /**
     * Always the fixed string "525 20th St"
     */
    public ContractorPaymentReceiptLicensee withAddress(Optional<String> address) {
        Utils.checkNotNull(address, "address");
        this.address = address;
        return this;
    }

    /**
     * Always the fixed string "San Francisco"
     */
    public ContractorPaymentReceiptLicensee withCity(String city) {
        Utils.checkNotNull(city, "city");
        this.city = Optional.ofNullable(city);
        return this;
    }

    /**
     * Always the fixed string "San Francisco"
     */
    public ContractorPaymentReceiptLicensee withCity(Optional<String> city) {
        Utils.checkNotNull(city, "city");
        this.city = city;
        return this;
    }

    /**
     * Always the fixed string "CA"
     */
    public ContractorPaymentReceiptLicensee withState(String state) {
        Utils.checkNotNull(state, "state");
        this.state = Optional.ofNullable(state);
        return this;
    }

    /**
     * Always the fixed string "CA"
     */
    public ContractorPaymentReceiptLicensee withState(Optional<String> state) {
        Utils.checkNotNull(state, "state");
        this.state = state;
        return this;
    }

    /**
     * Always the fixed string "94107"
     */
    public ContractorPaymentReceiptLicensee withPostalCode(String postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = Optional.ofNullable(postalCode);
        return this;
    }

    /**
     * Always the fixed string "94107"
     */
    public ContractorPaymentReceiptLicensee withPostalCode(Optional<String> postalCode) {
        Utils.checkNotNull(postalCode, "postalCode");
        this.postalCode = postalCode;
        return this;
    }

    /**
     * Always the fixed string "4157778888"
     */
    public ContractorPaymentReceiptLicensee withPhoneNumber(String phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = Optional.ofNullable(phoneNumber);
        return this;
    }

    /**
     * Always the fixed string "4157778888"
     */
    public ContractorPaymentReceiptLicensee withPhoneNumber(Optional<String> phoneNumber) {
        Utils.checkNotNull(phoneNumber, "phoneNumber");
        this.phoneNumber = phoneNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorPaymentReceiptLicensee other = (ContractorPaymentReceiptLicensee) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.address, other.address) &&
            Objects.deepEquals(this.city, other.city) &&
            Objects.deepEquals(this.state, other.state) &&
            Objects.deepEquals(this.postalCode, other.postalCode) &&
            Objects.deepEquals(this.phoneNumber, other.phoneNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            address,
            city,
            state,
            postalCode,
            phoneNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorPaymentReceiptLicensee.class,
                "name", name,
                "address", address,
                "city", city,
                "state", state,
                "postalCode", postalCode,
                "phoneNumber", phoneNumber);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> address = Optional.empty();
 
        private Optional<String> city = Optional.empty();
 
        private Optional<String> state = Optional.empty();
 
        private Optional<String> postalCode = Optional.empty();
 
        private Optional<String> phoneNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Always the fixed string "Gusto, Zenpayroll Inc."
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * Always the fixed string "Gusto, Zenpayroll Inc."
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * Always the fixed string "525 20th St"
         */
        public Builder address(String address) {
            Utils.checkNotNull(address, "address");
            this.address = Optional.ofNullable(address);
            return this;
        }

        /**
         * Always the fixed string "525 20th St"
         */
        public Builder address(Optional<String> address) {
            Utils.checkNotNull(address, "address");
            this.address = address;
            return this;
        }

        /**
         * Always the fixed string "San Francisco"
         */
        public Builder city(String city) {
            Utils.checkNotNull(city, "city");
            this.city = Optional.ofNullable(city);
            return this;
        }

        /**
         * Always the fixed string "San Francisco"
         */
        public Builder city(Optional<String> city) {
            Utils.checkNotNull(city, "city");
            this.city = city;
            return this;
        }

        /**
         * Always the fixed string "CA"
         */
        public Builder state(String state) {
            Utils.checkNotNull(state, "state");
            this.state = Optional.ofNullable(state);
            return this;
        }

        /**
         * Always the fixed string "CA"
         */
        public Builder state(Optional<String> state) {
            Utils.checkNotNull(state, "state");
            this.state = state;
            return this;
        }

        /**
         * Always the fixed string "94107"
         */
        public Builder postalCode(String postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = Optional.ofNullable(postalCode);
            return this;
        }

        /**
         * Always the fixed string "94107"
         */
        public Builder postalCode(Optional<String> postalCode) {
            Utils.checkNotNull(postalCode, "postalCode");
            this.postalCode = postalCode;
            return this;
        }

        /**
         * Always the fixed string "4157778888"
         */
        public Builder phoneNumber(String phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = Optional.ofNullable(phoneNumber);
            return this;
        }

        /**
         * Always the fixed string "4157778888"
         */
        public Builder phoneNumber(Optional<String> phoneNumber) {
            Utils.checkNotNull(phoneNumber, "phoneNumber");
            this.phoneNumber = phoneNumber;
            return this;
        }
        
        public ContractorPaymentReceiptLicensee build() {
            return new ContractorPaymentReceiptLicensee(
                name,
                address,
                city,
                state,
                postalCode,
                phoneNumber);
        }
    }
}

