/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.utils.LazySingletonValue;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;


public class PostV1CompaniesCompanyIdContractorPaymentsRequestBody {

    /**
     * The contractor receiving the payment
     */
    @JsonProperty("contractor_uuid")
    private String contractorUuid;

    /**
     * Date of contractor payment
     */
    @JsonProperty("date")
    private LocalDate date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod> paymentMethod;

    /**
     * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage")
    private Optional<Double> wage;

    /**
     * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hours")
    private Optional<Double> hours;

    /**
     * If the contractor is on an hourly wage, this is the bonus the contractor earned
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bonus")
    private Optional<Double> bonus;

    /**
     * Reimbursed wages for the contractor
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement")
    private Optional<Double> reimbursement;

    @JsonCreator
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody(
            @JsonProperty("contractor_uuid") String contractorUuid,
            @JsonProperty("date") LocalDate date,
            @JsonProperty("payment_method") Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod> paymentMethod,
            @JsonProperty("wage") Optional<Double> wage,
            @JsonProperty("hours") Optional<Double> hours,
            @JsonProperty("bonus") Optional<Double> bonus,
            @JsonProperty("reimbursement") Optional<Double> reimbursement) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(wage, "wage");
        Utils.checkNotNull(hours, "hours");
        Utils.checkNotNull(bonus, "bonus");
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.contractorUuid = contractorUuid;
        this.date = date;
        this.paymentMethod = paymentMethod;
        this.wage = wage;
        this.hours = hours;
        this.bonus = bonus;
        this.reimbursement = reimbursement;
    }
    
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody(
            String contractorUuid,
            LocalDate date) {
        this(contractorUuid, date, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The contractor receiving the payment
     */
    @JsonIgnore
    public String contractorUuid() {
        return contractorUuid;
    }

    /**
     * Date of contractor payment
     */
    @JsonIgnore
    public LocalDate date() {
        return date;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod> paymentMethod() {
        return (Optional<PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod>) paymentMethod;
    }

    /**
     * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
     */
    @JsonIgnore
    public Optional<Double> wage() {
        return wage;
    }

    /**
     * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
     */
    @JsonIgnore
    public Optional<Double> hours() {
        return hours;
    }

    /**
     * If the contractor is on an hourly wage, this is the bonus the contractor earned
     */
    @JsonIgnore
    public Optional<Double> bonus() {
        return bonus;
    }

    /**
     * Reimbursed wages for the contractor
     */
    @JsonIgnore
    public Optional<Double> reimbursement() {
        return reimbursement;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The contractor receiving the payment
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withContractorUuid(String contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = contractorUuid;
        return this;
    }

    /**
     * Date of contractor payment
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withDate(LocalDate date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withPaymentMethod(PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = Optional.ofNullable(paymentMethod);
        return this;
    }

    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withPaymentMethod(Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withWage(double wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = Optional.ofNullable(wage);
        return this;
    }

    /**
     * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withWage(Optional<Double> wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = wage;
        return this;
    }

    /**
     * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withHours(double hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = Optional.ofNullable(hours);
        return this;
    }

    /**
     * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withHours(Optional<Double> hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = hours;
        return this;
    }

    /**
     * If the contractor is on an hourly wage, this is the bonus the contractor earned
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withBonus(double bonus) {
        Utils.checkNotNull(bonus, "bonus");
        this.bonus = Optional.ofNullable(bonus);
        return this;
    }

    /**
     * If the contractor is on an hourly wage, this is the bonus the contractor earned
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withBonus(Optional<Double> bonus) {
        Utils.checkNotNull(bonus, "bonus");
        this.bonus = bonus;
        return this;
    }

    /**
     * Reimbursed wages for the contractor
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withReimbursement(double reimbursement) {
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.reimbursement = Optional.ofNullable(reimbursement);
        return this;
    }

    /**
     * Reimbursed wages for the contractor
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBody withReimbursement(Optional<Double> reimbursement) {
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.reimbursement = reimbursement;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1CompaniesCompanyIdContractorPaymentsRequestBody other = (PostV1CompaniesCompanyIdContractorPaymentsRequestBody) o;
        return 
            Objects.deepEquals(this.contractorUuid, other.contractorUuid) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.wage, other.wage) &&
            Objects.deepEquals(this.hours, other.hours) &&
            Objects.deepEquals(this.bonus, other.bonus) &&
            Objects.deepEquals(this.reimbursement, other.reimbursement);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            contractorUuid,
            date,
            paymentMethod,
            wage,
            hours,
            bonus,
            reimbursement);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1CompaniesCompanyIdContractorPaymentsRequestBody.class,
                "contractorUuid", contractorUuid,
                "date", date,
                "paymentMethod", paymentMethod,
                "wage", wage,
                "hours", hours,
                "bonus", bonus,
                "reimbursement", reimbursement);
    }
    
    public final static class Builder {
 
        private String contractorUuid;
 
        private LocalDate date;
 
        private Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod> paymentMethod;
 
        private Optional<Double> wage = Optional.empty();
 
        private Optional<Double> hours = Optional.empty();
 
        private Optional<Double> bonus = Optional.empty();
 
        private Optional<Double> reimbursement = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The contractor receiving the payment
         */
        public Builder contractorUuid(String contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = contractorUuid;
            return this;
        }

        /**
         * Date of contractor payment
         */
        public Builder date(LocalDate date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder paymentMethod(PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        public Builder paymentMethod(Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
         */
        public Builder wage(double wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = Optional.ofNullable(wage);
            return this;
        }

        /**
         * If the contractor is on a fixed wage, this is the fixed wage payment for the contractor, regardless of hours worked
         */
        public Builder wage(Optional<Double> wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = wage;
            return this;
        }

        /**
         * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
         */
        public Builder hours(double hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        /**
         * If the contractor is on an hourly wage, this is the number of hours that the contractor worked for the payment
         */
        public Builder hours(Optional<Double> hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = hours;
            return this;
        }

        /**
         * If the contractor is on an hourly wage, this is the bonus the contractor earned
         */
        public Builder bonus(double bonus) {
            Utils.checkNotNull(bonus, "bonus");
            this.bonus = Optional.ofNullable(bonus);
            return this;
        }

        /**
         * If the contractor is on an hourly wage, this is the bonus the contractor earned
         */
        public Builder bonus(Optional<Double> bonus) {
            Utils.checkNotNull(bonus, "bonus");
            this.bonus = bonus;
            return this;
        }

        /**
         * Reimbursed wages for the contractor
         */
        public Builder reimbursement(double reimbursement) {
            Utils.checkNotNull(reimbursement, "reimbursement");
            this.reimbursement = Optional.ofNullable(reimbursement);
            return this;
        }

        /**
         * Reimbursed wages for the contractor
         */
        public Builder reimbursement(Optional<Double> reimbursement) {
            Utils.checkNotNull(reimbursement, "reimbursement");
            this.reimbursement = reimbursement;
            return this;
        }
        
        public PostV1CompaniesCompanyIdContractorPaymentsRequestBody build() {
            if (paymentMethod == null) {
                paymentMethod = _SINGLETON_VALUE_PaymentMethod.value();
            }            return new PostV1CompaniesCompanyIdContractorPaymentsRequestBody(
                contractorUuid,
                date,
                paymentMethod,
                wage,
                hours,
                bonus,
                reimbursement);
        }

        private static final LazySingletonValue<Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod>> _SINGLETON_VALUE_PaymentMethod =
                new LazySingletonValue<>(
                        "payment_method",
                        "\"Direct Deposit\"",
                        new TypeReference<Optional<? extends PostV1CompaniesCompanyIdContractorPaymentsPaymentMethod>>() {});
    }
}

