/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
/**
 * RecoveryCase - Representation of a recovery case
 */

public class RecoveryCase {

    /**
     * Unique identifier of an recovery case
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * Unique identifier of the company to which the recovery case belongs
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * Status of the recovery case
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends RecoveryCaseStatus> status;

    /**
     * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("latest_error_code")
    private Optional<String> latestErrorCode;

    /**
     * Date when funds were originally debited from the company's bank account
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_debit_date")
    private Optional<String> originalDebitDate;

    /**
     * Check date for the associated payroll or contractor payments
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_uuid")
    private Optional<String> payrollUuid;

    /**
     * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_payment_uuids")
    private Optional<? extends List<String>> contractorPaymentUuids;

    /**
     * Amount outstanding for the recovery case
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount_outstanding")
    private Optional<String> amountOutstanding;

    /**
     * Total amount to be debited from the payroll or contractor payments
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("event_total_amount")
    private Optional<String> eventTotalAmount;

    @JsonCreator
    public RecoveryCase(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("status") Optional<? extends RecoveryCaseStatus> status,
            @JsonProperty("latest_error_code") Optional<String> latestErrorCode,
            @JsonProperty("original_debit_date") Optional<String> originalDebitDate,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("payroll_uuid") Optional<String> payrollUuid,
            @JsonProperty("contractor_payment_uuids") Optional<? extends List<String>> contractorPaymentUuids,
            @JsonProperty("amount_outstanding") Optional<String> amountOutstanding,
            @JsonProperty("event_total_amount") Optional<String> eventTotalAmount) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(latestErrorCode, "latestErrorCode");
        Utils.checkNotNull(originalDebitDate, "originalDebitDate");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        Utils.checkNotNull(contractorPaymentUuids, "contractorPaymentUuids");
        Utils.checkNotNull(amountOutstanding, "amountOutstanding");
        Utils.checkNotNull(eventTotalAmount, "eventTotalAmount");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.status = status;
        this.latestErrorCode = latestErrorCode;
        this.originalDebitDate = originalDebitDate;
        this.checkDate = checkDate;
        this.payrollUuid = payrollUuid;
        this.contractorPaymentUuids = contractorPaymentUuids;
        this.amountOutstanding = amountOutstanding;
        this.eventTotalAmount = eventTotalAmount;
    }
    
    public RecoveryCase(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Unique identifier of an recovery case
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * Unique identifier of the company to which the recovery case belongs
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * Status of the recovery case
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<RecoveryCaseStatus> status() {
        return (Optional<RecoveryCaseStatus>) status;
    }

    /**
     * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
     */
    @JsonIgnore
    public Optional<String> latestErrorCode() {
        return latestErrorCode;
    }

    /**
     * Date when funds were originally debited from the company's bank account
     */
    @JsonIgnore
    public Optional<String> originalDebitDate() {
        return originalDebitDate;
    }

    /**
     * Check date for the associated payroll or contractor payments
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
     */
    @JsonIgnore
    public Optional<String> payrollUuid() {
        return payrollUuid;
    }

    /**
     * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> contractorPaymentUuids() {
        return (Optional<List<String>>) contractorPaymentUuids;
    }

    /**
     * Amount outstanding for the recovery case
     */
    @JsonIgnore
    public Optional<String> amountOutstanding() {
        return amountOutstanding;
    }

    /**
     * Total amount to be debited from the payroll or contractor payments
     */
    @JsonIgnore
    public Optional<String> eventTotalAmount() {
        return eventTotalAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Unique identifier of an recovery case
     */
    public RecoveryCase withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * Unique identifier of the company to which the recovery case belongs
     */
    public RecoveryCase withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * Unique identifier of the company to which the recovery case belongs
     */
    public RecoveryCase withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * Status of the recovery case
     */
    public RecoveryCase withStatus(RecoveryCaseStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Status of the recovery case
     */
    public RecoveryCase withStatus(Optional<? extends RecoveryCaseStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
     */
    public RecoveryCase withLatestErrorCode(String latestErrorCode) {
        Utils.checkNotNull(latestErrorCode, "latestErrorCode");
        this.latestErrorCode = Optional.ofNullable(latestErrorCode);
        return this;
    }

    /**
     * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
     */
    public RecoveryCase withLatestErrorCode(Optional<String> latestErrorCode) {
        Utils.checkNotNull(latestErrorCode, "latestErrorCode");
        this.latestErrorCode = latestErrorCode;
        return this;
    }

    /**
     * Date when funds were originally debited from the company's bank account
     */
    public RecoveryCase withOriginalDebitDate(String originalDebitDate) {
        Utils.checkNotNull(originalDebitDate, "originalDebitDate");
        this.originalDebitDate = Optional.ofNullable(originalDebitDate);
        return this;
    }

    /**
     * Date when funds were originally debited from the company's bank account
     */
    public RecoveryCase withOriginalDebitDate(Optional<String> originalDebitDate) {
        Utils.checkNotNull(originalDebitDate, "originalDebitDate");
        this.originalDebitDate = originalDebitDate;
        return this;
    }

    /**
     * Check date for the associated payroll or contractor payments
     */
    public RecoveryCase withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * Check date for the associated payroll or contractor payments
     */
    public RecoveryCase withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
     */
    public RecoveryCase withPayrollUuid(String payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = Optional.ofNullable(payrollUuid);
        return this;
    }

    /**
     * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
     */
    public RecoveryCase withPayrollUuid(Optional<String> payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = payrollUuid;
        return this;
    }

    /**
     * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
     */
    public RecoveryCase withContractorPaymentUuids(List<String> contractorPaymentUuids) {
        Utils.checkNotNull(contractorPaymentUuids, "contractorPaymentUuids");
        this.contractorPaymentUuids = Optional.ofNullable(contractorPaymentUuids);
        return this;
    }

    /**
     * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
     */
    public RecoveryCase withContractorPaymentUuids(Optional<? extends List<String>> contractorPaymentUuids) {
        Utils.checkNotNull(contractorPaymentUuids, "contractorPaymentUuids");
        this.contractorPaymentUuids = contractorPaymentUuids;
        return this;
    }

    /**
     * Amount outstanding for the recovery case
     */
    public RecoveryCase withAmountOutstanding(String amountOutstanding) {
        Utils.checkNotNull(amountOutstanding, "amountOutstanding");
        this.amountOutstanding = Optional.ofNullable(amountOutstanding);
        return this;
    }

    /**
     * Amount outstanding for the recovery case
     */
    public RecoveryCase withAmountOutstanding(Optional<String> amountOutstanding) {
        Utils.checkNotNull(amountOutstanding, "amountOutstanding");
        this.amountOutstanding = amountOutstanding;
        return this;
    }

    /**
     * Total amount to be debited from the payroll or contractor payments
     */
    public RecoveryCase withEventTotalAmount(String eventTotalAmount) {
        Utils.checkNotNull(eventTotalAmount, "eventTotalAmount");
        this.eventTotalAmount = Optional.ofNullable(eventTotalAmount);
        return this;
    }

    /**
     * Total amount to be debited from the payroll or contractor payments
     */
    public RecoveryCase withEventTotalAmount(Optional<String> eventTotalAmount) {
        Utils.checkNotNull(eventTotalAmount, "eventTotalAmount");
        this.eventTotalAmount = eventTotalAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RecoveryCase other = (RecoveryCase) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.latestErrorCode, other.latestErrorCode) &&
            Objects.deepEquals(this.originalDebitDate, other.originalDebitDate) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.payrollUuid, other.payrollUuid) &&
            Objects.deepEquals(this.contractorPaymentUuids, other.contractorPaymentUuids) &&
            Objects.deepEquals(this.amountOutstanding, other.amountOutstanding) &&
            Objects.deepEquals(this.eventTotalAmount, other.eventTotalAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            status,
            latestErrorCode,
            originalDebitDate,
            checkDate,
            payrollUuid,
            contractorPaymentUuids,
            amountOutstanding,
            eventTotalAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RecoveryCase.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "status", status,
                "latestErrorCode", latestErrorCode,
                "originalDebitDate", originalDebitDate,
                "checkDate", checkDate,
                "payrollUuid", payrollUuid,
                "contractorPaymentUuids", contractorPaymentUuids,
                "amountOutstanding", amountOutstanding,
                "eventTotalAmount", eventTotalAmount);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<? extends RecoveryCaseStatus> status = Optional.empty();
 
        private Optional<String> latestErrorCode = Optional.empty();
 
        private Optional<String> originalDebitDate = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<String> payrollUuid = Optional.empty();
 
        private Optional<? extends List<String>> contractorPaymentUuids = Optional.empty();
 
        private Optional<String> amountOutstanding = Optional.empty();
 
        private Optional<String> eventTotalAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Unique identifier of an recovery case
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * Unique identifier of the company to which the recovery case belongs
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * Unique identifier of the company to which the recovery case belongs
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * Status of the recovery case
         */
        public Builder status(RecoveryCaseStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Status of the recovery case
         */
        public Builder status(Optional<? extends RecoveryCaseStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
         */
        public Builder latestErrorCode(String latestErrorCode) {
            Utils.checkNotNull(latestErrorCode, "latestErrorCode");
            this.latestErrorCode = Optional.ofNullable(latestErrorCode);
            return this;
        }

        /**
         * The latest bank error code for the recovery case. See [this doc](https://docs.gusto.com/embedded-payroll/docs/ach-codes-and-transaction-types) for a list of common ACH return codes.
         */
        public Builder latestErrorCode(Optional<String> latestErrorCode) {
            Utils.checkNotNull(latestErrorCode, "latestErrorCode");
            this.latestErrorCode = latestErrorCode;
            return this;
        }

        /**
         * Date when funds were originally debited from the company's bank account
         */
        public Builder originalDebitDate(String originalDebitDate) {
            Utils.checkNotNull(originalDebitDate, "originalDebitDate");
            this.originalDebitDate = Optional.ofNullable(originalDebitDate);
            return this;
        }

        /**
         * Date when funds were originally debited from the company's bank account
         */
        public Builder originalDebitDate(Optional<String> originalDebitDate) {
            Utils.checkNotNull(originalDebitDate, "originalDebitDate");
            this.originalDebitDate = originalDebitDate;
            return this;
        }

        /**
         * Check date for the associated payroll or contractor payments
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * Check date for the associated payroll or contractor payments
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
         */
        public Builder payrollUuid(String payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = Optional.ofNullable(payrollUuid);
            return this;
        }

        /**
         * The uuid of the associated payroll for which the recovery case was created. If the recovery case was created for a contractor payment, this field will be null.
         */
        public Builder payrollUuid(Optional<String> payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = payrollUuid;
            return this;
        }

        /**
         * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
         */
        public Builder contractorPaymentUuids(List<String> contractorPaymentUuids) {
            Utils.checkNotNull(contractorPaymentUuids, "contractorPaymentUuids");
            this.contractorPaymentUuids = Optional.ofNullable(contractorPaymentUuids);
            return this;
        }

        /**
         * The uuids of the associated contractor payments for which the recovery case was created. If the recovery case was created for a payroll, this field will be null.
         */
        public Builder contractorPaymentUuids(Optional<? extends List<String>> contractorPaymentUuids) {
            Utils.checkNotNull(contractorPaymentUuids, "contractorPaymentUuids");
            this.contractorPaymentUuids = contractorPaymentUuids;
            return this;
        }

        /**
         * Amount outstanding for the recovery case
         */
        public Builder amountOutstanding(String amountOutstanding) {
            Utils.checkNotNull(amountOutstanding, "amountOutstanding");
            this.amountOutstanding = Optional.ofNullable(amountOutstanding);
            return this;
        }

        /**
         * Amount outstanding for the recovery case
         */
        public Builder amountOutstanding(Optional<String> amountOutstanding) {
            Utils.checkNotNull(amountOutstanding, "amountOutstanding");
            this.amountOutstanding = amountOutstanding;
            return this;
        }

        /**
         * Total amount to be debited from the payroll or contractor payments
         */
        public Builder eventTotalAmount(String eventTotalAmount) {
            Utils.checkNotNull(eventTotalAmount, "eventTotalAmount");
            this.eventTotalAmount = Optional.ofNullable(eventTotalAmount);
            return this;
        }

        /**
         * Total amount to be debited from the payroll or contractor payments
         */
        public Builder eventTotalAmount(Optional<String> eventTotalAmount) {
            Utils.checkNotNull(eventTotalAmount, "eventTotalAmount");
            this.eventTotalAmount = eventTotalAmount;
            return this;
        }
        
        public RecoveryCase build() {
            return new RecoveryCase(
                uuid,
                companyUuid,
                status,
                latestErrorCode,
                originalDebitDate,
                checkDate,
                payrollUuid,
                contractorPaymentUuids,
                amountOutstanding,
                eventTotalAmount);
        }
    }
}

