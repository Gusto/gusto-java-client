/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;


public class Errors {

    /**
     * Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("error_key")
    private Optional<String> errorKey;

    /**
     * Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Optional<String> category;

    /**
     * Provides details about the error - generally this message can be surfaced to an end user.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("message")
    private Optional<String> message;

    /**
     * Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends EntityErrorObjectMetadata> metadata;

    @JsonCreator
    public Errors(
            @JsonProperty("error_key") Optional<String> errorKey,
            @JsonProperty("category") Optional<String> category,
            @JsonProperty("message") Optional<String> message,
            @JsonProperty("metadata") Optional<? extends EntityErrorObjectMetadata> metadata) {
        Utils.checkNotNull(errorKey, "errorKey");
        Utils.checkNotNull(category, "category");
        Utils.checkNotNull(message, "message");
        Utils.checkNotNull(metadata, "metadata");
        this.errorKey = errorKey;
        this.category = category;
        this.message = message;
        this.metadata = metadata;
    }
    
    public Errors() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
     */
    @JsonIgnore
    public Optional<String> errorKey() {
        return errorKey;
    }

    /**
     * Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
     */
    @JsonIgnore
    public Optional<String> category() {
        return category;
    }

    /**
     * Provides details about the error - generally this message can be surfaced to an end user.
     */
    @JsonIgnore
    public Optional<String> message() {
        return message;
    }

    /**
     * Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EntityErrorObjectMetadata> metadata() {
        return (Optional<EntityErrorObjectMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
     */
    public Errors withErrorKey(String errorKey) {
        Utils.checkNotNull(errorKey, "errorKey");
        this.errorKey = Optional.ofNullable(errorKey);
        return this;
    }

    /**
     * Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
     */
    public Errors withErrorKey(Optional<String> errorKey) {
        Utils.checkNotNull(errorKey, "errorKey");
        this.errorKey = errorKey;
        return this;
    }

    /**
     * Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
     */
    public Errors withCategory(String category) {
        Utils.checkNotNull(category, "category");
        this.category = Optional.ofNullable(category);
        return this;
    }

    /**
     * Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
     */
    public Errors withCategory(Optional<String> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }

    /**
     * Provides details about the error - generally this message can be surfaced to an end user.
     */
    public Errors withMessage(String message) {
        Utils.checkNotNull(message, "message");
        this.message = Optional.ofNullable(message);
        return this;
    }

    /**
     * Provides details about the error - generally this message can be surfaced to an end user.
     */
    public Errors withMessage(Optional<String> message) {
        Utils.checkNotNull(message, "message");
        this.message = message;
        return this;
    }

    /**
     * Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
     */
    public Errors withMetadata(EntityErrorObjectMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
     */
    public Errors withMetadata(Optional<? extends EntityErrorObjectMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Errors other = (Errors) o;
        return 
            Objects.deepEquals(this.errorKey, other.errorKey) &&
            Objects.deepEquals(this.category, other.category) &&
            Objects.deepEquals(this.message, other.message) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            errorKey,
            category,
            message,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Errors.class,
                "errorKey", errorKey,
                "category", category,
                "message", message,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private Optional<String> errorKey = Optional.empty();
 
        private Optional<String> category = Optional.empty();
 
        private Optional<String> message = Optional.empty();
 
        private Optional<? extends EntityErrorObjectMetadata> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
         */
        public Builder errorKey(String errorKey) {
            Utils.checkNotNull(errorKey, "errorKey");
            this.errorKey = Optional.ofNullable(errorKey);
            return this;
        }

        /**
         * Specifies where the error occurs. Typically this key identifies the attribute/parameter related to the error.
         */
        public Builder errorKey(Optional<String> errorKey) {
            Utils.checkNotNull(errorKey, "errorKey");
            this.errorKey = errorKey;
            return this;
        }

        /**
         * Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
         */
        public Builder category(String category) {
            Utils.checkNotNull(category, "category");
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * Specifies the type of error. The category provides error groupings and can be used to build custom error handling in your integration. If category is `nested_errors`, the object will contain a nested `errors` property with entity errors.
         */
        public Builder category(Optional<String> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }

        /**
         * Provides details about the error - generally this message can be surfaced to an end user.
         */
        public Builder message(String message) {
            Utils.checkNotNull(message, "message");
            this.message = Optional.ofNullable(message);
            return this;
        }

        /**
         * Provides details about the error - generally this message can be surfaced to an end user.
         */
        public Builder message(Optional<String> message) {
            Utils.checkNotNull(message, "message");
            this.message = message;
            return this;
        }

        /**
         * Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
         */
        public Builder metadata(EntityErrorObjectMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Contains relevant data to identify the resource in question when applicable. For example, to identify an entity `entity_type` and `entity_uuid` will be provided.
         */
        public Builder metadata(Optional<? extends EntityErrorObjectMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public Errors build() {
            return new Errors(
                errorKey,
                category,
                message,
                metadata);
        }
    }
}

