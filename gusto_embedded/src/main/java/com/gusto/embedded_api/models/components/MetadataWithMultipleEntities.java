/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.components;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
/**
 * MetadataWithMultipleEntities
 * 
 * <p>multiple entities
 */

public class MetadataWithMultipleEntities {

    @JsonProperty("entities")
    private List<MetadataWithOneEntity> entities;

    @JsonCreator
    public MetadataWithMultipleEntities(
            @JsonProperty("entities") List<MetadataWithOneEntity> entities) {
        Utils.checkNotNull(entities, "entities");
        this.entities = entities;
    }

    @JsonIgnore
    public List<MetadataWithOneEntity> entities() {
        return entities;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public MetadataWithMultipleEntities withEntities(List<MetadataWithOneEntity> entities) {
        Utils.checkNotNull(entities, "entities");
        this.entities = entities;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MetadataWithMultipleEntities other = (MetadataWithMultipleEntities) o;
        return 
            Objects.deepEquals(this.entities, other.entities);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            entities);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MetadataWithMultipleEntities.class,
                "entities", entities);
    }
    
    public final static class Builder {
 
        private List<MetadataWithOneEntity> entities;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder entities(List<MetadataWithOneEntity> entities) {
            Utils.checkNotNull(entities, "entities");
            this.entities = entities;
            return this;
        }
        
        public MetadataWithMultipleEntities build() {
            return new MetadataWithMultipleEntities(
                entities);
        }
    }
}

