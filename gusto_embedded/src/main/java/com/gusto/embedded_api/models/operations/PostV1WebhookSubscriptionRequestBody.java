/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */


package com.gusto.embedded_api.models.operations;
import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.gusto.embedded_api.utils.Utils;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;

public class PostV1WebhookSubscriptionRequestBody {

    @JsonProperty("url")
    private String url;

    @JsonProperty("subscription_types")
    private List<SubscriptionTypes> subscriptionTypes;

    @JsonCreator
    public PostV1WebhookSubscriptionRequestBody(
            @JsonProperty("url") String url,
            @JsonProperty("subscription_types") List<SubscriptionTypes> subscriptionTypes) {
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
        this.url = url;
        this.subscriptionTypes = subscriptionTypes;
    }

    @JsonIgnore
    public String url() {
        return url;
    }

    @JsonIgnore
    public List<SubscriptionTypes> subscriptionTypes() {
        return subscriptionTypes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public PostV1WebhookSubscriptionRequestBody withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    public PostV1WebhookSubscriptionRequestBody withSubscriptionTypes(List<SubscriptionTypes> subscriptionTypes) {
        Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
        this.subscriptionTypes = subscriptionTypes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1WebhookSubscriptionRequestBody other = (PostV1WebhookSubscriptionRequestBody) o;
        return 
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.subscriptionTypes, other.subscriptionTypes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            url,
            subscriptionTypes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1WebhookSubscriptionRequestBody.class,
                "url", url,
                "subscriptionTypes", subscriptionTypes);
    }
    
    public final static class Builder {
 
        private String url;
 
        private List<SubscriptionTypes> subscriptionTypes;  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        public Builder subscriptionTypes(List<SubscriptionTypes> subscriptionTypes) {
            Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
            this.subscriptionTypes = subscriptionTypes;
            return this;
        }
        
        public PostV1WebhookSubscriptionRequestBody build() {
            return new PostV1WebhookSubscriptionRequestBody(
                url,
                subscriptionTypes);
        }
    }
}

