/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.Employee;
import com.gusto.embedded_api.models.components.EmployeeOnboardingDocument;
import com.gusto.embedded_api.models.components.EmployeeOnboardingStatus;
import com.gusto.embedded_api.models.components.HistoricalEmployeeBody;
import com.gusto.embedded_api.models.components.TimeOffActivity;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeeRequest;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeeRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeeResponse;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdEmployeesRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdEmployeesRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdEmployeesResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdCustomFieldsRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdCustomFieldsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdCustomFieldsResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdCustomFieldsResponseBody;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdOnboardingStatusRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdOnboardingStatusRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdOnboardingStatusResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesResponse;
import com.gusto.embedded_api.models.operations.GetVersionEmployeesTimeOffActivitiesRequest;
import com.gusto.embedded_api.models.operations.GetVersionEmployeesTimeOffActivitiesRequestBuilder;
import com.gusto.embedded_api.models.operations.GetVersionEmployeesTimeOffActivitiesResponse;
import com.gusto.embedded_api.models.operations.PostV1EmployeesRequest;
import com.gusto.embedded_api.models.operations.PostV1EmployeesRequestBody;
import com.gusto.embedded_api.models.operations.PostV1EmployeesRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1EmployeesResponse;
import com.gusto.embedded_api.models.operations.PostV1HistoricalEmployeesRequest;
import com.gusto.embedded_api.models.operations.PostV1HistoricalEmployeesRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1HistoricalEmployeesResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingDocumentsConfigResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingStatusRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingStatusRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingStatusRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdOnboardingStatusResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeesRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeesRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeesRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeesResponse;
import com.gusto.embedded_api.models.operations.QueryParamInclude;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class Employees implements
            MethodCallPostV1Employees,
            MethodCallGetV1CompaniesCompanyIdEmployees,
            MethodCallPostV1HistoricalEmployees,
            MethodCallGetV1Employees,
            MethodCallPutV1Employees,
            MethodCallDeleteV1Employee,
            MethodCallGetV1EmployeesEmployeeIdCustomFields,
            MethodCallPutV1EmployeesEmployeeIdOnboardingDocumentsConfig,
            MethodCallGetV1EmployeesEmployeeIdOnboardingStatus,
            MethodCallPutV1EmployeesEmployeeIdOnboardingStatus,
            MethodCallGetVersionEmployeesTimeOffActivities {

    private final SDKConfiguration sdkConfiguration;

    Employees(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create an employee
     * 
     * <p>Create an employee.
     * 
     * <p>scope: `employees:manage`
     * 
     * @return The call builder
     */
    public PostV1EmployeesRequestBuilder create() {
        return new PostV1EmployeesRequestBuilder(this);
    }

    /**
     * Create an employee
     * 
     * <p>Create an employee.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param companyId The UUID of the company
     * @param requestBody Create an employee.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesResponse create(
            String companyId,
            PostV1EmployeesRequestBody requestBody) throws Exception {
        return create(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an employee
     * 
     * <p>Create an employee.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion 
     * @param requestBody Create an employee.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesResponse create(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1EmployeesRequestBody requestBody) throws Exception {
        PostV1EmployeesRequest request =
            PostV1EmployeesRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1EmployeesRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/employees",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "post-v1-employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "post-v1-employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1EmployeesResponse.Builder _resBuilder = 
            PostV1EmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1EmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Employee _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Employee>() {});
                _res.withEmployee(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get employees of a company
     * 
     * <p>Get all of the employees, onboarding, active and terminated, for a given company.
     * 
     * <p>scope: `employees:read`
     * 
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdEmployeesRequestBuilder list() {
        return new GetV1CompaniesCompanyIdEmployeesRequestBuilder(this);
    }

    /**
     * Get employees of a company
     * 
     * <p>Get all of the employees, onboarding, active and terminated, for a given company.
     * 
     * <p>scope: `employees:read`
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdEmployeesResponse list(
            GetV1CompaniesCompanyIdEmployeesRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdEmployeesRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/employees",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdEmployeesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-companies-company_id-employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_id-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_id-employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_id-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdEmployeesResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdEmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdEmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Employee> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Employee>>() {});
                _res.withEmployeeList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a historical employee
     * 
     * <p>Create a historical employee, an employee that was previously dismissed from the company in the current year.
     * 
     * <p>scope: `employees:manage`
     * 
     * @return The call builder
     */
    public PostV1HistoricalEmployeesRequestBuilder createHistorical() {
        return new PostV1HistoricalEmployeesRequestBuilder(this);
    }

    /**
     * Create a historical employee
     * 
     * <p>Create a historical employee, an employee that was previously dismissed from the company in the current year.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param companyUuid The UUID of the company
     * @param historicalEmployeeBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1HistoricalEmployeesResponse createHistorical(
            String companyUuid,
            HistoricalEmployeeBody historicalEmployeeBody) throws Exception {
        return createHistorical(companyUuid, Optional.empty(), historicalEmployeeBody);
    }
    
    /**
     * Create a historical employee
     * 
     * <p>Create a historical employee, an employee that was previously dismissed from the company in the current year.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @param historicalEmployeeBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1HistoricalEmployeesResponse createHistorical(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            HistoricalEmployeeBody historicalEmployeeBody) throws Exception {
        PostV1HistoricalEmployeesRequest request =
            PostV1HistoricalEmployeesRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .historicalEmployeeBody(historicalEmployeeBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1HistoricalEmployeesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/historical_employees",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "historicalEmployeeBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "post-v1-historical_employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-historical_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "post-v1-historical_employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-historical_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1HistoricalEmployeesResponse.Builder _resBuilder = 
            PostV1HistoricalEmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1HistoricalEmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Employee _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Employee>() {});
                _res.withEmployee(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee
     * 
     * <p>Get an employee.
     * 
     * <p>scope: `employees:read`
     * 
     * @return The call builder
     */
    public GetV1EmployeesRequestBuilder get() {
        return new GetV1EmployeesRequestBuilder(this);
    }

    /**
     * Get an employee
     * 
     * <p>Get an employee.
     * 
     * <p>scope: `employees:read`
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesResponse get(
            String employeeId) throws Exception {
        return get(employeeId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get an employee
     * 
     * <p>Get an employee.
     * 
     * <p>scope: `employees:read`
     * 
     * @param employeeId The UUID of the employee
     * @param include Include the requested attribute(s) in each employee response, multiple options are comma separated. Available options:
     *         - all_compensations: Include all effective dated compensations for each job instead of only the current compensation
     *         - custom_fields: Include employees' custom fields
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesResponse get(
            String employeeId,
            Optional<? extends List<QueryParamInclude>> include,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesRequest request =
            GetV1EmployeesRequest
                .builder()
                .employeeId(employeeId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1EmployeesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesResponse.Builder _resBuilder = 
            GetV1EmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Employee _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Employee>() {});
                _res.withEmployee(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee
     * 
     * <p>Update an employee.
     * 
     * <p>scope: `employees:write`
     * 
     * @return The call builder
     */
    public PutV1EmployeesRequestBuilder update() {
        return new PutV1EmployeesRequestBuilder(this);
    }

    /**
     * Update an employee
     * 
     * <p>Update an employee.
     * 
     * <p>scope: `employees:write`
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody Update an employee.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesResponse update(
            String employeeId,
            PutV1EmployeesRequestBody requestBody) throws Exception {
        return update(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee
     * 
     * <p>Update an employee.
     * 
     * <p>scope: `employees:write`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @param requestBody Update an employee.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesResponse update(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesRequestBody requestBody) throws Exception {
        PutV1EmployeesRequest request =
            PutV1EmployeesRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesResponse.Builder _resBuilder = 
            PutV1EmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Employee _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Employee>() {});
                _res.withEmployee(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an onboarding employee
     * 
     * <p>Use this endpoint to delete an employee who is in onboarding. Deleting
     * an onboarded employee is not allowed and will return a 422 response. Please check out the Terminations api
     * if you need to terminate an onboarded employee.
     * 
     * <p>scope: `employees:manage`
     * 
     * @return The call builder
     */
    public DeleteV1EmployeeRequestBuilder delete() {
        return new DeleteV1EmployeeRequestBuilder(this);
    }

    /**
     * Delete an onboarding employee
     * 
     * <p>Use this endpoint to delete an employee who is in onboarding. Deleting
     * an onboarded employee is not allowed and will return a 422 response. Please check out the Terminations api
     * if you need to terminate an onboarded employee.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeeResponse delete(
            String employeeId) throws Exception {
        return delete(employeeId, Optional.empty());
    }
    
    /**
     * Delete an onboarding employee
     * 
     * <p>Use this endpoint to delete an employee who is in onboarding. Deleting
     * an onboarded employee is not allowed and will return a 422 response. Please check out the Terminations api
     * if you need to terminate an onboarded employee.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeeResponse delete(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1EmployeeRequest request =
            DeleteV1EmployeeRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1EmployeeRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "delete-v1-employee", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-employee",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "delete-v1-employee",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-employee",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1EmployeeResponse.Builder _resBuilder = 
            DeleteV1EmployeeResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1EmployeeResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's custom fields
     * 
     * <p>Returns a list of the employee's custom fields.
     * 
     * <p>scope: `employees:read`
     * 
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdCustomFieldsRequestBuilder getCustomFields() {
        return new GetV1EmployeesEmployeeIdCustomFieldsRequestBuilder(this);
    }

    /**
     * Get an employee's custom fields
     * 
     * <p>Returns a list of the employee's custom fields.
     * 
     * <p>scope: `employees:read`
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdCustomFieldsResponse getCustomFields(
            String employeeId) throws Exception {
        return getCustomFields(employeeId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get an employee's custom fields
     * 
     * <p>Returns a list of the employee's custom fields.
     * 
     * <p>scope: `employees:read`
     * 
     * @param employeeId The UUID of the employee
     * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     * @param per Number of objects per page. For majority of endpoints will default to 25
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdCustomFieldsResponse getCustomFields(
            String employeeId,
            Optional<Long> page,
            Optional<Long> per,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdCustomFieldsRequest request =
            GetV1EmployeesEmployeeIdCustomFieldsRequest
                .builder()
                .employeeId(employeeId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdCustomFieldsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/custom_fields",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1EmployeesEmployeeIdCustomFieldsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees-employee_id-custom_fields", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-custom_fields",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-custom_fields",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-custom_fields",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdCustomFieldsResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdCustomFieldsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdCustomFieldsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetV1EmployeesEmployeeIdCustomFieldsResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetV1EmployeesEmployeeIdCustomFieldsResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee's onboarding documents config
     * 
     * <p>Indicate whether to include the Form I-9 for an employee during the onboarding process.
     * 
     * <p>scope: `employees:manage`
     * 
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequestBuilder updateOnboardingDocumentsConfig() {
        return new PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequestBuilder(this);
    }

    /**
     * Update an employee's onboarding documents config
     * 
     * <p>Indicate whether to include the Form I-9 for an employee during the onboarding process.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdOnboardingDocumentsConfigResponse updateOnboardingDocumentsConfig(
            String employeeId,
            PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequestBody requestBody) throws Exception {
        return updateOnboardingDocumentsConfig(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee's onboarding documents config
     * 
     * <p>Indicate whether to include the Form I-9 for an employee during the onboarding process.
     * 
     * <p>scope: `employees:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdOnboardingDocumentsConfigResponse updateOnboardingDocumentsConfig(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequest request =
            PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdOnboardingDocumentsConfigRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/onboarding_documents_config",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-employees-employee_id-onboarding_documents_config", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-onboarding_documents_config",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-onboarding_documents_config",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-onboarding_documents_config",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdOnboardingDocumentsConfigResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdOnboardingDocumentsConfigResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdOnboardingDocumentsConfigResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeOnboardingDocument _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeOnboardingDocument>() {});
                _res.withEmployeeOnboardingDocument(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get the employee's onboarding status
     * 
     * <p># Description
     * Retrieves an employee's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * <p>scope: `employees:read`
     * 
     * <p>## onboarding_status
     * 
     * <p>### Admin-facilitated onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. |
     * | `onboarding_completed` | Employee has been fully onboarded and verified. |
     * 
     * <p>### Employee self-onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. |
     * | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
     * | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. |
     * | `self_onboarding_invited_started` | Employee has started the self-onboarding process. |
     * | `self_onboarding_invited_overdue` | Employee's start date has passed, and employee has still not completed self-onboarding. |
     * | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to "self_onboarding_awaiting_admin_review" from here, once the Admin has started reviewing. |
     * | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee's information. |
     * | `onboarding_completed` | Employee has been fully onboarded and verified. |
     * 
     * <p>## onboarding_steps
     * 
     * <p>| onboarding_steps | Requirement(s) to be completed |
     * |:-----------------|-------------------------------:|
     * | `personal_details` | Add employee's first name, last name, email, date of birth, social security number |
     * | `compensation_details` | Associate employee to a job &amp; compensation. |
     * | `add_work_address` | Add employee work address. |
     * | `add_home_address` | Add employee home address. |
     * | `federal_tax_setup` | Set up federal tax withholdings. |
     * | `state_tax_setup` | Set up state tax withholdings. |
     * | `direct_deposit_setup` | (optional) Set up employee's direct deposit. |
     * | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated &amp; signed. |
     * | `file_new_hire_report` | File a new hire report for this employee. |
     * | `admin_review` | Admin reviews &amp; confirms employee details (only required for Employee self-onboarding) |
     * 
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdOnboardingStatusRequestBuilder getOnboardingStatus() {
        return new GetV1EmployeesEmployeeIdOnboardingStatusRequestBuilder(this);
    }

    /**
     * Get the employee's onboarding status
     * 
     * <p># Description
     * Retrieves an employee's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * <p>scope: `employees:read`
     * 
     * <p>## onboarding_status
     * 
     * <p>### Admin-facilitated onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. |
     * | `onboarding_completed` | Employee has been fully onboarded and verified. |
     * 
     * <p>### Employee self-onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. |
     * | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
     * | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. |
     * | `self_onboarding_invited_started` | Employee has started the self-onboarding process. |
     * | `self_onboarding_invited_overdue` | Employee's start date has passed, and employee has still not completed self-onboarding. |
     * | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to "self_onboarding_awaiting_admin_review" from here, once the Admin has started reviewing. |
     * | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee's information. |
     * | `onboarding_completed` | Employee has been fully onboarded and verified. |
     * 
     * <p>## onboarding_steps
     * 
     * <p>| onboarding_steps | Requirement(s) to be completed |
     * |:-----------------|-------------------------------:|
     * | `personal_details` | Add employee's first name, last name, email, date of birth, social security number |
     * | `compensation_details` | Associate employee to a job &amp; compensation. |
     * | `add_work_address` | Add employee work address. |
     * | `add_home_address` | Add employee home address. |
     * | `federal_tax_setup` | Set up federal tax withholdings. |
     * | `state_tax_setup` | Set up state tax withholdings. |
     * | `direct_deposit_setup` | (optional) Set up employee's direct deposit. |
     * | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated &amp; signed. |
     * | `file_new_hire_report` | File a new hire report for this employee. |
     * | `admin_review` | Admin reviews &amp; confirms employee details (only required for Employee self-onboarding) |
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdOnboardingStatusResponse getOnboardingStatus(
            String employeeId) throws Exception {
        return getOnboardingStatus(employeeId, Optional.empty());
    }
    
    /**
     * Get the employee's onboarding status
     * 
     * <p># Description
     * Retrieves an employee's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * <p>scope: `employees:read`
     * 
     * <p>## onboarding_status
     * 
     * <p>### Admin-facilitated onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to complete the full employee-onboarding. |
     * | `onboarding_completed` | Employee has been fully onboarded and verified. |
     * 
     * <p>### Employee self-onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the employee. |
     * | `self_onboarding_pending_invite` | Admin has the intention to invite the employee to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
     * | `self_onboarding_invited` | Employee has been sent an invitation to self-onboard. |
     * | `self_onboarding_invited_started` | Employee has started the self-onboarding process. |
     * | `self_onboarding_invited_overdue` | Employee's start date has passed, and employee has still not completed self-onboarding. |
     * | `self_onboarding_completed_by_employee` | Employee has completed entering in their information. The status should be updated via API to "self_onboarding_awaiting_admin_review" from here, once the Admin has started reviewing. |
     * | `self_onboarding_awaiting_admin_review` | Admin has started to verify the employee's information. |
     * | `onboarding_completed` | Employee has been fully onboarded and verified. |
     * 
     * <p>## onboarding_steps
     * 
     * <p>| onboarding_steps | Requirement(s) to be completed |
     * |:-----------------|-------------------------------:|
     * | `personal_details` | Add employee's first name, last name, email, date of birth, social security number |
     * | `compensation_details` | Associate employee to a job &amp; compensation. |
     * | `add_work_address` | Add employee work address. |
     * | `add_home_address` | Add employee home address. |
     * | `federal_tax_setup` | Set up federal tax withholdings. |
     * | `state_tax_setup` | Set up state tax withholdings. |
     * | `direct_deposit_setup` | (optional) Set up employee's direct deposit. |
     * | `employee_form_signing` | Employee forms (e.g., W4, direct deposit authorization) are generated &amp; signed. |
     * | `file_new_hire_report` | File a new hire report for this employee. |
     * | `admin_review` | Admin reviews &amp; confirms employee details (only required for Employee self-onboarding) |
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdOnboardingStatusResponse getOnboardingStatus(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdOnboardingStatusRequest request =
            GetV1EmployeesEmployeeIdOnboardingStatusRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdOnboardingStatusRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/onboarding_status",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees-employee_id-onboarding_status", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-onboarding_status",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdOnboardingStatusResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdOnboardingStatusResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdOnboardingStatusResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeOnboardingStatus _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeOnboardingStatus>() {});
                _res.withEmployeeOnboardingStatus(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update the employee's onboarding status
     * 
     * <p>scope: `employees:manage`
     * 
     * <p>Updates an employee's onboarding status.
     * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.
     * 
     * <p>| Action | current onboarding_status | new onboarding_status |
     * |:------------------|:------------:|----------:|
     * | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` |
     * | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` |
     * | Cancel an employee's self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` |
     * | Review an employee's self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` |
     * | Finish an employee's onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
     * 
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdOnboardingStatusRequestBuilder updateOnboardingStatus() {
        return new PutV1EmployeesEmployeeIdOnboardingStatusRequestBuilder(this);
    }

    /**
     * Update the employee's onboarding status
     * 
     * <p>scope: `employees:manage`
     * 
     * <p>Updates an employee's onboarding status.
     * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.
     * 
     * <p>| Action | current onboarding_status | new onboarding_status |
     * |:------------------|:------------:|----------:|
     * | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` |
     * | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` |
     * | Cancel an employee's self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` |
     * | Review an employee's self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` |
     * | Finish an employee's onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdOnboardingStatusResponse updateOnboardingStatus(
            String employeeId,
            PutV1EmployeesEmployeeIdOnboardingStatusRequestBody requestBody) throws Exception {
        return updateOnboardingStatus(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Update the employee's onboarding status
     * 
     * <p>scope: `employees:manage`
     * 
     * <p>Updates an employee's onboarding status.
     * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the employee.
     * 
     * <p>| Action | current onboarding_status | new onboarding_status |
     * |:------------------|:------------:|----------:|
     * | Mark an employee as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_pending_invite` |
     * | Invite an employee to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_pending_invite` | `self_onboarding_invited` |
     * | Cancel an employee's self-onboarding | `self_onboarding_invited` or `self_onboarding_pending_invite` | `admin_onboarding_incomplete` |
     * | Review an employee's self-onboarded info | `self_onboarding_completed_by_employee` | `self_onboarding_awaiting_admin_review` |
     * | Finish an employee's onboarding | `admin_onboarding_incomplete` or `self_onboarding_awaiting_admin_review` | `onboarding_completed` |
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdOnboardingStatusResponse updateOnboardingStatus(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdOnboardingStatusRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdOnboardingStatusRequest request =
            PutV1EmployeesEmployeeIdOnboardingStatusRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdOnboardingStatusRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/onboarding_status",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-employees-employee_id-onboarding_status", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-onboarding_status",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdOnboardingStatusResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdOnboardingStatusResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdOnboardingStatusResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeOnboardingStatus _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeOnboardingStatus>() {});
                _res.withEmployeeOnboardingStatus(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get employee time off activities
     * 
     * <p>Get employee time off activities.
     * 
     * <p>scope: `employee_time_off_activities:read`
     * 
     * @return The call builder
     */
    public GetVersionEmployeesTimeOffActivitiesRequestBuilder getTimeOffActivities() {
        return new GetVersionEmployeesTimeOffActivitiesRequestBuilder(this);
    }

    /**
     * Get employee time off activities
     * 
     * <p>Get employee time off activities.
     * 
     * <p>scope: `employee_time_off_activities:read`
     * 
     * @param employeeUuid The UUID of the employee
     * @param timeOffType The time off type name you want to query data for. ex: 'sick' or 'vacation'
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetVersionEmployeesTimeOffActivitiesResponse getTimeOffActivities(
            String employeeUuid,
            String timeOffType) throws Exception {
        return getTimeOffActivities(employeeUuid, timeOffType, Optional.empty());
    }
    
    /**
     * Get employee time off activities
     * 
     * <p>Get employee time off activities.
     * 
     * <p>scope: `employee_time_off_activities:read`
     * 
     * @param employeeUuid The UUID of the employee
     * @param timeOffType The time off type name you want to query data for. ex: 'sick' or 'vacation'
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetVersionEmployeesTimeOffActivitiesResponse getTimeOffActivities(
            String employeeUuid,
            String timeOffType,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetVersionEmployeesTimeOffActivitiesRequest request =
            GetVersionEmployeesTimeOffActivitiesRequest
                .builder()
                .employeeUuid(employeeUuid)
                .timeOffType(timeOffType)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetVersionEmployeesTimeOffActivitiesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_uuid}/time_off_activities",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetVersionEmployeesTimeOffActivitiesRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-version-employees-time_off_activities", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-version-employees-time_off_activities",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-version-employees-time_off_activities",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-version-employees-time_off_activities",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetVersionEmployeesTimeOffActivitiesResponse.Builder _resBuilder = 
            GetVersionEmployeesTimeOffActivitiesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetVersionEmployeesTimeOffActivitiesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffActivity _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffActivity>() {});
                _res.withTimeOffActivity(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
