/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.I9Authorization;
import com.gusto.embedded_api.models.components.I9AuthorizationDocument;
import com.gusto.embedded_api.models.components.I9AuthorizationDocumentOption;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequest;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdI9AuthorizationResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeesEmployeeIdI9AuthorizationResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class I9Verification implements
            MethodCallGetV1EmployeesEmployeeIdI9Authorization,
            MethodCallPutV1EmployeesEmployeeIdI9Authorization,
            MethodCallGetV1EmployeesEmployeeIdI9AuthorizationDocumentOptions,
            MethodCallGetV1EmployeesEmployeeIdI9AuthorizationDocuments,
            MethodCallPutV1EmployeesEmployeeIdI9AuthorizationDocuments,
            MethodCallDeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentId,
            MethodCallPutV1EmployeesEmployeeIdI9AuthorizationEmployerSign {

    private final SDKConfiguration sdkConfiguration;

    I9Verification(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get an employee's I-9 authorization
     * 
     * <p>An employee's I-9 authorization stores information about an employee's authorization status and I-9 signatures, information required to filled out the Form I-9 for employment eligibility verification.
     * 
     * <p>**NOTE:** The `form_uuid` in responses from this endpoint can be used to retrieve the PDF version of the I-9. See the "get employee form PDF" request for more details.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationRequestBuilder getAuthorization() {
        return new GetV1EmployeesEmployeeIdI9AuthorizationRequestBuilder(this);
    }

    /**
     * Get an employee's I-9 authorization
     * 
     * <p>An employee's I-9 authorization stores information about an employee's authorization status and I-9 signatures, information required to filled out the Form I-9 for employment eligibility verification.
     * 
     * <p>**NOTE:** The `form_uuid` in responses from this endpoint can be used to retrieve the PDF version of the I-9. See the "get employee form PDF" request for more details.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationResponse getAuthorization(
            String employeeId) throws Exception {
        return getAuthorization(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's I-9 authorization
     * 
     * <p>An employee's I-9 authorization stores information about an employee's authorization status and I-9 signatures, information required to filled out the Form I-9 for employment eligibility verification.
     * 
     * <p>**NOTE:** The `form_uuid` in responses from this endpoint can be used to retrieve the PDF version of the I-9. See the "get employee form PDF" request for more details.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationResponse getAuthorization(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdI9AuthorizationRequest request =
            GetV1EmployeesEmployeeIdI9AuthorizationRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdI9AuthorizationRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees-employee_id-i9_authorization", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdI9AuthorizationResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdI9AuthorizationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdI9AuthorizationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                I9Authorization _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<I9Authorization>() {});
                _res.withI9Authorization(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create or update an employee's I-9 authorization
     * 
     * <p>An employee's I-9 authorization stores information about an employee's authorization status, as well as signatures and other information required to complete the Form I-9 for employment eligibility verification.
     * 
     * <p>If the version is supplied and the employee I-9 authorization exists, this endpoint acts as an update. Otherwise, it will create an employee I-9 authorization.
     * 
     * <p>Validations on this endpoint are conditional:
     * 
     * <p>  * `document_type` may be required, depending on `authorization_status`.
     *   * Valid formats for `document_number` vary, depending on `document_type`.
     *   * `country` is only allowed with `document_type: 'foreign_passport'`.
     *   * `expiration_date` is only allowed with `authorization_status: 'alien'`.
     * 
     * <p>&gt; ℹ️ Unneeded information is automatically removed during updates.
     * &gt;
     * &gt; If an update causes some formerly-required fields to be unneeded, the now-unneeded data will be removed automatically.
     * &gt;
     * &gt; **Example:** Updating `authorization_status` from `alien` to `citizen` will cause any data in `document_type`, `document_number`, `country`, and `expiration_date` to be removed, since these fields are unused for `authorization_status:'citizen'`.
     * 
     * <p>Detailed instructions for completing Form I-9 can be found at https://www.uscis.gov/sites/default/files/document/forms/i-9instr.pdf
     * 
     * <p>scope: `i9_authorizations:write`
     * 
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationRequestBuilder update() {
        return new PutV1EmployeesEmployeeIdI9AuthorizationRequestBuilder(this);
    }

    /**
     * Create or update an employee's I-9 authorization
     * 
     * <p>An employee's I-9 authorization stores information about an employee's authorization status, as well as signatures and other information required to complete the Form I-9 for employment eligibility verification.
     * 
     * <p>If the version is supplied and the employee I-9 authorization exists, this endpoint acts as an update. Otherwise, it will create an employee I-9 authorization.
     * 
     * <p>Validations on this endpoint are conditional:
     * 
     * <p>  * `document_type` may be required, depending on `authorization_status`.
     *   * Valid formats for `document_number` vary, depending on `document_type`.
     *   * `country` is only allowed with `document_type: 'foreign_passport'`.
     *   * `expiration_date` is only allowed with `authorization_status: 'alien'`.
     * 
     * <p>&gt; ℹ️ Unneeded information is automatically removed during updates.
     * &gt;
     * &gt; If an update causes some formerly-required fields to be unneeded, the now-unneeded data will be removed automatically.
     * &gt;
     * &gt; **Example:** Updating `authorization_status` from `alien` to `citizen` will cause any data in `document_type`, `document_number`, `country`, and `expiration_date` to be removed, since these fields are unused for `authorization_status:'citizen'`.
     * 
     * <p>Detailed instructions for completing Form I-9 can be found at https://www.uscis.gov/sites/default/files/document/forms/i-9instr.pdf
     * 
     * <p>scope: `i9_authorizations:write`
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationResponse update(
            String employeeId,
            PutV1EmployeesEmployeeIdI9AuthorizationRequestBody requestBody) throws Exception {
        return update(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create or update an employee's I-9 authorization
     * 
     * <p>An employee's I-9 authorization stores information about an employee's authorization status, as well as signatures and other information required to complete the Form I-9 for employment eligibility verification.
     * 
     * <p>If the version is supplied and the employee I-9 authorization exists, this endpoint acts as an update. Otherwise, it will create an employee I-9 authorization.
     * 
     * <p>Validations on this endpoint are conditional:
     * 
     * <p>  * `document_type` may be required, depending on `authorization_status`.
     *   * Valid formats for `document_number` vary, depending on `document_type`.
     *   * `country` is only allowed with `document_type: 'foreign_passport'`.
     *   * `expiration_date` is only allowed with `authorization_status: 'alien'`.
     * 
     * <p>&gt; ℹ️ Unneeded information is automatically removed during updates.
     * &gt;
     * &gt; If an update causes some formerly-required fields to be unneeded, the now-unneeded data will be removed automatically.
     * &gt;
     * &gt; **Example:** Updating `authorization_status` from `alien` to `citizen` will cause any data in `document_type`, `document_number`, `country`, and `expiration_date` to be removed, since these fields are unused for `authorization_status:'citizen'`.
     * 
     * <p>Detailed instructions for completing Form I-9 can be found at https://www.uscis.gov/sites/default/files/document/forms/i-9instr.pdf
     * 
     * <p>scope: `i9_authorizations:write`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationResponse update(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdI9AuthorizationRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdI9AuthorizationRequest request =
            PutV1EmployeesEmployeeIdI9AuthorizationRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdI9AuthorizationRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-employees-employee_id-i9_authorization", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdI9AuthorizationResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdI9AuthorizationResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdI9AuthorizationResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                I9Authorization _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<I9Authorization>() {});
                _res.withI9Authorization(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's I-9 verification document options
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint returns the possible document options based on the employee's authorization status. These options can then be used to create the I-9 verification documents.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequestBuilder getDocumentOptions() {
        return new GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequestBuilder(this);
    }

    /**
     * Get an employee's I-9 verification document options
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint returns the possible document options based on the employee's authorization status. These options can then be used to create the I-9 verification documents.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse getDocumentOptions(
            String employeeId) throws Exception {
        return getDocumentOptions(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's I-9 verification document options
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint returns the possible document options based on the employee's authorization status. These options can then be used to create the I-9 verification documents.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse getDocumentOptions(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest request =
            GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization/document_options",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees-employee_id-i9_authorization-document_options", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization-document_options",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization-document_options",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization-document_options",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdI9AuthorizationDocumentOptionsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<I9AuthorizationDocumentOption> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<I9AuthorizationDocumentOption>>() {});
                _res.withI9AuthorizationDocumentOptionsObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's I-9 verification documents
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBuilder getDocuments() {
        return new GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBuilder(this);
    }

    /**
     * Get an employee's I-9 verification documents
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse getDocuments(
            String employeeId) throws Exception {
        return getDocuments(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's I-9 verification documents
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
     * 
     * <p>scope: `i9_authorizations:read`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse getDocuments(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest request =
            GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization/documents",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees-employee_id-i9_authorization-documents", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization-documents",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization-documents",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-i9_authorization-documents",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<I9AuthorizationDocument> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<I9AuthorizationDocument>>() {});
                _res.withI9AuthorizationDocumentsObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create an employee's I-9 authorization verification documents
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
     * 
     * <p>Use the document options endpoint to get the possible document types and titles, which can vary depending on the employee's authorization status.
     * 
     * <p>&gt; 🚧 Every request must contain the complete list of documents for the Employee.
     * &gt;
     * &gt; Every request to this endpoint removes any previous verification document records for the employee.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBuilder createDocuments() {
        return new PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBuilder(this);
    }

    /**
     * Create an employee's I-9 authorization verification documents
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
     * 
     * <p>Use the document options endpoint to get the possible document types and titles, which can vary depending on the employee's authorization status.
     * 
     * <p>&gt; 🚧 Every request must contain the complete list of documents for the Employee.
     * &gt;
     * &gt; Every request to this endpoint removes any previous verification document records for the employee.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse createDocuments(
            String employeeId,
            PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody requestBody) throws Exception {
        return createDocuments(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an employee's I-9 authorization verification documents
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States.
     * 
     * <p>Use the document options endpoint to get the possible document types and titles, which can vary depending on the employee's authorization status.
     * 
     * <p>&gt; 🚧 Every request must contain the complete list of documents for the Employee.
     * &gt;
     * &gt; Every request to this endpoint removes any previous verification document records for the employee.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse createDocuments(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest request =
            PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdI9AuthorizationDocumentsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization/documents",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-employees-employee_id-i9_authorization-documents", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization-documents",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization-documents",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization-documents",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdI9AuthorizationDocumentsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<I9AuthorizationDocument> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<I9AuthorizationDocument>>() {});
                _res.withI9AuthorizationDocumentsObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an employee's I-9 verification document
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint deletes a specific verification document.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @return The call builder
     */
    public DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequestBuilder deleteDocument() {
        return new DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequestBuilder(this);
    }

    /**
     * Delete an employee's I-9 verification document
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint deletes a specific verification document.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param documentId The UUID of the document
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse deleteDocument(
            String employeeId,
            String documentId) throws Exception {
        return deleteDocument(employeeId, documentId, Optional.empty());
    }
    
    /**
     * Delete an employee's I-9 verification document
     * 
     * <p>An employee's I-9 verification documents are the documents an employee has provided the employer to verify their identity and authorization to work in the United States. This endpoint deletes a specific verification document.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param documentId The UUID of the document
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse deleteDocument(
            String employeeId,
            String documentId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequest request =
            DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequest
                .builder()
                .employeeId(employeeId)
                .documentId(documentId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization/documents/{document_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "delete-v1-employees-employee_id-i9_authorization-documents-document_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-employees-employee_id-i9_authorization-documents-document_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "delete-v1-employees-employee_id-i9_authorization-documents-document_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-employees-employee_id-i9_authorization-documents-document_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse.Builder _resBuilder = 
            DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1EmployeesEmployeeIdI9AuthorizationDocumentsDocumentIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Employer sign an employee's Form I-9
     * 
     * <p>Sign an employee's Form I-9 as an employer. Once the form is signed, the employee's I-9 authorization is considered complete and cannot be modified.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBuilder employerSign() {
        return new PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBuilder(this);
    }

    /**
     * Employer sign an employee's Form I-9
     * 
     * <p>Sign an employee's Form I-9 as an employer. Once the form is signed, the employee's I-9 authorization is considered complete and cannot be modified.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse employerSign(
            String employeeId,
            PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody requestBody) throws Exception {
        return employerSign(employeeId, Optional.empty(), Optional.empty(), requestBody);
    }
    
    /**
     * Employer sign an employee's Form I-9
     * 
     * <p>Sign an employee's Form I-9 as an employer. Once the form is signed, the employee's I-9 authorization is considered complete and cannot be modified.
     * 
     * <p>scope: `i9_authorizations:manage`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoClientIp Optional header to supply the IP address. This can be used to supply the IP address for signature endpoints instead of the signed_by_ip_address parameter.
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse employerSign(
            String employeeId,
            Optional<String> xGustoClientIp,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest request =
            PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest
                .builder()
                .employeeId(employeeId)
                .xGustoClientIp(xGustoClientIp)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/i9_authorization/employer_sign",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-employees-employee_id-i9_authorization-employer_sign", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization-employer_sign",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization-employer_sign",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-employees-employee_id-i9_authorization-employer_sign",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdI9AuthorizationEmployerSignResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                I9Authorization _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<I9Authorization>() {});
                _res.withI9Authorization(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
