/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.Admin;
import com.gusto.embedded_api.models.components.Company;
import com.gusto.embedded_api.models.components.CompanyCustomFieldList;
import com.gusto.embedded_api.models.components.CompanyOnboardingStatus;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdAdminsRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdAdminsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdAdminsResponse;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdCustomFieldsRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdCustomFieldsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdCustomFieldsResponse;
import com.gusto.embedded_api.models.operations.GetV1CompaniesRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesResponse;
import com.gusto.embedded_api.models.operations.GetV1CompanyFinishOnboardingRequest;
import com.gusto.embedded_api.models.operations.GetV1CompanyFinishOnboardingRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompanyFinishOnboardingResponse;
import com.gusto.embedded_api.models.operations.GetV1CompanyOnboardingStatusRequest;
import com.gusto.embedded_api.models.operations.GetV1CompanyOnboardingStatusRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompanyOnboardingStatusResponse;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequest;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequestBody;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequestBuilder;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponse;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponseBody;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBuilder;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse;
import com.gusto.embedded_api.models.operations.PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdAdminsRequest;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdAdminsRequestBody;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdAdminsRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdAdminsResponse;
import com.gusto.embedded_api.models.operations.PostV1PartnerManagedCompaniesRequest;
import com.gusto.embedded_api.models.operations.PostV1PartnerManagedCompaniesRequestBody;
import com.gusto.embedded_api.models.operations.PostV1PartnerManagedCompaniesRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1PartnerManagedCompaniesResponse;
import com.gusto.embedded_api.models.operations.PostV1PartnerManagedCompaniesResponseBody;
import com.gusto.embedded_api.models.operations.PostV1PartnerManagedCompaniesSecurity;
import com.gusto.embedded_api.models.operations.PutV1CompaniesRequest;
import com.gusto.embedded_api.models.operations.PutV1CompaniesRequestBody;
import com.gusto.embedded_api.models.operations.PutV1CompaniesRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1CompaniesResponse;
import com.gusto.embedded_api.models.operations.PutV1PartnerManagedCompaniesCompanyUuidMigrateRequest;
import com.gusto.embedded_api.models.operations.PutV1PartnerManagedCompaniesCompanyUuidMigrateRequestBody;
import com.gusto.embedded_api.models.operations.PutV1PartnerManagedCompaniesCompanyUuidMigrateRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1PartnerManagedCompaniesCompanyUuidMigrateResponse;
import com.gusto.embedded_api.models.operations.PutV1PartnerManagedCompaniesCompanyUuidMigrateResponseBody;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class Companies implements
            MethodCallPostV1PartnerManagedCompanies,
            MethodCallGetV1Companies,
            MethodCallPutV1Companies,
            MethodCallPutV1PartnerManagedCompaniesCompanyUuidMigrate,
            MethodCallPostPartnerManagedCompaniesCompanyUuidAcceptTermsOfService,
            MethodCallPostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfService,
            MethodCallPostV1CompaniesCompanyIdAdmins,
            MethodCallGetV1CompaniesCompanyIdAdmins,
            MethodCallGetV1CompanyOnboardingStatus,
            MethodCallGetV1CompanyFinishOnboarding,
            MethodCallGetV1CompaniesCompanyIdCustomFields {

    private final SDKConfiguration sdkConfiguration;

    Companies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a partner managed company
     * Create a partner managed company. When you successfully call the API, it does the following:
     * * Creates a new company in Gusto
     * * Creates a new user using the provided email if the user does not already exist.
     * * Makes the user the primary payroll administrator of the new company.
     * 
     * In response, you will receive oauth access tokens for the created company.
     * 
     * IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.
     * 
     * &gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; this endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
     * @return The call builder
     */
    public PostV1PartnerManagedCompaniesRequestBuilder createPartnerManaged() {
        return new PostV1PartnerManagedCompaniesRequestBuilder(this);
    }

    /**
     * Create a partner managed company
     * Create a partner managed company. When you successfully call the API, it does the following:
     * * Creates a new company in Gusto
     * * Creates a new user using the provided email if the user does not already exist.
     * * Makes the user the primary payroll administrator of the new company.
     * 
     * In response, you will receive oauth access tokens for the created company.
     * 
     * IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.
     * 
     * &gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; this endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
     * @param security The security details to use for authentication.
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1PartnerManagedCompaniesResponse createPartnerManaged(
            PostV1PartnerManagedCompaniesSecurity security,
            PostV1PartnerManagedCompaniesRequestBody requestBody) throws Exception {
        return createPartnerManaged(security, Optional.empty(), requestBody);
    }
    
    /**
     * Create a partner managed company
     * Create a partner managed company. When you successfully call the API, it does the following:
     * * Creates a new company in Gusto
     * * Creates a new user using the provided email if the user does not already exist.
     * * Makes the user the primary payroll administrator of the new company.
     * 
     * In response, you will receive oauth access tokens for the created company.
     * 
     * IMPORTANT: the returned access and refresh tokens are reserved for this company only. They cannot be used to access other companies AND previously granted tokens cannot be used to access this company.
     * 
     * &gt; ðŸ“˜ System Access Authentication
     * &gt;
     * &gt; this endpoint uses the [Bearer Auth scheme with the system-level access token in the HTTP Authorization header](https://docs.gusto.com/embedded-payroll/docs/system-access)
     * @param security The security details to use for authentication.
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1PartnerManagedCompaniesResponse createPartnerManaged(
            PostV1PartnerManagedCompaniesSecurity security,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1PartnerManagedCompaniesRequestBody requestBody) throws Exception {
        PostV1PartnerManagedCompaniesRequest request =
            PostV1PartnerManagedCompaniesRequest
                .builder()
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/partner_managed_companies");
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        // hooks will have access to global security options
        // TODO pass the method level security object to hooks (type system doesn't allow 
        // it, would require some reflection work)
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req, security);
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-partner-managed-companies", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-partner-managed-companies",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-partner-managed-companies",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-partner-managed-companies",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1PartnerManagedCompaniesResponse.Builder _resBuilder = 
            PostV1PartnerManagedCompaniesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1PartnerManagedCompaniesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PostV1PartnerManagedCompaniesResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostV1PartnerManagedCompaniesResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "401", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a company
     * Get a company.         
     * The employees:read scope is required to return home_address and non-work locations.         
     * The company_admin:read scope is required to return primary_payroll_admin.         
     * The signatories:read scope is required to return primary_signatory.         
     * 
     * scope: `companies:read`
     * @return The call builder
     */
    public GetV1CompaniesRequestBuilder get() {
        return new GetV1CompaniesRequestBuilder(this);
    }

    /**
     * Get a company
     * Get a company.         
     * The employees:read scope is required to return home_address and non-work locations.         
     * The company_admin:read scope is required to return primary_payroll_admin.         
     * The signatories:read scope is required to return primary_signatory.         
     * 
     * scope: `companies:read`
     * @param companyId The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesResponse get(
            String companyId) throws Exception {
        return get(companyId, Optional.empty());
    }
    
    /**
     * Get a company
     * Get a company.         
     * The employees:read scope is required to return home_address and non-work locations.         
     * The company_admin:read scope is required to return primary_payroll_admin.         
     * The signatories:read scope is required to return primary_signatory.         
     * 
     * scope: `companies:read`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesResponse get(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesRequest request =
            GetV1CompaniesRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesResponse.Builder _resBuilder = 
            GetV1CompaniesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Company _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Company>() {});
                _res.withCompany(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a company
     * Update a company.
     * 
     * scope: `companies:write`
     * @return The call builder
     */
    public PutV1CompaniesRequestBuilder update() {
        return new PutV1CompaniesRequestBuilder(this);
    }

    /**
     * Update a company
     * Update a company.
     * 
     * scope: `companies:write`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesResponse update(
            String companyId,
            PutV1CompaniesRequestBody requestBody) throws Exception {
        return update(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Update a company
     * Update a company.
     * 
     * scope: `companies:write`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesResponse update(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompaniesRequestBody requestBody) throws Exception {
        PutV1CompaniesRequest request =
            PutV1CompaniesRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompaniesRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-companies", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-companies",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompaniesResponse.Builder _resBuilder = 
            PutV1CompaniesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompaniesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Company _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Company>() {});
                _res.withCompany(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Migrate company to embedded payroll
     * Migrate an existing Gusto customer to your embedded payroll product.
     * 
     * To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).
     * 
     * scope: `partner_managed_companies:write`
     * @return The call builder
     */
    public PutV1PartnerManagedCompaniesCompanyUuidMigrateRequestBuilder migrate() {
        return new PutV1PartnerManagedCompaniesCompanyUuidMigrateRequestBuilder(this);
    }

    /**
     * Migrate company to embedded payroll
     * Migrate an existing Gusto customer to your embedded payroll product.
     * 
     * To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).
     * 
     * scope: `partner_managed_companies:write`
     * @param companyUuid The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1PartnerManagedCompaniesCompanyUuidMigrateResponse migrate(
            String companyUuid,
            PutV1PartnerManagedCompaniesCompanyUuidMigrateRequestBody requestBody) throws Exception {
        return migrate(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Migrate company to embedded payroll
     * Migrate an existing Gusto customer to your embedded payroll product.
     * 
     * To use this endpoint, the customer will need to connect their Gusto account to your application using [OAuth2](https://docs.gusto.com/embedded-payroll/docs/oauth2) then view and [accept the Embedded Payroll Terms of Service](https://docs.gusto.com/embedded-payroll/reference/post-partner-managed-companies-company_uuid-accept_terms_of_service).
     * 
     * scope: `partner_managed_companies:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1PartnerManagedCompaniesCompanyUuidMigrateResponse migrate(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1PartnerManagedCompaniesCompanyUuidMigrateRequestBody requestBody) throws Exception {
        PutV1PartnerManagedCompaniesCompanyUuidMigrateRequest request =
            PutV1PartnerManagedCompaniesCompanyUuidMigrateRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1PartnerManagedCompaniesCompanyUuidMigrateRequest.class,
                _baseUrl,
                "/v1/partner_managed_companies/{company_uuid}/migrate",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-partner-managed-companies-company-uuid-migrate", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-partner-managed-companies-company-uuid-migrate",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-partner-managed-companies-company-uuid-migrate",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-partner-managed-companies-company-uuid-migrate",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1PartnerManagedCompaniesCompanyUuidMigrateResponse.Builder _resBuilder = 
            PutV1PartnerManagedCompaniesCompanyUuidMigrateResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1PartnerManagedCompaniesCompanyUuidMigrateResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PutV1PartnerManagedCompaniesCompanyUuidMigrateResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PutV1PartnerManagedCompaniesCompanyUuidMigrateResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Accept terms of service for a company user
     * Accept the Gusto Embedded Payroll's [Terms of Service](https://flows.gusto.com/terms).
     * The user must have a role in the company in order to accept the Terms of Service.
     * 
     * scope: `terms_of_services:write`
     * @return The call builder
     */
    public PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequestBuilder acceptTermsOfService() {
        return new PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequestBuilder(this);
    }

    /**
     * Accept terms of service for a company user
     * Accept the Gusto Embedded Payroll's [Terms of Service](https://flows.gusto.com/terms).
     * The user must have a role in the company in order to accept the Terms of Service.
     * 
     * scope: `terms_of_services:write`
     * @param companyUuid The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponse acceptTermsOfService(
            String companyUuid,
            PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequestBody requestBody) throws Exception {
        return acceptTermsOfService(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Accept terms of service for a company user
     * Accept the Gusto Embedded Payroll's [Terms of Service](https://flows.gusto.com/terms).
     * The user must have a role in the company in order to accept the Terms of Service.
     * 
     * scope: `terms_of_services:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponse acceptTermsOfService(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequestBody requestBody) throws Exception {
        PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequest request =
            PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceRequest.class,
                _baseUrl,
                "/v1/partner_managed_companies/{company_uuid}/accept_terms_of_service",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-partner-managed-companies-company_uuid-accept_terms_of_service", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-partner-managed-companies-company_uuid-accept_terms_of_service",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-partner-managed-companies-company_uuid-accept_terms_of_service",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-partner-managed-companies-company_uuid-accept_terms_of_service",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponse.Builder _resBuilder = 
            PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostPartnerManagedCompaniesCompanyUuidAcceptTermsOfServiceResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Retrieve terms of service status for a company user
     * Retrieve the user acceptance status of the Gusto Embedded Payroll's [Terms of Service](https://flows.gusto.com/terms).
     * 
     * scope: `terms_of_services:read`
     * @return The call builder
     */
    public PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBuilder retrieveTermsOfService() {
        return new PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBuilder(this);
    }

    /**
     * Retrieve terms of service status for a company user
     * Retrieve the user acceptance status of the Gusto Embedded Payroll's [Terms of Service](https://flows.gusto.com/terms).
     * 
     * scope: `terms_of_services:read`
     * @param companyUuid The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse retrieveTermsOfService(
            String companyUuid,
            PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody requestBody) throws Exception {
        return retrieveTermsOfService(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Retrieve terms of service status for a company user
     * Retrieve the user acceptance status of the Gusto Embedded Payroll's [Terms of Service](https://flows.gusto.com/terms).
     * 
     * scope: `terms_of_services:read`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse retrieveTermsOfService(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequestBody requestBody) throws Exception {
        PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest request =
            PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceRequest.class,
                _baseUrl,
                "/v1/partner_managed_companies/{company_uuid}/retrieve_terms_of_service",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-partner-managed-companies-company_uuid-retrieve_terms_of_service", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-partner-managed-companies-company_uuid-retrieve_terms_of_service",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-partner-managed-companies-company_uuid-retrieve_terms_of_service",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-partner-managed-companies-company_uuid-retrieve_terms_of_service",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse.Builder _resBuilder = 
            PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PostPartnerManagedCompaniesCompanyUuidRetrieveTermsOfServiceResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create an admin for the company
     * Creates a new admin for a company.
     * If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.
     * 
     * scope: `company_admin:write`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdAdminsRequestBuilder createAdmin() {
        return new PostV1CompaniesCompanyIdAdminsRequestBuilder(this);
    }

    /**
     * Create an admin for the company
     * Creates a new admin for a company.
     * If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.
     * 
     * scope: `company_admin:write`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdAdminsResponse createAdmin(
            String companyId,
            PostV1CompaniesCompanyIdAdminsRequestBody requestBody) throws Exception {
        return createAdmin(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an admin for the company
     * Creates a new admin for a company.
     * If the email matches an existing user, this will create an admin account for the current user. Otherwise, this will create a new user.
     * 
     * scope: `company_admin:write`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdAdminsResponse createAdmin(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdAdminsRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdAdminsRequest request =
            PostV1CompaniesCompanyIdAdminsRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdAdminsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/admins",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-admins", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-admins",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-admins",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-admins",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdAdminsResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdAdminsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdAdminsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Admin _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Admin>() {});
                _res.withAdmin(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all the admins at a company
     * Returns a list of all the admins at a company
     * 
     * scope: `company_admin:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdAdminsRequestBuilder listAdmins() {
        return new GetV1CompaniesCompanyIdAdminsRequestBuilder(this);
    }

    /**
     * Get all the admins at a company
     * Returns a list of all the admins at a company
     * 
     * scope: `company_admin:read`
     * @param companyId The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdAdminsResponse listAdmins(
            String companyId) throws Exception {
        return listAdmins(companyId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get all the admins at a company
     * Returns a list of all the admins at a company
     * 
     * scope: `company_admin:read`
     * @param companyId The UUID of the company
     * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     * @param per Number of objects per page. For majority of endpoints will default to 25
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdAdminsResponse listAdmins(
            String companyId,
            Optional<Long> page,
            Optional<Long> per,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdAdminsRequest request =
            GetV1CompaniesCompanyIdAdminsRequest
                .builder()
                .companyId(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdAdminsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/admins",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdAdminsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-admins", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-admins",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-admins",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-admins",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdAdminsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdAdminsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdAdminsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Admin> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Admin>>() {});
                _res.withAdminList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get the company's onboarding status
     * Get company's onboarding status.
     * The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * scope: `company_onboarding_status:read`
     * @return The call builder
     */
    public GetV1CompanyOnboardingStatusRequestBuilder getOnboardingStatus() {
        return new GetV1CompanyOnboardingStatusRequestBuilder(this);
    }

    /**
     * Get the company's onboarding status
     * Get company's onboarding status.
     * The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * scope: `company_onboarding_status:read`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyOnboardingStatusResponse getOnboardingStatus(
            String companyUuid) throws Exception {
        return getOnboardingStatus(companyUuid, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get the company's onboarding status
     * Get company's onboarding status.
     * The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * scope: `company_onboarding_status:read`
     * @param companyUuid The UUID of the company
     * @param additionalSteps Comma delimited string indicating whether to include any additional steps of onboarding. Currently only supports the value "external_payroll".
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyOnboardingStatusResponse getOnboardingStatus(
            String companyUuid,
            Optional<String> additionalSteps,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompanyOnboardingStatusRequest request =
            GetV1CompanyOnboardingStatusRequest
                .builder()
                .companyUuid(companyUuid)
                .additionalSteps(additionalSteps)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompanyOnboardingStatusRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/onboarding_status",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompanyOnboardingStatusRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-company-onboarding-status", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company-onboarding-status",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-company-onboarding-status",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company-onboarding-status",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompanyOnboardingStatusResponse.Builder _resBuilder = 
            GetV1CompanyOnboardingStatusResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompanyOnboardingStatusResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CompanyOnboardingStatus _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CompanyOnboardingStatus>() {});
                _res.withCompanyOnboardingStatus(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Finish company onboarding
     * Finalize a given company's onboarding process.
     * 
     * ### Approve a company in demo
     * After a company is finished onboarding, Gusto requires an additional step to review and approve that company. The company onboarding status is `"onboarding_completed": false`, until the API call is made to finish company onboarding.
     * In production environments, this step is required for risk-analysis purposes.
     * 
     * We provide the endpoint `PUT '/v1/companies/{company_uuid}/approve'` to facilitate company approvals in the demo environment.
     * 
     * ```shell
     * PUT '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve'
     * 
     * # Response: Company object, with company_status: 'Approved'
     * ```
     * 
     * scope: `companies:write`
     * @return The call builder
     */
    public GetV1CompanyFinishOnboardingRequestBuilder finishOnboarding() {
        return new GetV1CompanyFinishOnboardingRequestBuilder(this);
    }

    /**
     * Finish company onboarding
     * Finalize a given company's onboarding process.
     * 
     * ### Approve a company in demo
     * After a company is finished onboarding, Gusto requires an additional step to review and approve that company. The company onboarding status is `"onboarding_completed": false`, until the API call is made to finish company onboarding.
     * In production environments, this step is required for risk-analysis purposes.
     * 
     * We provide the endpoint `PUT '/v1/companies/{company_uuid}/approve'` to facilitate company approvals in the demo environment.
     * 
     * ```shell
     * PUT '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve'
     * 
     * # Response: Company object, with company_status: 'Approved'
     * ```
     * 
     * scope: `companies:write`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyFinishOnboardingResponse finishOnboarding(
            String companyUuid) throws Exception {
        return finishOnboarding(companyUuid, Optional.empty());
    }
    
    /**
     * Finish company onboarding
     * Finalize a given company's onboarding process.
     * 
     * ### Approve a company in demo
     * After a company is finished onboarding, Gusto requires an additional step to review and approve that company. The company onboarding status is `"onboarding_completed": false`, until the API call is made to finish company onboarding.
     * In production environments, this step is required for risk-analysis purposes.
     * 
     * We provide the endpoint `PUT '/v1/companies/{company_uuid}/approve'` to facilitate company approvals in the demo environment.
     * 
     * ```shell
     * PUT '/v1/companies/89771af8-b964-472e-8064-554dfbcb56d9/approve'
     * 
     * # Response: Company object, with company_status: 'Approved'
     * ```
     * 
     * scope: `companies:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyFinishOnboardingResponse finishOnboarding(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompanyFinishOnboardingRequest request =
            GetV1CompanyFinishOnboardingRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompanyFinishOnboardingRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/finish_onboarding",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-company-finish-onboarding", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company-finish-onboarding",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-company-finish-onboarding",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company-finish-onboarding",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompanyFinishOnboardingResponse.Builder _resBuilder = 
            GetV1CompanyFinishOnboardingResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompanyFinishOnboardingResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CompanyOnboardingStatus _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CompanyOnboardingStatus>() {});
                _res.withCompanyOnboardingStatus(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get the custom fields of a company
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company
     * 
     * scope: `companies:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdCustomFieldsRequestBuilder getCustomFields() {
        return new GetV1CompaniesCompanyIdCustomFieldsRequestBuilder(this);
    }

    /**
     * Get the custom fields of a company
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company
     * 
     * scope: `companies:read`
     * @param companyId The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdCustomFieldsResponse getCustomFields(
            String companyId) throws Exception {
        return getCustomFields(companyId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get the custom fields of a company
     * Returns a list of the custom fields of the company. Useful when you need to know the schema of custom fields for an entire company
     * 
     * scope: `companies:read`
     * @param companyId The UUID of the company
     * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     * @param per Number of objects per page. For majority of endpoints will default to 25
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdCustomFieldsResponse getCustomFields(
            String companyId,
            Optional<Long> page,
            Optional<Long> per,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdCustomFieldsRequest request =
            GetV1CompaniesCompanyIdCustomFieldsRequest
                .builder()
                .companyId(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdCustomFieldsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/custom_fields",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdCustomFieldsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-custom_fields", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-custom_fields",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-custom_fields",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-custom_fields",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdCustomFieldsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdCustomFieldsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdCustomFieldsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CompanyCustomFieldList _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CompanyCustomFieldList>() {});
                _res.withCompanyCustomFieldList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
