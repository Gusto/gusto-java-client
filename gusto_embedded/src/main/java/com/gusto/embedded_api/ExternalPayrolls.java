/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.ExternalPayroll;
import com.gusto.embedded_api.models.components.ExternalPayrollBasic;
import com.gusto.embedded_api.models.components.ExternalPayrollTaxSuggestions;
import com.gusto.embedded_api.models.components.TaxLiabilitiesSelections;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1ExternalPayrollRequest;
import com.gusto.embedded_api.models.operations.DeleteV1ExternalPayrollRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1ExternalPayrollResponse;
import com.gusto.embedded_api.models.operations.GetV1CompanyExternalPayrollsRequest;
import com.gusto.embedded_api.models.operations.GetV1CompanyExternalPayrollsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompanyExternalPayrollsResponse;
import com.gusto.embedded_api.models.operations.GetV1ExternalPayrollCalculateTaxesRequest;
import com.gusto.embedded_api.models.operations.GetV1ExternalPayrollCalculateTaxesRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1ExternalPayrollCalculateTaxesResponse;
import com.gusto.embedded_api.models.operations.GetV1ExternalPayrollRequest;
import com.gusto.embedded_api.models.operations.GetV1ExternalPayrollRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1ExternalPayrollResponse;
import com.gusto.embedded_api.models.operations.GetV1TaxLiabilitiesRequest;
import com.gusto.embedded_api.models.operations.GetV1TaxLiabilitiesRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1TaxLiabilitiesResponse;
import com.gusto.embedded_api.models.operations.PostV1ExternalPayrollRequest;
import com.gusto.embedded_api.models.operations.PostV1ExternalPayrollRequestBody;
import com.gusto.embedded_api.models.operations.PostV1ExternalPayrollRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1ExternalPayrollResponse;
import com.gusto.embedded_api.models.operations.PutV1ExternalPayrollRequest;
import com.gusto.embedded_api.models.operations.PutV1ExternalPayrollRequestBody;
import com.gusto.embedded_api.models.operations.PutV1ExternalPayrollRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1ExternalPayrollResponse;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesFinishRequest;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesFinishRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesFinishResponse;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesRequest;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesRequestBody;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1TaxLiabilitiesResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class ExternalPayrolls implements
            MethodCallPostV1ExternalPayroll,
            MethodCallGetV1CompanyExternalPayrolls,
            MethodCallGetV1ExternalPayroll,
            MethodCallDeleteV1ExternalPayroll,
            MethodCallPutV1ExternalPayroll,
            MethodCallGetV1ExternalPayrollCalculateTaxes,
            MethodCallGetV1TaxLiabilities,
            MethodCallPutV1TaxLiabilities,
            MethodCallPutV1TaxLiabilitiesFinish {

    private final SDKConfiguration sdkConfiguration;

    ExternalPayrolls(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a new external payroll for a company
     * Creates a new external payroll for the company.
     * 
     * scope: `external_payrolls:write`
     * @return The call builder
     */
    public PostV1ExternalPayrollRequestBuilder create() {
        return new PostV1ExternalPayrollRequestBuilder(this);
    }

    /**
     * Create a new external payroll for a company
     * Creates a new external payroll for the company.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1ExternalPayrollResponse create(
            String companyUuid,
            PostV1ExternalPayrollRequestBody requestBody) throws Exception {
        return create(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Create a new external payroll for a company
     * Creates a new external payroll for the company.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1ExternalPayrollResponse create(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1ExternalPayrollRequestBody requestBody) throws Exception {
        PostV1ExternalPayrollRequest request =
            PostV1ExternalPayrollRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1ExternalPayrollRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-external-payroll", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-external-payroll",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1ExternalPayrollResponse.Builder _resBuilder = 
            PostV1ExternalPayrollResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1ExternalPayrollResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ExternalPayroll _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ExternalPayroll>() {});
                _res.withExternalPayroll(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get external payrolls for a company
     * Get an external payroll for a given company.
     * 
     * scope: `external_payrolls:read`
     * @return The call builder
     */
    public GetV1CompanyExternalPayrollsRequestBuilder get() {
        return new GetV1CompanyExternalPayrollsRequestBuilder(this);
    }

    /**
     * Get external payrolls for a company
     * Get an external payroll for a given company.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyExternalPayrollsResponse get(
            String companyUuid) throws Exception {
        return get(companyUuid, Optional.empty());
    }
    
    /**
     * Get external payrolls for a company
     * Get an external payroll for a given company.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyExternalPayrollsResponse get(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompanyExternalPayrollsRequest request =
            GetV1CompanyExternalPayrollsRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompanyExternalPayrollsRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-company-external-payrolls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company-external-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-company-external-payrolls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company-external-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompanyExternalPayrollsResponse.Builder _resBuilder = 
            GetV1CompanyExternalPayrollsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompanyExternalPayrollsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ExternalPayrollBasic> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ExternalPayrollBasic>>() {});
                _res.withExternalPayrollList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an external payroll
     * Get an external payroll for a given company.
     * 
     * scope: `external_payrolls:read`
     * @return The call builder
     */
    public GetV1ExternalPayrollRequestBuilder retrieve() {
        return new GetV1ExternalPayrollRequestBuilder(this);
    }

    /**
     * Get an external payroll
     * Get an external payroll for a given company.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ExternalPayrollResponse retrieve(
            String companyUuid,
            String externalPayrollId) throws Exception {
        return retrieve(companyUuid, externalPayrollId, Optional.empty());
    }
    
    /**
     * Get an external payroll
     * Get an external payroll for a given company.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ExternalPayrollResponse retrieve(
            String companyUuid,
            String externalPayrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ExternalPayrollRequest request =
            GetV1ExternalPayrollRequest
                .builder()
                .companyUuid(companyUuid)
                .externalPayrollId(externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ExternalPayrollRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-external-payroll", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-external-payroll",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ExternalPayrollResponse.Builder _resBuilder = 
            GetV1ExternalPayrollResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ExternalPayrollResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ExternalPayroll _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ExternalPayroll>() {});
                _res.withExternalPayroll(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an external payroll
     * Delete an external payroll.
     * 
     * scope: `external_payrolls:write`
     * @return The call builder
     */
    public DeleteV1ExternalPayrollRequestBuilder delete() {
        return new DeleteV1ExternalPayrollRequestBuilder(this);
    }

    /**
     * Delete an external payroll
     * Delete an external payroll.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1ExternalPayrollResponse delete(
            String companyUuid,
            String externalPayrollId) throws Exception {
        return delete(companyUuid, externalPayrollId, Optional.empty());
    }
    
    /**
     * Delete an external payroll
     * Delete an external payroll.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1ExternalPayrollResponse delete(
            String companyUuid,
            String externalPayrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1ExternalPayrollRequest request =
            DeleteV1ExternalPayrollRequest
                .builder()
                .companyUuid(companyUuid)
                .externalPayrollId(externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1ExternalPayrollRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-external-payroll", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-external-payroll",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1ExternalPayrollResponse.Builder _resBuilder = 
            DeleteV1ExternalPayrollResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1ExternalPayrollResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an external payroll
     * Update an external payroll with a list of external payroll items
     * 
     * scope: `external_payrolls:write`
     * @return The call builder
     */
    public PutV1ExternalPayrollRequestBuilder update() {
        return new PutV1ExternalPayrollRequestBuilder(this);
    }

    /**
     * Update an external payroll
     * Update an external payroll with a list of external payroll items
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ExternalPayrollResponse update(
            String companyUuid,
            String externalPayrollId,
            PutV1ExternalPayrollRequestBody requestBody) throws Exception {
        return update(companyUuid, externalPayrollId, Optional.empty(), requestBody);
    }
    
    /**
     * Update an external payroll
     * Update an external payroll with a list of external payroll items
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ExternalPayrollResponse update(
            String companyUuid,
            String externalPayrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1ExternalPayrollRequestBody requestBody) throws Exception {
        PutV1ExternalPayrollRequest request =
            PutV1ExternalPayrollRequest
                .builder()
                .companyUuid(companyUuid)
                .externalPayrollId(externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1ExternalPayrollRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-external-payroll", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-external-payroll",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-external-payroll",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1ExternalPayrollResponse.Builder _resBuilder = 
            PutV1ExternalPayrollResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1ExternalPayrollResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ExternalPayroll _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ExternalPayroll>() {});
                _res.withExternalPayroll(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get tax suggestions for an external payroll
     * Get tax suggestions for an external payroll. Earnings and/or benefits
     * data must be saved prior to the calculation in order to retrieve accurate
     * tax calculation.
     * 
     * scope: `external_payrolls:read`
     * @return The call builder
     */
    public GetV1ExternalPayrollCalculateTaxesRequestBuilder calculateTaxes() {
        return new GetV1ExternalPayrollCalculateTaxesRequestBuilder(this);
    }

    /**
     * Get tax suggestions for an external payroll
     * Get tax suggestions for an external payroll. Earnings and/or benefits
     * data must be saved prior to the calculation in order to retrieve accurate
     * tax calculation.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ExternalPayrollCalculateTaxesResponse calculateTaxes(
            String companyUuid,
            String externalPayrollId) throws Exception {
        return calculateTaxes(companyUuid, externalPayrollId, Optional.empty());
    }
    
    /**
     * Get tax suggestions for an external payroll
     * Get tax suggestions for an external payroll. Earnings and/or benefits
     * data must be saved prior to the calculation in order to retrieve accurate
     * tax calculation.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @param externalPayrollId The UUID of the external payroll
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ExternalPayrollCalculateTaxesResponse calculateTaxes(
            String companyUuid,
            String externalPayrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ExternalPayrollCalculateTaxesRequest request =
            GetV1ExternalPayrollCalculateTaxesRequest
                .builder()
                .companyUuid(companyUuid)
                .externalPayrollId(externalPayrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ExternalPayrollCalculateTaxesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/{external_payroll_id}/calculate_taxes",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-external-payroll-calculate-taxes", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-external-payroll-calculate-taxes",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-external-payroll-calculate-taxes",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-external-payroll-calculate-taxes",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ExternalPayrollCalculateTaxesResponse.Builder _resBuilder = 
            GetV1ExternalPayrollCalculateTaxesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ExternalPayrollCalculateTaxesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ExternalPayrollTaxSuggestions> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ExternalPayrollTaxSuggestions>>() {});
                _res.withExternalPayrollTaxSuggestionsList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get tax liabilities
     * Get tax liabilities from aggregate external payrolls for a company.
     * 
     * scope: `external_payrolls:read`
     * @return The call builder
     */
    public GetV1TaxLiabilitiesRequestBuilder listTaxLiabilities() {
        return new GetV1TaxLiabilitiesRequestBuilder(this);
    }

    /**
     * Get tax liabilities
     * Get tax liabilities from aggregate external payrolls for a company.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1TaxLiabilitiesResponse listTaxLiabilities(
            String companyUuid) throws Exception {
        return listTaxLiabilities(companyUuid, Optional.empty());
    }
    
    /**
     * Get tax liabilities
     * Get tax liabilities from aggregate external payrolls for a company.
     * 
     * scope: `external_payrolls:read`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1TaxLiabilitiesResponse listTaxLiabilities(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1TaxLiabilitiesRequest request =
            GetV1TaxLiabilitiesRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1TaxLiabilitiesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/tax_liabilities",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-tax-liabilities", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-tax-liabilities",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-tax-liabilities",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-tax-liabilities",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1TaxLiabilitiesResponse.Builder _resBuilder = 
            GetV1TaxLiabilitiesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1TaxLiabilitiesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<List<TaxLiabilitiesSelections>> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<List<TaxLiabilitiesSelections>>>() {});
                _res.withTaxLiabilitiesList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update tax liabilities
     * Update tax liabilities for a company.
     * 
     * scope: `external_payrolls:write`
     * @return The call builder
     */
    public PutV1TaxLiabilitiesRequestBuilder updateTaxLiabilities() {
        return new PutV1TaxLiabilitiesRequestBuilder(this);
    }

    /**
     * Update tax liabilities
     * Update tax liabilities for a company.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TaxLiabilitiesResponse updateTaxLiabilities(
            String companyUuid,
            PutV1TaxLiabilitiesRequestBody requestBody) throws Exception {
        return updateTaxLiabilities(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update tax liabilities
     * Update tax liabilities for a company.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TaxLiabilitiesResponse updateTaxLiabilities(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1TaxLiabilitiesRequestBody requestBody) throws Exception {
        PutV1TaxLiabilitiesRequest request =
            PutV1TaxLiabilitiesRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1TaxLiabilitiesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/tax_liabilities",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-tax-liabilities", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-tax-liabilities",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-tax-liabilities",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-tax-liabilities",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1TaxLiabilitiesResponse.Builder _resBuilder = 
            PutV1TaxLiabilitiesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1TaxLiabilitiesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<List<TaxLiabilitiesSelections>> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<List<TaxLiabilitiesSelections>>>() {});
                _res.withTaxLiabilitiesList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Finalize tax liabilities options and convert into processed payrolls
     * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.
     * 
     * scope: `external_payrolls:write`
     * @return The call builder
     */
    public PutV1TaxLiabilitiesFinishRequestBuilder finalizeTaxLiabilities() {
        return new PutV1TaxLiabilitiesFinishRequestBuilder(this);
    }

    /**
     * Finalize tax liabilities options and convert into processed payrolls
     * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TaxLiabilitiesFinishResponse finalizeTaxLiabilities(
            String companyUuid) throws Exception {
        return finalizeTaxLiabilities(companyUuid, Optional.empty());
    }
    
    /**
     * Finalize tax liabilities options and convert into processed payrolls
     * Finalizes tax liabilities for a company. All external payrolls edit action will be disabled.
     * 
     * scope: `external_payrolls:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TaxLiabilitiesFinishResponse finalizeTaxLiabilities(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        PutV1TaxLiabilitiesFinishRequest request =
            PutV1TaxLiabilitiesFinishRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1TaxLiabilitiesFinishRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/external_payrolls/tax_liabilities/finish",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-tax-liabilities-finish", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-tax-liabilities-finish",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-tax-liabilities-finish",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-tax-liabilities-finish",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1TaxLiabilitiesFinishResponse.Builder _resBuilder = 
            PutV1TaxLiabilitiesFinishResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1TaxLiabilitiesFinishResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
