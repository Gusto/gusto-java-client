/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.ContractorPayment;
import com.gusto.embedded_api.models.components.ContractorPaymentReceipt;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest;
import com.gusto.embedded_api.models.operations.DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidContractorPaymentsPreviewRequest;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidContractorPaymentsPreviewRequestBody;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidContractorPaymentsPreviewRequestBuilder;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidContractorPaymentsPreviewResponse;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidContractorPaymentsPreviewResponseBody;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentsRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentsResponse;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyIdContractorPaymentsResponseBody;
import com.gusto.embedded_api.models.operations.GetV1ContractorPaymentsContractorPaymentUuidFundRequest;
import com.gusto.embedded_api.models.operations.GetV1ContractorPaymentsContractorPaymentUuidFundRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1ContractorPaymentsContractorPaymentUuidFundResponse;
import com.gusto.embedded_api.models.operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest;
import com.gusto.embedded_api.models.operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdContractorPaymentsRequest;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdContractorPaymentsRequestBody;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdContractorPaymentsRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1CompaniesCompanyIdContractorPaymentsResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class ContractorPayments implements
            MethodCallGetV1ContractorPaymentsContractorPaymentUuidReceipt,
            MethodCallGetV1ContractorPaymentsContractorPaymentUuidFund,
            MethodCallPostV1CompaniesCompanyIdContractorPayments,
            MethodCallGetV1CompaniesCompanyIdContractorPayments,
            MethodCallGetV1CompaniesCompanyIdContractorPaymentContractorPayment,
            MethodCallDeleteV1CompaniesCompanyIdContractorPaymentContractorPayment,
            MethodCallGetCompaniesCompanyUuidContractorPaymentsPreview {

    private final SDKConfiguration sdkConfiguration;

    ContractorPayments(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get a single contractor payment receipt
     * Returns a contractor payment receipt.
     * 
     * Notes:
     * * Receipts are only available for direct deposit payments and are only available once those payments have been funded.
     * * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status.
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Dollar amounts are represented to the cent.
     * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1ContractorPaymentsContractorPaymentUuidReceiptRequestBuilder getReceipt() {
        return new GetV1ContractorPaymentsContractorPaymentUuidReceiptRequestBuilder(this);
    }

    /**
     * Get a single contractor payment receipt
     * Returns a contractor payment receipt.
     * 
     * Notes:
     * * Receipts are only available for direct deposit payments and are only available once those payments have been funded.
     * * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status.
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Dollar amounts are represented to the cent.
     * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
     * 
     * scope: `payrolls:read`
     * @param contractorPaymentUuid The UUID of the contractor payment
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse getReceipt(
            String contractorPaymentUuid) throws Exception {
        return getReceipt(contractorPaymentUuid, Optional.empty());
    }
    
    /**
     * Get a single contractor payment receipt
     * Returns a contractor payment receipt.
     * 
     * Notes:
     * * Receipts are only available for direct deposit payments and are only available once those payments have been funded.
     * * Payroll Receipt requests for payrolls which do not have receipts available (e.g. payment by check) will return a 404 status.
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Dollar amounts are represented to the cent.
     * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
     * 
     * scope: `payrolls:read`
     * @param contractorPaymentUuid The UUID of the contractor payment
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse getReceipt(
            String contractorPaymentUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest request =
            GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest
                .builder()
                .contractorPaymentUuid(contractorPaymentUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorPaymentsContractorPaymentUuidReceiptRequest.class,
                _baseUrl,
                "/v1/contractor_payments/{contractor_payment_uuid}/receipt",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractor_payments-contractor_payment_uuid-receipt", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractor_payments-contractor_payment_uuid-receipt",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractor_payments-contractor_payment_uuid-receipt",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractor_payments-contractor_payment_uuid-receipt",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse.Builder _resBuilder = 
            GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorPaymentsContractorPaymentUuidReceiptResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPaymentReceipt _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPaymentReceipt>() {});
                _res.withContractorPaymentReceipt(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Fund a contractor payment [DEMO]
     * &gt; 🚧 Demo action
     * &gt;
     * &gt; This action is only available in the Demo environment
     * 
     * Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public GetV1ContractorPaymentsContractorPaymentUuidFundRequestBuilder fund() {
        return new GetV1ContractorPaymentsContractorPaymentUuidFundRequestBuilder(this);
    }

    /**
     * Fund a contractor payment [DEMO]
     * &gt; 🚧 Demo action
     * &gt;
     * &gt; This action is only available in the Demo environment
     * 
     * Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
     * 
     * scope: `payrolls:run`
     * @param contractorPaymentUuid The UUID of the contractor payment
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorPaymentsContractorPaymentUuidFundResponse fund(
            String contractorPaymentUuid) throws Exception {
        return fund(contractorPaymentUuid, Optional.empty());
    }
    
    /**
     * Fund a contractor payment [DEMO]
     * &gt; 🚧 Demo action
     * &gt;
     * &gt; This action is only available in the Demo environment
     * 
     * Simulate funding a contractor payment. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
     * 
     * scope: `payrolls:run`
     * @param contractorPaymentUuid The UUID of the contractor payment
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorPaymentsContractorPaymentUuidFundResponse fund(
            String contractorPaymentUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorPaymentsContractorPaymentUuidFundRequest request =
            GetV1ContractorPaymentsContractorPaymentUuidFundRequest
                .builder()
                .contractorPaymentUuid(contractorPaymentUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorPaymentsContractorPaymentUuidFundRequest.class,
                _baseUrl,
                "/v1/contractor_payments/{contractor_payment_uuid}/fund",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractor_payments-contractor_payment_uuid-fund", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractor_payments-contractor_payment_uuid-fund",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractor_payments-contractor_payment_uuid-fund",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractor_payments-contractor_payment_uuid-fund",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorPaymentsContractorPaymentUuidFundResponse.Builder _resBuilder = 
            GetV1ContractorPaymentsContractorPaymentUuidFundResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorPaymentsContractorPaymentUuidFundResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPayment _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPayment>() {});
                _res.withContractorPayment(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a contractor payment
     * Pay a contractor. Information needed depends on the contractor's wage type (hourly vs fixed)
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdContractorPaymentsRequestBuilder create() {
        return new PostV1CompaniesCompanyIdContractorPaymentsRequestBuilder(this);
    }

    /**
     * Create a contractor payment
     * Pay a contractor. Information needed depends on the contractor's wage type (hourly vs fixed)
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdContractorPaymentsResponse create(
            String companyId,
            PostV1CompaniesCompanyIdContractorPaymentsRequestBody requestBody) throws Exception {
        return create(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create a contractor payment
     * Pay a contractor. Information needed depends on the contractor's wage type (hourly vs fixed)
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdContractorPaymentsResponse create(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdContractorPaymentsRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdContractorPaymentsRequest request =
            PostV1CompaniesCompanyIdContractorPaymentsRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdContractorPaymentsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-contractor_payments", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-contractor_payments",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-contractor_payments",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-contractor_payments",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdContractorPaymentsResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdContractorPaymentsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdContractorPaymentsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPayment _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPayment>() {});
                _res.withContractorPayment(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get contractor payments for a company
     * Returns an object containing individual contractor payments, within a given time period, including totals.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdContractorPaymentsRequestBuilder list() {
        return new GetV1CompaniesCompanyIdContractorPaymentsRequestBuilder(this);
    }

    /**
     * Get contractor payments for a company
     * Returns an object containing individual contractor payments, within a given time period, including totals.
     * 
     * scope: `payrolls:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdContractorPaymentsResponse list(
            GetV1CompaniesCompanyIdContractorPaymentsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdContractorPaymentsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payments",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdContractorPaymentsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-contractor_payments", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-contractor_payments",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-contractor_payments",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-contractor_payments",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdContractorPaymentsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdContractorPaymentsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdContractorPaymentsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetV1CompaniesCompanyIdContractorPaymentsResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetV1CompaniesCompanyIdContractorPaymentsResponseBody>() {});
                _res.withOneOf(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a single contractor payment
     * Returns a single contractor payment.
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestBuilder get() {
        return new GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestBuilder(this);
    }

    /**
     * Get a single contractor payment
     * Returns a single contractor payment.
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param contractorPaymentId The UUID of the contractor payment
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse get(
            String companyId,
            String contractorPaymentId) throws Exception {
        return get(companyId, contractorPaymentId, Optional.empty());
    }
    
    /**
     * Get a single contractor payment
     * Returns a single contractor payment.
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param contractorPaymentId The UUID of the contractor payment
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse get(
            String companyId,
            String contractorPaymentId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest request =
            GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest
                .builder()
                .companyId(companyId)
                .contractorPaymentId(contractorPaymentId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-contractor_payment-contractor-payment", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-contractor_payment-contractor-payment",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-contractor_payment-contractor-payment",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-contractor_payment-contractor-payment",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPayment _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPayment>() {});
                _res.withContractorPayment(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Cancel a contractor payment
     * Cancels and deletes a contractor payment. If the contractor payment has already started processing ("may_cancel": true), the payment cannot be cancelled.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestBuilder delete() {
        return new DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequestBuilder(this);
    }

    /**
     * Cancel a contractor payment
     * Cancels and deletes a contractor payment. If the contractor payment has already started processing ("may_cancel": true), the payment cannot be cancelled.
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param contractorPaymentId The UUID of the contractor payment
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse delete(
            String companyId,
            String contractorPaymentId) throws Exception {
        return delete(companyId, contractorPaymentId, Optional.empty());
    }
    
    /**
     * Cancel a contractor payment
     * Cancels and deletes a contractor payment. If the contractor payment has already started processing ("may_cancel": true), the payment cannot be cancelled.
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param contractorPaymentId The UUID of the contractor payment
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse delete(
            String companyId,
            String contractorPaymentId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest request =
            DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest
                .builder()
                .companyId(companyId)
                .contractorPaymentId(contractorPaymentId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payments/{contractor_payment_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-companies-company_id-contractor_payment-contractor-payment", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-companies-company_id-contractor_payment-contractor-payment",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-companies-company_id-contractor_payment-contractor-payment",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-companies-company_id-contractor_payment-contractor-payment",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse.Builder _resBuilder = 
            DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1CompaniesCompanyIdContractorPaymentContractorPaymentResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Preview contractor payment debit date
     * Returns a debit_date dependent on the ACH payment speed of the company.
     * 
     * If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetCompaniesCompanyUuidContractorPaymentsPreviewRequestBuilder preview() {
        return new GetCompaniesCompanyUuidContractorPaymentsPreviewRequestBuilder(this);
    }

    /**
     * Preview contractor payment debit date
     * Returns a debit_date dependent on the ACH payment speed of the company.
     * 
     * If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.
     * 
     * scope: `payrolls:read`
     * @param companyUuid The UUID of the company
     * @param requestBody a list of contractor payments.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidContractorPaymentsPreviewResponse preview(
            String companyUuid,
            GetCompaniesCompanyUuidContractorPaymentsPreviewRequestBody requestBody) throws Exception {
        return preview(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Preview contractor payment debit date
     * Returns a debit_date dependent on the ACH payment speed of the company.
     * 
     * If the payment method is Check or Historical payment, the debit_date will be the same as the check_date.
     * 
     * scope: `payrolls:read`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody a list of contractor payments.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidContractorPaymentsPreviewResponse preview(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            GetCompaniesCompanyUuidContractorPaymentsPreviewRequestBody requestBody) throws Exception {
        GetCompaniesCompanyUuidContractorPaymentsPreviewRequest request =
            GetCompaniesCompanyUuidContractorPaymentsPreviewRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCompaniesCompanyUuidContractorPaymentsPreviewRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/contractor_payments/preview",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-companies-company_uuid-contractor_payments-preview", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-companies-company_uuid-contractor_payments-preview",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-companies-company_uuid-contractor_payments-preview",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-companies-company_uuid-contractor_payments-preview",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCompaniesCompanyUuidContractorPaymentsPreviewResponse.Builder _resBuilder = 
            GetCompaniesCompanyUuidContractorPaymentsPreviewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCompaniesCompanyUuidContractorPaymentsPreviewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                GetCompaniesCompanyUuidContractorPaymentsPreviewResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<GetCompaniesCompanyUuidContractorPaymentsPreviewResponseBody>() {});
                _res.withObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.gusto.embedded_api.models.errors.GetCompaniesCompanyUuidContractorPaymentsPreviewResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.gusto.embedded_api.models.errors.GetCompaniesCompanyUuidContractorPaymentsPreviewResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
