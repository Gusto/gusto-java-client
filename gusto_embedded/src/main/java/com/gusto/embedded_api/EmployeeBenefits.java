/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.EmployeeBenefit;
import com.gusto.embedded_api.models.components.PostEmployeeYtdBenefitAmountsFromDifferentCompany;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.components.YtdBenefitAmountsFromDifferentCompany;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeeBenefitsEmployeeBenefitIdRequest;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1EmployeeBenefitsEmployeeBenefitIdResponse;
import com.gusto.embedded_api.models.operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest;
import com.gusto.embedded_api.models.operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBuilder;
import com.gusto.embedded_api.models.operations.GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeeBenefitsEmployeeBenefitIdRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeeBenefitsEmployeeBenefitIdResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdEmployeeBenefitsRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdEmployeeBenefitsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdEmployeeBenefitsResponse;
import com.gusto.embedded_api.models.operations.PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest;
import com.gusto.embedded_api.models.operations.PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBuilder;
import com.gusto.embedded_api.models.operations.PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse;
import com.gusto.embedded_api.models.operations.PostV1EmployeesEmployeeIdEmployeeBenefitsRequest;
import com.gusto.embedded_api.models.operations.PostV1EmployeesEmployeeIdEmployeeBenefitsRequestBody;
import com.gusto.embedded_api.models.operations.PostV1EmployeesEmployeeIdEmployeeBenefitsRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1EmployeesEmployeeIdEmployeeBenefitsResponse;
import com.gusto.embedded_api.models.operations.PutV1EmployeeBenefitsEmployeeBenefitIdRequest;
import com.gusto.embedded_api.models.operations.PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody;
import com.gusto.embedded_api.models.operations.PutV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1EmployeeBenefitsEmployeeBenefitIdResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Double;
import java.lang.Exception;
import java.lang.Long;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class EmployeeBenefits implements
            MethodCallPostV1EmployeesEmployeeIdEmployeeBenefits,
            MethodCallGetV1EmployeesEmployeeIdEmployeeBenefits,
            MethodCallGetV1EmployeeBenefitsEmployeeBenefitId,
            MethodCallPutV1EmployeeBenefitsEmployeeBenefitId,
            MethodCallDeleteV1EmployeeBenefitsEmployeeBenefitId,
            MethodCallGetEmployeeYtdBenefitAmountsFromDifferentCompany,
            MethodCallPostEmployeeYtdBenefitAmountsFromDifferentCompany {

    private final SDKConfiguration sdkConfiguration;

    EmployeeBenefits(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @return The call builder
     */
    public PostV1EmployeesEmployeeIdEmployeeBenefitsRequestBuilder create() {
        return new PostV1EmployeesEmployeeIdEmployeeBenefitsRequestBuilder(this);
    }

    /**
     * Create an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @param employeeId The UUID of the employee
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdEmployeeBenefitsResponse create(
            String employeeId,
            PostV1EmployeesEmployeeIdEmployeeBenefitsRequestBody requestBody) throws Exception {
        return create(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdEmployeeBenefitsResponse create(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1EmployeesEmployeeIdEmployeeBenefitsRequestBody requestBody) throws Exception {
        PostV1EmployeesEmployeeIdEmployeeBenefitsRequest request =
            PostV1EmployeesEmployeeIdEmployeeBenefitsRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1EmployeesEmployeeIdEmployeeBenefitsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/employee_benefits",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-employees-employee_id-employee_benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-employees-employee_id-employee_benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1EmployeesEmployeeIdEmployeeBenefitsResponse.Builder _resBuilder = 
            PostV1EmployeesEmployeeIdEmployeeBenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1EmployeesEmployeeIdEmployeeBenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeBenefit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeBenefit>() {});
                _res.withEmployeeBenefit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all benefits for an employee
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Returns an array of all employee benefits for this employee
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdEmployeeBenefitsRequestBuilder get() {
        return new GetV1EmployeesEmployeeIdEmployeeBenefitsRequestBuilder(this);
    }

    /**
     * Get all benefits for an employee
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Returns an array of all employee benefits for this employee
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdEmployeeBenefitsResponse get(
            String employeeId) throws Exception {
        return get(employeeId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get all benefits for an employee
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Returns an array of all employee benefits for this employee
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @param employeeId The UUID of the employee
     * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     * @param per Number of objects per page. For majority of endpoints will default to 25
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdEmployeeBenefitsResponse get(
            String employeeId,
            Optional<Double> page,
            Optional<Double> per,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdEmployeeBenefitsRequest request =
            GetV1EmployeesEmployeeIdEmployeeBenefitsRequest
                .builder()
                .employeeId(employeeId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdEmployeeBenefitsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/employee_benefits",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1EmployeesEmployeeIdEmployeeBenefitsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-employees-employee_id-employee_benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-employees-employee_id-employee_benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdEmployeeBenefitsResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdEmployeeBenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdEmployeeBenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<EmployeeBenefit> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<EmployeeBenefit>>() {});
                _res.withEmployeeBenefitList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @return The call builder
     */
    public GetV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder retrieve() {
        return new GetV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder(this);
    }

    /**
     * Get an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @param employeeBenefitId The UUID of the employee benefit.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeeBenefitsEmployeeBenefitIdResponse retrieve(
            String employeeBenefitId) throws Exception {
        return retrieve(employeeBenefitId, Optional.empty());
    }
    
    /**
     * Get an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @param employeeBenefitId The UUID of the employee benefit.
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeeBenefitsEmployeeBenefitIdResponse retrieve(
            String employeeBenefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeeBenefitsEmployeeBenefitIdRequest request =
            GetV1EmployeeBenefitsEmployeeBenefitIdRequest
                .builder()
                .employeeBenefitId(employeeBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeeBenefitsEmployeeBenefitIdRequest.class,
                _baseUrl,
                "/v1/employee_benefits/{employee_benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-employee_benefits-employee_benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeeBenefitsEmployeeBenefitIdResponse.Builder _resBuilder = 
            GetV1EmployeeBenefitsEmployeeBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeeBenefitsEmployeeBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeBenefit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeBenefit>() {});
                _res.withEmployeeBenefit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @return The call builder
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder update() {
        return new PutV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder(this);
    }

    /**
     * Update an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @param employeeBenefitId The UUID of the employee benefit.
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdResponse update(
            String employeeBenefitId,
            PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody requestBody) throws Exception {
        return update(employeeBenefitId, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @param employeeBenefitId The UUID of the employee benefit.
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeeBenefitsEmployeeBenefitIdResponse update(
            String employeeBenefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeeBenefitsEmployeeBenefitIdRequestBody requestBody) throws Exception {
        PutV1EmployeeBenefitsEmployeeBenefitIdRequest request =
            PutV1EmployeeBenefitsEmployeeBenefitIdRequest
                .builder()
                .employeeBenefitId(employeeBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeeBenefitsEmployeeBenefitIdRequest.class,
                _baseUrl,
                "/v1/employee_benefits/{employee_benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-employee_benefits-employee_benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeeBenefitsEmployeeBenefitIdResponse.Builder _resBuilder = 
            PutV1EmployeeBenefitsEmployeeBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeeBenefitsEmployeeBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeBenefit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeBenefit>() {});
                _res.withEmployeeBenefit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @return The call builder
     */
    public DeleteV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder delete() {
        return new DeleteV1EmployeeBenefitsEmployeeBenefitIdRequestBuilder(this);
    }

    /**
     * Delete an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @param employeeBenefitId The UUID of the employee benefit.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeeBenefitsEmployeeBenefitIdResponse delete(
            String employeeBenefitId) throws Exception {
        return delete(employeeBenefitId, Optional.empty());
    }
    
    /**
     * Delete an employee benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * scope: `employee_benefits:write`
     * @param employeeBenefitId The UUID of the employee benefit.
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeeBenefitsEmployeeBenefitIdResponse delete(
            String employeeBenefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1EmployeeBenefitsEmployeeBenefitIdRequest request =
            DeleteV1EmployeeBenefitsEmployeeBenefitIdRequest
                .builder()
                .employeeBenefitId(employeeBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1EmployeeBenefitsEmployeeBenefitIdRequest.class,
                _baseUrl,
                "/v1/employee_benefits/{employee_benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-employee_benefits-employee_benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-employee_benefits-employee_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1EmployeeBenefitsEmployeeBenefitIdResponse.Builder _resBuilder = 
            DeleteV1EmployeeBenefitsEmployeeBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1EmployeeBenefitsEmployeeBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get year-to-date benefit amounts from a different company
     * Retrieves year-to-date benefit amounts that were contributed at a different company for the specified employee.
     * Returns benefit amounts for the requested tax year (defaults to current year if not specified).
     * 
     * This endpoint only supports retrieving outside contributions for 401(k) benefits.
     * 
     * scope: `employee_benefits:read`
     * @return The call builder
     */
    public GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBuilder getYtdBenefitAmountsFromDifferentCompany() {
        return new GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBuilder(this);
    }

    /**
     * Get year-to-date benefit amounts from a different company
     * Retrieves year-to-date benefit amounts that were contributed at a different company for the specified employee.
     * Returns benefit amounts for the requested tax year (defaults to current year if not specified).
     * 
     * This endpoint only supports retrieving outside contributions for 401(k) benefits.
     * 
     * scope: `employee_benefits:read`
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse getYtdBenefitAmountsFromDifferentCompany(
            String employeeId) throws Exception {
        return getYtdBenefitAmountsFromDifferentCompany(employeeId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get year-to-date benefit amounts from a different company
     * Retrieves year-to-date benefit amounts that were contributed at a different company for the specified employee.
     * Returns benefit amounts for the requested tax year (defaults to current year if not specified).
     * 
     * This endpoint only supports retrieving outside contributions for 401(k) benefits.
     * 
     * scope: `employee_benefits:read`
     * @param employeeId The UUID of the employee
     * @param taxYear The tax year for which to retrieve YTD benefit amounts. Defaults to current year if not specified.
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse getYtdBenefitAmountsFromDifferentCompany(
            String employeeId,
            Optional<Long> taxYear,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest request =
            GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest
                .builder()
                .employeeId(employeeId)
                .taxYear(taxYear)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/ytd_benefit_amounts_from_different_company",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetEmployeeYtdBenefitAmountsFromDifferentCompanyRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-employee-ytd-benefit-amounts-from-different-company", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-employee-ytd-benefit-amounts-from-different-company",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-employee-ytd-benefit-amounts-from-different-company",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-employee-ytd-benefit-amounts-from-different-company",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse.Builder _resBuilder = 
            GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetEmployeeYtdBenefitAmountsFromDifferentCompanyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<YtdBenefitAmountsFromDifferentCompany> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<YtdBenefitAmountsFromDifferentCompany>>() {});
                _res.withYtdBenefitAmountsFromDifferentCompanyList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create year-to-date benefit amounts from a different company
     * Year-to-date benefit amounts from a different company represents the amount of money added to an employee's plan during a current year, made outside of the current contribution when they were employed at a different company.
     * 
     * This endpoint only supports passing outside contributions for 401(k) benefits.
     * 
     * scope: `employee_benefits:write`
     * @return The call builder
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBuilder createYtdBenefitAmountsFromDifferentCompany() {
        return new PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequestBuilder(this);
    }

    /**
     * Create year-to-date benefit amounts from a different company
     * Year-to-date benefit amounts from a different company represents the amount of money added to an employee's plan during a current year, made outside of the current contribution when they were employed at a different company.
     * 
     * This endpoint only supports passing outside contributions for 401(k) benefits.
     * 
     * scope: `employee_benefits:write`
     * @param employeeId The UUID of the employee
     * @param postEmployeeYtdBenefitAmountsFromDifferentCompany
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse createYtdBenefitAmountsFromDifferentCompany(
            String employeeId,
            PostEmployeeYtdBenefitAmountsFromDifferentCompany postEmployeeYtdBenefitAmountsFromDifferentCompany) throws Exception {
        return createYtdBenefitAmountsFromDifferentCompany(employeeId, Optional.empty(), postEmployeeYtdBenefitAmountsFromDifferentCompany);
    }
    
    /**
     * Create year-to-date benefit amounts from a different company
     * Year-to-date benefit amounts from a different company represents the amount of money added to an employee's plan during a current year, made outside of the current contribution when they were employed at a different company.
     * 
     * This endpoint only supports passing outside contributions for 401(k) benefits.
     * 
     * scope: `employee_benefits:write`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param postEmployeeYtdBenefitAmountsFromDifferentCompany
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse createYtdBenefitAmountsFromDifferentCompany(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostEmployeeYtdBenefitAmountsFromDifferentCompany postEmployeeYtdBenefitAmountsFromDifferentCompany) throws Exception {
        PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest request =
            PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .postEmployeeYtdBenefitAmountsFromDifferentCompany(postEmployeeYtdBenefitAmountsFromDifferentCompany)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostEmployeeYtdBenefitAmountsFromDifferentCompanyRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/ytd_benefit_amounts_from_different_company",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "postEmployeeYtdBenefitAmountsFromDifferentCompany",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-employee-ytd-benefit-amounts-from-different-company", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-employee-ytd-benefit-amounts-from-different-company",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-employee-ytd-benefit-amounts-from-different-company",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-employee-ytd-benefit-amounts-from-different-company",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse.Builder _resBuilder = 
            PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostEmployeeYtdBenefitAmountsFromDifferentCompanyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
