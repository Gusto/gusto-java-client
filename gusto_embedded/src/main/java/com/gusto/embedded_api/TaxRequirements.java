/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.TaxRequirementsState;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyUuidTaxRequirementsRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyUuidTaxRequirementsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyUuidTaxRequirementsResponse;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyUuidTaxRequirementsStateRequest;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyUuidTaxRequirementsStateRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompaniesCompanyUuidTaxRequirementsStateResponse;
import com.gusto.embedded_api.models.operations.PutV1CompaniesCompanyUuidTaxRequirementsStateRequest;
import com.gusto.embedded_api.models.operations.PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBody;
import com.gusto.embedded_api.models.operations.PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1CompaniesCompanyUuidTaxRequirementsStateResponse;
import com.gusto.embedded_api.models.operations.ResponseBody;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class TaxRequirements implements
            MethodCallGetV1CompaniesCompanyUuidTaxRequirementsState,
            MethodCallPutV1CompaniesCompanyUuidTaxRequirementsState,
            MethodCallGetV1CompaniesCompanyUuidTaxRequirements {

    private final SDKConfiguration sdkConfiguration;

    TaxRequirements(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get State Tax Requirements
     * 
     * <p>Get all tax requirements for a given state.
     * 
     * <p>### Metadata Examples
     * 
     * <p>```json select
     * {
     *   "type": "select",
     *   "options": [
     *     { "label": "Semiweekly",  value: "Semi-weekly" },
     *     { "label": "Monthly",  value: "Monthly" },
     *     { "label": "Quarterly",  value: "Quarterly" },
     *   ]
     * }
     * ```
     * ```json radio
     * {
     *   "type": "radio",
     *   "options": [
     *     { "label": "No, we cannot reimburse",  value: false, short_label: "Not Reimbursable" },
     *     { "label": "Yes, we can reimburse",  value: true, short_label: "Reimbursable" },
     *   ]
     * }
     * ```
     * ```json account_number
     * {
     *   "type": "account_number",
     *   "mask": "######-##',
     *   "prefix": null
     * }
     * ```
     * ```json tax_rate
     * {
     *   "type": "tax_rate",
     *   "validation": {
     *     "type": "min_max",
     *     "min": "0.0004",
     *     "max": "0.081"
     *   }
     * }
     * ```
     * 
     * <p>scope: `company_tax_requirements:read`
     * 
     * @return The call builder
     */
    public GetV1CompaniesCompanyUuidTaxRequirementsStateRequestBuilder get() {
        return new GetV1CompaniesCompanyUuidTaxRequirementsStateRequestBuilder(this);
    }

    /**
     * Get State Tax Requirements
     * 
     * <p>Get all tax requirements for a given state.
     * 
     * <p>### Metadata Examples
     * 
     * <p>```json select
     * {
     *   "type": "select",
     *   "options": [
     *     { "label": "Semiweekly",  value: "Semi-weekly" },
     *     { "label": "Monthly",  value: "Monthly" },
     *     { "label": "Quarterly",  value: "Quarterly" },
     *   ]
     * }
     * ```
     * ```json radio
     * {
     *   "type": "radio",
     *   "options": [
     *     { "label": "No, we cannot reimburse",  value: false, short_label: "Not Reimbursable" },
     *     { "label": "Yes, we can reimburse",  value: true, short_label: "Reimbursable" },
     *   ]
     * }
     * ```
     * ```json account_number
     * {
     *   "type": "account_number",
     *   "mask": "######-##',
     *   "prefix": null
     * }
     * ```
     * ```json tax_rate
     * {
     *   "type": "tax_rate",
     *   "validation": {
     *     "type": "min_max",
     *     "min": "0.0004",
     *     "max": "0.081"
     *   }
     * }
     * ```
     * 
     * <p>scope: `company_tax_requirements:read`
     * 
     * @param companyUuid The UUID of the company
     * @param state 2-letter US state abbreviation
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyUuidTaxRequirementsStateResponse get(
            String companyUuid,
            String state) throws Exception {
        return get(companyUuid, state, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get State Tax Requirements
     * 
     * <p>Get all tax requirements for a given state.
     * 
     * <p>### Metadata Examples
     * 
     * <p>```json select
     * {
     *   "type": "select",
     *   "options": [
     *     { "label": "Semiweekly",  value: "Semi-weekly" },
     *     { "label": "Monthly",  value: "Monthly" },
     *     { "label": "Quarterly",  value: "Quarterly" },
     *   ]
     * }
     * ```
     * ```json radio
     * {
     *   "type": "radio",
     *   "options": [
     *     { "label": "No, we cannot reimburse",  value: false, short_label: "Not Reimbursable" },
     *     { "label": "Yes, we can reimburse",  value: true, short_label: "Reimbursable" },
     *   ]
     * }
     * ```
     * ```json account_number
     * {
     *   "type": "account_number",
     *   "mask": "######-##',
     *   "prefix": null
     * }
     * ```
     * ```json tax_rate
     * {
     *   "type": "tax_rate",
     *   "validation": {
     *     "type": "min_max",
     *     "min": "0.0004",
     *     "max": "0.081"
     *   }
     * }
     * ```
     * 
     * <p>scope: `company_tax_requirements:read`
     * 
     * @param companyUuid The UUID of the company
     * @param state 2-letter US state abbreviation
     * @param scheduling When true, return "new" requirement sets with valid `effective_from` dates that are available to save new effective dated values.
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyUuidTaxRequirementsStateResponse get(
            String companyUuid,
            String state,
            Optional<Boolean> scheduling,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyUuidTaxRequirementsStateRequest request =
            GetV1CompaniesCompanyUuidTaxRequirementsStateRequest
                .builder()
                .companyUuid(companyUuid)
                .state(state)
                .scheduling(scheduling)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyUuidTaxRequirementsStateRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/tax_requirements/{state}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyUuidTaxRequirementsStateRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-companies-company_uuid-tax_requirements-state", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_uuid-tax_requirements-state",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_uuid-tax_requirements-state",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_uuid-tax_requirements-state",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyUuidTaxRequirementsStateResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyUuidTaxRequirementsStateResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyUuidTaxRequirementsStateResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TaxRequirementsState _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TaxRequirementsState>() {});
                _res.withTaxRequirementsState(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update State Tax Requirements
     * 
     * <p>Update State Tax Requirements
     * 
     * <p>scope: `company_tax_requirements:write`
     * 
     * @return The call builder
     */
    public PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBuilder updateState() {
        return new PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBuilder(this);
    }

    /**
     * Update State Tax Requirements
     * 
     * <p>Update State Tax Requirements
     * 
     * <p>scope: `company_tax_requirements:write`
     * 
     * @param companyUuid The UUID of the company
     * @param state 2-letter US state abbreviation
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyUuidTaxRequirementsStateResponse updateState(
            String companyUuid,
            String state,
            PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBody requestBody) throws Exception {
        return updateState(companyUuid, state, Optional.empty(), requestBody);
    }
    
    /**
     * Update State Tax Requirements
     * 
     * <p>Update State Tax Requirements
     * 
     * <p>scope: `company_tax_requirements:write`
     * 
     * @param companyUuid The UUID of the company
     * @param state 2-letter US state abbreviation
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyUuidTaxRequirementsStateResponse updateState(
            String companyUuid,
            String state,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompaniesCompanyUuidTaxRequirementsStateRequestBody requestBody) throws Exception {
        PutV1CompaniesCompanyUuidTaxRequirementsStateRequest request =
            PutV1CompaniesCompanyUuidTaxRequirementsStateRequest
                .builder()
                .companyUuid(companyUuid)
                .state(state)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompaniesCompanyUuidTaxRequirementsStateRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/tax_requirements/{state}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-companies-company_uuid-tax_requirements-state", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-companies-company_uuid-tax_requirements-state",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-companies-company_uuid-tax_requirements-state",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-companies-company_uuid-tax_requirements-state",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompaniesCompanyUuidTaxRequirementsStateResponse.Builder _resBuilder = 
            PutV1CompaniesCompanyUuidTaxRequirementsStateResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompaniesCompanyUuidTaxRequirementsStateResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get All Tax Requirement States
     * 
     * <p>Returns objects describing the states that have tax requirements for the company
     * 
     * <p>scope: `company_tax_requirements:read`
     * 
     * @return The call builder
     */
    public GetV1CompaniesCompanyUuidTaxRequirementsRequestBuilder getAll() {
        return new GetV1CompaniesCompanyUuidTaxRequirementsRequestBuilder(this);
    }

    /**
     * Get All Tax Requirement States
     * 
     * <p>Returns objects describing the states that have tax requirements for the company
     * 
     * <p>scope: `company_tax_requirements:read`
     * 
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyUuidTaxRequirementsResponse getAll(
            String companyUuid) throws Exception {
        return getAll(companyUuid, Optional.empty());
    }
    
    /**
     * Get All Tax Requirement States
     * 
     * <p>Returns objects describing the states that have tax requirements for the company
     * 
     * <p>scope: `company_tax_requirements:read`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyUuidTaxRequirementsResponse getAll(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyUuidTaxRequirementsRequest request =
            GetV1CompaniesCompanyUuidTaxRequirementsRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyUuidTaxRequirementsRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/tax_requirements",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-companies-company_uuid-tax_requirements", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_uuid-tax_requirements",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_uuid-tax_requirements",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-companies-company_uuid-tax_requirements",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyUuidTaxRequirementsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyUuidTaxRequirementsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyUuidTaxRequirementsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ResponseBody> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ResponseBody>>() {});
                _res.withResponseBodies(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
