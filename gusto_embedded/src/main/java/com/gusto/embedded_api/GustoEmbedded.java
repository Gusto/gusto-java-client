/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.RetryConfig;
import com.gusto.embedded_api.utils.SpeakeasyHTTPClient;
import com.gusto.embedded_api.utils.Utils;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.HashMap;
import java.util.Map;
import java.util.Optional;
import java.util.function.Consumer;

/**
 * Gusto API: Welcome to Gusto's Embedded Payroll API documentation!
 */
public class GustoEmbedded {

  
    /**
     * AvailableServers contains identifiers for the servers available to the SDK.
     */
    public enum AvailableServers {
        /**
         * DEMO - Demo
         */
      DEMO("demo"),
        /**
         * PROD - Prod
         */
      PROD("prod");

        private final String server;

        private AvailableServers(String server) {
            this.server = server;
        }

        public String server() {
           return server;
        }
    }

    /**
     * SERVERS contains the list of server urls available to the SDK.
     */
    @SuppressWarnings("serial")
    public static final Map<AvailableServers, String> SERVERS = new HashMap<>() { {
    put(AvailableServers.DEMO, "https://api.gusto-demo.com");
    put(AvailableServers.PROD, "https://api.gusto.com");
    }};

    private final Introspection introspection;

    private final Companies companies;

    private final Invoices invoices;

    private final CompanyAttachments companyAttachments;

    private final CompanyAttachment companyAttachment;

    private final FederalTaxDetails federalTaxDetails;

    private final IndustrySelection industrySelection;

    private final Signatories signatories;

    private final Flows flows;

    private final Locations locations;

    private final BankAccounts bankAccounts;

    private final ExternalPayrolls externalPayrolls;

    private final PaymentConfigs paymentConfigs;

    private final PaySchedules paySchedules;

    private final Employees employees;

    private final HistoricalEmployees historicalEmployees;

    private final Departments departments;

    private final EmployeeEmployments employeeEmployments;

    private final EmployeeAddresses employeeAddresses;

    private final EmployeeTaxSetup employeeTaxSetup;

    private final EmployeePaymentMethod employeePaymentMethod;

    private final EmployeePaymentMethods employeePaymentMethods;

    private final JobsAndCompensations jobsAndCompensations;

    private final EarningTypes earningTypes;

    private final Contractors contractors;

    private final ContractorPaymentMethods contractorPaymentMethods;

    private final ContractorPaymentMethod contractorPaymentMethod;

    private final Webhooks webhooks;

    private final ContractorForms contractorForms;

    private final ContractorDocuments contractorDocuments;

    private final EmployeeForms employeeForms;

    private final Payrolls payrolls;

    private final TimeOffPolicies timeOffPolicies;

    private final ContractorPayments contractorPayments;

    private final ContractorPaymentGroups contractorPaymentGroups;

    private final CompanyForms companyForms;

    private final GeneratedDocuments generatedDocuments;

    private final Reports reports;

    private final CompanyBenefits companyBenefits;

    private final EmployeeBenefits employeeBenefits;

    private final Garnishments garnishments;

    private final I9Verification i9Verification;

    private final TaxRequirements taxRequirements;

    private final HolidayPayPolicies holidayPayPolicies;

    private final Notifications notifications;

    private final Events events;

    private final RecoveryCases recoveryCases;

    private final AchTransactions achTransactions;

    private final WireInRequests wireInRequests;

    public Introspection introspection() {
        return introspection;
    }

    public Companies companies() {
        return companies;
    }

    public Invoices invoices() {
        return invoices;
    }

    public CompanyAttachments companyAttachments() {
        return companyAttachments;
    }

    public CompanyAttachment companyAttachment() {
        return companyAttachment;
    }

    public FederalTaxDetails federalTaxDetails() {
        return federalTaxDetails;
    }

    public IndustrySelection industrySelection() {
        return industrySelection;
    }

    public Signatories signatories() {
        return signatories;
    }

    public Flows flows() {
        return flows;
    }

    public Locations locations() {
        return locations;
    }

    public BankAccounts bankAccounts() {
        return bankAccounts;
    }

    public ExternalPayrolls externalPayrolls() {
        return externalPayrolls;
    }

    public PaymentConfigs paymentConfigs() {
        return paymentConfigs;
    }

    public PaySchedules paySchedules() {
        return paySchedules;
    }

    public Employees employees() {
        return employees;
    }

    public HistoricalEmployees historicalEmployees() {
        return historicalEmployees;
    }

    public Departments departments() {
        return departments;
    }

    public EmployeeEmployments employeeEmployments() {
        return employeeEmployments;
    }

    public EmployeeAddresses employeeAddresses() {
        return employeeAddresses;
    }

    public EmployeeTaxSetup employeeTaxSetup() {
        return employeeTaxSetup;
    }

    public EmployeePaymentMethod employeePaymentMethod() {
        return employeePaymentMethod;
    }

    public EmployeePaymentMethods employeePaymentMethods() {
        return employeePaymentMethods;
    }

    public JobsAndCompensations jobsAndCompensations() {
        return jobsAndCompensations;
    }

    public EarningTypes earningTypes() {
        return earningTypes;
    }

    public Contractors contractors() {
        return contractors;
    }

    public ContractorPaymentMethods contractorPaymentMethods() {
        return contractorPaymentMethods;
    }

    public ContractorPaymentMethod contractorPaymentMethod() {
        return contractorPaymentMethod;
    }

    public Webhooks webhooks() {
        return webhooks;
    }

    public ContractorForms contractorForms() {
        return contractorForms;
    }

    public ContractorDocuments contractorDocuments() {
        return contractorDocuments;
    }

    public EmployeeForms employeeForms() {
        return employeeForms;
    }

    public Payrolls payrolls() {
        return payrolls;
    }

    public TimeOffPolicies timeOffPolicies() {
        return timeOffPolicies;
    }

    public ContractorPayments contractorPayments() {
        return contractorPayments;
    }

    public ContractorPaymentGroups contractorPaymentGroups() {
        return contractorPaymentGroups;
    }

    public CompanyForms companyForms() {
        return companyForms;
    }

    public GeneratedDocuments generatedDocuments() {
        return generatedDocuments;
    }

    public Reports reports() {
        return reports;
    }

    public CompanyBenefits companyBenefits() {
        return companyBenefits;
    }

    public EmployeeBenefits employeeBenefits() {
        return employeeBenefits;
    }

    public Garnishments garnishments() {
        return garnishments;
    }

    public I9Verification i9Verification() {
        return i9Verification;
    }

    public TaxRequirements taxRequirements() {
        return taxRequirements;
    }

    public HolidayPayPolicies holidayPayPolicies() {
        return holidayPayPolicies;
    }

    public Notifications notifications() {
        return notifications;
    }

    public Events events() {
        return events;
    }

    public RecoveryCases recoveryCases() {
        return recoveryCases;
    }

    public AchTransactions achTransactions() {
        return achTransactions;
    }

    public WireInRequests wireInRequests() {
        return wireInRequests;
    }

    private final SDKConfiguration sdkConfiguration;

    /**
     * The Builder class allows the configuration of a new instance of the SDK.
     */
    public static class Builder {

        private final SDKConfiguration sdkConfiguration = new SDKConfiguration();

        private Builder() {
        }

        /**
         * Allows the default HTTP client to be overridden with a custom implementation.
         *
         * @param client The HTTP client to use for all requests.
         * @return The builder instance.
         */
        public Builder client(HTTPClient client) {
            this.sdkConfiguration.defaultClient = client;
            return this;
        }
        /**
         * Configures the SDK security to use the provided secret.
         *
         * @param companyAccessAuth The secret to use for all requests.
         * @return The builder instance.
         */
        public Builder companyAccessAuth(String companyAccessAuth) {
            this.sdkConfiguration.securitySource = SecuritySource.of(com.gusto.embedded_api.models.components.Security.builder()
              .companyAccessAuth(companyAccessAuth)
              .build());
            return this;
        }

        /**
         * Configures the SDK to use a custom security source.
         * @param securitySource The security source to use for all requests.
         * @return The builder instance.
         */
        public Builder securitySource(SecuritySource securitySource) {
            this.sdkConfiguration.securitySource = securitySource;
            return this;
        }
        
        /**
         * Overrides the default server URL.
         *
         * @param serverUrl The server URL to use for all requests.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl) {
            this.sdkConfiguration.serverUrl = serverUrl;
            return this;
        }

        /**
         * Overrides the default server URL  with a templated URL populated with the provided parameters.
         *
         * @param serverUrl The server URL to use for all requests.
         * @param params The parameters to use when templating the URL.
         * @return The builder instance.
         */
        public Builder serverURL(String serverUrl, Map<String, String> params) {
            this.sdkConfiguration.serverUrl = Utils.templateUrl(serverUrl, params);
            return this;
        }
        
        /**
         * Overrides the default server by name.
         *
         * @param server The server to use for all requests.
         * @return The builder instance.
         */
        public Builder server(AvailableServers server) {
            this.sdkConfiguration.server = server.server();
            this.sdkConfiguration.serverUrl = SERVERS.get(server);
            return this;
        }
        
        /**
         * Overrides the default configuration for retries
         *
         * @param retryConfig The retry configuration to use for all requests.
         * @return The builder instance.
         */
        public Builder retryConfig(RetryConfig retryConfig) {
            this.sdkConfiguration.retryConfig = Optional.of(retryConfig);
            return this;
        }
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(com.gusto.embedded_api.utils.Hooks hooks) {
            sdkConfiguration.setHooks(hooks);  
            return this;  
        }
        
        // Visible for testing, may be accessed via reflection in tests
        Builder _hooks(Consumer<? super com.gusto.embedded_api.utils.Hooks> consumer) {
            consumer.accept(sdkConfiguration.hooks());
            return this;    
        }
        
        /**
         * Builds a new instance of the SDK.
         * @return The SDK instance.
         */
        public GustoEmbedded build() {
            if (sdkConfiguration.defaultClient == null) {
                sdkConfiguration.defaultClient = new SpeakeasyHTTPClient();
            }
	        if (sdkConfiguration.securitySource == null) {
	    	    sdkConfiguration.securitySource = SecuritySource.of(null);
	        }
            if (sdkConfiguration.serverUrl == null || sdkConfiguration.serverUrl.isBlank()) {
                sdkConfiguration.serverUrl = SERVERS.get(AvailableServers.DEMO);
                sdkConfiguration.server = AvailableServers.DEMO.server();
            }
            if (sdkConfiguration.serverUrl.endsWith("/")) {
                sdkConfiguration.serverUrl = sdkConfiguration.serverUrl.substring(0, sdkConfiguration.serverUrl.length() - 1);
            }
            return new GustoEmbedded(sdkConfiguration);
        }
    }
    
    /**
     * Get a new instance of the SDK builder to configure a new instance of the SDK.
     * @return The SDK builder instance.
     */
    public static Builder builder() {
        return new Builder();
    }

    private GustoEmbedded(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
        this.introspection = new Introspection(sdkConfiguration);
        this.companies = new Companies(sdkConfiguration);
        this.invoices = new Invoices(sdkConfiguration);
        this.companyAttachments = new CompanyAttachments(sdkConfiguration);
        this.companyAttachment = new CompanyAttachment(sdkConfiguration);
        this.federalTaxDetails = new FederalTaxDetails(sdkConfiguration);
        this.industrySelection = new IndustrySelection(sdkConfiguration);
        this.signatories = new Signatories(sdkConfiguration);
        this.flows = new Flows(sdkConfiguration);
        this.locations = new Locations(sdkConfiguration);
        this.bankAccounts = new BankAccounts(sdkConfiguration);
        this.externalPayrolls = new ExternalPayrolls(sdkConfiguration);
        this.paymentConfigs = new PaymentConfigs(sdkConfiguration);
        this.paySchedules = new PaySchedules(sdkConfiguration);
        this.employees = new Employees(sdkConfiguration);
        this.historicalEmployees = new HistoricalEmployees(sdkConfiguration);
        this.departments = new Departments(sdkConfiguration);
        this.employeeEmployments = new EmployeeEmployments(sdkConfiguration);
        this.employeeAddresses = new EmployeeAddresses(sdkConfiguration);
        this.employeeTaxSetup = new EmployeeTaxSetup(sdkConfiguration);
        this.employeePaymentMethod = new EmployeePaymentMethod(sdkConfiguration);
        this.employeePaymentMethods = new EmployeePaymentMethods(sdkConfiguration);
        this.jobsAndCompensations = new JobsAndCompensations(sdkConfiguration);
        this.earningTypes = new EarningTypes(sdkConfiguration);
        this.contractors = new Contractors(sdkConfiguration);
        this.contractorPaymentMethods = new ContractorPaymentMethods(sdkConfiguration);
        this.contractorPaymentMethod = new ContractorPaymentMethod(sdkConfiguration);
        this.webhooks = new Webhooks(sdkConfiguration);
        this.contractorForms = new ContractorForms(sdkConfiguration);
        this.contractorDocuments = new ContractorDocuments(sdkConfiguration);
        this.employeeForms = new EmployeeForms(sdkConfiguration);
        this.payrolls = new Payrolls(sdkConfiguration);
        this.timeOffPolicies = new TimeOffPolicies(sdkConfiguration);
        this.contractorPayments = new ContractorPayments(sdkConfiguration);
        this.contractorPaymentGroups = new ContractorPaymentGroups(sdkConfiguration);
        this.companyForms = new CompanyForms(sdkConfiguration);
        this.generatedDocuments = new GeneratedDocuments(sdkConfiguration);
        this.reports = new Reports(sdkConfiguration);
        this.companyBenefits = new CompanyBenefits(sdkConfiguration);
        this.employeeBenefits = new EmployeeBenefits(sdkConfiguration);
        this.garnishments = new Garnishments(sdkConfiguration);
        this.i9Verification = new I9Verification(sdkConfiguration);
        this.taxRequirements = new TaxRequirements(sdkConfiguration);
        this.holidayPayPolicies = new HolidayPayPolicies(sdkConfiguration);
        this.notifications = new Notifications(sdkConfiguration);
        this.events = new Events(sdkConfiguration);
        this.recoveryCases = new RecoveryCases(sdkConfiguration);
        this.achTransactions = new AchTransactions(sdkConfiguration);
        this.wireInRequests = new WireInRequests(sdkConfiguration);
        this.sdkConfiguration.initialize();
    }}
