/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.ContractorBankAccount;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.GetV1ContractorsContractorUuidBankAccountsRequest;
import com.gusto.embedded_api.models.operations.GetV1ContractorsContractorUuidBankAccountsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1ContractorsContractorUuidBankAccountsResponse;
import com.gusto.embedded_api.models.operations.GetV1ContractorsContractorUuidPaymentMethodRequest;
import com.gusto.embedded_api.models.operations.GetV1ContractorsContractorUuidPaymentMethodRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1ContractorsContractorUuidPaymentMethodResponse;
import com.gusto.embedded_api.models.operations.PutV1ContractorsContractorIdPaymentMethodRequest;
import com.gusto.embedded_api.models.operations.PutV1ContractorsContractorIdPaymentMethodRequestBody;
import com.gusto.embedded_api.models.operations.PutV1ContractorsContractorIdPaymentMethodRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1ContractorsContractorIdPaymentMethodResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class ContractorPaymentMethod implements
            MethodCallGetV1ContractorsContractorUuidBankAccounts,
            MethodCallGetV1ContractorsContractorUuidPaymentMethod,
            MethodCallPutV1ContractorsContractorIdPaymentMethod {

    private final SDKConfiguration sdkConfiguration;

    ContractorPaymentMethod(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get all contractor bank accounts
     * Returns all contractor bank accounts.
     * 
     * scope: `contractor_payment_methods:read`
     * @return The call builder
     */
    public GetV1ContractorsContractorUuidBankAccountsRequestBuilder getBankAccounts() {
        return new GetV1ContractorsContractorUuidBankAccountsRequestBuilder(this);
    }

    /**
     * Get all contractor bank accounts
     * Returns all contractor bank accounts.
     * 
     * scope: `contractor_payment_methods:read`
     * @param contractorUuid The UUID of the contractor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidBankAccountsResponse getBankAccounts(
            String contractorUuid) throws Exception {
        return getBankAccounts(contractorUuid, Optional.empty());
    }
    
    /**
     * Get all contractor bank accounts
     * Returns all contractor bank accounts.
     * 
     * scope: `contractor_payment_methods:read`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidBankAccountsResponse getBankAccounts(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorsContractorUuidBankAccountsRequest request =
            GetV1ContractorsContractorUuidBankAccountsRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorsContractorUuidBankAccountsRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/bank_accounts",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractors-contractor_uuid-bank_accounts", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-bank_accounts",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractors-contractor_uuid-bank_accounts",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-bank_accounts",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorsContractorUuidBankAccountsResponse.Builder _resBuilder = 
            GetV1ContractorsContractorUuidBankAccountsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorsContractorUuidBankAccountsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ContractorBankAccount> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ContractorBankAccount>>() {});
                _res.withContractorBankAccountList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a contractor's payment method
     * Fetches a contractor's payment method. A contractor payment method
     * describes how the payment should be split across the contractor's associated
     * bank accounts.
     * 
     * scope: `contractor_payment_methods:read`
     * @return The call builder
     */
    public GetV1ContractorsContractorUuidPaymentMethodRequestBuilder get() {
        return new GetV1ContractorsContractorUuidPaymentMethodRequestBuilder(this);
    }

    /**
     * Get a contractor's payment method
     * Fetches a contractor's payment method. A contractor payment method
     * describes how the payment should be split across the contractor's associated
     * bank accounts.
     * 
     * scope: `contractor_payment_methods:read`
     * @param contractorUuid The UUID of the contractor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidPaymentMethodResponse get(
            String contractorUuid) throws Exception {
        return get(contractorUuid, Optional.empty());
    }
    
    /**
     * Get a contractor's payment method
     * Fetches a contractor's payment method. A contractor payment method
     * describes how the payment should be split across the contractor's associated
     * bank accounts.
     * 
     * scope: `contractor_payment_methods:read`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidPaymentMethodResponse get(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorsContractorUuidPaymentMethodRequest request =
            GetV1ContractorsContractorUuidPaymentMethodRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorsContractorUuidPaymentMethodRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/payment_method",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractors-contractor_uuid-payment_method", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractors-contractor_uuid-payment_method",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorsContractorUuidPaymentMethodResponse.Builder _resBuilder = 
            GetV1ContractorsContractorUuidPaymentMethodResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorsContractorUuidPaymentMethodResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.gusto.embedded_api.models.components.ContractorPaymentMethod _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.gusto.embedded_api.models.components.ContractorPaymentMethod>() {});
                _res.withContractorPaymentMethod(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a contractor's payment method
     * Updates a contractor's payment method. Note that creating a contractor
     * bank account will also update the contractor's payment method.
     * 
     * scope: `contractor_payment_methods:write`
     * @return The call builder
     */
    public PutV1ContractorsContractorIdPaymentMethodRequestBuilder update() {
        return new PutV1ContractorsContractorIdPaymentMethodRequestBuilder(this);
    }

    /**
     * Update a contractor's payment method
     * Updates a contractor's payment method. Note that creating a contractor
     * bank account will also update the contractor's payment method.
     * 
     * scope: `contractor_payment_methods:write`
     * @param contractorUuid The UUID of the contractor
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorIdPaymentMethodResponse update(
            String contractorUuid,
            PutV1ContractorsContractorIdPaymentMethodRequestBody requestBody) throws Exception {
        return update(contractorUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a contractor's payment method
     * Updates a contractor's payment method. Note that creating a contractor
     * bank account will also update the contractor's payment method.
     * 
     * scope: `contractor_payment_methods:write`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorIdPaymentMethodResponse update(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1ContractorsContractorIdPaymentMethodRequestBody requestBody) throws Exception {
        PutV1ContractorsContractorIdPaymentMethodRequest request =
            PutV1ContractorsContractorIdPaymentMethodRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1ContractorsContractorIdPaymentMethodRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/payment_method",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-contractors-contractor_id-payment_method", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_id-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-contractors-contractor_id-payment_method",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_id-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1ContractorsContractorIdPaymentMethodResponse.Builder _resBuilder = 
            PutV1ContractorsContractorIdPaymentMethodResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1ContractorsContractorIdPaymentMethodResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                com.gusto.embedded_api.models.components.ContractorPaymentMethod _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<com.gusto.embedded_api.models.components.ContractorPaymentMethod>() {});
                _res.withContractorPaymentMethod(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
