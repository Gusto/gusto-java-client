/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.Compensation;
import com.gusto.embedded_api.models.components.Job;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteV1CompensationsCompensationIdRequest;
import com.gusto.embedded_api.models.operations.DeleteV1CompensationsCompensationIdRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1CompensationsCompensationIdResponse;
import com.gusto.embedded_api.models.operations.DeleteV1JobsJobIdRequest;
import com.gusto.embedded_api.models.operations.DeleteV1JobsJobIdRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteV1JobsJobIdResponse;
import com.gusto.embedded_api.models.operations.GetV1CompensationsCompensationIdRequest;
import com.gusto.embedded_api.models.operations.GetV1CompensationsCompensationIdRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1CompensationsCompensationIdResponse;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdJobsRequest;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdJobsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1EmployeesEmployeeIdJobsResponse;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdCompensationsRequest;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdCompensationsRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdCompensationsResponse;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdQueryParamInclude;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdRequest;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdRequestBuilder;
import com.gusto.embedded_api.models.operations.GetV1JobsJobIdResponse;
import com.gusto.embedded_api.models.operations.PostV1CompensationsCompensationIdRequest;
import com.gusto.embedded_api.models.operations.PostV1CompensationsCompensationIdRequestBody;
import com.gusto.embedded_api.models.operations.PostV1CompensationsCompensationIdRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1CompensationsCompensationIdResponse;
import com.gusto.embedded_api.models.operations.PostV1JobsJobIdRequest;
import com.gusto.embedded_api.models.operations.PostV1JobsJobIdRequestBody;
import com.gusto.embedded_api.models.operations.PostV1JobsJobIdRequestBuilder;
import com.gusto.embedded_api.models.operations.PostV1JobsJobIdResponse;
import com.gusto.embedded_api.models.operations.PutV1CompensationsCompensationIdRequest;
import com.gusto.embedded_api.models.operations.PutV1CompensationsCompensationIdRequestBody;
import com.gusto.embedded_api.models.operations.PutV1CompensationsCompensationIdRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1CompensationsCompensationIdResponse;
import com.gusto.embedded_api.models.operations.PutV1JobsJobIdRequest;
import com.gusto.embedded_api.models.operations.PutV1JobsJobIdRequestBody;
import com.gusto.embedded_api.models.operations.PutV1JobsJobIdRequestBuilder;
import com.gusto.embedded_api.models.operations.PutV1JobsJobIdResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class JobsAndCompensations implements
            MethodCallPostV1JobsJobId,
            MethodCallGetV1EmployeesEmployeeIdJobs,
            MethodCallGetV1JobsJobId,
            MethodCallPutV1JobsJobId,
            MethodCallDeleteV1JobsJobId,
            MethodCallGetV1JobsJobIdCompensations,
            MethodCallPostV1CompensationsCompensationId,
            MethodCallGetV1CompensationsCompensationId,
            MethodCallPutV1CompensationsCompensationId,
            MethodCallDeleteV1CompensationsCompensationId {

    private final SDKConfiguration sdkConfiguration;

    JobsAndCompensations(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a job
     * 
     * <p>Create a job.
     * 
     * <p>scope: `jobs:write`
     * 
     * @return The call builder
     */
    public PostV1JobsJobIdRequestBuilder createJob() {
        return new PostV1JobsJobIdRequestBuilder(this);
    }

    /**
     * Create a job
     * 
     * <p>Create a job.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param employeeId The UUID of the employee
     * @param requestBody Create a job.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1JobsJobIdResponse createJob(
            String employeeId,
            PostV1JobsJobIdRequestBody requestBody) throws Exception {
        return createJob(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create a job
     * 
     * <p>Create a job.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion 
     * @param requestBody Create a job.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1JobsJobIdResponse createJob(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1JobsJobIdRequestBody requestBody) throws Exception {
        PostV1JobsJobIdRequest request =
            PostV1JobsJobIdRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1JobsJobIdRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/jobs",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "post-v1-jobs-job_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "post-v1-jobs-job_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1JobsJobIdResponse.Builder _resBuilder = 
            PostV1JobsJobIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1JobsJobIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Job _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Job>() {});
                _res.withJob(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get jobs for an employee
     * 
     * <p>Get all of the jobs that an employee holds.
     * 
     * <p>scope: `jobs:read`
     * 
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdJobsRequestBuilder getJobs() {
        return new GetV1EmployeesEmployeeIdJobsRequestBuilder(this);
    }

    /**
     * Get jobs for an employee
     * 
     * <p>Get all of the jobs that an employee holds.
     * 
     * <p>scope: `jobs:read`
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdJobsResponse getJobs(
            GetV1EmployeesEmployeeIdJobsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdJobsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/jobs",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1EmployeesEmployeeIdJobsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-employees-employee_id-jobs", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-jobs",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-jobs",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-employees-employee_id-jobs",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdJobsResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdJobsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdJobsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Job> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Job>>() {});
                _res.withJobList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a job
     * 
     * <p>Get a job.
     * 
     * <p>scope: `jobs:read`
     * 
     * @return The call builder
     */
    public GetV1JobsJobIdRequestBuilder getJob() {
        return new GetV1JobsJobIdRequestBuilder(this);
    }

    /**
     * Get a job
     * 
     * <p>Get a job.
     * 
     * <p>scope: `jobs:read`
     * 
     * @param jobId The UUID of the job
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1JobsJobIdResponse getJob(
            String jobId) throws Exception {
        return getJob(jobId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get a job
     * 
     * <p>Get a job.
     * 
     * <p>scope: `jobs:read`
     * 
     * @param jobId The UUID of the job
     * @param include Available options:
     *         - all_compensations: Include all effective dated compensations for the job instead of only the current compensation
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1JobsJobIdResponse getJob(
            String jobId,
            Optional<? extends GetV1JobsJobIdQueryParamInclude> include,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1JobsJobIdRequest request =
            GetV1JobsJobIdRequest
                .builder()
                .jobId(jobId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1JobsJobIdRequest.class,
                _baseUrl,
                "/v1/jobs/{job_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1JobsJobIdRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-jobs-job_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-jobs-job_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1JobsJobIdResponse.Builder _resBuilder = 
            GetV1JobsJobIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1JobsJobIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Job _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Job>() {});
                _res.withJob(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a job
     * 
     * <p>Update a job.
     * 
     * <p>scope: `jobs:write`
     * 
     * @return The call builder
     */
    public PutV1JobsJobIdRequestBuilder update() {
        return new PutV1JobsJobIdRequestBuilder(this);
    }

    /**
     * Update a job
     * 
     * <p>Update a job.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param jobId The UUID of the job
     * @param requestBody Update a job.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1JobsJobIdResponse update(
            String jobId,
            PutV1JobsJobIdRequestBody requestBody) throws Exception {
        return update(jobId, Optional.empty(), requestBody);
    }
    
    /**
     * Update a job
     * 
     * <p>Update a job.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param jobId The UUID of the job
     * @param xGustoAPIVersion 
     * @param requestBody Update a job.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1JobsJobIdResponse update(
            String jobId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1JobsJobIdRequestBody requestBody) throws Exception {
        PutV1JobsJobIdRequest request =
            PutV1JobsJobIdRequest
                .builder()
                .jobId(jobId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1JobsJobIdRequest.class,
                _baseUrl,
                "/v1/jobs/{job_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-jobs-job_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-jobs-job_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1JobsJobIdResponse.Builder _resBuilder = 
            PutV1JobsJobIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1JobsJobIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Job _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Job>() {});
                _res.withJob(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an individual job
     * 
     * <p>Deletes a specific job that an employee holds.
     * 
     * <p>scope: `jobs:write`
     * 
     * @return The call builder
     */
    public DeleteV1JobsJobIdRequestBuilder delete() {
        return new DeleteV1JobsJobIdRequestBuilder(this);
    }

    /**
     * Delete an individual job
     * 
     * <p>Deletes a specific job that an employee holds.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param jobId The UUID of the job
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1JobsJobIdResponse delete(
            String jobId) throws Exception {
        return delete(jobId, Optional.empty());
    }
    
    /**
     * Delete an individual job
     * 
     * <p>Deletes a specific job that an employee holds.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param jobId The UUID of the job
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1JobsJobIdResponse delete(
            String jobId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1JobsJobIdRequest request =
            DeleteV1JobsJobIdRequest
                .builder()
                .jobId(jobId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1JobsJobIdRequest.class,
                _baseUrl,
                "/v1/jobs/{job_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "delete-v1-jobs-job_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "delete-v1-jobs-job_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-jobs-job_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1JobsJobIdResponse.Builder _resBuilder = 
            DeleteV1JobsJobIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1JobsJobIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get compensations for a job
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.
     * 
     * <p>Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.
     * 
     * <p>Use `flsa_status` to determine if an employee is eligible for overtime.
     * 
     * <p>scope: `jobs:read`
     * 
     * @return The call builder
     */
    public GetV1JobsJobIdCompensationsRequestBuilder getCompensations() {
        return new GetV1JobsJobIdCompensationsRequestBuilder(this);
    }

    /**
     * Get compensations for a job
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. By default the API returns only the current compensation - see the `include` query parameter for retrieving all compensations.
     * 
     * <p>Note: Currently the API does not support creating multiple compensations per job - creating a compensation with the same `job_uuid` as another will fail with a relevant error.
     * 
     * <p>Use `flsa_status` to determine if an employee is eligible for overtime.
     * 
     * <p>scope: `jobs:read`
     * 
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1JobsJobIdCompensationsResponse getCompensations(
            GetV1JobsJobIdCompensationsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1JobsJobIdCompensationsRequest.class,
                _baseUrl,
                "/v1/jobs/{job_id}/compensations",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1JobsJobIdCompensationsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-jobs-job_id-compensations", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-jobs-job_id-compensations",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-jobs-job_id-compensations",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-jobs-job_id-compensations",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1JobsJobIdCompensationsResponse.Builder _resBuilder = 
            GetV1JobsJobIdCompensationsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1JobsJobIdCompensationsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Compensation> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Compensation>>() {});
                _res.withCompensationList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:write`
     * 
     * @return The call builder
     */
    public PostV1CompensationsCompensationIdRequestBuilder createCompensation() {
        return new PostV1CompensationsCompensationIdRequestBuilder(this);
    }

    /**
     * Create a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param jobId The UUID of the job
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompensationsCompensationIdResponse createCompensation(
            String jobId,
            PostV1CompensationsCompensationIdRequestBody requestBody) throws Exception {
        return createCompensation(jobId, Optional.empty(), requestBody);
    }
    
    /**
     * Create a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param jobId The UUID of the job
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompensationsCompensationIdResponse createCompensation(
            String jobId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompensationsCompensationIdRequestBody requestBody) throws Exception {
        PostV1CompensationsCompensationIdRequest request =
            PostV1CompensationsCompensationIdRequest
                .builder()
                .jobId(jobId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompensationsCompensationIdRequest.class,
                _baseUrl,
                "/v1/jobs/{job_id}/compensations",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "post-v1-compensations-compensation_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "post-v1-compensations-compensation_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompensationsCompensationIdResponse.Builder _resBuilder = 
            PostV1CompensationsCompensationIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompensationsCompensationIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Compensation _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Compensation>() {});
                _res.withCompensation(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:read`
     * 
     * @return The call builder
     */
    public GetV1CompensationsCompensationIdRequestBuilder getCompensation() {
        return new GetV1CompensationsCompensationIdRequestBuilder(this);
    }

    /**
     * Get a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:read`
     * 
     * @param compensationId The UUID of the compensation
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompensationsCompensationIdResponse getCompensation(
            String compensationId) throws Exception {
        return getCompensation(compensationId, Optional.empty());
    }
    
    /**
     * Get a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:read`
     * 
     * @param compensationId The UUID of the compensation
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompensationsCompensationIdResponse getCompensation(
            String compensationId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompensationsCompensationIdRequest request =
            GetV1CompensationsCompensationIdRequest
                .builder()
                .compensationId(compensationId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompensationsCompensationIdRequest.class,
                _baseUrl,
                "/v1/compensations/{compensation_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-v1-compensations-compensation_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-v1-compensations-compensation_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompensationsCompensationIdResponse.Builder _resBuilder = 
            GetV1CompensationsCompensationIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompensationsCompensationIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Compensation _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Compensation>() {});
                _res.withCompensation(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:write`
     * 
     * @return The call builder
     */
    public PutV1CompensationsCompensationIdRequestBuilder updateCompensation() {
        return new PutV1CompensationsCompensationIdRequestBuilder(this);
    }

    /**
     * Update a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param compensationId The UUID of the compensation
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompensationsCompensationIdResponse updateCompensation(
            String compensationId,
            PutV1CompensationsCompensationIdRequestBody requestBody) throws Exception {
        return updateCompensation(compensationId, Optional.empty(), requestBody);
    }
    
    /**
     * Update a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param compensationId The UUID of the compensation
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompensationsCompensationIdResponse updateCompensation(
            String compensationId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompensationsCompensationIdRequestBody requestBody) throws Exception {
        PutV1CompensationsCompensationIdRequest request =
            PutV1CompensationsCompensationIdRequest
                .builder()
                .compensationId(compensationId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompensationsCompensationIdRequest.class,
                _baseUrl,
                "/v1/compensations/{compensation_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-v1-compensations-compensation_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-v1-compensations-compensation_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompensationsCompensationIdResponse.Builder _resBuilder = 
            PutV1CompensationsCompensationIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompensationsCompensationIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Compensation _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Compensation>() {});
                _res.withCompensation(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn't been processed on payroll.
     * 
     * <p>scope: `jobs:write`
     * 
     * @return The call builder
     */
    public DeleteV1CompensationsCompensationIdRequestBuilder deleteCompensation() {
        return new DeleteV1CompensationsCompensationIdRequestBuilder(this);
    }

    /**
     * Delete a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn't been processed on payroll.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param compensationId The UUID of the compensation
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompensationsCompensationIdResponse deleteCompensation(
            String compensationId) throws Exception {
        return deleteCompensation(compensationId, Optional.empty());
    }
    
    /**
     * Delete a compensation
     * 
     * <p>Compensations contain information on how much is paid out for a job. Jobs may have many compensations, but only one that is active. The current compensation is the one with the most recent `effective_date`. This endpoint deletes a compensation for a job that hasn't been processed on payroll.
     * 
     * <p>scope: `jobs:write`
     * 
     * @param compensationId The UUID of the compensation
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompensationsCompensationIdResponse deleteCompensation(
            String compensationId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1CompensationsCompensationIdRequest request =
            DeleteV1CompensationsCompensationIdRequest
                .builder()
                .compensationId(compensationId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1CompensationsCompensationIdRequest.class,
                _baseUrl,
                "/v1/compensations/{compensation_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "delete-v1-compensations-compensation_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "delete-v1-compensations-compensation_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-v1-compensations-compensation_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1CompensationsCompensationIdResponse.Builder _resBuilder = 
            DeleteV1CompensationsCompensationIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1CompensationsCompensationIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
