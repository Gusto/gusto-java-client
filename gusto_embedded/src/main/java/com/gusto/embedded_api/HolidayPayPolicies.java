/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package com.gusto.embedded_api;

import com.fasterxml.jackson.core.type.TypeReference;
import com.gusto.embedded_api.models.components.HolidayPayPolicy;
import com.gusto.embedded_api.models.components.PaidHolidays;
import com.gusto.embedded_api.models.components.VersionHeader;
import com.gusto.embedded_api.models.errors.APIException;
import com.gusto.embedded_api.models.errors.UnprocessableEntityErrorObject;
import com.gusto.embedded_api.models.operations.DeleteCompaniesCompanyUuidHolidayPayPolicyRequest;
import com.gusto.embedded_api.models.operations.DeleteCompaniesCompanyUuidHolidayPayPolicyRequestBuilder;
import com.gusto.embedded_api.models.operations.DeleteCompaniesCompanyUuidHolidayPayPolicyResponse;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidHolidayPayPolicyRequest;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidHolidayPayPolicyRequestBuilder;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidHolidayPayPolicyResponse;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidPaidHolidaysRequest;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidPaidHolidaysRequestBody;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidPaidHolidaysRequestBuilder;
import com.gusto.embedded_api.models.operations.GetCompaniesCompanyUuidPaidHolidaysResponse;
import com.gusto.embedded_api.models.operations.PostCompaniesCompanyUuidHolidayPayPolicyRequest;
import com.gusto.embedded_api.models.operations.PostCompaniesCompanyUuidHolidayPayPolicyRequestBody;
import com.gusto.embedded_api.models.operations.PostCompaniesCompanyUuidHolidayPayPolicyRequestBuilder;
import com.gusto.embedded_api.models.operations.PostCompaniesCompanyUuidHolidayPayPolicyResponse;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyAddRequest;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBuilder;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyAddResponse;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBuilder;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRequest;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRequestBody;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyRequestBuilder;
import com.gusto.embedded_api.models.operations.PutCompaniesCompanyUuidHolidayPayPolicyResponse;
import com.gusto.embedded_api.models.operations.SDKMethodInterfaces.*;
import com.gusto.embedded_api.utils.HTTPClient;
import com.gusto.embedded_api.utils.HTTPRequest;
import com.gusto.embedded_api.utils.Hook.AfterErrorContextImpl;
import com.gusto.embedded_api.utils.Hook.AfterSuccessContextImpl;
import com.gusto.embedded_api.utils.Hook.BeforeRequestContextImpl;
import com.gusto.embedded_api.utils.SerializedBody;
import com.gusto.embedded_api.utils.Utils.JsonShape;
import com.gusto.embedded_api.utils.Utils;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional; 

public class HolidayPayPolicies implements
            MethodCallGetCompaniesCompanyUuidHolidayPayPolicy,
            MethodCallPostCompaniesCompanyUuidHolidayPayPolicy,
            MethodCallPutCompaniesCompanyUuidHolidayPayPolicy,
            MethodCallDeleteCompaniesCompanyUuidHolidayPayPolicy,
            MethodCallPutCompaniesCompanyUuidHolidayPayPolicyAdd,
            MethodCallPutCompaniesCompanyUuidHolidayPayPolicyRemove,
            MethodCallGetCompaniesCompanyUuidPaidHolidays {

    private final SDKConfiguration sdkConfiguration;

    HolidayPayPolicies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get a company's holiday pay policy
     * 
     * <p>Get a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:read`
     * 
     * @return The call builder
     */
    public GetCompaniesCompanyUuidHolidayPayPolicyRequestBuilder get() {
        return new GetCompaniesCompanyUuidHolidayPayPolicyRequestBuilder(this);
    }

    /**
     * Get a company's holiday pay policy
     * 
     * <p>Get a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:read`
     * 
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidHolidayPayPolicyResponse get(
            String companyUuid) throws Exception {
        return get(companyUuid, Optional.empty());
    }
    
    /**
     * Get a company's holiday pay policy
     * 
     * <p>Get a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:read`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidHolidayPayPolicyResponse get(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetCompaniesCompanyUuidHolidayPayPolicyRequest request =
            GetCompaniesCompanyUuidHolidayPayPolicyRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCompaniesCompanyUuidHolidayPayPolicyRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/holiday_pay_policy",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-companies-company_uuid-holiday_pay_policy", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCompaniesCompanyUuidHolidayPayPolicyResponse.Builder _resBuilder = 
            GetCompaniesCompanyUuidHolidayPayPolicyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCompaniesCompanyUuidHolidayPayPolicyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                HolidayPayPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<HolidayPayPolicy>() {});
                _res.withHolidayPayPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a holiday pay policy for a company
     * 
     * <p>Create a holiday pay policy for a company
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @return The call builder
     */
    public PostCompaniesCompanyUuidHolidayPayPolicyRequestBuilder create() {
        return new PostCompaniesCompanyUuidHolidayPayPolicyRequestBuilder(this);
    }

    /**
     * Create a holiday pay policy for a company
     * 
     * <p>Create a holiday pay policy for a company
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostCompaniesCompanyUuidHolidayPayPolicyResponse create(
            String companyUuid,
            PostCompaniesCompanyUuidHolidayPayPolicyRequestBody requestBody) throws Exception {
        return create(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Create a holiday pay policy for a company
     * 
     * <p>Create a holiday pay policy for a company
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostCompaniesCompanyUuidHolidayPayPolicyResponse create(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostCompaniesCompanyUuidHolidayPayPolicyRequestBody requestBody) throws Exception {
        PostCompaniesCompanyUuidHolidayPayPolicyRequest request =
            PostCompaniesCompanyUuidHolidayPayPolicyRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostCompaniesCompanyUuidHolidayPayPolicyRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/holiday_pay_policy",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "post-companies-company_uuid-holiday_pay_policy", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "post-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "post-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostCompaniesCompanyUuidHolidayPayPolicyResponse.Builder _resBuilder = 
            PostCompaniesCompanyUuidHolidayPayPolicyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostCompaniesCompanyUuidHolidayPayPolicyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                HolidayPayPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<HolidayPayPolicy>() {});
                _res.withHolidayPayPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a company's holiday pay policy
     * 
     * <p>Update a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @return The call builder
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyRequestBuilder update() {
        return new PutCompaniesCompanyUuidHolidayPayPolicyRequestBuilder(this);
    }

    /**
     * Update a company's holiday pay policy
     * 
     * <p>Update a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyResponse update(
            String companyUuid,
            PutCompaniesCompanyUuidHolidayPayPolicyRequestBody requestBody) throws Exception {
        return update(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a company's holiday pay policy
     * 
     * <p>Update a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyResponse update(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutCompaniesCompanyUuidHolidayPayPolicyRequestBody requestBody) throws Exception {
        PutCompaniesCompanyUuidHolidayPayPolicyRequest request =
            PutCompaniesCompanyUuidHolidayPayPolicyRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutCompaniesCompanyUuidHolidayPayPolicyRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/holiday_pay_policy",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-companies-company_uuid-holiday_pay_policy", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutCompaniesCompanyUuidHolidayPayPolicyResponse.Builder _resBuilder = 
            PutCompaniesCompanyUuidHolidayPayPolicyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutCompaniesCompanyUuidHolidayPayPolicyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                HolidayPayPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<HolidayPayPolicy>() {});
                _res.withHolidayPayPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a company's holiday pay policy
     * 
     * <p>Delete a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @return The call builder
     */
    public DeleteCompaniesCompanyUuidHolidayPayPolicyRequestBuilder delete() {
        return new DeleteCompaniesCompanyUuidHolidayPayPolicyRequestBuilder(this);
    }

    /**
     * Delete a company's holiday pay policy
     * 
     * <p>Delete a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteCompaniesCompanyUuidHolidayPayPolicyResponse delete(
            String companyUuid) throws Exception {
        return delete(companyUuid, Optional.empty());
    }
    
    /**
     * Delete a company's holiday pay policy
     * 
     * <p>Delete a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteCompaniesCompanyUuidHolidayPayPolicyResponse delete(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteCompaniesCompanyUuidHolidayPayPolicyRequest request =
            DeleteCompaniesCompanyUuidHolidayPayPolicyRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteCompaniesCompanyUuidHolidayPayPolicyRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/holiday_pay_policy",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "delete-companies-company_uuid-holiday_pay_policy", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "delete-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "delete-companies-company_uuid-holiday_pay_policy",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteCompaniesCompanyUuidHolidayPayPolicyResponse.Builder _resBuilder = 
            DeleteCompaniesCompanyUuidHolidayPayPolicyResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteCompaniesCompanyUuidHolidayPayPolicyResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Add employees to a company's holiday pay policy
     * 
     * <p>Add employees to a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @return The call builder
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBuilder addEmployees() {
        return new PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBuilder(this);
    }

    /**
     * Add employees to a company's holiday pay policy
     * 
     * <p>Add employees to a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyAddResponse addEmployees(
            String companyUuid,
            PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody requestBody) throws Exception {
        return addEmployees(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Add employees to a company's holiday pay policy
     * 
     * <p>Add employees to a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyAddResponse addEmployees(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutCompaniesCompanyUuidHolidayPayPolicyAddRequestBody requestBody) throws Exception {
        PutCompaniesCompanyUuidHolidayPayPolicyAddRequest request =
            PutCompaniesCompanyUuidHolidayPayPolicyAddRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutCompaniesCompanyUuidHolidayPayPolicyAddRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/holiday_pay_policy/add",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-companies-company_uuid-holiday_pay_policy-add", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy-add",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy-add",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy-add",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutCompaniesCompanyUuidHolidayPayPolicyAddResponse.Builder _resBuilder = 
            PutCompaniesCompanyUuidHolidayPayPolicyAddResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutCompaniesCompanyUuidHolidayPayPolicyAddResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                HolidayPayPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<HolidayPayPolicy>() {});
                _res.withHolidayPayPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Remove employees from a company's holiday pay policy
     * 
     * <p>Remove employees from a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @return The call builder
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBuilder removeEmployees() {
        return new PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBuilder(this);
    }

    /**
     * Remove employees from a company's holiday pay policy
     * 
     * <p>Remove employees from a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse removeEmployees(
            String companyUuid,
            PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody requestBody) throws Exception {
        return removeEmployees(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Remove employees from a company's holiday pay policy
     * 
     * <p>Remove employees from a company's holiday pay policy
     * 
     * <p>scope: `holiday_pay_policies:write`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse removeEmployees(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequestBody requestBody) throws Exception {
        PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest request =
            PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutCompaniesCompanyUuidHolidayPayPolicyRemoveRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/holiday_pay_policy/remove",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "put-companies-company_uuid-holiday_pay_policy-remove", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy-remove",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy-remove",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "put-companies-company_uuid-holiday_pay_policy-remove",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse.Builder _resBuilder = 
            PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutCompaniesCompanyUuidHolidayPayPolicyRemoveResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                HolidayPayPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<HolidayPayPolicy>() {});
                _res.withHolidayPayPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Preview a company's paid holidays
     * 
     * <p>Preview a company's paid holidays
     * 
     * <p>scope: `holiday_pay_policies:read`
     * 
     * @return The call builder
     */
    public GetCompaniesCompanyUuidPaidHolidaysRequestBuilder previewPaidHolidays() {
        return new GetCompaniesCompanyUuidPaidHolidaysRequestBuilder(this);
    }

    /**
     * Preview a company's paid holidays
     * 
     * <p>Preview a company's paid holidays
     * 
     * <p>scope: `holiday_pay_policies:read`
     * 
     * @param companyUuid The UUID of the company
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidPaidHolidaysResponse previewPaidHolidays(
            String companyUuid,
            GetCompaniesCompanyUuidPaidHolidaysRequestBody requestBody) throws Exception {
        return previewPaidHolidays(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Preview a company's paid holidays
     * 
     * <p>Preview a company's paid holidays
     * 
     * <p>scope: `holiday_pay_policies:read`
     * 
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion 
     * @param requestBody 
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidPaidHolidaysResponse previewPaidHolidays(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            GetCompaniesCompanyUuidPaidHolidaysRequestBody requestBody) throws Exception {
        GetCompaniesCompanyUuidPaidHolidaysRequest request =
            GetCompaniesCompanyUuidPaidHolidaysRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCompaniesCompanyUuidPaidHolidaysRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/paid_holidays",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      _baseUrl,
                      "get-companies-company_uuid-paid_holidays", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-companies-company_uuid-paid_holidays",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            _baseUrl,
                            "get-companies-company_uuid-paid_holidays",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            _baseUrl,
                            "get-companies-company_uuid-paid_holidays",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCompaniesCompanyUuidPaidHolidaysResponse.Builder _resBuilder = 
            GetCompaniesCompanyUuidPaidHolidaysResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCompaniesCompanyUuidPaidHolidaysResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PaidHolidays _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PaidHolidays>() {});
                _res.withPaidHolidays(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
