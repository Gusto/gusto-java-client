/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.Employee;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.operations.PutV1HistoricalEmployeesRequest;
import org.openapis.openapi.models.operations.PutV1HistoricalEmployeesRequestBody;
import org.openapis.openapi.models.operations.PutV1HistoricalEmployeesRequestBuilder;
import org.openapis.openapi.models.operations.PutV1HistoricalEmployeesResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class HistoricalEmployees implements
            MethodCallPutV1HistoricalEmployees {

    private final SDKConfiguration sdkConfiguration;

    HistoricalEmployees(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Update a historical employee
     * Update a historical employee, an employee that was previously dismissed from the company in the current year.
     * 
     * scope: `employees:manage`
     * @return The call builder
     */
    public PutV1HistoricalEmployeesRequestBuilder update() {
        return new PutV1HistoricalEmployeesRequestBuilder(this);
    }

    /**
     * Update a historical employee
     * Update a historical employee, an employee that was previously dismissed from the company in the current year.
     * 
     * scope: `employees:manage`
     * @param companyUuid The UUID of the company
     * @param historicalEmployeeUuid The UUID of the historical employee
     * @param requestBody Update a historical employee.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1HistoricalEmployeesResponse update(
            String companyUuid,
            String historicalEmployeeUuid,
            PutV1HistoricalEmployeesRequestBody requestBody) throws Exception {
        return update(companyUuid, historicalEmployeeUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a historical employee
     * Update a historical employee, an employee that was previously dismissed from the company in the current year.
     * 
     * scope: `employees:manage`
     * @param companyUuid The UUID of the company
     * @param historicalEmployeeUuid The UUID of the historical employee
     * @param xGustoAPIVersion
     * @param requestBody Update a historical employee.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1HistoricalEmployeesResponse update(
            String companyUuid,
            String historicalEmployeeUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1HistoricalEmployeesRequestBody requestBody) throws Exception {
        PutV1HistoricalEmployeesRequest request =
            PutV1HistoricalEmployeesRequest
                .builder()
                .companyUuid(companyUuid)
                .historicalEmployeeUuid(historicalEmployeeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1HistoricalEmployeesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/historical_employees/{historical_employee_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-historical_employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-historical_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-historical_employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-historical_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1HistoricalEmployeesResponse.Builder _resBuilder = 
            PutV1HistoricalEmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1HistoricalEmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Employee _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Employee>() {});
                _res.withEmployee(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
