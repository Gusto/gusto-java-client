/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.EmployeeBankAccount;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequest;
import org.openapis.openapi.models.operations.DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdResponse;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdPaymentMethodRequest;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdPaymentMethodRequestBuilder;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdPaymentMethodResponse;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdBankAccountsRequest;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdBankAccountsRequestBody;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdBankAccountsRequestBuilder;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdBankAccountsResponse;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdBankAccountsRequest;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdBankAccountsRequestBody;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdBankAccountsRequestBuilder;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdBankAccountsResponse;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdPaymentMethodRequest;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdPaymentMethodRequestBody;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdPaymentMethodRequestBuilder;
import org.openapis.openapi.models.operations.PutV1EmployeesEmployeeIdPaymentMethodResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class EmployeePaymentMethod implements
            MethodCallPostV1EmployeesEmployeeIdBankAccounts,
            MethodCallDeleteV1EmployeesEmployeeIdBankAccountsBankAccountId,
            MethodCallPutV1EmployeesEmployeeIdBankAccounts,
            MethodCallGetV1EmployeesEmployeeIdPaymentMethod,
            MethodCallPutV1EmployeesEmployeeIdPaymentMethod {

    private final SDKConfiguration sdkConfiguration;

    EmployeePaymentMethod(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create an employee bank account
     * Creates an employee bank account. An employee can have multiple
     * bank accounts. Note that creating an employee bank account will also update
     * the employee's payment method.
     * 
     * scope: `employee_payment_methods:write`
     * @return The call builder
     */
    public PostV1EmployeesEmployeeIdBankAccountsRequestBuilder create() {
        return new PostV1EmployeesEmployeeIdBankAccountsRequestBuilder(this);
    }

    /**
     * Create an employee bank account
     * Creates an employee bank account. An employee can have multiple
     * bank accounts. Note that creating an employee bank account will also update
     * the employee's payment method.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdBankAccountsResponse create(
            String employeeId,
            PostV1EmployeesEmployeeIdBankAccountsRequestBody requestBody) throws Exception {
        return create(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an employee bank account
     * Creates an employee bank account. An employee can have multiple
     * bank accounts. Note that creating an employee bank account will also update
     * the employee's payment method.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdBankAccountsResponse create(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1EmployeesEmployeeIdBankAccountsRequestBody requestBody) throws Exception {
        PostV1EmployeesEmployeeIdBankAccountsRequest request =
            PostV1EmployeesEmployeeIdBankAccountsRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1EmployeesEmployeeIdBankAccountsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/bank_accounts",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-employees-employee_id-bank_accounts", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-bank_accounts",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-employees-employee_id-bank_accounts",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-bank_accounts",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1EmployeesEmployeeIdBankAccountsResponse.Builder _resBuilder = 
            PostV1EmployeesEmployeeIdBankAccountsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1EmployeesEmployeeIdBankAccountsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeBankAccount _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeBankAccount>() {});
                _res.withEmployeeBankAccount(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an employee bank account
     * Deletes an employee bank account. To update an employee's bank
     * account details, delete the bank account first and create a new one.
     * 
     * scope: `employee_payment_methods:write`
     * @return The call builder
     */
    public DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequestBuilder deleteBankAccount() {
        return new DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequestBuilder(this);
    }

    /**
     * Delete an employee bank account
     * Deletes an employee bank account. To update an employee's bank
     * account details, delete the bank account first and create a new one.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param bankAccountUuid The UUID of the bank account
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdResponse deleteBankAccount(
            String employeeId,
            String bankAccountUuid) throws Exception {
        return deleteBankAccount(employeeId, bankAccountUuid, Optional.empty());
    }
    
    /**
     * Delete an employee bank account
     * Deletes an employee bank account. To update an employee's bank
     * account details, delete the bank account first and create a new one.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param bankAccountUuid The UUID of the bank account
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdResponse deleteBankAccount(
            String employeeId,
            String bankAccountUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequest request =
            DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequest
                .builder()
                .employeeId(employeeId)
                .bankAccountUuid(bankAccountUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/bank_accounts/{bank_account_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-employees-employee_id-bank_accounts-bank_account_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-employees-employee_id-bank_accounts-bank_account_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-employees-employee_id-bank_accounts-bank_account_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-employees-employee_id-bank_accounts-bank_account_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdResponse.Builder _resBuilder = 
            DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1EmployeesEmployeeIdBankAccountsBankAccountIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee bank account
     * Updates an employee bank account.
     * 
     * scope: `employee_payment_methods:write`
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdBankAccountsRequestBuilder updateBankAccount() {
        return new PutV1EmployeesEmployeeIdBankAccountsRequestBuilder(this);
    }

    /**
     * Update an employee bank account
     * Updates an employee bank account.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param bankAccountUuid The UUID of the bank account
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdBankAccountsResponse updateBankAccount(
            String employeeId,
            String bankAccountUuid,
            PutV1EmployeesEmployeeIdBankAccountsRequestBody requestBody) throws Exception {
        return updateBankAccount(employeeId, bankAccountUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee bank account
     * Updates an employee bank account.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param bankAccountUuid The UUID of the bank account
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdBankAccountsResponse updateBankAccount(
            String employeeId,
            String bankAccountUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdBankAccountsRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdBankAccountsRequest request =
            PutV1EmployeesEmployeeIdBankAccountsRequest
                .builder()
                .employeeId(employeeId)
                .bankAccountUuid(bankAccountUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdBankAccountsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/bank_accounts/{bank_account_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-employees-employee_id-bank_accounts", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-employees-employee_id-bank_accounts",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-employees-employee_id-bank_accounts",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-employees-employee_id-bank_accounts",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdBankAccountsResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdBankAccountsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdBankAccountsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeBankAccount _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeBankAccount>() {});
                _res.withEmployeeBankAccount(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's payment method
     * Fetches an employee's payment method. An employee payment method
     * describes how the payment should be split across the employee's associated
     * bank accounts.
     * 
     * scope: `employee_payment_methods:read`
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdPaymentMethodRequestBuilder get() {
        return new GetV1EmployeesEmployeeIdPaymentMethodRequestBuilder(this);
    }

    /**
     * Get an employee's payment method
     * Fetches an employee's payment method. An employee payment method
     * describes how the payment should be split across the employee's associated
     * bank accounts.
     * 
     * scope: `employee_payment_methods:read`
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdPaymentMethodResponse get(
            String employeeId) throws Exception {
        return get(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's payment method
     * Fetches an employee's payment method. An employee payment method
     * describes how the payment should be split across the employee's associated
     * bank accounts.
     * 
     * scope: `employee_payment_methods:read`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdPaymentMethodResponse get(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdPaymentMethodRequest request =
            GetV1EmployeesEmployeeIdPaymentMethodRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdPaymentMethodRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/payment_method",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-employees-employee_id-payment_method", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-employees-employee_id-payment_method",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdPaymentMethodResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdPaymentMethodResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdPaymentMethodResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                org.openapis.openapi.models.components.EmployeePaymentMethod _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.components.EmployeePaymentMethod>() {});
                _res.withEmployeePaymentMethod(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee's payment method
     * Updates an employee's payment method. Note that creating an employee
     * bank account will also update the employee's payment method.
     * 
     * scope: `employee_payment_methods:write`
     * @return The call builder
     */
    public PutV1EmployeesEmployeeIdPaymentMethodRequestBuilder update() {
        return new PutV1EmployeesEmployeeIdPaymentMethodRequestBuilder(this);
    }

    /**
     * Update an employee's payment method
     * Updates an employee's payment method. Note that creating an employee
     * bank account will also update the employee's payment method.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdPaymentMethodResponse update(
            String employeeId,
            PutV1EmployeesEmployeeIdPaymentMethodRequestBody requestBody) throws Exception {
        return update(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee's payment method
     * Updates an employee's payment method. Note that creating an employee
     * bank account will also update the employee's payment method.
     * 
     * scope: `employee_payment_methods:write`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1EmployeesEmployeeIdPaymentMethodResponse update(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1EmployeesEmployeeIdPaymentMethodRequestBody requestBody) throws Exception {
        PutV1EmployeesEmployeeIdPaymentMethodRequest request =
            PutV1EmployeesEmployeeIdPaymentMethodRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1EmployeesEmployeeIdPaymentMethodRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/payment_method",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-employees-employee_id-payment_method", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-employees-employee_id-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-employees-employee_id-payment_method",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-employees-employee_id-payment_method",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1EmployeesEmployeeIdPaymentMethodResponse.Builder _resBuilder = 
            PutV1EmployeesEmployeeIdPaymentMethodResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1EmployeesEmployeeIdPaymentMethodResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                org.openapis.openapi.models.components.EmployeePaymentMethod _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<org.openapis.openapi.models.components.EmployeePaymentMethod>() {});
                _res.withEmployeePaymentMethod(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
