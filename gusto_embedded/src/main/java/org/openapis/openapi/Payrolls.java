/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.EmployeePayStub;
import org.openapis.openapi.models.components.Payroll;
import org.openapis.openapi.models.components.PayrollBlocker;
import org.openapis.openapi.models.components.PayrollCheck;
import org.openapis.openapi.models.components.PayrollMinimal;
import org.openapis.openapi.models.components.PayrollPrepared;
import org.openapis.openapi.models.components.PayrollReceipt;
import org.openapis.openapi.models.components.PayrollReversal;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1CompaniesCompanyIdPayrollsRequest;
import org.openapis.openapi.models.operations.DeleteV1CompaniesCompanyIdPayrollsRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1CompaniesCompanyIdPayrollsResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollReversalsRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollReversalsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollReversalsResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsPayrollIdRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsPayrollIdRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsPayrollIdResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdPayrollsResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesPayrollBlockersCompanyUuidRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesPayrollBlockersCompanyUuidRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesPayrollBlockersCompanyUuidResponse;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeUuidPayStubsRequest;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeUuidPayStubsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeUuidPayStubsResponse;
import org.openapis.openapi.models.operations.GetV1PaymentReceiptsPayrollsPayrollUuidRequest;
import org.openapis.openapi.models.operations.GetV1PaymentReceiptsPayrollsPayrollUuidRequestBuilder;
import org.openapis.openapi.models.operations.GetV1PaymentReceiptsPayrollsPayrollUuidResponse;
import org.openapis.openapi.models.operations.GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest;
import org.openapis.openapi.models.operations.GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequestBuilder;
import org.openapis.openapi.models.operations.GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdPayrollsRequest;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdPayrollsRequestBody;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdPayrollsRequestBuilder;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdPayrollsResponse;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequest;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBuilder;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse;
import org.openapis.openapi.models.operations.PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest;
import org.openapis.openapi.models.operations.PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequestBuilder;
import org.openapis.openapi.models.operations.PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBuilder;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsRequest;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsRequestBody;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsRequestBuilder;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdPayrollsResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class Payrolls implements
            MethodCallPostV1CompaniesCompanyIdPayrolls,
            MethodCallGetV1CompaniesCompanyIdPayrolls,
            MethodCallGetV1CompaniesCompanyIdPayrollReversals,
            MethodCallGetV1CompaniesCompanyIdPayrollsPayrollId,
            MethodCallPutV1CompaniesCompanyIdPayrolls,
            MethodCallDeleteV1CompaniesCompanyIdPayrolls,
            MethodCallPutV1CompaniesCompanyIdPayrollsPayrollIdPrepare,
            MethodCallGetV1PaymentReceiptsPayrollsPayrollUuid,
            MethodCallGetV1CompaniesPayrollBlockersCompanyUuid,
            MethodCallPutApiV1CompaniesCompanyIdPayrollsPayrollIdCancel,
            MethodCallGetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStub,
            MethodCallGetV1EmployeesEmployeeUuidPayStubs,
            MethodCallPostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecks {

    private final SDKConfiguration sdkConfiguration;

    Payrolls(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create an off-cycle payroll
     * Creates a new, unprocessed, off-cycle payroll.
     * 
     * ## `off_cycle_reason`
     * By default:
     * - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`.
     * - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.
     * 
     * These elections can be overridden with the `skip_regular_deductions` boolean.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBuilder createOffCycle() {
        return new PostV1CompaniesCompanyIdPayrollsRequestBuilder(this);
    }

    /**
     * Create an off-cycle payroll
     * Creates a new, unprocessed, off-cycle payroll.
     * 
     * ## `off_cycle_reason`
     * By default:
     * - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`.
     * - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.
     * 
     * These elections can be overridden with the `skip_regular_deductions` boolean.
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdPayrollsResponse createOffCycle(
            String companyId,
            PostV1CompaniesCompanyIdPayrollsRequestBody requestBody) throws Exception {
        return createOffCycle(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an off-cycle payroll
     * Creates a new, unprocessed, off-cycle payroll.
     * 
     * ## `off_cycle_reason`
     * By default:
     * - External benefits and deductions will be included when the `off_cycle_reason` is set to `Correction`.
     * - All benefits and deductions are blocked when the `off_cycle_reason` is set to `Bonus`.
     * 
     * These elections can be overridden with the `skip_regular_deductions` boolean.
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdPayrollsResponse createOffCycle(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdPayrollsRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdPayrollsRequest request =
            PostV1CompaniesCompanyIdPayrollsRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdPayrollsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-payrolls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-payrolls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdPayrollsResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdPayrollsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdPayrollsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PayrollPrepared _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PayrollPrepared>() {});
                _res.withPayrollPrepared(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all payrolls for a company
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, &amp; end_date params.
     * 
     * By default, will return processed, regular payrolls for the past 6 months.
     * 
     * Notes:
     * * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent.
     * * end_date can be at most 3 months in the future and start_date and end_date can't be more than 1 year apart.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdPayrollsRequestBuilder list() {
        return new GetV1CompaniesCompanyIdPayrollsRequestBuilder(this);
    }

    /**
     * Get all payrolls for a company
     * Returns a list of payrolls for a company. You can change the payrolls returned by updating the processing_status, payroll_types, start_date, &amp; end_date params.
     * 
     * By default, will return processed, regular payrolls for the past 6 months.
     * 
     * Notes:
     * * Dollar amounts are returned as string representations of numeric decimals, are represented to the cent.
     * * end_date can be at most 3 months in the future and start_date and end_date can't be more than 1 year apart.
     * 
     * scope: `payrolls:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdPayrollsResponse list(
            GetV1CompaniesCompanyIdPayrollsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdPayrollsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdPayrollsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-payrolls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-payrolls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdPayrollsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdPayrollsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdPayrollsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<PayrollMinimal> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<PayrollMinimal>>() {});
                _res.withPayrollList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get approved payroll reversals
     * Returns all approved Payroll Reversals for a Company.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdPayrollReversalsRequestBuilder getApprovedReversals() {
        return new GetV1CompaniesCompanyIdPayrollReversalsRequestBuilder(this);
    }

    /**
     * Get approved payroll reversals
     * Returns all approved Payroll Reversals for a Company.
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdPayrollReversalsResponse getApprovedReversals(
            String companyId) throws Exception {
        return getApprovedReversals(companyId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get approved payroll reversals
     * Returns all approved Payroll Reversals for a Company.
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     * @param per Number of objects per page. For majority of endpoints will default to 25
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdPayrollReversalsResponse getApprovedReversals(
            String companyId,
            Optional<Double> page,
            Optional<Double> per,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdPayrollReversalsRequest request =
            GetV1CompaniesCompanyIdPayrollReversalsRequest
                .builder()
                .companyId(companyId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdPayrollReversalsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payroll_reversals",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdPayrollReversalsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-payroll_reversals", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-payroll_reversals",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-payroll_reversals",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-payroll_reversals",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdPayrollReversalsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdPayrollReversalsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdPayrollReversalsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PayrollReversal _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PayrollReversal>() {});
                _res.withPayrollReversal(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a single payroll
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.
     * 
     * Notes:
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Hours are represented to the thousands place; dollar amounts are represented to the cent.
     * * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).
     * * To return future payrolls, you must include an `end_date` in the future.
     * * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits
     *   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdPayrollsPayrollIdRequestBuilder get() {
        return new GetV1CompaniesCompanyIdPayrollsPayrollIdRequestBuilder(this);
    }

    /**
     * Get a single payroll
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.
     * 
     * Notes:
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Hours are represented to the thousands place; dollar amounts are represented to the cent.
     * * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).
     * * To return future payrolls, you must include an `end_date` in the future.
     * * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits
     *   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdPayrollsPayrollIdResponse get(
            String companyId,
            String payrollId) throws Exception {
        return get(companyId, payrollId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get a single payroll
     * Returns a payroll. If payroll is calculated or processed, will return employee_compensations and totals.
     * 
     * Notes:
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Hours are represented to the thousands place; dollar amounts are represented to the cent.
     * * Every eligible compensation is returned for each employee. If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts) or “0.000” (for hours ).
     * * To return future payrolls, you must include an `end_date` in the future.
     * * When include parameter with benefits value is passed, employee_benefits:read scope is required to return benefits
     *   * Benefits containing PHI are only visible with the `employee_benefits:read:phi` scope
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @param include Include the requested attribute in the response, for multiple attributes comma separate the values, i.e. `?include=benefits,deductions,taxes`
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdPayrollsPayrollIdResponse get(
            String companyId,
            String payrollId,
            Optional<? extends List<GetV1CompaniesCompanyIdPayrollsPayrollIdQueryParamInclude>> include,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdPayrollsPayrollIdRequest request =
            GetV1CompaniesCompanyIdPayrollsPayrollIdRequest
                .builder()
                .companyId(companyId)
                .payrollId(payrollId)
                .include(include)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdPayrollsPayrollIdRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls/{payroll_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdPayrollsPayrollIdRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-payrolls-payroll_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-payrolls-payroll_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-payrolls-payroll_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-payrolls-payroll_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdPayrollsPayrollIdResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdPayrollsPayrollIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdPayrollsPayrollIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Payroll _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Payroll>() {});
                _res.withPayroll(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a payroll by ID
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed**
     * payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values
     * of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they
     * will not be removed from the payroll.
     * 
     * scope: `payrolls:write`
     * @return The call builder
     */
    public PutV1CompaniesCompanyIdPayrollsRequestBuilder update() {
        return new PutV1CompaniesCompanyIdPayrollsRequestBuilder(this);
    }

    /**
     * Update a payroll by ID
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed**
     * payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values
     * of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they
     * will not be removed from the payroll.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyIdPayrollsResponse update(
            String companyId,
            String payrollId,
            PutV1CompaniesCompanyIdPayrollsRequestBody requestBody) throws Exception {
        return update(companyId, payrollId, Optional.empty(), requestBody);
    }
    
    /**
     * Update a payroll by ID
     * This endpoint allows you to update information for one or more employees for a specific **unprocessed** payroll.  You can think of the **unprocessed**
     * payroll object as a template of fields that you can update.  You cannot modify the structure of the payroll object through this endpoint, only values
     * of the fields included in the payroll.  If you do not include specific employee compensations or fixed/hourly compensations in your request body, they
     * will not be removed from the payroll.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyIdPayrollsResponse update(
            String companyId,
            String payrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompaniesCompanyIdPayrollsRequestBody requestBody) throws Exception {
        PutV1CompaniesCompanyIdPayrollsRequest request =
            PutV1CompaniesCompanyIdPayrollsRequest
                .builder()
                .companyId(companyId)
                .payrollId(payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompaniesCompanyIdPayrollsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls/{payroll_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-companies-company_id-payrolls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-companies-company_id-payrolls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompaniesCompanyIdPayrollsResponse.Builder _resBuilder = 
            PutV1CompaniesCompanyIdPayrollsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompaniesCompanyIdPayrollsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PayrollPrepared _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PayrollPrepared>() {});
                _res.withPayrollPrepared(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a payroll
     * This endpoint allows you to delete an **unprocessed** payroll.
     * 
     * By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public DeleteV1CompaniesCompanyIdPayrollsRequestBuilder delete() {
        return new DeleteV1CompaniesCompanyIdPayrollsRequestBuilder(this);
    }

    /**
     * Delete a payroll
     * This endpoint allows you to delete an **unprocessed** payroll.
     * 
     * By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompaniesCompanyIdPayrollsResponse delete(
            String companyId,
            String payrollId) throws Exception {
        return delete(companyId, payrollId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Delete a payroll
     * This endpoint allows you to delete an **unprocessed** payroll.
     * 
     * By default the payroll and associated data is deleted synchronously. To request an asynchronous delete, use the `async=true` query parameter. In both cases validation of ability to delete will be performed and an Unprocessable Entity error will be returned if the payroll is not able to be deleted. A successful synchronous delete will return `204/No Content`. When a payroll has been enqueued for asynchronous deletion, `202/Accepted` will be returned.
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @param async When true, request an asynchronous delete of the payroll.
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompaniesCompanyIdPayrollsResponse delete(
            String companyId,
            String payrollId,
            Optional<Boolean> async,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1CompaniesCompanyIdPayrollsRequest request =
            DeleteV1CompaniesCompanyIdPayrollsRequest
                .builder()
                .companyId(companyId)
                .payrollId(payrollId)
                .async(async)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1CompaniesCompanyIdPayrollsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls/{payroll_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                DeleteV1CompaniesCompanyIdPayrollsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-companies-company_id-payrolls", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-companies-company_id-payrolls",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-companies-company_id-payrolls",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1CompaniesCompanyIdPayrollsResponse.Builder _resBuilder = 
            DeleteV1CompaniesCompanyIdPayrollsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1CompaniesCompanyIdPayrollsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "202", "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Prepare a payroll for update
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.
     * 
     * Notes:
     *  * Will null out calculated_at &amp; totals if a payroll has already been calculated.
     *  * Will return the version param used for updating the payroll
     * 
     * scope: `payrolls:write`
     * @return The call builder
     */
    public PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBuilder prepare() {
        return new PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequestBuilder(this);
    }

    /**
     * Prepare a payroll for update
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.
     * 
     * Notes:
     *  * Will null out calculated_at &amp; totals if a payroll has already been calculated.
     *  * Will return the version param used for updating the payroll
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse prepare(
            String companyId,
            String payrollId) throws Exception {
        return prepare(companyId, payrollId, Optional.empty());
    }
    
    /**
     * Prepare a payroll for update
     * This endpoint will build the payroll and get it ready for making updates. This includes adding/removing eligible employees from the Payroll and updating the check_date, payroll_deadline, and payroll_status_meta dates &amp; times.
     * 
     * Notes:
     *  * Will null out calculated_at &amp; totals if a payroll has already been calculated.
     *  * Will return the version param used for updating the payroll
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse prepare(
            String companyId,
            String payrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest request =
            PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest
                .builder()
                .companyId(companyId)
                .payrollId(payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls/{payroll_id}/prepare",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-companies-company_id-payrolls-payroll_id-prepare", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies-company_id-payrolls-payroll_id-prepare",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-companies-company_id-payrolls-payroll_id-prepare",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies-company_id-payrolls-payroll_id-prepare",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse.Builder _resBuilder = 
            PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompaniesCompanyIdPayrollsPayrollIdPrepareResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PayrollPrepared _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PayrollPrepared>() {});
                _res.withPayrollPrepared(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a single payroll receipt
     * Returns a payroll receipt.
     * 
     * Notes:
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Dollar amounts are represented to the cent.
     * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1PaymentReceiptsPayrollsPayrollUuidRequestBuilder getReceipt() {
        return new GetV1PaymentReceiptsPayrollsPayrollUuidRequestBuilder(this);
    }

    /**
     * Get a single payroll receipt
     * Returns a payroll receipt.
     * 
     * Notes:
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Dollar amounts are represented to the cent.
     * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
     * 
     * scope: `payrolls:read`
     * @param payrollUuid The UUID of the payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1PaymentReceiptsPayrollsPayrollUuidResponse getReceipt(
            String payrollUuid) throws Exception {
        return getReceipt(payrollUuid, Optional.empty());
    }
    
    /**
     * Get a single payroll receipt
     * Returns a payroll receipt.
     * 
     * Notes:
     * * Hour and dollar amounts are returned as string representations of numeric decimals.
     * * Dollar amounts are represented to the cent.
     * * If no data has yet be inserted for a given field, it defaults to “0.00” (for fixed amounts).
     * 
     * scope: `payrolls:read`
     * @param payrollUuid The UUID of the payroll
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1PaymentReceiptsPayrollsPayrollUuidResponse getReceipt(
            String payrollUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1PaymentReceiptsPayrollsPayrollUuidRequest request =
            GetV1PaymentReceiptsPayrollsPayrollUuidRequest
                .builder()
                .payrollUuid(payrollUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1PaymentReceiptsPayrollsPayrollUuidRequest.class,
                _baseUrl,
                "/v1/payrolls/{payroll_uuid}/receipt",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-payment-receipts-payrolls-payroll_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-payment-receipts-payrolls-payroll_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-payment-receipts-payrolls-payroll_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-payment-receipts-payrolls-payroll_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1PaymentReceiptsPayrollsPayrollUuidResponse.Builder _resBuilder = 
            GetV1PaymentReceiptsPayrollsPayrollUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1PaymentReceiptsPayrollsPayrollUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PayrollReceipt _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PayrollReceipt>() {});
                _res.withPayrollReceipt(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all payroll blockers for a company
     * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.
     * 
     * The list is empty if there are no payroll blockers.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public GetV1CompaniesPayrollBlockersCompanyUuidRequestBuilder getBlockers() {
        return new GetV1CompaniesPayrollBlockersCompanyUuidRequestBuilder(this);
    }

    /**
     * Get all payroll blockers for a company
     * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.
     * 
     * The list is empty if there are no payroll blockers.
     * 
     * scope: `payrolls:run`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesPayrollBlockersCompanyUuidResponse getBlockers(
            String companyUuid) throws Exception {
        return getBlockers(companyUuid, Optional.empty());
    }
    
    /**
     * Get all payroll blockers for a company
     * Returns a list of reasons that prevent the company from running payrolls. See the [payroll blockers guide](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) for a complete list of reasons.
     * 
     * The list is empty if there are no payroll blockers.
     * 
     * scope: `payrolls:run`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesPayrollBlockersCompanyUuidResponse getBlockers(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesPayrollBlockersCompanyUuidRequest request =
            GetV1CompaniesPayrollBlockersCompanyUuidRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesPayrollBlockersCompanyUuidRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/payrolls/blockers",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-payroll-blockers-company_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-payroll-blockers-company_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-payroll-blockers-company_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-payroll-blockers-company_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesPayrollBlockersCompanyUuidResponse.Builder _resBuilder = 
            GetV1CompaniesPayrollBlockersCompanyUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesPayrollBlockersCompanyUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<PayrollBlocker> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<PayrollBlocker>>() {});
                _res.withPayrollBlockerList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Cancel a payroll
     * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria:
     * - `processed` is true
     * - Current time is earlier than 3:30pm PT on the payroll_deadline
     * 
     * scope: `payrolls:run`
     * 
     * @return The call builder
     */
    public PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequestBuilder cancel() {
        return new PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequestBuilder(this);
    }

    /**
     * Cancel a payroll
     * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria:
     * - `processed` is true
     * - Current time is earlier than 3:30pm PT on the payroll_deadline
     * 
     * scope: `payrolls:run`
     * 
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse cancel(
            String companyId,
            String payrollId) throws Exception {
        return cancel(companyId, payrollId, Optional.empty());
    }
    
    /**
     * Cancel a payroll
     * Transitions a `processed` payroll back to the `unprocessed` state. A payroll can be canceled if it meets both criteria:
     * - `processed` is true
     * - Current time is earlier than 3:30pm PT on the payroll_deadline
     * 
     * scope: `payrolls:run`
     * 
     * @param companyId The UUID of the company
     * @param payrollId The UUID of the payroll
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse cancel(
            String companyId,
            String payrollId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest request =
            PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest
                .builder()
                .companyId(companyId)
                .payrollId(payrollId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/payrolls/{payroll_id}/cancel",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-api-v1-companies-company_id-payrolls-payroll_id-cancel", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-api-v1-companies-company_id-payrolls-payroll_id-cancel",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-api-v1-companies-company_id-payrolls-payroll_id-cancel",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-api-v1-companies-company_id-payrolls-payroll_id-cancel",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse.Builder _resBuilder = 
            PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutApiV1CompaniesCompanyIdPayrollsPayrollIdCancelResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Payroll _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Payroll>() {});
                _res.withPayroll(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee pay stub (pdf)
     * Get an employee's pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.
     * 
     * scope: `pay_stubs:read`
     * @return The call builder
     */
    public GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequestBuilder getPayStub() {
        return new GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequestBuilder(this);
    }

    /**
     * Get an employee pay stub (pdf)
     * Get an employee's pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.
     * 
     * scope: `pay_stubs:read`
     * @param payrollId The UUID of the payroll
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse getPayStub(
            String payrollId,
            String employeeId) throws Exception {
        return getPayStub(payrollId, employeeId, Optional.empty());
    }
    
    /**
     * Get an employee pay stub (pdf)
     * Get an employee's pay stub for the specified payroll. By default, an application/pdf response will be returned. No other content types are currently supported, but may be supported in the future.
     * 
     * scope: `pay_stubs:read`
     * @param payrollId The UUID of the payroll
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse getPayStub(
            String payrollId,
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest request =
            GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest
                .builder()
                .payrollId(payrollId)
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubRequest.class,
                _baseUrl,
                "/v1/payrolls/{payroll_id}/employees/{employee_id}/pay_stub",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-payrolls-payroll_uuid-employees-employee_uuid-pay_stub", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-payrolls-payroll_uuid-employees-employee_uuid-pay_stub",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-payrolls-payroll_uuid-employees-employee_uuid-pay_stub",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-payrolls-payroll_uuid-employees-employee_uuid-pay_stub",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse.Builder _resBuilder = 
            GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1PayrollsPayrollUuidEmployeesEmployeeUuidPayStubResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's pay stubs
     * Get an employee's pay stubs
     * 
     * scope: `pay_stubs:read`
     * @return The call builder
     */
    public GetV1EmployeesEmployeeUuidPayStubsRequestBuilder getPayStubs() {
        return new GetV1EmployeesEmployeeUuidPayStubsRequestBuilder(this);
    }

    /**
     * Get an employee's pay stubs
     * Get an employee's pay stubs
     * 
     * scope: `pay_stubs:read`
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeUuidPayStubsResponse getPayStubs(
            String employeeId) throws Exception {
        return getPayStubs(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's pay stubs
     * Get an employee's pay stubs
     * 
     * scope: `pay_stubs:read`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeUuidPayStubsResponse getPayStubs(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeUuidPayStubsRequest request =
            GetV1EmployeesEmployeeUuidPayStubsRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeUuidPayStubsRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/pay_stubs",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-employees-employee_uuid-pay_stubs", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_uuid-pay_stubs",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-employees-employee_uuid-pay_stubs",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_uuid-pay_stubs",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeUuidPayStubsResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeUuidPayStubsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeUuidPayStubsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<EmployeePayStub> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<EmployeePayStub>>() {});
                _res.withEmployeePayStubsList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Generate printable payroll checks (pdf)
     * This endpoint initiates the generation of employee checks for the payroll specified by payroll_uuid. A generation status and corresponding request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.
     * 
     * scope: `generated_documents:write`
     * @return The call builder
     */
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBuilder generatePrintableChecks() {
        return new PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBuilder(this);
    }

    /**
     * Generate printable payroll checks (pdf)
     * This endpoint initiates the generation of employee checks for the payroll specified by payroll_uuid. A generation status and corresponding request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.
     * 
     * scope: `generated_documents:write`
     * @param payrollUuid The UUID of the payroll
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse generatePrintableChecks(
            String payrollUuid,
            PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody requestBody) throws Exception {
        return generatePrintableChecks(payrollUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Generate printable payroll checks (pdf)
     * This endpoint initiates the generation of employee checks for the payroll specified by payroll_uuid. A generation status and corresponding request_uuid will be returned. Use the generated document GET endpoint with document_type: `printable_payroll_checks` and request_uuid to poll the check generation process and retrieve the generated check URL upon completion.
     * 
     * scope: `generated_documents:write`
     * @param payrollUuid The UUID of the payroll
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse generatePrintableChecks(
            String payrollUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequestBody requestBody) throws Exception {
        PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequest request =
            PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequest
                .builder()
                .payrollUuid(payrollUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksRequest.class,
                _baseUrl,
                "/v1/payrolls/{payroll_uuid}/generated_documents/printable_payroll_checks",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-payrolls-payroll_uuid-generated_documents-printable_payroll_checks",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse.Builder _resBuilder = 
            PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1PayrollsPayrollUuidGeneratedDocumentsPrintablePayrollChecksResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                PayrollCheck _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<PayrollCheck>() {});
                _res.withPayrollCheck(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
