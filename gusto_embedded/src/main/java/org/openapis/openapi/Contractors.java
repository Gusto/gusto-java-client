/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.Contractor;
import org.openapis.openapi.models.components.ContractorAddress;
import org.openapis.openapi.models.components.ContractorOnboardingStatus;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1ContractorsContractorUuidRequest;
import org.openapis.openapi.models.operations.DeleteV1ContractorsContractorUuidRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1ContractorsContractorUuidResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyUuidContractorsRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyUuidContractorsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyUuidContractorsResponse;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidAddressRequest;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidAddressRequestBuilder;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidAddressResponse;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidOnboardingStatusRequest;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidOnboardingStatusRequestBuilder;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidOnboardingStatusResponse;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidRequest;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidRequestBuilder;
import org.openapis.openapi.models.operations.GetV1ContractorsContractorUuidResponse;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyUuidContractorsRequest;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyUuidContractorsRequestBody;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyUuidContractorsRequestBuilder;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyUuidContractorsResponse;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidAddressRequest;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidAddressRequestBody;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidAddressRequestBuilder;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidAddressResponse;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidOnboardingStatusRequest;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidOnboardingStatusRequestBody;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidOnboardingStatusRequestBuilder;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidOnboardingStatusResponse;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidRequest;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidRequestBody;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidRequestBuilder;
import org.openapis.openapi.models.operations.PutV1ContractorsContractorUuidResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class Contractors implements
            MethodCallPostV1CompaniesCompanyUuidContractors,
            MethodCallGetV1CompaniesCompanyUuidContractors,
            MethodCallGetV1ContractorsContractorUuid,
            MethodCallPutV1ContractorsContractorUuid,
            MethodCallDeleteV1ContractorsContractorUuid,
            MethodCallGetV1ContractorsContractorUuidOnboardingStatus,
            MethodCallPutV1ContractorsContractorUuidOnboardingStatus,
            MethodCallGetV1ContractorsContractorUuidAddress,
            MethodCallPutV1ContractorsContractorUuidAddress {

    private final SDKConfiguration sdkConfiguration;

    Contractors(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a contractor
     * Create an individual or business contractor.
     * 
     * scope: `contractors:manage`
     * @return The call builder
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBuilder create() {
        return new PostV1CompaniesCompanyUuidContractorsRequestBuilder(this);
    }

    /**
     * Create a contractor
     * Create an individual or business contractor.
     * 
     * scope: `contractors:manage`
     * @param companyUuid The UUID of the company
     * @param requestBody Create an individual or business contractor.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyUuidContractorsResponse create(
            String companyUuid,
            PostV1CompaniesCompanyUuidContractorsRequestBody requestBody) throws Exception {
        return create(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Create a contractor
     * Create an individual or business contractor.
     * 
     * scope: `contractors:manage`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody Create an individual or business contractor.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyUuidContractorsResponse create(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyUuidContractorsRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyUuidContractorsRequest request =
            PostV1CompaniesCompanyUuidContractorsRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyUuidContractorsRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/contractors",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_uuid-contractors", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_uuid-contractors",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_uuid-contractors",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_uuid-contractors",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyUuidContractorsResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyUuidContractorsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyUuidContractorsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Contractor _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Contractor>() {});
                _res.withContractor(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get contractors of a company
     * Get all contractors, active and inactive, individual and business, for a company.
     * 
     * scope: `contractors:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyUuidContractorsRequestBuilder list() {
        return new GetV1CompaniesCompanyUuidContractorsRequestBuilder(this);
    }

    /**
     * Get contractors of a company
     * Get all contractors, active and inactive, individual and business, for a company.
     * 
     * scope: `contractors:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyUuidContractorsResponse list(
            GetV1CompaniesCompanyUuidContractorsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyUuidContractorsRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/contractors",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyUuidContractorsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_uuid-contractors", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_uuid-contractors",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_uuid-contractors",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_uuid-contractors",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyUuidContractorsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyUuidContractorsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyUuidContractorsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<Contractor> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<Contractor>>() {});
                _res.withContractorList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a contractor
     * Get a contractor.
     * 
     * scope: `contractors:read`
     * @return The call builder
     */
    public GetV1ContractorsContractorUuidRequestBuilder get() {
        return new GetV1ContractorsContractorUuidRequestBuilder(this);
    }

    /**
     * Get a contractor
     * Get a contractor.
     * 
     * scope: `contractors:read`
     * @param contractorUuid The UUID of the contractor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidResponse get(
            String contractorUuid) throws Exception {
        return get(contractorUuid, Optional.empty());
    }
    
    /**
     * Get a contractor
     * Get a contractor.
     * 
     * scope: `contractors:read`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidResponse get(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorsContractorUuidRequest request =
            GetV1ContractorsContractorUuidRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorsContractorUuidRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractors-contractor_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractors-contractor_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorsContractorUuidResponse.Builder _resBuilder = 
            GetV1ContractorsContractorUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorsContractorUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Contractor _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Contractor>() {});
                _res.withContractor(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a contractor
     * Update a contractor.
     * 
     * scope: `contractors:write`
     * 
     * &gt; 🚧 Warning
     * &gt;
     * &gt; Watch out when changing a contractor's type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     * @return The call builder
     */
    public PutV1ContractorsContractorUuidRequestBuilder update() {
        return new PutV1ContractorsContractorUuidRequestBuilder(this);
    }

    /**
     * Update a contractor
     * Update a contractor.
     * 
     * scope: `contractors:write`
     * 
     * &gt; 🚧 Warning
     * &gt;
     * &gt; Watch out when changing a contractor's type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     * @param contractorUuid The UUID of the contractor
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorUuidResponse update(
            String contractorUuid,
            PutV1ContractorsContractorUuidRequestBody requestBody) throws Exception {
        return update(contractorUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a contractor
     * Update a contractor.
     * 
     * scope: `contractors:write`
     * 
     * &gt; 🚧 Warning
     * &gt;
     * &gt; Watch out when changing a contractor's type (when the contractor is finished onboarding). Specifically, changing contractor type can be dangerous since Gusto won’t recognize and file two separate 1099s if they simply change from business to individual
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorUuidResponse update(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1ContractorsContractorUuidRequestBody requestBody) throws Exception {
        PutV1ContractorsContractorUuidRequest request =
            PutV1ContractorsContractorUuidRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1ContractorsContractorUuidRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-contractors-contractor_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-contractors-contractor_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1ContractorsContractorUuidResponse.Builder _resBuilder = 
            PutV1ContractorsContractorUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1ContractorsContractorUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                Contractor _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<Contractor>() {});
                _res.withContractor(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a contractor
     * A contractor can only be deleted when there are no contractor payments.
     * 
     * scope: `contractors:manage`
     * @return The call builder
     */
    public DeleteV1ContractorsContractorUuidRequestBuilder delete() {
        return new DeleteV1ContractorsContractorUuidRequestBuilder(this);
    }

    /**
     * Delete a contractor
     * A contractor can only be deleted when there are no contractor payments.
     * 
     * scope: `contractors:manage`
     * @param contractorUuid The UUID of the contractor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1ContractorsContractorUuidResponse delete(
            String contractorUuid) throws Exception {
        return delete(contractorUuid, Optional.empty());
    }
    
    /**
     * Delete a contractor
     * A contractor can only be deleted when there are no contractor payments.
     * 
     * scope: `contractors:manage`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1ContractorsContractorUuidResponse delete(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1ContractorsContractorUuidRequest request =
            DeleteV1ContractorsContractorUuidRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1ContractorsContractorUuidRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-contractors-contractor_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-contractors-contractor_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-contractors-contractor_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-contractors-contractor_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1ContractorsContractorUuidResponse.Builder _resBuilder = 
            DeleteV1ContractorsContractorUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1ContractorsContractorUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get the contractor's onboarding status
     * Retrieves a contractor's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * scope: `contractors:read`
     * 
     * ## onboarding_status
     * 
     * ### Admin-facilitated onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
     * | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. |
     * | `onboarding_completed` | Contractor has been fully onboarded and verified. |
     * 
     * ### Contractor self-onboarding
     * 
     * | onboarding_status | Description |
     * | --- | ----------- |
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
     * | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
     * | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. |
     * | `self_onboarding_started` | Contractor has started the self-onboarding process. |
     * | `self_onboarding_review` | Admin needs to review contractors's entered information and confirm onboarding. |
     * | `onboarding_completed` | Contractor has been fully onboarded and verified. |
     * 
     * ## onboarding_steps
     * 
     * | onboarding_steps | Requirement(s) to be completed |
     * |:-----------------|-------------------------------:|
     * | `basic_details` | Add individual contractor's first name, last name, social security number or Business name and EIN depending on the contractor type |
     * | `add_address` | Add contractor address. |
     * | `compensation_details` | Add contractor compensation. |
     * | `payment_details` | Set up contractor's direct deposit or set to check. |
     * | `sign_documents` | Contractor forms (e.g., W9) are generated &amp; signed. |
     * | `file_new_hire_report` | Contractor new hire report is generated. |
     * @return The call builder
     */
    public GetV1ContractorsContractorUuidOnboardingStatusRequestBuilder getOnboardingStatus() {
        return new GetV1ContractorsContractorUuidOnboardingStatusRequestBuilder(this);
    }

    /**
     * Get the contractor's onboarding status
     * Retrieves a contractor's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * scope: `contractors:read`
     * 
     * ## onboarding_status
     * 
     * ### Admin-facilitated onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
     * | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. |
     * | `onboarding_completed` | Contractor has been fully onboarded and verified. |
     * 
     * ### Contractor self-onboarding
     * 
     * | onboarding_status | Description |
     * | --- | ----------- |
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
     * | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
     * | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. |
     * | `self_onboarding_started` | Contractor has started the self-onboarding process. |
     * | `self_onboarding_review` | Admin needs to review contractors's entered information and confirm onboarding. |
     * | `onboarding_completed` | Contractor has been fully onboarded and verified. |
     * 
     * ## onboarding_steps
     * 
     * | onboarding_steps | Requirement(s) to be completed |
     * |:-----------------|-------------------------------:|
     * | `basic_details` | Add individual contractor's first name, last name, social security number or Business name and EIN depending on the contractor type |
     * | `add_address` | Add contractor address. |
     * | `compensation_details` | Add contractor compensation. |
     * | `payment_details` | Set up contractor's direct deposit or set to check. |
     * | `sign_documents` | Contractor forms (e.g., W9) are generated &amp; signed. |
     * | `file_new_hire_report` | Contractor new hire report is generated. |
     * @param contractorUuid The UUID of the contractor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidOnboardingStatusResponse getOnboardingStatus(
            String contractorUuid) throws Exception {
        return getOnboardingStatus(contractorUuid, Optional.empty());
    }
    
    /**
     * Get the contractor's onboarding status
     * Retrieves a contractor's onboarding status. The data returned helps inform the required onboarding steps and respective completion status.
     * 
     * scope: `contractors:read`
     * 
     * ## onboarding_status
     * 
     * ### Admin-facilitated onboarding
     * | onboarding_status | Description |
     * |:------------------|------------:|
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
     * | `admin_onboarding_review` | All information has been completed and admin needs to confirm onboarding. |
     * | `onboarding_completed` | Contractor has been fully onboarded and verified. |
     * 
     * ### Contractor self-onboarding
     * 
     * | onboarding_status | Description |
     * | --- | ----------- |
     * | `admin_onboarding_incomplete` | Admin needs to enter basic information about the contractor. |
     * | `self_onboarding_not_invited` | Admin has the intention to invite the contractor to self-onboard (e.g., marking a checkbox), but the system has not yet sent the invitation. |
     * | `self_onboarding_invited` | Contractor has been sent an invitation to self-onboard. |
     * | `self_onboarding_started` | Contractor has started the self-onboarding process. |
     * | `self_onboarding_review` | Admin needs to review contractors's entered information and confirm onboarding. |
     * | `onboarding_completed` | Contractor has been fully onboarded and verified. |
     * 
     * ## onboarding_steps
     * 
     * | onboarding_steps | Requirement(s) to be completed |
     * |:-----------------|-------------------------------:|
     * | `basic_details` | Add individual contractor's first name, last name, social security number or Business name and EIN depending on the contractor type |
     * | `add_address` | Add contractor address. |
     * | `compensation_details` | Add contractor compensation. |
     * | `payment_details` | Set up contractor's direct deposit or set to check. |
     * | `sign_documents` | Contractor forms (e.g., W9) are generated &amp; signed. |
     * | `file_new_hire_report` | Contractor new hire report is generated. |
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidOnboardingStatusResponse getOnboardingStatus(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorsContractorUuidOnboardingStatusRequest request =
            GetV1ContractorsContractorUuidOnboardingStatusRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorsContractorUuidOnboardingStatusRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/onboarding_status",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractors-contractor_uuid-onboarding_status", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractors-contractor_uuid-onboarding_status",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorsContractorUuidOnboardingStatusResponse.Builder _resBuilder = 
            GetV1ContractorsContractorUuidOnboardingStatusResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorsContractorUuidOnboardingStatusResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorOnboardingStatus _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorOnboardingStatus>() {});
                _res.withContractorOnboardingStatus(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Change the contractor's onboarding status
     * Updates a contractor's onboarding status.
     * 
     * scope: `contractors:write`
     * 
     * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.
     * 
     * | Action | current onboarding_status | new onboarding_status |
     * |:------------------|:------------:|----------:|
     * | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` |
     * | Invite a contractor to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` |
     * | Cancel a contractor's self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` |
     * | Review a contractor's self-onboarded info | `self_onboarding_started` | `self_onboarding_review` |
     * | Finish a contractor's onboarding | `admin_onboarding_review` or `self_onboarding_review` | `onboarding_completed` |
     * @return The call builder
     */
    public PutV1ContractorsContractorUuidOnboardingStatusRequestBuilder updateOnboardingStatus() {
        return new PutV1ContractorsContractorUuidOnboardingStatusRequestBuilder(this);
    }

    /**
     * Change the contractor's onboarding status
     * Updates a contractor's onboarding status.
     * 
     * scope: `contractors:write`
     * 
     * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.
     * 
     * | Action | current onboarding_status | new onboarding_status |
     * |:------------------|:------------:|----------:|
     * | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` |
     * | Invite a contractor to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` |
     * | Cancel a contractor's self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` |
     * | Review a contractor's self-onboarded info | `self_onboarding_started` | `self_onboarding_review` |
     * | Finish a contractor's onboarding | `admin_onboarding_review` or `self_onboarding_review` | `onboarding_completed` |
     * @param contractorUuid The UUID of the contractor
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorUuidOnboardingStatusResponse updateOnboardingStatus(
            String contractorUuid,
            PutV1ContractorsContractorUuidOnboardingStatusRequestBody requestBody) throws Exception {
        return updateOnboardingStatus(contractorUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Change the contractor's onboarding status
     * Updates a contractor's onboarding status.
     * 
     * scope: `contractors:write`
     * 
     * Below is a list of valid onboarding status changes depending on the intended action to be performed on behalf of the contractor.
     * 
     * | Action | current onboarding_status | new onboarding_status |
     * |:------------------|:------------:|----------:|
     * | Mark a contractor as self-onboarding | `admin_onboarding_incomplete` | `self_onboarding_not_invited` |
     * | Invite a contractor to self-onboard | `admin_onboarding_incomplete` or `self_onboarding_not_invited` | `self_onboarding_invited` |
     * | Cancel a contractor's self-onboarding | `self_onboarding_invited` or `self_onboarding_not_invited` | `admin_onboarding_incomplete` |
     * | Review a contractor's self-onboarded info | `self_onboarding_started` | `self_onboarding_review` |
     * | Finish a contractor's onboarding | `admin_onboarding_review` or `self_onboarding_review` | `onboarding_completed` |
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorUuidOnboardingStatusResponse updateOnboardingStatus(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1ContractorsContractorUuidOnboardingStatusRequestBody requestBody) throws Exception {
        PutV1ContractorsContractorUuidOnboardingStatusRequest request =
            PutV1ContractorsContractorUuidOnboardingStatusRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1ContractorsContractorUuidOnboardingStatusRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/onboarding_status",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-contractors-contractor_uuid-onboarding_status", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_uuid-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-contractors-contractor_uuid-onboarding_status",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_uuid-onboarding_status",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1ContractorsContractorUuidOnboardingStatusResponse.Builder _resBuilder = 
            PutV1ContractorsContractorUuidOnboardingStatusResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1ContractorsContractorUuidOnboardingStatusResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorOnboardingStatus _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorOnboardingStatus>() {});
                _res.withContractorOnboardingStatus(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a contractor address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * scope: `contractors:read`
     * @return The call builder
     */
    public GetV1ContractorsContractorUuidAddressRequestBuilder getAddress() {
        return new GetV1ContractorsContractorUuidAddressRequestBuilder(this);
    }

    /**
     * Get a contractor address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * scope: `contractors:read`
     * @param contractorUuid The UUID of the contractor
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidAddressResponse getAddress(
            String contractorUuid) throws Exception {
        return getAddress(contractorUuid, Optional.empty());
    }
    
    /**
     * Get a contractor address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * scope: `contractors:read`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorsContractorUuidAddressResponse getAddress(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorsContractorUuidAddressRequest request =
            GetV1ContractorsContractorUuidAddressRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorsContractorUuidAddressRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/address",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractors-contractor_uuid-address", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-address",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractors-contractor_uuid-address",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractors-contractor_uuid-address",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorsContractorUuidAddressResponse.Builder _resBuilder = 
            GetV1ContractorsContractorUuidAddressResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorsContractorUuidAddressResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorAddress>() {});
                _res.withContractorAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a contractor's address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * scope: `contractors:write`
     * @return The call builder
     */
    public PutV1ContractorsContractorUuidAddressRequestBuilder updateAddress() {
        return new PutV1ContractorsContractorUuidAddressRequestBuilder(this);
    }

    /**
     * Update a contractor's address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * scope: `contractors:write`
     * @param contractorUuid The UUID of the contractor
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorUuidAddressResponse updateAddress(
            String contractorUuid,
            PutV1ContractorsContractorUuidAddressRequestBody requestBody) throws Exception {
        return updateAddress(contractorUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a contractor's address
     * The address of a contractor is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * scope: `contractors:write`
     * @param contractorUuid The UUID of the contractor
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorsContractorUuidAddressResponse updateAddress(
            String contractorUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1ContractorsContractorUuidAddressRequestBody requestBody) throws Exception {
        PutV1ContractorsContractorUuidAddressRequest request =
            PutV1ContractorsContractorUuidAddressRequest
                .builder()
                .contractorUuid(contractorUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1ContractorsContractorUuidAddressRequest.class,
                _baseUrl,
                "/v1/contractors/{contractor_uuid}/address",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-contractors-contractor_uuid-address", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_uuid-address",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-contractors-contractor_uuid-address",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractors-contractor_uuid-address",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1ContractorsContractorUuidAddressResponse.Builder _resBuilder = 
            PutV1ContractorsContractorUuidAddressResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1ContractorsContractorUuidAddressResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorAddress>() {});
                _res.withContractorAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
