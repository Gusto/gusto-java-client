/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.EarningType;
import org.openapis.openapi.models.components.EarningTypeList;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest;
import org.openapis.openapi.models.operations.DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdEarningTypesRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdEarningTypesRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdEarningTypesResponse;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdEarningTypesRequest;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdEarningTypesRequestBody;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdEarningTypesRequestBuilder;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdEarningTypesResponse;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBuilder;
import org.openapis.openapi.models.operations.PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class EarningTypes implements
            MethodCallPostV1CompaniesCompanyIdEarningTypes,
            MethodCallGetV1CompaniesCompanyIdEarningTypes,
            MethodCallPutV1CompaniesCompanyIdEarningTypesEarningTypeUuid,
            MethodCallDeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuid {

    private final SDKConfiguration sdkConfiguration;

    EarningTypes(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a custom earning type
     * Create a custom earning type.
     * 
     * If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.
     * 
     * scope: `payrolls:write`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdEarningTypesRequestBuilder create() {
        return new PostV1CompaniesCompanyIdEarningTypesRequestBuilder(this);
    }

    /**
     * Create a custom earning type
     * Create a custom earning type.
     * 
     * If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdEarningTypesResponse create(
            String companyId,
            PostV1CompaniesCompanyIdEarningTypesRequestBody requestBody) throws Exception {
        return create(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create a custom earning type
     * Create a custom earning type.
     * 
     * If an inactive earning type exists with the same name, this will reactivate it instead of creating a new one.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdEarningTypesResponse create(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdEarningTypesRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdEarningTypesRequest request =
            PostV1CompaniesCompanyIdEarningTypesRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdEarningTypesRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/earning_types",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-earning_types", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-earning_types",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-earning_types",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-earning_types",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdEarningTypesResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdEarningTypesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdEarningTypesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EarningType _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EarningType>() {});
                _res.withEarningType(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all earning types for a company
     * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.
     * 
     * #### Default Earning Type
     * Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)
     * 
     * #### Custom Earning Type
     * Custom earning types are all the other earning types added specifically for a company.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdEarningTypesRequestBuilder list() {
        return new GetV1CompaniesCompanyIdEarningTypesRequestBuilder(this);
    }

    /**
     * Get all earning types for a company
     * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.
     * 
     * #### Default Earning Type
     * Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)
     * 
     * #### Custom Earning Type
     * Custom earning types are all the other earning types added specifically for a company.
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdEarningTypesResponse list(
            String companyId) throws Exception {
        return list(companyId, Optional.empty());
    }
    
    /**
     * Get all earning types for a company
     * A payroll item in Gusto is associated to an earning type to name the type of earning described by the payroll item.
     * 
     * #### Default Earning Type
     * Certain earning types are special because they have tax considerations. Those earning types are mostly the same for every company depending on its legal structure (LLC, Corporation, etc.)
     * 
     * #### Custom Earning Type
     * Custom earning types are all the other earning types added specifically for a company.
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdEarningTypesResponse list(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdEarningTypesRequest request =
            GetV1CompaniesCompanyIdEarningTypesRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdEarningTypesRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/earning_types",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-earning_types", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-earning_types",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-earning_types",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-earning_types",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdEarningTypesResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdEarningTypesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdEarningTypesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EarningTypeList _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EarningTypeList>() {});
                _res.withEarningTypeList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an earning type
     * Update an earning type.
     * 
     * scope: `payrolls:write`
     * @return The call builder
     */
    public PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBuilder update() {
        return new PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBuilder(this);
    }

    /**
     * Update an earning type
     * Update an earning type.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param earningTypeUuid The UUID of the earning type
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse update(
            String companyId,
            String earningTypeUuid,
            PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody requestBody) throws Exception {
        return update(companyId, earningTypeUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update an earning type
     * Update an earning type.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param earningTypeUuid The UUID of the earning type
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse update(
            String companyId,
            String earningTypeUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBody requestBody) throws Exception {
        PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest request =
            PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest
                .builder()
                .companyId(companyId)
                .earningTypeUuid(earningTypeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/earning_types/{earning_type_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-companies-company_id-earning_types-earning_type_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies-company_id-earning_types-earning_type_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-companies-company_id-earning_types-earning_type_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-companies-company_id-earning_types-earning_type_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse.Builder _resBuilder = 
            PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EarningType _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EarningType>() {});
                _res.withEarningType(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Deactivate an earning type
     * Deactivate an earning type.
     * 
     * scope: `payrolls:write`
     * @return The call builder
     */
    public DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBuilder delete() {
        return new DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequestBuilder(this);
    }

    /**
     * Deactivate an earning type
     * Deactivate an earning type.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param earningTypeUuid The UUID of the earning type
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse delete(
            String companyId,
            String earningTypeUuid) throws Exception {
        return delete(companyId, earningTypeUuid, Optional.empty());
    }
    
    /**
     * Deactivate an earning type
     * Deactivate an earning type.
     * 
     * scope: `payrolls:write`
     * @param companyId The UUID of the company
     * @param earningTypeUuid The UUID of the earning type
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse delete(
            String companyId,
            String earningTypeUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest request =
            DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest
                .builder()
                .companyId(companyId)
                .earningTypeUuid(earningTypeUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/earning_types/{earning_type_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "*/*")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-companies-company_id-earning_types-earning_type_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-companies-company_id-earning_types-earning_type_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-companies-company_id-earning_types-earning_type_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-companies-company_id-earning_types-earning_type_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse.Builder _resBuilder = 
            DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1CompaniesCompanyIdEarningTypesEarningTypeUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
