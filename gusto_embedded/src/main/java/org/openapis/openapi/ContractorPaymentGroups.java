/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.ContractorPaymentGroup;
import org.openapis.openapi.models.components.ContractorPaymentGroupMinimal;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequest;
import org.openapis.openapi.models.operations.DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdContractorPaymentGroupsRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdContractorPaymentGroupsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdContractorPaymentGroupsResponse;
import org.openapis.openapi.models.operations.GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequest;
import org.openapis.openapi.models.operations.GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequestBuilder;
import org.openapis.openapi.models.operations.GetV1ContractorPaymentGroupsContractorPaymentGroupIdResponse;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBuilder;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsRequest;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBuilder;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdContractorPaymentGroupsResponse;
import org.openapis.openapi.models.operations.PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest;
import org.openapis.openapi.models.operations.PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequestBuilder;
import org.openapis.openapi.models.operations.PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class ContractorPaymentGroups implements
            MethodCallPostV1CompaniesCompanyIdContractorPaymentGroups,
            MethodCallGetV1CompaniesCompanyIdContractorPaymentGroups,
            MethodCallPostV1CompaniesCompanyIdContractorPaymentGroupsPreview,
            MethodCallGetV1ContractorPaymentGroupsContractorPaymentGroupId,
            MethodCallDeleteV1ContractorPaymentGroupsContractorPaymentGroupId,
            MethodCallPutV1ContractorPaymentGroupsContractorPaymentGroupIdFund {

    private final SDKConfiguration sdkConfiguration;

    ContractorPaymentGroups(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a contractor payment group
     * Pay a group of contractors. Information needed depends on the contractor's wage type (hourly vs fixed)
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBuilder create() {
        return new PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBuilder(this);
    }

    /**
     * Create a contractor payment group
     * Pay a group of contractors. Information needed depends on the contractor's wage type (hourly vs fixed)
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdContractorPaymentGroupsResponse create(
            String companyId,
            PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody requestBody) throws Exception {
        return create(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create a contractor payment group
     * Pay a group of contractors. Information needed depends on the contractor's wage type (hourly vs fixed)
     * 
     * scope: `payrolls:run`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdContractorPaymentGroupsResponse create(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdContractorPaymentGroupsRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdContractorPaymentGroupsRequest request =
            PostV1CompaniesCompanyIdContractorPaymentGroupsRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdContractorPaymentGroupsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payment_groups",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-contractor_payment_groups", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-contractor_payment_groups",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-contractor_payment_groups",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-contractor_payment_groups",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdContractorPaymentGroupsResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdContractorPaymentGroupsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdContractorPaymentGroupsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPaymentGroup _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPaymentGroup>() {});
                _res.withContractorPaymentGroup(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get contractor payment groups for a company
     * Returns a list of minimal contractor payment groups within a given time period, including totals but not associated contractor payments.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdContractorPaymentGroupsRequestBuilder getList() {
        return new GetV1CompaniesCompanyIdContractorPaymentGroupsRequestBuilder(this);
    }

    /**
     * Get contractor payment groups for a company
     * Returns a list of minimal contractor payment groups within a given time period, including totals but not associated contractor payments.
     * 
     * scope: `payrolls:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdContractorPaymentGroupsResponse getList(
            GetV1CompaniesCompanyIdContractorPaymentGroupsRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdContractorPaymentGroupsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payment_groups",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdContractorPaymentGroupsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-contractor_payment_groups", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-contractor_payment_groups",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-contractor_payment_groups",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-contractor_payment_groups",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdContractorPaymentGroupsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdContractorPaymentGroupsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdContractorPaymentGroupsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<ContractorPaymentGroupMinimal> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<ContractorPaymentGroupMinimal>>() {});
                _res.withContractorPaymentGroupList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Preview a contractor payment group
     * Preview a group of contractor payments. Request will validate inputs and return preview of the contractor payment group including the expected debit_date.  Uuid will be null in the response.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBuilder preview() {
        return new PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBuilder(this);
    }

    /**
     * Preview a contractor payment group
     * Preview a group of contractor payments. Request will validate inputs and return preview of the contractor payment group including the expected debit_date.  Uuid will be null in the response.
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse preview(
            String companyId,
            PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody requestBody) throws Exception {
        return preview(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Preview a contractor payment group
     * Preview a group of contractor payments. Request will validate inputs and return preview of the contractor payment group including the expected debit_date.  Uuid will be null in the response.
     * 
     * scope: `payrolls:read`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse preview(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest request =
            PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/contractor_payment_groups/preview",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-contractor_payment_groups-preview", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-contractor_payment_groups-preview",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-contractor_payment_groups-preview",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-contractor_payment_groups-preview",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdContractorPaymentGroupsPreviewResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPaymentGroup _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPaymentGroup>() {});
                _res.withContractorPaymentGroup(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Fetch a contractor payment group
     * Returns a contractor payment group with all associated contractor payments.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequestBuilder get() {
        return new GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequestBuilder(this);
    }

    /**
     * Fetch a contractor payment group
     * Returns a contractor payment group with all associated contractor payments.
     * 
     * scope: `payrolls:read`
     * @param contractorPaymentGroupUuid The UUID of the contractor payment group
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorPaymentGroupsContractorPaymentGroupIdResponse get(
            String contractorPaymentGroupUuid) throws Exception {
        return get(contractorPaymentGroupUuid, Optional.empty());
    }
    
    /**
     * Fetch a contractor payment group
     * Returns a contractor payment group with all associated contractor payments.
     * 
     * scope: `payrolls:read`
     * @param contractorPaymentGroupUuid The UUID of the contractor payment group
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1ContractorPaymentGroupsContractorPaymentGroupIdResponse get(
            String contractorPaymentGroupUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequest request =
            GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequest
                .builder()
                .contractorPaymentGroupUuid(contractorPaymentGroupUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1ContractorPaymentGroupsContractorPaymentGroupIdRequest.class,
                _baseUrl,
                "/v1/contractor_payment_groups/{contractor_payment_group_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-contractor_payment_groups-contractor_payment_group_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractor_payment_groups-contractor_payment_group_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-contractor_payment_groups-contractor_payment_group_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-contractor_payment_groups-contractor_payment_group_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1ContractorPaymentGroupsContractorPaymentGroupIdResponse.Builder _resBuilder = 
            GetV1ContractorPaymentGroupsContractorPaymentGroupIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1ContractorPaymentGroupsContractorPaymentGroupIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPaymentGroup _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPaymentGroup>() {});
                _res.withContractorPaymentGroup(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Cancel a contractor payment group
     * Cancels a contractor payment group and all associated contractor payments. All contractor payments must be cancellable, unfunded.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequestBuilder delete() {
        return new DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequestBuilder(this);
    }

    /**
     * Cancel a contractor payment group
     * Cancels a contractor payment group and all associated contractor payments. All contractor payments must be cancellable, unfunded.
     * 
     * scope: `payrolls:run`
     * @param contractorPaymentGroupUuid The UUID of the contractor payment group
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdResponse delete(
            String contractorPaymentGroupUuid) throws Exception {
        return delete(contractorPaymentGroupUuid, Optional.empty());
    }
    
    /**
     * Cancel a contractor payment group
     * Cancels a contractor payment group and all associated contractor payments. All contractor payments must be cancellable, unfunded.
     * 
     * scope: `payrolls:run`
     * @param contractorPaymentGroupUuid The UUID of the contractor payment group
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdResponse delete(
            String contractorPaymentGroupUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequest request =
            DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequest
                .builder()
                .contractorPaymentGroupUuid(contractorPaymentGroupUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdRequest.class,
                _baseUrl,
                "/v1/contractor_payment_groups/{contractor_payment_group_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-contractor_payment_groups-contractor_payment_group_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-contractor_payment_groups-contractor_payment_group_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-contractor_payment_groups-contractor_payment_group_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-contractor_payment_groups-contractor_payment_group_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdResponse.Builder _resBuilder = 
            DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1ContractorPaymentGroupsContractorPaymentGroupIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Fund a contractor payment group [DEMO]
     * &gt; 🚧 Demo action
     * &gt;
     * &gt; This action is only available in the Demo environment
     * 
     * Simulate funding a contractor payment group. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment group's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
     * 
     * scope: `payrolls:run`
     * @return The call builder
     */
    public PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequestBuilder fund() {
        return new PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequestBuilder(this);
    }

    /**
     * Fund a contractor payment group [DEMO]
     * &gt; 🚧 Demo action
     * &gt;
     * &gt; This action is only available in the Demo environment
     * 
     * Simulate funding a contractor payment group. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment group's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
     * 
     * scope: `payrolls:run`
     * @param contractorPaymentGroupUuid The UUID of the contractor payment group
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse fund(
            String contractorPaymentGroupUuid) throws Exception {
        return fund(contractorPaymentGroupUuid, Optional.empty());
    }
    
    /**
     * Fund a contractor payment group [DEMO]
     * &gt; 🚧 Demo action
     * &gt;
     * &gt; This action is only available in the Demo environment
     * 
     * Simulate funding a contractor payment group. Funding only occurs automatically in the production environment when bank transactions are generated. Use this action in the demo environment to transition a contractor payment group's `status` from `Unfunded` to `Funded`. A `Funded` status is required for generating a contractor payment receipt.
     * 
     * scope: `payrolls:run`
     * @param contractorPaymentGroupUuid The UUID of the contractor payment group
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse fund(
            String contractorPaymentGroupUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest request =
            PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest
                .builder()
                .contractorPaymentGroupUuid(contractorPaymentGroupUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundRequest.class,
                _baseUrl,
                "/v1/contractor_payment_groups/{contractor_payment_group_uuid}/fund",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-contractor_payment_groups-contractor_payment_group_id-fund", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractor_payment_groups-contractor_payment_group_id-fund",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-contractor_payment_groups-contractor_payment_group_id-fund",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-contractor_payment_groups-contractor_payment_group_id-fund",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse.Builder _resBuilder = 
            PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1ContractorPaymentGroupsContractorPaymentGroupIdFundResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                ContractorPaymentGroup _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<ContractorPaymentGroup>() {});
                _res.withContractorPaymentGroup(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
