/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.BenefitSummary;
import org.openapis.openapi.models.components.BenefitTypeRequirements;
import org.openapis.openapi.models.components.CompanyBenefit;
import org.openapis.openapi.models.components.CompanyBenefitWithEmployeeBenefits;
import org.openapis.openapi.models.components.EmployeeBenefit;
import org.openapis.openapi.models.components.SupportedBenefit;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.DeleteV1CompanyBenefitsCompanyBenefitIdResponseBody;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1CompanyBenefitsCompanyBenefitIdRequest;
import org.openapis.openapi.models.operations.DeleteV1CompanyBenefitsCompanyBenefitIdRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1CompanyBenefitsCompanyBenefitIdResponse;
import org.openapis.openapi.models.operations.GetV1BenefitsBenefitIdRequest;
import org.openapis.openapi.models.operations.GetV1BenefitsBenefitIdRequestBuilder;
import org.openapis.openapi.models.operations.GetV1BenefitsBenefitIdResponse;
import org.openapis.openapi.models.operations.GetV1BenefitsBenefitsIdRequirementsRequest;
import org.openapis.openapi.models.operations.GetV1BenefitsBenefitsIdRequirementsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1BenefitsBenefitsIdRequirementsResponse;
import org.openapis.openapi.models.operations.GetV1BenefitsCompanyBenefitIdSummaryRequest;
import org.openapis.openapi.models.operations.GetV1BenefitsCompanyBenefitIdSummaryRequestBuilder;
import org.openapis.openapi.models.operations.GetV1BenefitsCompanyBenefitIdSummaryResponse;
import org.openapis.openapi.models.operations.GetV1BenefitsRequest;
import org.openapis.openapi.models.operations.GetV1BenefitsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1BenefitsResponse;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdCompanyBenefitsRequest;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdCompanyBenefitsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompaniesCompanyIdCompanyBenefitsResponse;
import org.openapis.openapi.models.operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest;
import org.openapis.openapi.models.operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse;
import org.openapis.openapi.models.operations.GetV1CompanyBenefitsCompanyBenefitIdRequest;
import org.openapis.openapi.models.operations.GetV1CompanyBenefitsCompanyBenefitIdRequestBuilder;
import org.openapis.openapi.models.operations.GetV1CompanyBenefitsCompanyBenefitIdResponse;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdCompanyBenefitsRequest;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdCompanyBenefitsRequestBody;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdCompanyBenefitsRequestBuilder;
import org.openapis.openapi.models.operations.PostV1CompaniesCompanyIdCompanyBenefitsResponse;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBody;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBuilder;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdRequest;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdRequestBody;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdRequestBuilder;
import org.openapis.openapi.models.operations.PutV1CompanyBenefitsCompanyBenefitIdResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class CompanyBenefits implements
            MethodCallPostV1CompaniesCompanyIdCompanyBenefits,
            MethodCallGetV1CompaniesCompanyIdCompanyBenefits,
            MethodCallGetV1CompanyBenefitsCompanyBenefitId,
            MethodCallPutV1CompanyBenefitsCompanyBenefitId,
            MethodCallDeleteV1CompanyBenefitsCompanyBenefitId,
            MethodCallGetV1Benefits,
            MethodCallGetV1BenefitsBenefitId,
            MethodCallGetV1BenefitsCompanyBenefitIdSummary,
            MethodCallGetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefits,
            MethodCallPutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefits,
            MethodCallGetV1BenefitsBenefitsIdRequirements {

    private final SDKConfiguration sdkConfiguration;

    CompanyBenefits(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Create a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * scope: `company_benefits:write`
     * @return The call builder
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsRequestBuilder create() {
        return new PostV1CompaniesCompanyIdCompanyBenefitsRequestBuilder(this);
    }

    /**
     * Create a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * scope: `company_benefits:write`
     * @param companyId The UUID of the company
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsResponse create(
            String companyId,
            PostV1CompaniesCompanyIdCompanyBenefitsRequestBody requestBody) throws Exception {
        return create(companyId, Optional.empty(), requestBody);
    }
    
    /**
     * Create a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * scope: `company_benefits:write`
     * @param companyId The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1CompaniesCompanyIdCompanyBenefitsResponse create(
            String companyId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1CompaniesCompanyIdCompanyBenefitsRequestBody requestBody) throws Exception {
        PostV1CompaniesCompanyIdCompanyBenefitsRequest request =
            PostV1CompaniesCompanyIdCompanyBenefitsRequest
                .builder()
                .companyId(companyId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1CompaniesCompanyIdCompanyBenefitsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/company_benefits",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-companies-company_id-company_benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-company_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-companies-company_id-company_benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-companies-company_id-company_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1CompaniesCompanyIdCompanyBenefitsResponse.Builder _resBuilder = 
            PostV1CompaniesCompanyIdCompanyBenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1CompaniesCompanyIdCompanyBenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CompanyBenefit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CompanyBenefit>() {});
                _res.withCompanyBenefit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get benefits for a company
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.
     * 
     * scope: `company_benefits:read`
     * @return The call builder
     */
    public GetV1CompaniesCompanyIdCompanyBenefitsRequestBuilder list() {
        return new GetV1CompaniesCompanyIdCompanyBenefitsRequestBuilder(this);
    }

    /**
     * Get benefits for a company
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.
     * 
     * scope: `company_benefits:read`
     * @param companyId The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdCompanyBenefitsResponse list(
            String companyId) throws Exception {
        return list(companyId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get benefits for a company
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.
     * 
     * scope: `company_benefits:read`
     * @param companyId The UUID of the company
     * @param enrollmentCount Whether to return employee enrollment count
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompaniesCompanyIdCompanyBenefitsResponse list(
            String companyId,
            Optional<Boolean> enrollmentCount,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompaniesCompanyIdCompanyBenefitsRequest request =
            GetV1CompaniesCompanyIdCompanyBenefitsRequest
                .builder()
                .companyId(companyId)
                .enrollmentCount(enrollmentCount)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompaniesCompanyIdCompanyBenefitsRequest.class,
                _baseUrl,
                "/v1/companies/{company_id}/company_benefits",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompaniesCompanyIdCompanyBenefitsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-companies-company_id-company_benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-company_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-companies-company_id-company_benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-companies-company_id-company_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompaniesCompanyIdCompanyBenefitsResponse.Builder _resBuilder = 
            GetV1CompaniesCompanyIdCompanyBenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompaniesCompanyIdCompanyBenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<CompanyBenefit> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<CompanyBenefit>>() {});
                _res.withCompanyBenefitList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.
     * 
     * scope: `company_benefits:read`
     * @return The call builder
     */
    public GetV1CompanyBenefitsCompanyBenefitIdRequestBuilder get() {
        return new GetV1CompanyBenefitsCompanyBenefitIdRequestBuilder(this);
    }

    /**
     * Get a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.
     * 
     * scope: `company_benefits:read`
     * @param companyBenefitId The UUID of the company benefit
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyBenefitsCompanyBenefitIdResponse get(
            String companyBenefitId) throws Exception {
        return get(companyBenefitId, Optional.empty(), Optional.empty());
    }
    
    /**
     * Get a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * When with_employee_benefits parameter with true value is passed, employee_benefits:read scope is required to return employee_benefits.
     * 
     * scope: `company_benefits:read`
     * @param companyBenefitId The UUID of the company benefit
     * @param withEmployeeBenefits Whether to return employee benefits associated with the benefit
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyBenefitsCompanyBenefitIdResponse get(
            String companyBenefitId,
            Optional<Boolean> withEmployeeBenefits,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompanyBenefitsCompanyBenefitIdRequest request =
            GetV1CompanyBenefitsCompanyBenefitIdRequest
                .builder()
                .companyBenefitId(companyBenefitId)
                .withEmployeeBenefits(withEmployeeBenefits)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompanyBenefitsCompanyBenefitIdRequest.class,
                _baseUrl,
                "/v1/company_benefits/{company_benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompanyBenefitsCompanyBenefitIdRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-company_benefits-company_benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompanyBenefitsCompanyBenefitIdResponse.Builder _resBuilder = 
            GetV1CompanyBenefitsCompanyBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompanyBenefitsCompanyBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CompanyBenefitWithEmployeeBenefits _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CompanyBenefitWithEmployeeBenefits>() {});
                _res.withCompanyBenefitWithEmployeeBenefits(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * scope: `company_benefits:write`
     * @return The call builder
     */
    public PutV1CompanyBenefitsCompanyBenefitIdRequestBuilder update() {
        return new PutV1CompanyBenefitsCompanyBenefitIdRequestBuilder(this);
    }

    /**
     * Update a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * scope: `company_benefits:write`
     * @param companyBenefitId The UUID of the company benefit
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompanyBenefitsCompanyBenefitIdResponse update(
            String companyBenefitId,
            PutV1CompanyBenefitsCompanyBenefitIdRequestBody requestBody) throws Exception {
        return update(companyBenefitId, Optional.empty(), requestBody);
    }
    
    /**
     * Update a company benefit
     * Company benefits represent the benefits that a company is offering to employees. This ties together a particular supported benefit with the company-specific information for the offering of that benefit.
     * 
     * Note that company benefits can be deactivated only when no employees are enrolled.
     * 
     * scope: `company_benefits:write`
     * @param companyBenefitId The UUID of the company benefit
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompanyBenefitsCompanyBenefitIdResponse update(
            String companyBenefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompanyBenefitsCompanyBenefitIdRequestBody requestBody) throws Exception {
        PutV1CompanyBenefitsCompanyBenefitIdRequest request =
            PutV1CompanyBenefitsCompanyBenefitIdRequest
                .builder()
                .companyBenefitId(companyBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompanyBenefitsCompanyBenefitIdRequest.class,
                _baseUrl,
                "/v1/company_benefits/{company_benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-company_benefits-company_benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompanyBenefitsCompanyBenefitIdResponse.Builder _resBuilder = 
            PutV1CompanyBenefitsCompanyBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompanyBenefitsCompanyBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                CompanyBenefit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<CompanyBenefit>() {});
                _res.withCompanyBenefit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete a company benefit
     * The following must be true in order to delete a company benefit
     *   - There are no employee benefits associated with the company benefit
     *   - There are no payroll items associated with the company benefit
     *   - The benefit is not managed by a Partner or by Gusto (type must be 'External')
     * 
     * scope: `company_benefits:write`
     * @return The call builder
     */
    public DeleteV1CompanyBenefitsCompanyBenefitIdRequestBuilder delete() {
        return new DeleteV1CompanyBenefitsCompanyBenefitIdRequestBuilder(this);
    }

    /**
     * Delete a company benefit
     * The following must be true in order to delete a company benefit
     *   - There are no employee benefits associated with the company benefit
     *   - There are no payroll items associated with the company benefit
     *   - The benefit is not managed by a Partner or by Gusto (type must be 'External')
     * 
     * scope: `company_benefits:write`
     * @param companyBenefitId The UUID of the company benefit
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompanyBenefitsCompanyBenefitIdResponse delete(
            String companyBenefitId) throws Exception {
        return delete(companyBenefitId, Optional.empty());
    }
    
    /**
     * Delete a company benefit
     * The following must be true in order to delete a company benefit
     *   - There are no employee benefits associated with the company benefit
     *   - There are no payroll items associated with the company benefit
     *   - The benefit is not managed by a Partner or by Gusto (type must be 'External')
     * 
     * scope: `company_benefits:write`
     * @param companyBenefitId The UUID of the company benefit
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1CompanyBenefitsCompanyBenefitIdResponse delete(
            String companyBenefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1CompanyBenefitsCompanyBenefitIdRequest request =
            DeleteV1CompanyBenefitsCompanyBenefitIdRequest
                .builder()
                .companyBenefitId(companyBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1CompanyBenefitsCompanyBenefitIdRequest.class,
                _baseUrl,
                "/v1/company_benefits/{company_benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-company_benefits-company_benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-company_benefits-company_benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1CompanyBenefitsCompanyBenefitIdResponse.Builder _resBuilder = 
            DeleteV1CompanyBenefitsCompanyBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1CompanyBenefitsCompanyBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                DeleteV1CompanyBenefitsCompanyBenefitIdResponseBody _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<DeleteV1CompanyBenefitsCompanyBenefitIdResponseBody>() {});
                    _out.withRawResponse(Optional.ofNullable(_httpRes));
                
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all benefits supported by Gusto
     * Returns all benefits supported by Gusto.
     * 
     * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
     * 
     * scope: `benefits:read`
     * @return The call builder
     */
    public GetV1BenefitsRequestBuilder getAll() {
        return new GetV1BenefitsRequestBuilder(this);
    }

    /**
     * Get all benefits supported by Gusto
     * Returns all benefits supported by Gusto.
     * 
     * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
     * 
     * scope: `benefits:read`
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsResponse getAllDirect() throws Exception {
        return getAll(Optional.empty());
    }
    
    /**
     * Get all benefits supported by Gusto
     * Returns all benefits supported by Gusto.
     * 
     * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
     * 
     * scope: `benefits:read`
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsResponse getAll(
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1BenefitsRequest request =
            GetV1BenefitsRequest
                .builder()
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                _baseUrl,
                "/v1/benefits");
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1BenefitsResponse.Builder _resBuilder = 
            GetV1BenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1BenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<SupportedBenefit> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<SupportedBenefit>>() {});
                _res.withSupportedBenefitList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a supported benefit by ID
     * Returns a benefit supported by Gusto.
     * 
     * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
     * 
     * scope: `benefits:read`
     * @return The call builder
     */
    public GetV1BenefitsBenefitIdRequestBuilder getSupported() {
        return new GetV1BenefitsBenefitIdRequestBuilder(this);
    }

    /**
     * Get a supported benefit by ID
     * Returns a benefit supported by Gusto.
     * 
     * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
     * 
     * scope: `benefits:read`
     * @param benefitId The benefit type in Gusto.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsBenefitIdResponse getSupported(
            String benefitId) throws Exception {
        return getSupported(benefitId, Optional.empty());
    }
    
    /**
     * Get a supported benefit by ID
     * Returns a benefit supported by Gusto.
     * 
     * The benefit object in Gusto contains high level information about a particular benefit type and its tax considerations. When companies choose to offer a benefit, they are creating a Company Benefit object associated with a particular benefit.
     * 
     * scope: `benefits:read`
     * @param benefitId The benefit type in Gusto.
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsBenefitIdResponse getSupported(
            String benefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1BenefitsBenefitIdRequest request =
            GetV1BenefitsBenefitIdRequest
                .builder()
                .benefitId(benefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1BenefitsBenefitIdRequest.class,
                _baseUrl,
                "/v1/benefits/{benefit_id}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-benefits-benefit_id", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits-benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-benefits-benefit_id",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits-benefit_id",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1BenefitsBenefitIdResponse.Builder _resBuilder = 
            GetV1BenefitsBenefitIdResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1BenefitsBenefitIdResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                SupportedBenefit _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<SupportedBenefit>() {});
                _res.withSupportedBenefit(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get company benefit summary by company benefit id.
     * Returns summary benefit data for the requested company benefit id.
     * 
     * Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.
     * 
     * scope: `company_benefits:read`
     * @return The call builder
     */
    public GetV1BenefitsCompanyBenefitIdSummaryRequestBuilder getSummary() {
        return new GetV1BenefitsCompanyBenefitIdSummaryRequestBuilder(this);
    }

    /**
     * Get company benefit summary by company benefit id.
     * Returns summary benefit data for the requested company benefit id.
     * 
     * Benefits containing PHI are only visible to applications with the `company_benefits:read:phi` scope.
     * 
     * scope: `company_benefits:read`
     * @param request The request object containing all of the parameters for the API call.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsCompanyBenefitIdSummaryResponse getSummary(
            GetV1BenefitsCompanyBenefitIdSummaryRequest request) throws Exception {
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1BenefitsCompanyBenefitIdSummaryRequest.class,
                _baseUrl,
                "/v1/company_benefits/{company_benefit_id}/summary",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1BenefitsCompanyBenefitIdSummaryRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-benefits-company_benefit_id-summary", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits-company_benefit_id-summary",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-benefits-company_benefit_id-summary",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits-company_benefit_id-summary",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1BenefitsCompanyBenefitIdSummaryResponse.Builder _resBuilder = 
            GetV1BenefitsCompanyBenefitIdSummaryResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1BenefitsCompanyBenefitIdSummaryResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                BenefitSummary _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<BenefitSummary>() {});
                _res.withBenefitSummary(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all employee benefits for a company benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Returns an array of all employee benefits enrolled for this company benefit.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @return The call builder
     */
    public GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBuilder getEmployeeBenefits() {
        return new GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBuilder(this);
    }

    /**
     * Get all employee benefits for a company benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Returns an array of all employee benefits enrolled for this company benefit.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @param companyBenefitId The UUID of the company benefit
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse getEmployeeBenefits(
            String companyBenefitId) throws Exception {
        return getEmployeeBenefits(companyBenefitId, Optional.empty(), Optional.empty(), Optional.empty());
    }
    
    /**
     * Get all employee benefits for a company benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Returns an array of all employee benefits enrolled for this company benefit.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:read`
     * @param companyBenefitId The UUID of the company benefit
     * @param page The page that is requested. When unspecified, will load all objects unless endpoint forces pagination.
     * @param per Number of objects per page. For majority of endpoints will default to 25
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse getEmployeeBenefits(
            String companyBenefitId,
            Optional<Double> page,
            Optional<Double> per,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest request =
            GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest
                .builder()
                .companyBenefitId(companyBenefitId)
                .page(page)
                .per(per)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest.class,
                _baseUrl,
                "/v1/company_benefits/{company_benefit_id}/employee_benefits",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);

        _req.addQueryParams(Utils.getQueryParams(
                GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest.class,
                request, 
                null));
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-company_benefits-company_benefit_id-employee_benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company_benefits-company_benefit_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-company_benefits-company_benefit_id-employee_benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-company_benefits-company_benefit_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse.Builder _resBuilder = 
            GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<EmployeeBenefit> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<EmployeeBenefit>>() {});
                _res.withEmployeeBenefitList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Bulk update employee benefits for a company benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Create or update(if the employee is already enrolled in the company benefit previously) an employee benefit for the company benefit.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:write`
     * @return The call builder
     */
    public PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBuilder updateEmployeeBenefits() {
        return new PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBuilder(this);
    }

    /**
     * Bulk update employee benefits for a company benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Create or update(if the employee is already enrolled in the company benefit previously) an employee benefit for the company benefit.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:write`
     * @param companyBenefitId The UUID of the company benefit
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse updateEmployeeBenefits(
            String companyBenefitId,
            PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBody requestBody) throws Exception {
        return updateEmployeeBenefits(companyBenefitId, Optional.empty(), requestBody);
    }
    
    /**
     * Bulk update employee benefits for a company benefit
     * Employee benefits represent an employee enrolled in a particular company benefit. It includes information specific to that employee’s enrollment.
     * 
     * Create or update(if the employee is already enrolled in the company benefit previously) an employee benefit for the company benefit.
     * 
     * Benefits containing PHI are only visible to applications with the `employee_benefits:read:phi` scope.
     * 
     * scope: `employee_benefits:write`
     * @param companyBenefitId The UUID of the company benefit
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse updateEmployeeBenefits(
            String companyBenefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequestBody requestBody) throws Exception {
        PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest request =
            PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest
                .builder()
                .companyBenefitId(companyBenefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsRequest.class,
                _baseUrl,
                "/v1/company_benefits/{company_benefit_id}/employee_benefits",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-company_benefits-company_benefit_id-employee_benefits", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-company_benefits-company_benefit_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-company_benefits-company_benefit_id-employee_benefits",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-company_benefits-company_benefit_id-employee_benefits",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse.Builder _resBuilder = 
            PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1CompanyBenefitsCompanyBenefitIdEmployeeBenefitsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<EmployeeBenefit> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<EmployeeBenefit>>() {});
                _res.withEmployeeBenefitList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get benefit fields requirements by ID
     * Returns field requirements for the requested benefit type.
     * 
     * scope: `benefits:read`
     * @return The call builder
     */
    public GetV1BenefitsBenefitsIdRequirementsRequestBuilder getRequirements() {
        return new GetV1BenefitsBenefitsIdRequirementsRequestBuilder(this);
    }

    /**
     * Get benefit fields requirements by ID
     * Returns field requirements for the requested benefit type.
     * 
     * scope: `benefits:read`
     * @param benefitId The benefit type in Gusto.
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsBenefitsIdRequirementsResponse getRequirements(
            String benefitId) throws Exception {
        return getRequirements(benefitId, Optional.empty());
    }
    
    /**
     * Get benefit fields requirements by ID
     * Returns field requirements for the requested benefit type.
     * 
     * scope: `benefits:read`
     * @param benefitId The benefit type in Gusto.
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1BenefitsBenefitsIdRequirementsResponse getRequirements(
            String benefitId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1BenefitsBenefitsIdRequirementsRequest request =
            GetV1BenefitsBenefitsIdRequirementsRequest
                .builder()
                .benefitId(benefitId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1BenefitsBenefitsIdRequirementsRequest.class,
                _baseUrl,
                "/v1/benefits/{benefit_id}/requirements",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-benefits-benefits_id-requirements", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits-benefits_id-requirements",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-benefits-benefits_id-requirements",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-benefits-benefits_id-requirements",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1BenefitsBenefitsIdRequirementsResponse.Builder _resBuilder = 
            GetV1BenefitsBenefitsIdRequirementsResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1BenefitsBenefitsIdRequirementsResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                BenefitTypeRequirements _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<BenefitTypeRequirements>() {});
                _res.withBenefitTypeRequirements(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
