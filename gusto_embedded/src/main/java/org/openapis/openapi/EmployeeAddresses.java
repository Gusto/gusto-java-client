/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.EmployeeAddress;
import org.openapis.openapi.models.components.EmployeeWorkAddress;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.DeleteV1HomeAddressesHomeAddressUuidRequest;
import org.openapis.openapi.models.operations.DeleteV1HomeAddressesHomeAddressUuidRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1HomeAddressesHomeAddressUuidResponse;
import org.openapis.openapi.models.operations.DeleteV1WorkAddressesWorkAddressUuidRequest;
import org.openapis.openapi.models.operations.DeleteV1WorkAddressesWorkAddressUuidRequestBuilder;
import org.openapis.openapi.models.operations.DeleteV1WorkAddressesWorkAddressUuidResponse;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdHomeAddressesRequest;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdHomeAddressesRequestBuilder;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdHomeAddressesResponse;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdWorkAddressesRequest;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdWorkAddressesRequestBuilder;
import org.openapis.openapi.models.operations.GetV1EmployeesEmployeeIdWorkAddressesResponse;
import org.openapis.openapi.models.operations.GetV1HomeAddressesHomeAddressUuidRequest;
import org.openapis.openapi.models.operations.GetV1HomeAddressesHomeAddressUuidRequestBuilder;
import org.openapis.openapi.models.operations.GetV1HomeAddressesHomeAddressUuidResponse;
import org.openapis.openapi.models.operations.GetV1WorkAddressesWorkAddressUuidRequest;
import org.openapis.openapi.models.operations.GetV1WorkAddressesWorkAddressUuidRequestBuilder;
import org.openapis.openapi.models.operations.GetV1WorkAddressesWorkAddressUuidResponse;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdHomeAddressesRequest;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdHomeAddressesRequestBody;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdHomeAddressesRequestBuilder;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdHomeAddressesResponse;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdWorkAddressesRequest;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdWorkAddressesRequestBody;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdWorkAddressesRequestBuilder;
import org.openapis.openapi.models.operations.PostV1EmployeesEmployeeIdWorkAddressesResponse;
import org.openapis.openapi.models.operations.PutV1HomeAddressesHomeAddressUuidRequest;
import org.openapis.openapi.models.operations.PutV1HomeAddressesHomeAddressUuidRequestBody;
import org.openapis.openapi.models.operations.PutV1HomeAddressesHomeAddressUuidRequestBuilder;
import org.openapis.openapi.models.operations.PutV1HomeAddressesHomeAddressUuidResponse;
import org.openapis.openapi.models.operations.PutV1WorkAddressesWorkAddressUuidRequest;
import org.openapis.openapi.models.operations.PutV1WorkAddressesWorkAddressUuidRequestBody;
import org.openapis.openapi.models.operations.PutV1WorkAddressesWorkAddressUuidRequestBuilder;
import org.openapis.openapi.models.operations.PutV1WorkAddressesWorkAddressUuidResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class EmployeeAddresses implements
            MethodCallGetV1EmployeesEmployeeIdHomeAddresses,
            MethodCallPostV1EmployeesEmployeeIdHomeAddresses,
            MethodCallGetV1HomeAddressesHomeAddressUuid,
            MethodCallPutV1HomeAddressesHomeAddressUuid,
            MethodCallDeleteV1HomeAddressesHomeAddressUuid,
            MethodCallGetV1EmployeesEmployeeIdWorkAddresses,
            MethodCallPostV1EmployeesEmployeeIdWorkAddresses,
            MethodCallGetV1WorkAddressesWorkAddressUuid,
            MethodCallPutV1WorkAddressesWorkAddressUuid,
            MethodCallDeleteV1WorkAddressesWorkAddressUuid {

    private final SDKConfiguration sdkConfiguration;

    EmployeeAddresses(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Get an employee's home addresses
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:read`
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdHomeAddressesRequestBuilder get() {
        return new GetV1EmployeesEmployeeIdHomeAddressesRequestBuilder(this);
    }

    /**
     * Get an employee's home addresses
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:read`
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdHomeAddressesResponse get(
            String employeeId) throws Exception {
        return get(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's home addresses
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:read`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdHomeAddressesResponse get(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdHomeAddressesRequest request =
            GetV1EmployeesEmployeeIdHomeAddressesRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdHomeAddressesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/home_addresses",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-employees-employee_id-home_addresses", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-home_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-employees-employee_id-home_addresses",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-home_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdHomeAddressesResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdHomeAddressesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdHomeAddressesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<EmployeeAddress> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<EmployeeAddress>>() {});
                _res.withEmployeeAddressList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:write`
     * @return The call builder
     */
    public PostV1EmployeesEmployeeIdHomeAddressesRequestBuilder create() {
        return new PostV1EmployeesEmployeeIdHomeAddressesRequestBuilder(this);
    }

    /**
     * Create an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:write`
     * @param employeeId The UUID of the employee
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdHomeAddressesResponse create(
            String employeeId,
            PostV1EmployeesEmployeeIdHomeAddressesRequestBody requestBody) throws Exception {
        return create(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:write`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdHomeAddressesResponse create(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1EmployeesEmployeeIdHomeAddressesRequestBody requestBody) throws Exception {
        PostV1EmployeesEmployeeIdHomeAddressesRequest request =
            PostV1EmployeesEmployeeIdHomeAddressesRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1EmployeesEmployeeIdHomeAddressesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/home_addresses",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-employees-employee_id-home_addresses", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-home_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-employees-employee_id-home_addresses",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-home_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1EmployeesEmployeeIdHomeAddressesResponse.Builder _resBuilder = 
            PostV1EmployeesEmployeeIdHomeAddressesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1EmployeesEmployeeIdHomeAddressesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeAddress>() {});
                _res.withEmployeeAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:read`
     * @return The call builder
     */
    public GetV1HomeAddressesHomeAddressUuidRequestBuilder retrieveHomeAddress() {
        return new GetV1HomeAddressesHomeAddressUuidRequestBuilder(this);
    }

    /**
     * Get an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:read`
     * @param homeAddressUuid The UUID of the home address
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1HomeAddressesHomeAddressUuidResponse retrieveHomeAddress(
            String homeAddressUuid) throws Exception {
        return retrieveHomeAddress(homeAddressUuid, Optional.empty());
    }
    
    /**
     * Get an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:read`
     * @param homeAddressUuid The UUID of the home address
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1HomeAddressesHomeAddressUuidResponse retrieveHomeAddress(
            String homeAddressUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1HomeAddressesHomeAddressUuidRequest request =
            GetV1HomeAddressesHomeAddressUuidRequest
                .builder()
                .homeAddressUuid(homeAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1HomeAddressesHomeAddressUuidRequest.class,
                _baseUrl,
                "/v1/home_addresses/{home_address_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-home_addresses-home_address_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1HomeAddressesHomeAddressUuidResponse.Builder _resBuilder = 
            GetV1HomeAddressesHomeAddressUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1HomeAddressesHomeAddressUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeAddress>() {});
                _res.withEmployeeAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:write`
     * @return The call builder
     */
    public PutV1HomeAddressesHomeAddressUuidRequestBuilder update() {
        return new PutV1HomeAddressesHomeAddressUuidRequestBuilder(this);
    }

    /**
     * Update an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:write`
     * @param homeAddressUuid The UUID of the home address
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1HomeAddressesHomeAddressUuidResponse update(
            String homeAddressUuid,
            PutV1HomeAddressesHomeAddressUuidRequestBody requestBody) throws Exception {
        return update(homeAddressUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee's home address
     * The home address of an employee is used to determine certain tax information about them. Addresses are geocoded on create and update to ensure validity.
     * 
     * Supports home address effective dating and courtesy withholding.
     * 
     * scope: `employees:write`
     * @param homeAddressUuid The UUID of the home address
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1HomeAddressesHomeAddressUuidResponse update(
            String homeAddressUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1HomeAddressesHomeAddressUuidRequestBody requestBody) throws Exception {
        PutV1HomeAddressesHomeAddressUuidRequest request =
            PutV1HomeAddressesHomeAddressUuidRequest
                .builder()
                .homeAddressUuid(homeAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1HomeAddressesHomeAddressUuidRequest.class,
                _baseUrl,
                "/v1/home_addresses/{home_address_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-home_addresses-home_address_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1HomeAddressesHomeAddressUuidResponse.Builder _resBuilder = 
            PutV1HomeAddressesHomeAddressUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1HomeAddressesHomeAddressUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeAddress>() {});
                _res.withEmployeeAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an employee's home address
     * Used for deleting an employee's home address.  Cannot delete the employee's active home address.
     * 
     * scope: `employees:write`
     * @return The call builder
     */
    public DeleteV1HomeAddressesHomeAddressUuidRequestBuilder delete() {
        return new DeleteV1HomeAddressesHomeAddressUuidRequestBuilder(this);
    }

    /**
     * Delete an employee's home address
     * Used for deleting an employee's home address.  Cannot delete the employee's active home address.
     * 
     * scope: `employees:write`
     * @param homeAddressUuid The UUID of the home address
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1HomeAddressesHomeAddressUuidResponse delete(
            String homeAddressUuid) throws Exception {
        return delete(homeAddressUuid, Optional.empty());
    }
    
    /**
     * Delete an employee's home address
     * Used for deleting an employee's home address.  Cannot delete the employee's active home address.
     * 
     * scope: `employees:write`
     * @param homeAddressUuid The UUID of the home address
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1HomeAddressesHomeAddressUuidResponse delete(
            String homeAddressUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1HomeAddressesHomeAddressUuidRequest request =
            DeleteV1HomeAddressesHomeAddressUuidRequest
                .builder()
                .homeAddressUuid(homeAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1HomeAddressesHomeAddressUuidRequest.class,
                _baseUrl,
                "/v1/home_addresses/{home_address_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-home_addresses-home_address_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-home_addresses-home_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1HomeAddressesHomeAddressUuidResponse.Builder _resBuilder = 
            DeleteV1HomeAddressesHomeAddressUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1HomeAddressesHomeAddressUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee's work addresses
     * Returns a list of an employee's work addresses. Each address includes its effective date and a boolean
     * signifying if it is the currently active work address.
     * 
     * scope: `employees:read`
     * @return The call builder
     */
    public GetV1EmployeesEmployeeIdWorkAddressesRequestBuilder getWorkAddresses() {
        return new GetV1EmployeesEmployeeIdWorkAddressesRequestBuilder(this);
    }

    /**
     * Get an employee's work addresses
     * Returns a list of an employee's work addresses. Each address includes its effective date and a boolean
     * signifying if it is the currently active work address.
     * 
     * scope: `employees:read`
     * @param employeeId The UUID of the employee
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdWorkAddressesResponse getWorkAddresses(
            String employeeId) throws Exception {
        return getWorkAddresses(employeeId, Optional.empty());
    }
    
    /**
     * Get an employee's work addresses
     * Returns a list of an employee's work addresses. Each address includes its effective date and a boolean
     * signifying if it is the currently active work address.
     * 
     * scope: `employees:read`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1EmployeesEmployeeIdWorkAddressesResponse getWorkAddresses(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1EmployeesEmployeeIdWorkAddressesRequest request =
            GetV1EmployeesEmployeeIdWorkAddressesRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1EmployeesEmployeeIdWorkAddressesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/work_addresses",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-employees-employee_id-work_addresses", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-work_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-employees-employee_id-work_addresses",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-employees-employee_id-work_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1EmployeesEmployeeIdWorkAddressesResponse.Builder _resBuilder = 
            GetV1EmployeesEmployeeIdWorkAddressesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1EmployeesEmployeeIdWorkAddressesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<EmployeeWorkAddress> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<EmployeeWorkAddress>>() {});
                _res.withEmployeeWorkAddressList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create an employee work address
     * The work address of an employee describes when an employee began working at an associated company location.
     * 
     * scope: `employees:manage`
     * @return The call builder
     */
    public PostV1EmployeesEmployeeIdWorkAddressesRequestBuilder createWorkAddress() {
        return new PostV1EmployeesEmployeeIdWorkAddressesRequestBuilder(this);
    }

    /**
     * Create an employee work address
     * The work address of an employee describes when an employee began working at an associated company location.
     * 
     * scope: `employees:manage`
     * @param employeeId The UUID of the employee
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdWorkAddressesResponse createWorkAddress(
            String employeeId,
            PostV1EmployeesEmployeeIdWorkAddressesRequestBody requestBody) throws Exception {
        return createWorkAddress(employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Create an employee work address
     * The work address of an employee describes when an employee began working at an associated company location.
     * 
     * scope: `employees:manage`
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1EmployeesEmployeeIdWorkAddressesResponse createWorkAddress(
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1EmployeesEmployeeIdWorkAddressesRequestBody requestBody) throws Exception {
        PostV1EmployeesEmployeeIdWorkAddressesRequest request =
            PostV1EmployeesEmployeeIdWorkAddressesRequest
                .builder()
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1EmployeesEmployeeIdWorkAddressesRequest.class,
                _baseUrl,
                "/v1/employees/{employee_id}/work_addresses",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-employees-employee_id-work_addresses", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-work_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-employees-employee_id-work_addresses",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-employees-employee_id-work_addresses",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1EmployeesEmployeeIdWorkAddressesResponse.Builder _resBuilder = 
            PostV1EmployeesEmployeeIdWorkAddressesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1EmployeesEmployeeIdWorkAddressesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeWorkAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeWorkAddress>() {});
                _res.withEmployeeWorkAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get an employee work address
     * The work address of an employee is used for payroll tax purposes.
     * 
     * scope: `employees:read`
     * @return The call builder
     */
    public GetV1WorkAddressesWorkAddressUuidRequestBuilder retrieveWorkAddress() {
        return new GetV1WorkAddressesWorkAddressUuidRequestBuilder(this);
    }

    /**
     * Get an employee work address
     * The work address of an employee is used for payroll tax purposes.
     * 
     * scope: `employees:read`
     * @param workAddressUuid The UUID of the work address
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WorkAddressesWorkAddressUuidResponse retrieveWorkAddress(
            String workAddressUuid) throws Exception {
        return retrieveWorkAddress(workAddressUuid, Optional.empty());
    }
    
    /**
     * Get an employee work address
     * The work address of an employee is used for payroll tax purposes.
     * 
     * scope: `employees:read`
     * @param workAddressUuid The UUID of the work address
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetV1WorkAddressesWorkAddressUuidResponse retrieveWorkAddress(
            String workAddressUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetV1WorkAddressesWorkAddressUuidRequest request =
            GetV1WorkAddressesWorkAddressUuidRequest
                .builder()
                .workAddressUuid(workAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetV1WorkAddressesWorkAddressUuidRequest.class,
                _baseUrl,
                "/v1/work_addresses/{work_address_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-v1-work_addresses-work_address_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetV1WorkAddressesWorkAddressUuidResponse.Builder _resBuilder = 
            GetV1WorkAddressesWorkAddressUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetV1WorkAddressesWorkAddressUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeWorkAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeWorkAddress>() {});
                _res.withEmployeeWorkAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update an employee work address
     * The work address of an employee is used for payroll tax purposes.
     * 
     * scope: `employees:manage`
     * @return The call builder
     */
    public PutV1WorkAddressesWorkAddressUuidRequestBuilder updateWorkAddress() {
        return new PutV1WorkAddressesWorkAddressUuidRequestBuilder(this);
    }

    /**
     * Update an employee work address
     * The work address of an employee is used for payroll tax purposes.
     * 
     * scope: `employees:manage`
     * @param workAddressUuid The UUID of the work address
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1WorkAddressesWorkAddressUuidResponse updateWorkAddress(
            String workAddressUuid,
            PutV1WorkAddressesWorkAddressUuidRequestBody requestBody) throws Exception {
        return updateWorkAddress(workAddressUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update an employee work address
     * The work address of an employee is used for payroll tax purposes.
     * 
     * scope: `employees:manage`
     * @param workAddressUuid The UUID of the work address
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1WorkAddressesWorkAddressUuidResponse updateWorkAddress(
            String workAddressUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1WorkAddressesWorkAddressUuidRequestBody requestBody) throws Exception {
        PutV1WorkAddressesWorkAddressUuidRequest request =
            PutV1WorkAddressesWorkAddressUuidRequest
                .builder()
                .workAddressUuid(workAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1WorkAddressesWorkAddressUuidRequest.class,
                _baseUrl,
                "/v1/work_addresses/{work_address_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-work_addresses-work_address_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1WorkAddressesWorkAddressUuidResponse.Builder _resBuilder = 
            PutV1WorkAddressesWorkAddressUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1WorkAddressesWorkAddressUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                EmployeeWorkAddress _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<EmployeeWorkAddress>() {});
                _res.withEmployeeWorkAddress(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Delete an employee's work address
     * Used for deleting an employee's work address.  Cannot delete the employee's active work address.
     * 
     * scope: `employees:manage`
     * @return The call builder
     */
    public DeleteV1WorkAddressesWorkAddressUuidRequestBuilder deleteWorkAddress() {
        return new DeleteV1WorkAddressesWorkAddressUuidRequestBuilder(this);
    }

    /**
     * Delete an employee's work address
     * Used for deleting an employee's work address.  Cannot delete the employee's active work address.
     * 
     * scope: `employees:manage`
     * @param workAddressUuid The UUID of the work address
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1WorkAddressesWorkAddressUuidResponse deleteWorkAddress(
            String workAddressUuid) throws Exception {
        return deleteWorkAddress(workAddressUuid, Optional.empty());
    }
    
    /**
     * Delete an employee's work address
     * Used for deleting an employee's work address.  Cannot delete the employee's active work address.
     * 
     * scope: `employees:manage`
     * @param workAddressUuid The UUID of the work address
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public DeleteV1WorkAddressesWorkAddressUuidResponse deleteWorkAddress(
            String workAddressUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        DeleteV1WorkAddressesWorkAddressUuidRequest request =
            DeleteV1WorkAddressesWorkAddressUuidRequest
                .builder()
                .workAddressUuid(workAddressUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                DeleteV1WorkAddressesWorkAddressUuidRequest.class,
                _baseUrl,
                "/v1/work_addresses/{work_address_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "DELETE");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "delete-v1-work_addresses-work_address_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "delete-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "delete-v1-work_addresses-work_address_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        DeleteV1WorkAddressesWorkAddressUuidResponse.Builder _resBuilder = 
            DeleteV1WorkAddressesWorkAddressUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        DeleteV1WorkAddressesWorkAddressUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "204")) {
            // no content 
            return _res;
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
