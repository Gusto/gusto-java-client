/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("bonus")
    private Optional<Long> bonus;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_uuid")
    private Optional<String> contractorUuid;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("date")
    private Optional<String> date;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_rate")
    private Optional<Long> hourlyRate;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hours")
    private Optional<Long> hours;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private Optional<String> paymentMethod;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement")
    private Optional<Long> reimbursement;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage")
    private Optional<Long> wage;

    @JsonCreator
    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments(
            @JsonProperty("bonus") Optional<Long> bonus,
            @JsonProperty("contractor_uuid") Optional<String> contractorUuid,
            @JsonProperty("date") Optional<String> date,
            @JsonProperty("hourly_rate") Optional<Long> hourlyRate,
            @JsonProperty("hours") Optional<Long> hours,
            @JsonProperty("payment_method") Optional<String> paymentMethod,
            @JsonProperty("reimbursement") Optional<Long> reimbursement,
            @JsonProperty("wage") Optional<Long> wage) {
        Utils.checkNotNull(bonus, "bonus");
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        Utils.checkNotNull(date, "date");
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        Utils.checkNotNull(hours, "hours");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(reimbursement, "reimbursement");
        Utils.checkNotNull(wage, "wage");
        this.bonus = bonus;
        this.contractorUuid = contractorUuid;
        this.date = date;
        this.hourlyRate = hourlyRate;
        this.hours = hours;
        this.paymentMethod = paymentMethod;
        this.reimbursement = reimbursement;
        this.wage = wage;
    }
    
    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<Long> bonus() {
        return bonus;
    }

    @JsonIgnore
    public Optional<String> contractorUuid() {
        return contractorUuid;
    }

    @JsonIgnore
    public Optional<String> date() {
        return date;
    }

    @JsonIgnore
    public Optional<Long> hourlyRate() {
        return hourlyRate;
    }

    @JsonIgnore
    public Optional<Long> hours() {
        return hours;
    }

    @JsonIgnore
    public Optional<String> paymentMethod() {
        return paymentMethod;
    }

    @JsonIgnore
    public Optional<Long> reimbursement() {
        return reimbursement;
    }

    @JsonIgnore
    public Optional<Long> wage() {
        return wage;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withBonus(long bonus) {
        Utils.checkNotNull(bonus, "bonus");
        this.bonus = Optional.ofNullable(bonus);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withBonus(Optional<Long> bonus) {
        Utils.checkNotNull(bonus, "bonus");
        this.bonus = bonus;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withContractorUuid(String contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = Optional.ofNullable(contractorUuid);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withContractorUuid(Optional<String> contractorUuid) {
        Utils.checkNotNull(contractorUuid, "contractorUuid");
        this.contractorUuid = contractorUuid;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withDate(String date) {
        Utils.checkNotNull(date, "date");
        this.date = Optional.ofNullable(date);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withDate(Optional<String> date) {
        Utils.checkNotNull(date, "date");
        this.date = date;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withHourlyRate(long hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = Optional.ofNullable(hourlyRate);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withHourlyRate(Optional<Long> hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = hourlyRate;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withHours(long hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = Optional.ofNullable(hours);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withHours(Optional<Long> hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = hours;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = Optional.ofNullable(paymentMethod);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withPaymentMethod(Optional<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withReimbursement(long reimbursement) {
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.reimbursement = Optional.ofNullable(reimbursement);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withReimbursement(Optional<Long> reimbursement) {
        Utils.checkNotNull(reimbursement, "reimbursement");
        this.reimbursement = reimbursement;
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withWage(long wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = Optional.ofNullable(wage);
        return this;
    }

    public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments withWage(Optional<Long> wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = wage;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments other = (GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments) o;
        return 
            Objects.deepEquals(this.bonus, other.bonus) &&
            Objects.deepEquals(this.contractorUuid, other.contractorUuid) &&
            Objects.deepEquals(this.date, other.date) &&
            Objects.deepEquals(this.hourlyRate, other.hourlyRate) &&
            Objects.deepEquals(this.hours, other.hours) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.reimbursement, other.reimbursement) &&
            Objects.deepEquals(this.wage, other.wage);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            bonus,
            contractorUuid,
            date,
            hourlyRate,
            hours,
            paymentMethod,
            reimbursement,
            wage);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments.class,
                "bonus", bonus,
                "contractorUuid", contractorUuid,
                "date", date,
                "hourlyRate", hourlyRate,
                "hours", hours,
                "paymentMethod", paymentMethod,
                "reimbursement", reimbursement,
                "wage", wage);
    }
    
    public final static class Builder {
 
        private Optional<Long> bonus = Optional.empty();
 
        private Optional<String> contractorUuid = Optional.empty();
 
        private Optional<String> date = Optional.empty();
 
        private Optional<Long> hourlyRate = Optional.empty();
 
        private Optional<Long> hours = Optional.empty();
 
        private Optional<String> paymentMethod = Optional.empty();
 
        private Optional<Long> reimbursement = Optional.empty();
 
        private Optional<Long> wage = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder bonus(long bonus) {
            Utils.checkNotNull(bonus, "bonus");
            this.bonus = Optional.ofNullable(bonus);
            return this;
        }

        public Builder bonus(Optional<Long> bonus) {
            Utils.checkNotNull(bonus, "bonus");
            this.bonus = bonus;
            return this;
        }

        public Builder contractorUuid(String contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = Optional.ofNullable(contractorUuid);
            return this;
        }

        public Builder contractorUuid(Optional<String> contractorUuid) {
            Utils.checkNotNull(contractorUuid, "contractorUuid");
            this.contractorUuid = contractorUuid;
            return this;
        }

        public Builder date(String date) {
            Utils.checkNotNull(date, "date");
            this.date = Optional.ofNullable(date);
            return this;
        }

        public Builder date(Optional<String> date) {
            Utils.checkNotNull(date, "date");
            this.date = date;
            return this;
        }

        public Builder hourlyRate(long hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = Optional.ofNullable(hourlyRate);
            return this;
        }

        public Builder hourlyRate(Optional<Long> hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = hourlyRate;
            return this;
        }

        public Builder hours(long hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        public Builder hours(Optional<Long> hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = hours;
            return this;
        }

        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        public Builder paymentMethod(Optional<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        public Builder reimbursement(long reimbursement) {
            Utils.checkNotNull(reimbursement, "reimbursement");
            this.reimbursement = Optional.ofNullable(reimbursement);
            return this;
        }

        public Builder reimbursement(Optional<Long> reimbursement) {
            Utils.checkNotNull(reimbursement, "reimbursement");
            this.reimbursement = reimbursement;
            return this;
        }

        public Builder wage(long wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = Optional.ofNullable(wage);
            return this;
        }

        public Builder wage(Optional<Long> wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = wage;
            return this;
        }
        
        public GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments build() {
            return new GetCompaniesCompanyUuidContractorPaymentsPreviewContractorPayments(
                bonus,
                contractorUuid,
                date,
                hourlyRate,
                hours,
                paymentMethod,
                reimbursement,
                wage);
        }
    }
}

