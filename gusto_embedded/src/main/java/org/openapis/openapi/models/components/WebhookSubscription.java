/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * WebhookSubscription - The representation of webhook subscription.
 */

public class WebhookSubscription {

    /**
     * The UUID of the webhook subscription.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The webhook subscriber URL. Updates will be POSTed to this URL.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("url")
    private Optional<String> url;

    /**
     * The status of the webhook subscription.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends WebhookSubscriptionStatus> status;

    /**
     * Receive updates for these types.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("subscription_types")
    private Optional<? extends List<SubscriptionTypes>> subscriptionTypes;

    @JsonCreator
    public WebhookSubscription(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("url") Optional<String> url,
            @JsonProperty("status") Optional<? extends WebhookSubscriptionStatus> status,
            @JsonProperty("subscription_types") Optional<? extends List<SubscriptionTypes>> subscriptionTypes) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(url, "url");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
        this.uuid = uuid;
        this.url = url;
        this.status = status;
        this.subscriptionTypes = subscriptionTypes;
    }
    
    public WebhookSubscription(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the webhook subscription.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The webhook subscriber URL. Updates will be POSTed to this URL.
     */
    @JsonIgnore
    public Optional<String> url() {
        return url;
    }

    /**
     * The status of the webhook subscription.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WebhookSubscriptionStatus> status() {
        return (Optional<WebhookSubscriptionStatus>) status;
    }

    /**
     * Receive updates for these types.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<SubscriptionTypes>> subscriptionTypes() {
        return (Optional<List<SubscriptionTypes>>) subscriptionTypes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the webhook subscription.
     */
    public WebhookSubscription withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The webhook subscriber URL. Updates will be POSTed to this URL.
     */
    public WebhookSubscription withUrl(String url) {
        Utils.checkNotNull(url, "url");
        this.url = Optional.ofNullable(url);
        return this;
    }

    /**
     * The webhook subscriber URL. Updates will be POSTed to this URL.
     */
    public WebhookSubscription withUrl(Optional<String> url) {
        Utils.checkNotNull(url, "url");
        this.url = url;
        return this;
    }

    /**
     * The status of the webhook subscription.
     */
    public WebhookSubscription withStatus(WebhookSubscriptionStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the webhook subscription.
     */
    public WebhookSubscription withStatus(Optional<? extends WebhookSubscriptionStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Receive updates for these types.
     */
    public WebhookSubscription withSubscriptionTypes(List<SubscriptionTypes> subscriptionTypes) {
        Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
        this.subscriptionTypes = Optional.ofNullable(subscriptionTypes);
        return this;
    }

    /**
     * Receive updates for these types.
     */
    public WebhookSubscription withSubscriptionTypes(Optional<? extends List<SubscriptionTypes>> subscriptionTypes) {
        Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
        this.subscriptionTypes = subscriptionTypes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        WebhookSubscription other = (WebhookSubscription) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.url, other.url) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.subscriptionTypes, other.subscriptionTypes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            url,
            status,
            subscriptionTypes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(WebhookSubscription.class,
                "uuid", uuid,
                "url", url,
                "status", status,
                "subscriptionTypes", subscriptionTypes);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> url = Optional.empty();
 
        private Optional<? extends WebhookSubscriptionStatus> status = Optional.empty();
 
        private Optional<? extends List<SubscriptionTypes>> subscriptionTypes = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the webhook subscription.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The webhook subscriber URL. Updates will be POSTed to this URL.
         */
        public Builder url(String url) {
            Utils.checkNotNull(url, "url");
            this.url = Optional.ofNullable(url);
            return this;
        }

        /**
         * The webhook subscriber URL. Updates will be POSTed to this URL.
         */
        public Builder url(Optional<String> url) {
            Utils.checkNotNull(url, "url");
            this.url = url;
            return this;
        }

        /**
         * The status of the webhook subscription.
         */
        public Builder status(WebhookSubscriptionStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the webhook subscription.
         */
        public Builder status(Optional<? extends WebhookSubscriptionStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Receive updates for these types.
         */
        public Builder subscriptionTypes(List<SubscriptionTypes> subscriptionTypes) {
            Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
            this.subscriptionTypes = Optional.ofNullable(subscriptionTypes);
            return this;
        }

        /**
         * Receive updates for these types.
         */
        public Builder subscriptionTypes(Optional<? extends List<SubscriptionTypes>> subscriptionTypes) {
            Utils.checkNotNull(subscriptionTypes, "subscriptionTypes");
            this.subscriptionTypes = subscriptionTypes;
            return this;
        }
        
        public WebhookSubscription build() {
            return new WebhookSubscription(
                uuid,
                url,
                status,
                subscriptionTypes);
        }
    }
}

