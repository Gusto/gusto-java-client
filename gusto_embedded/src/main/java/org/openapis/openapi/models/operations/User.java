/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * User - Information for the user who will be the primary payroll administrator for the new company.
 */

public class User {

    /**
     * The first name of the user who will be the primary payroll admin.
     */
    @JsonProperty("first_name")
    private String firstName;

    /**
     * The last name of the user who will be the primary payroll admin.
     */
    @JsonProperty("last_name")
    private String lastName;

    /**
     * The email of the user who will be the primary payroll admin.
     */
    @JsonProperty("email")
    private String email;

    /**
     * The phone number of the user who will be the primary payroll admin.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("phone")
    private Optional<String> phone;

    @JsonCreator
    public User(
            @JsonProperty("first_name") String firstName,
            @JsonProperty("last_name") String lastName,
            @JsonProperty("email") String email,
            @JsonProperty("phone") Optional<String> phone) {
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(phone, "phone");
        this.firstName = firstName;
        this.lastName = lastName;
        this.email = email;
        this.phone = phone;
    }
    
    public User(
            String firstName,
            String lastName,
            String email) {
        this(firstName, lastName, email, Optional.empty());
    }

    /**
     * The first name of the user who will be the primary payroll admin.
     */
    @JsonIgnore
    public String firstName() {
        return firstName;
    }

    /**
     * The last name of the user who will be the primary payroll admin.
     */
    @JsonIgnore
    public String lastName() {
        return lastName;
    }

    /**
     * The email of the user who will be the primary payroll admin.
     */
    @JsonIgnore
    public String email() {
        return email;
    }

    /**
     * The phone number of the user who will be the primary payroll admin.
     */
    @JsonIgnore
    public Optional<String> phone() {
        return phone;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The first name of the user who will be the primary payroll admin.
     */
    public User withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The last name of the user who will be the primary payroll admin.
     */
    public User withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The email of the user who will be the primary payroll admin.
     */
    public User withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The phone number of the user who will be the primary payroll admin.
     */
    public User withPhone(String phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = Optional.ofNullable(phone);
        return this;
    }

    /**
     * The phone number of the user who will be the primary payroll admin.
     */
    public User withPhone(Optional<String> phone) {
        Utils.checkNotNull(phone, "phone");
        this.phone = phone;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        User other = (User) o;
        return 
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.phone, other.phone);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            firstName,
            lastName,
            email,
            phone);
    }
    
    @Override
    public String toString() {
        return Utils.toString(User.class,
                "firstName", firstName,
                "lastName", lastName,
                "email", email,
                "phone", phone);
    }
    
    public final static class Builder {
 
        private String firstName;
 
        private String lastName;
 
        private String email;
 
        private Optional<String> phone = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The first name of the user who will be the primary payroll admin.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The last name of the user who will be the primary payroll admin.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The email of the user who will be the primary payroll admin.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The phone number of the user who will be the primary payroll admin.
         */
        public Builder phone(String phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = Optional.ofNullable(phone);
            return this;
        }

        /**
         * The phone number of the user who will be the primary payroll admin.
         */
        public Builder phone(Optional<String> phone) {
            Utils.checkNotNull(phone, "phone");
            this.phone = phone;
            return this;
        }
        
        public User build() {
            return new User(
                firstName,
                lastName,
                email,
                phone);
        }
    }
}

