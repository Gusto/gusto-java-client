/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class BenefitSummaryEmployees {

    /**
     * The UUID of the employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("uuid")
    private Optional<String> uuid;

    /**
     * The sum of employee deduction for this employee given the period of time and the specific company benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_deduction")
    private Optional<String> companyBenefitDeduction;

    /**
     * The sum of company contribution for this employee given the period of time and the specific company benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_contribution")
    private Optional<String> companyBenefitContribution;

    /**
     * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefit_deduction")
    private Optional<String> benefitDeduction;

    /**
     * The sum of company contribution for this employee given the period of time and the benefit type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefit_contribution")
    private Optional<String> benefitContribution;

    /**
     * Gross pay for this employee given the period of time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("gross_pay")
    private Optional<String> grossPay;

    /**
     * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imputed_pay")
    private Optional<String> imputedPay;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_benefits")
    private Optional<? extends PayrollBenefits> payrollBenefits;

    @JsonCreator
    public BenefitSummaryEmployees(
            @JsonProperty("uuid") Optional<String> uuid,
            @JsonProperty("company_benefit_deduction") Optional<String> companyBenefitDeduction,
            @JsonProperty("company_benefit_contribution") Optional<String> companyBenefitContribution,
            @JsonProperty("benefit_deduction") Optional<String> benefitDeduction,
            @JsonProperty("benefit_contribution") Optional<String> benefitContribution,
            @JsonProperty("gross_pay") Optional<String> grossPay,
            @JsonProperty("imputed_pay") Optional<String> imputedPay,
            @JsonProperty("payroll_benefits") Optional<? extends PayrollBenefits> payrollBenefits) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        Utils.checkNotNull(benefitDeduction, "benefitDeduction");
        Utils.checkNotNull(benefitContribution, "benefitContribution");
        Utils.checkNotNull(grossPay, "grossPay");
        Utils.checkNotNull(imputedPay, "imputedPay");
        Utils.checkNotNull(payrollBenefits, "payrollBenefits");
        this.uuid = uuid;
        this.companyBenefitDeduction = companyBenefitDeduction;
        this.companyBenefitContribution = companyBenefitContribution;
        this.benefitDeduction = benefitDeduction;
        this.benefitContribution = benefitContribution;
        this.grossPay = grossPay;
        this.imputedPay = imputedPay;
        this.payrollBenefits = payrollBenefits;
    }
    
    public BenefitSummaryEmployees() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the employee
     */
    @JsonIgnore
    public Optional<String> uuid() {
        return uuid;
    }

    /**
     * The sum of employee deduction for this employee given the period of time and the specific company benefit.
     */
    @JsonIgnore
    public Optional<String> companyBenefitDeduction() {
        return companyBenefitDeduction;
    }

    /**
     * The sum of company contribution for this employee given the period of time and the specific company benefit.
     */
    @JsonIgnore
    public Optional<String> companyBenefitContribution() {
        return companyBenefitContribution;
    }

    /**
     * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
     */
    @JsonIgnore
    public Optional<String> benefitDeduction() {
        return benefitDeduction;
    }

    /**
     * The sum of company contribution for this employee given the period of time and the benefit type.
     */
    @JsonIgnore
    public Optional<String> benefitContribution() {
        return benefitContribution;
    }

    /**
     * Gross pay for this employee given the period of time.
     */
    @JsonIgnore
    public Optional<String> grossPay() {
        return grossPay;
    }

    /**
     * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
     */
    @JsonIgnore
    public Optional<String> imputedPay() {
        return imputedPay;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayrollBenefits> payrollBenefits() {
        return (Optional<PayrollBenefits>) payrollBenefits;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the employee
     */
    public BenefitSummaryEmployees withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = Optional.ofNullable(uuid);
        return this;
    }

    /**
     * The UUID of the employee
     */
    public BenefitSummaryEmployees withUuid(Optional<String> uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The sum of employee deduction for this employee given the period of time and the specific company benefit.
     */
    public BenefitSummaryEmployees withCompanyBenefitDeduction(String companyBenefitDeduction) {
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        this.companyBenefitDeduction = Optional.ofNullable(companyBenefitDeduction);
        return this;
    }

    /**
     * The sum of employee deduction for this employee given the period of time and the specific company benefit.
     */
    public BenefitSummaryEmployees withCompanyBenefitDeduction(Optional<String> companyBenefitDeduction) {
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        this.companyBenefitDeduction = companyBenefitDeduction;
        return this;
    }

    /**
     * The sum of company contribution for this employee given the period of time and the specific company benefit.
     */
    public BenefitSummaryEmployees withCompanyBenefitContribution(String companyBenefitContribution) {
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        this.companyBenefitContribution = Optional.ofNullable(companyBenefitContribution);
        return this;
    }

    /**
     * The sum of company contribution for this employee given the period of time and the specific company benefit.
     */
    public BenefitSummaryEmployees withCompanyBenefitContribution(Optional<String> companyBenefitContribution) {
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        this.companyBenefitContribution = companyBenefitContribution;
        return this;
    }

    /**
     * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
     */
    public BenefitSummaryEmployees withBenefitDeduction(String benefitDeduction) {
        Utils.checkNotNull(benefitDeduction, "benefitDeduction");
        this.benefitDeduction = Optional.ofNullable(benefitDeduction);
        return this;
    }

    /**
     * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
     */
    public BenefitSummaryEmployees withBenefitDeduction(Optional<String> benefitDeduction) {
        Utils.checkNotNull(benefitDeduction, "benefitDeduction");
        this.benefitDeduction = benefitDeduction;
        return this;
    }

    /**
     * The sum of company contribution for this employee given the period of time and the benefit type.
     */
    public BenefitSummaryEmployees withBenefitContribution(String benefitContribution) {
        Utils.checkNotNull(benefitContribution, "benefitContribution");
        this.benefitContribution = Optional.ofNullable(benefitContribution);
        return this;
    }

    /**
     * The sum of company contribution for this employee given the period of time and the benefit type.
     */
    public BenefitSummaryEmployees withBenefitContribution(Optional<String> benefitContribution) {
        Utils.checkNotNull(benefitContribution, "benefitContribution");
        this.benefitContribution = benefitContribution;
        return this;
    }

    /**
     * Gross pay for this employee given the period of time.
     */
    public BenefitSummaryEmployees withGrossPay(String grossPay) {
        Utils.checkNotNull(grossPay, "grossPay");
        this.grossPay = Optional.ofNullable(grossPay);
        return this;
    }

    /**
     * Gross pay for this employee given the period of time.
     */
    public BenefitSummaryEmployees withGrossPay(Optional<String> grossPay) {
        Utils.checkNotNull(grossPay, "grossPay");
        this.grossPay = grossPay;
        return this;
    }

    /**
     * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
     */
    public BenefitSummaryEmployees withImputedPay(String imputedPay) {
        Utils.checkNotNull(imputedPay, "imputedPay");
        this.imputedPay = Optional.ofNullable(imputedPay);
        return this;
    }

    /**
     * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
     */
    public BenefitSummaryEmployees withImputedPay(Optional<String> imputedPay) {
        Utils.checkNotNull(imputedPay, "imputedPay");
        this.imputedPay = imputedPay;
        return this;
    }

    public BenefitSummaryEmployees withPayrollBenefits(PayrollBenefits payrollBenefits) {
        Utils.checkNotNull(payrollBenefits, "payrollBenefits");
        this.payrollBenefits = Optional.ofNullable(payrollBenefits);
        return this;
    }

    public BenefitSummaryEmployees withPayrollBenefits(Optional<? extends PayrollBenefits> payrollBenefits) {
        Utils.checkNotNull(payrollBenefits, "payrollBenefits");
        this.payrollBenefits = payrollBenefits;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BenefitSummaryEmployees other = (BenefitSummaryEmployees) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyBenefitDeduction, other.companyBenefitDeduction) &&
            Objects.deepEquals(this.companyBenefitContribution, other.companyBenefitContribution) &&
            Objects.deepEquals(this.benefitDeduction, other.benefitDeduction) &&
            Objects.deepEquals(this.benefitContribution, other.benefitContribution) &&
            Objects.deepEquals(this.grossPay, other.grossPay) &&
            Objects.deepEquals(this.imputedPay, other.imputedPay) &&
            Objects.deepEquals(this.payrollBenefits, other.payrollBenefits);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyBenefitDeduction,
            companyBenefitContribution,
            benefitDeduction,
            benefitContribution,
            grossPay,
            imputedPay,
            payrollBenefits);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BenefitSummaryEmployees.class,
                "uuid", uuid,
                "companyBenefitDeduction", companyBenefitDeduction,
                "companyBenefitContribution", companyBenefitContribution,
                "benefitDeduction", benefitDeduction,
                "benefitContribution", benefitContribution,
                "grossPay", grossPay,
                "imputedPay", imputedPay,
                "payrollBenefits", payrollBenefits);
    }
    
    public final static class Builder {
 
        private Optional<String> uuid = Optional.empty();
 
        private Optional<String> companyBenefitDeduction = Optional.empty();
 
        private Optional<String> companyBenefitContribution = Optional.empty();
 
        private Optional<String> benefitDeduction = Optional.empty();
 
        private Optional<String> benefitContribution = Optional.empty();
 
        private Optional<String> grossPay = Optional.empty();
 
        private Optional<String> imputedPay = Optional.empty();
 
        private Optional<? extends PayrollBenefits> payrollBenefits = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the employee
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = Optional.ofNullable(uuid);
            return this;
        }

        /**
         * The UUID of the employee
         */
        public Builder uuid(Optional<String> uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The sum of employee deduction for this employee given the period of time and the specific company benefit.
         */
        public Builder companyBenefitDeduction(String companyBenefitDeduction) {
            Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
            this.companyBenefitDeduction = Optional.ofNullable(companyBenefitDeduction);
            return this;
        }

        /**
         * The sum of employee deduction for this employee given the period of time and the specific company benefit.
         */
        public Builder companyBenefitDeduction(Optional<String> companyBenefitDeduction) {
            Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
            this.companyBenefitDeduction = companyBenefitDeduction;
            return this;
        }

        /**
         * The sum of company contribution for this employee given the period of time and the specific company benefit.
         */
        public Builder companyBenefitContribution(String companyBenefitContribution) {
            Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
            this.companyBenefitContribution = Optional.ofNullable(companyBenefitContribution);
            return this;
        }

        /**
         * The sum of company contribution for this employee given the period of time and the specific company benefit.
         */
        public Builder companyBenefitContribution(Optional<String> companyBenefitContribution) {
            Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
            this.companyBenefitContribution = companyBenefitContribution;
            return this;
        }

        /**
         * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
         */
        public Builder benefitDeduction(String benefitDeduction) {
            Utils.checkNotNull(benefitDeduction, "benefitDeduction");
            this.benefitDeduction = Optional.ofNullable(benefitDeduction);
            return this;
        }

        /**
         * The sum of employee benefit deduction for this employee given the period of time and the benefit type.
         */
        public Builder benefitDeduction(Optional<String> benefitDeduction) {
            Utils.checkNotNull(benefitDeduction, "benefitDeduction");
            this.benefitDeduction = benefitDeduction;
            return this;
        }

        /**
         * The sum of company contribution for this employee given the period of time and the benefit type.
         */
        public Builder benefitContribution(String benefitContribution) {
            Utils.checkNotNull(benefitContribution, "benefitContribution");
            this.benefitContribution = Optional.ofNullable(benefitContribution);
            return this;
        }

        /**
         * The sum of company contribution for this employee given the period of time and the benefit type.
         */
        public Builder benefitContribution(Optional<String> benefitContribution) {
            Utils.checkNotNull(benefitContribution, "benefitContribution");
            this.benefitContribution = benefitContribution;
            return this;
        }

        /**
         * Gross pay for this employee given the period of time.
         */
        public Builder grossPay(String grossPay) {
            Utils.checkNotNull(grossPay, "grossPay");
            this.grossPay = Optional.ofNullable(grossPay);
            return this;
        }

        /**
         * Gross pay for this employee given the period of time.
         */
        public Builder grossPay(Optional<String> grossPay) {
            Utils.checkNotNull(grossPay, "grossPay");
            this.grossPay = grossPay;
            return this;
        }

        /**
         * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
         */
        public Builder imputedPay(String imputedPay) {
            Utils.checkNotNull(imputedPay, "imputedPay");
            this.imputedPay = Optional.ofNullable(imputedPay);
            return this;
        }

        /**
         * Total imputed pay for this employee given the period of time (not scoped to a benefit type).
         */
        public Builder imputedPay(Optional<String> imputedPay) {
            Utils.checkNotNull(imputedPay, "imputedPay");
            this.imputedPay = imputedPay;
            return this;
        }

        public Builder payrollBenefits(PayrollBenefits payrollBenefits) {
            Utils.checkNotNull(payrollBenefits, "payrollBenefits");
            this.payrollBenefits = Optional.ofNullable(payrollBenefits);
            return this;
        }

        public Builder payrollBenefits(Optional<? extends PayrollBenefits> payrollBenefits) {
            Utils.checkNotNull(payrollBenefits, "payrollBenefits");
            this.payrollBenefits = payrollBenefits;
            return this;
        }
        
        public BenefitSummaryEmployees build() {
            return new BenefitSummaryEmployees(
                uuid,
                companyBenefitDeduction,
                companyBenefitContribution,
                benefitDeduction,
                benefitContribution,
                grossPay,
                imputedPay,
                payrollBenefits);
        }
    }
}

