/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * PostV1PartnerManagedCompaniesResponseBody - Object returned when creating a partner managed company
 */

public class PostV1PartnerManagedCompaniesResponseBody {

    /**
     * Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("access_token")
    private Optional<String> accessToken;

    /**
     * Refresh token that can be exchanged for a new access token.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("refresh_token")
    private Optional<String> refreshToken;

    /**
     * Gusto’s UUID for the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * Time of access_token expiration in seconds
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("expires_in")
    private Optional<Long> expiresIn;

    @JsonCreator
    public PostV1PartnerManagedCompaniesResponseBody(
            @JsonProperty("access_token") Optional<String> accessToken,
            @JsonProperty("refresh_token") Optional<String> refreshToken,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("expires_in") Optional<Long> expiresIn) {
        Utils.checkNotNull(accessToken, "accessToken");
        Utils.checkNotNull(refreshToken, "refreshToken");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.accessToken = accessToken;
        this.refreshToken = refreshToken;
        this.companyUuid = companyUuid;
        this.expiresIn = expiresIn;
    }
    
    public PostV1PartnerManagedCompaniesResponseBody() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
     */
    @JsonIgnore
    public Optional<String> accessToken() {
        return accessToken;
    }

    /**
     * Refresh token that can be exchanged for a new access token.
     */
    @JsonIgnore
    public Optional<String> refreshToken() {
        return refreshToken;
    }

    /**
     * Gusto’s UUID for the company
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * Time of access_token expiration in seconds
     */
    @JsonIgnore
    public Optional<Long> expiresIn() {
        return expiresIn;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
     */
    public PostV1PartnerManagedCompaniesResponseBody withAccessToken(String accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = Optional.ofNullable(accessToken);
        return this;
    }

    /**
     * Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
     */
    public PostV1PartnerManagedCompaniesResponseBody withAccessToken(Optional<String> accessToken) {
        Utils.checkNotNull(accessToken, "accessToken");
        this.accessToken = accessToken;
        return this;
    }

    /**
     * Refresh token that can be exchanged for a new access token.
     */
    public PostV1PartnerManagedCompaniesResponseBody withRefreshToken(String refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = Optional.ofNullable(refreshToken);
        return this;
    }

    /**
     * Refresh token that can be exchanged for a new access token.
     */
    public PostV1PartnerManagedCompaniesResponseBody withRefreshToken(Optional<String> refreshToken) {
        Utils.checkNotNull(refreshToken, "refreshToken");
        this.refreshToken = refreshToken;
        return this;
    }

    /**
     * Gusto’s UUID for the company
     */
    public PostV1PartnerManagedCompaniesResponseBody withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * Gusto’s UUID for the company
     */
    public PostV1PartnerManagedCompaniesResponseBody withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * Time of access_token expiration in seconds
     */
    public PostV1PartnerManagedCompaniesResponseBody withExpiresIn(long expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = Optional.ofNullable(expiresIn);
        return this;
    }

    /**
     * Time of access_token expiration in seconds
     */
    public PostV1PartnerManagedCompaniesResponseBody withExpiresIn(Optional<Long> expiresIn) {
        Utils.checkNotNull(expiresIn, "expiresIn");
        this.expiresIn = expiresIn;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1PartnerManagedCompaniesResponseBody other = (PostV1PartnerManagedCompaniesResponseBody) o;
        return 
            Objects.deepEquals(this.accessToken, other.accessToken) &&
            Objects.deepEquals(this.refreshToken, other.refreshToken) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.expiresIn, other.expiresIn);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            accessToken,
            refreshToken,
            companyUuid,
            expiresIn);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1PartnerManagedCompaniesResponseBody.class,
                "accessToken", accessToken,
                "refreshToken", refreshToken,
                "companyUuid", companyUuid,
                "expiresIn", expiresIn);
    }
    
    public final static class Builder {
 
        private Optional<String> accessToken = Optional.empty();
 
        private Optional<String> refreshToken = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<Long> expiresIn = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
         */
        public Builder accessToken(String accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = Optional.ofNullable(accessToken);
            return this;
        }

        /**
         * Access token that can be used for OAuth access to the account. Access tokens expire 2 hours after they are issued.
         */
        public Builder accessToken(Optional<String> accessToken) {
            Utils.checkNotNull(accessToken, "accessToken");
            this.accessToken = accessToken;
            return this;
        }

        /**
         * Refresh token that can be exchanged for a new access token.
         */
        public Builder refreshToken(String refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = Optional.ofNullable(refreshToken);
            return this;
        }

        /**
         * Refresh token that can be exchanged for a new access token.
         */
        public Builder refreshToken(Optional<String> refreshToken) {
            Utils.checkNotNull(refreshToken, "refreshToken");
            this.refreshToken = refreshToken;
            return this;
        }

        /**
         * Gusto’s UUID for the company
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * Gusto’s UUID for the company
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * Time of access_token expiration in seconds
         */
        public Builder expiresIn(long expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = Optional.ofNullable(expiresIn);
            return this;
        }

        /**
         * Time of access_token expiration in seconds
         */
        public Builder expiresIn(Optional<Long> expiresIn) {
            Utils.checkNotNull(expiresIn, "expiresIn");
            this.expiresIn = expiresIn;
            return this;
        }
        
        public PostV1PartnerManagedCompaniesResponseBody build() {
            return new PostV1PartnerManagedCompaniesResponseBody(
                accessToken,
                refreshToken,
                companyUuid,
                expiresIn);
        }
    }
}

