/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * Totals - The subtotals for the payroll.
 */

public class Totals {

    /**
     * The total company debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_debit")
    private Optional<String> companyDebit;

    /**
     * The total company net pay for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_pay_debit")
    private Optional<String> netPayDebit;

    /**
     * The total child support debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_support_debit")
    private Optional<String> childSupportDebit;

    /**
     * The total reimbursements for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement_debit")
    private Optional<String> reimbursementDebit;

    /**
     * The total tax debit for the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tax_debit")
    private Optional<String> taxDebit;

    @JsonCreator
    public Totals(
            @JsonProperty("company_debit") Optional<String> companyDebit,
            @JsonProperty("net_pay_debit") Optional<String> netPayDebit,
            @JsonProperty("child_support_debit") Optional<String> childSupportDebit,
            @JsonProperty("reimbursement_debit") Optional<String> reimbursementDebit,
            @JsonProperty("tax_debit") Optional<String> taxDebit) {
        Utils.checkNotNull(companyDebit, "companyDebit");
        Utils.checkNotNull(netPayDebit, "netPayDebit");
        Utils.checkNotNull(childSupportDebit, "childSupportDebit");
        Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
        Utils.checkNotNull(taxDebit, "taxDebit");
        this.companyDebit = companyDebit;
        this.netPayDebit = netPayDebit;
        this.childSupportDebit = childSupportDebit;
        this.reimbursementDebit = reimbursementDebit;
        this.taxDebit = taxDebit;
    }
    
    public Totals() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The total company debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> companyDebit() {
        return companyDebit;
    }

    /**
     * The total company net pay for the payroll.
     */
    @JsonIgnore
    public Optional<String> netPayDebit() {
        return netPayDebit;
    }

    /**
     * The total child support debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> childSupportDebit() {
        return childSupportDebit;
    }

    /**
     * The total reimbursements for the payroll.
     */
    @JsonIgnore
    public Optional<String> reimbursementDebit() {
        return reimbursementDebit;
    }

    /**
     * The total tax debit for the payroll.
     */
    @JsonIgnore
    public Optional<String> taxDebit() {
        return taxDebit;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The total company debit for the payroll.
     */
    public Totals withCompanyDebit(String companyDebit) {
        Utils.checkNotNull(companyDebit, "companyDebit");
        this.companyDebit = Optional.ofNullable(companyDebit);
        return this;
    }

    /**
     * The total company debit for the payroll.
     */
    public Totals withCompanyDebit(Optional<String> companyDebit) {
        Utils.checkNotNull(companyDebit, "companyDebit");
        this.companyDebit = companyDebit;
        return this;
    }

    /**
     * The total company net pay for the payroll.
     */
    public Totals withNetPayDebit(String netPayDebit) {
        Utils.checkNotNull(netPayDebit, "netPayDebit");
        this.netPayDebit = Optional.ofNullable(netPayDebit);
        return this;
    }

    /**
     * The total company net pay for the payroll.
     */
    public Totals withNetPayDebit(Optional<String> netPayDebit) {
        Utils.checkNotNull(netPayDebit, "netPayDebit");
        this.netPayDebit = netPayDebit;
        return this;
    }

    /**
     * The total child support debit for the payroll.
     */
    public Totals withChildSupportDebit(String childSupportDebit) {
        Utils.checkNotNull(childSupportDebit, "childSupportDebit");
        this.childSupportDebit = Optional.ofNullable(childSupportDebit);
        return this;
    }

    /**
     * The total child support debit for the payroll.
     */
    public Totals withChildSupportDebit(Optional<String> childSupportDebit) {
        Utils.checkNotNull(childSupportDebit, "childSupportDebit");
        this.childSupportDebit = childSupportDebit;
        return this;
    }

    /**
     * The total reimbursements for the payroll.
     */
    public Totals withReimbursementDebit(String reimbursementDebit) {
        Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
        this.reimbursementDebit = Optional.ofNullable(reimbursementDebit);
        return this;
    }

    /**
     * The total reimbursements for the payroll.
     */
    public Totals withReimbursementDebit(Optional<String> reimbursementDebit) {
        Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
        this.reimbursementDebit = reimbursementDebit;
        return this;
    }

    /**
     * The total tax debit for the payroll.
     */
    public Totals withTaxDebit(String taxDebit) {
        Utils.checkNotNull(taxDebit, "taxDebit");
        this.taxDebit = Optional.ofNullable(taxDebit);
        return this;
    }

    /**
     * The total tax debit for the payroll.
     */
    public Totals withTaxDebit(Optional<String> taxDebit) {
        Utils.checkNotNull(taxDebit, "taxDebit");
        this.taxDebit = taxDebit;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Totals other = (Totals) o;
        return 
            Objects.deepEquals(this.companyDebit, other.companyDebit) &&
            Objects.deepEquals(this.netPayDebit, other.netPayDebit) &&
            Objects.deepEquals(this.childSupportDebit, other.childSupportDebit) &&
            Objects.deepEquals(this.reimbursementDebit, other.reimbursementDebit) &&
            Objects.deepEquals(this.taxDebit, other.taxDebit);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            companyDebit,
            netPayDebit,
            childSupportDebit,
            reimbursementDebit,
            taxDebit);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Totals.class,
                "companyDebit", companyDebit,
                "netPayDebit", netPayDebit,
                "childSupportDebit", childSupportDebit,
                "reimbursementDebit", reimbursementDebit,
                "taxDebit", taxDebit);
    }
    
    public final static class Builder {
 
        private Optional<String> companyDebit = Optional.empty();
 
        private Optional<String> netPayDebit = Optional.empty();
 
        private Optional<String> childSupportDebit = Optional.empty();
 
        private Optional<String> reimbursementDebit = Optional.empty();
 
        private Optional<String> taxDebit = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total company debit for the payroll.
         */
        public Builder companyDebit(String companyDebit) {
            Utils.checkNotNull(companyDebit, "companyDebit");
            this.companyDebit = Optional.ofNullable(companyDebit);
            return this;
        }

        /**
         * The total company debit for the payroll.
         */
        public Builder companyDebit(Optional<String> companyDebit) {
            Utils.checkNotNull(companyDebit, "companyDebit");
            this.companyDebit = companyDebit;
            return this;
        }

        /**
         * The total company net pay for the payroll.
         */
        public Builder netPayDebit(String netPayDebit) {
            Utils.checkNotNull(netPayDebit, "netPayDebit");
            this.netPayDebit = Optional.ofNullable(netPayDebit);
            return this;
        }

        /**
         * The total company net pay for the payroll.
         */
        public Builder netPayDebit(Optional<String> netPayDebit) {
            Utils.checkNotNull(netPayDebit, "netPayDebit");
            this.netPayDebit = netPayDebit;
            return this;
        }

        /**
         * The total child support debit for the payroll.
         */
        public Builder childSupportDebit(String childSupportDebit) {
            Utils.checkNotNull(childSupportDebit, "childSupportDebit");
            this.childSupportDebit = Optional.ofNullable(childSupportDebit);
            return this;
        }

        /**
         * The total child support debit for the payroll.
         */
        public Builder childSupportDebit(Optional<String> childSupportDebit) {
            Utils.checkNotNull(childSupportDebit, "childSupportDebit");
            this.childSupportDebit = childSupportDebit;
            return this;
        }

        /**
         * The total reimbursements for the payroll.
         */
        public Builder reimbursementDebit(String reimbursementDebit) {
            Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
            this.reimbursementDebit = Optional.ofNullable(reimbursementDebit);
            return this;
        }

        /**
         * The total reimbursements for the payroll.
         */
        public Builder reimbursementDebit(Optional<String> reimbursementDebit) {
            Utils.checkNotNull(reimbursementDebit, "reimbursementDebit");
            this.reimbursementDebit = reimbursementDebit;
            return this;
        }

        /**
         * The total tax debit for the payroll.
         */
        public Builder taxDebit(String taxDebit) {
            Utils.checkNotNull(taxDebit, "taxDebit");
            this.taxDebit = Optional.ofNullable(taxDebit);
            return this;
        }

        /**
         * The total tax debit for the payroll.
         */
        public Builder taxDebit(Optional<String> taxDebit) {
            Utils.checkNotNull(taxDebit, "taxDebit");
            this.taxDebit = taxDebit;
            return this;
        }
        
        public Totals build() {
            return new Totals(
                companyDebit,
                netPayDebit,
                childSupportDebit,
                reimbursementDebit,
                taxDebit);
        }
    }
}

