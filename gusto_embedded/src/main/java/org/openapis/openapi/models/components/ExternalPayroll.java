/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * ExternalPayroll - The representation of an external payroll.
 */

public class ExternalPayroll {

    /**
     * The UUID of the external payroll.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The UUID of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * External payroll's check date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * External payroll's pay period start date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_period_start_date")
    private Optional<String> paymentPeriodStartDate;

    /**
     * External payroll's pay period end date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_period_end_date")
    private Optional<String> paymentPeriodEndDate;

    /**
     * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends Status> status;

    /**
     * External payroll items for employees
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("external_payroll_items")
    private Optional<? extends List<ExternalPayrollItems>> externalPayrollItems;

    /**
     * Applicable earnings based on company provisioning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicable_earnings")
    private Optional<? extends List<ApplicableEarnings>> applicableEarnings;

    /**
     * Applicable benefits based on company provisioning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicable_benefits")
    private Optional<? extends List<ApplicableBenefits>> applicableBenefits;

    /**
     * Applicable taxes based on company provisioning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("applicable_taxes")
    private Optional<? extends List<ApplicableTaxes>> applicableTaxes;

    /**
     * Stores metadata of the external payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("metadata")
    private Optional<? extends ExternalPayrollMetadata> metadata;

    @JsonCreator
    public ExternalPayroll(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("payment_period_start_date") Optional<String> paymentPeriodStartDate,
            @JsonProperty("payment_period_end_date") Optional<String> paymentPeriodEndDate,
            @JsonProperty("status") Optional<? extends Status> status,
            @JsonProperty("external_payroll_items") Optional<? extends List<ExternalPayrollItems>> externalPayrollItems,
            @JsonProperty("applicable_earnings") Optional<? extends List<ApplicableEarnings>> applicableEarnings,
            @JsonProperty("applicable_benefits") Optional<? extends List<ApplicableBenefits>> applicableBenefits,
            @JsonProperty("applicable_taxes") Optional<? extends List<ApplicableTaxes>> applicableTaxes,
            @JsonProperty("metadata") Optional<? extends ExternalPayrollMetadata> metadata) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(paymentPeriodStartDate, "paymentPeriodStartDate");
        Utils.checkNotNull(paymentPeriodEndDate, "paymentPeriodEndDate");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
        Utils.checkNotNull(applicableEarnings, "applicableEarnings");
        Utils.checkNotNull(applicableBenefits, "applicableBenefits");
        Utils.checkNotNull(applicableTaxes, "applicableTaxes");
        Utils.checkNotNull(metadata, "metadata");
        this.uuid = uuid;
        this.companyUuid = companyUuid;
        this.checkDate = checkDate;
        this.paymentPeriodStartDate = paymentPeriodStartDate;
        this.paymentPeriodEndDate = paymentPeriodEndDate;
        this.status = status;
        this.externalPayrollItems = externalPayrollItems;
        this.applicableEarnings = applicableEarnings;
        this.applicableBenefits = applicableBenefits;
        this.applicableTaxes = applicableTaxes;
        this.metadata = metadata;
    }
    
    public ExternalPayroll(
            String uuid) {
        this(uuid, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the external payroll.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The UUID of the company.
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * External payroll's check date.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * External payroll's pay period start date.
     */
    @JsonIgnore
    public Optional<String> paymentPeriodStartDate() {
        return paymentPeriodStartDate;
    }

    /**
     * External payroll's pay period end date.
     */
    @JsonIgnore
    public Optional<String> paymentPeriodEndDate() {
        return paymentPeriodEndDate;
    }

    /**
     * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Status> status() {
        return (Optional<Status>) status;
    }

    /**
     * External payroll items for employees
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ExternalPayrollItems>> externalPayrollItems() {
        return (Optional<List<ExternalPayrollItems>>) externalPayrollItems;
    }

    /**
     * Applicable earnings based on company provisioning.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApplicableEarnings>> applicableEarnings() {
        return (Optional<List<ApplicableEarnings>>) applicableEarnings;
    }

    /**
     * Applicable benefits based on company provisioning.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApplicableBenefits>> applicableBenefits() {
        return (Optional<List<ApplicableBenefits>>) applicableBenefits;
    }

    /**
     * Applicable taxes based on company provisioning.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ApplicableTaxes>> applicableTaxes() {
        return (Optional<List<ApplicableTaxes>>) applicableTaxes;
    }

    /**
     * Stores metadata of the external payroll.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<ExternalPayrollMetadata> metadata() {
        return (Optional<ExternalPayrollMetadata>) metadata;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the external payroll.
     */
    public ExternalPayroll withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The UUID of the company.
     */
    public ExternalPayroll withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * The UUID of the company.
     */
    public ExternalPayroll withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * External payroll's check date.
     */
    public ExternalPayroll withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * External payroll's check date.
     */
    public ExternalPayroll withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * External payroll's pay period start date.
     */
    public ExternalPayroll withPaymentPeriodStartDate(String paymentPeriodStartDate) {
        Utils.checkNotNull(paymentPeriodStartDate, "paymentPeriodStartDate");
        this.paymentPeriodStartDate = Optional.ofNullable(paymentPeriodStartDate);
        return this;
    }

    /**
     * External payroll's pay period start date.
     */
    public ExternalPayroll withPaymentPeriodStartDate(Optional<String> paymentPeriodStartDate) {
        Utils.checkNotNull(paymentPeriodStartDate, "paymentPeriodStartDate");
        this.paymentPeriodStartDate = paymentPeriodStartDate;
        return this;
    }

    /**
     * External payroll's pay period end date.
     */
    public ExternalPayroll withPaymentPeriodEndDate(String paymentPeriodEndDate) {
        Utils.checkNotNull(paymentPeriodEndDate, "paymentPeriodEndDate");
        this.paymentPeriodEndDate = Optional.ofNullable(paymentPeriodEndDate);
        return this;
    }

    /**
     * External payroll's pay period end date.
     */
    public ExternalPayroll withPaymentPeriodEndDate(Optional<String> paymentPeriodEndDate) {
        Utils.checkNotNull(paymentPeriodEndDate, "paymentPeriodEndDate");
        this.paymentPeriodEndDate = paymentPeriodEndDate;
        return this;
    }

    /**
     * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
     */
    public ExternalPayroll withStatus(Status status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
     */
    public ExternalPayroll withStatus(Optional<? extends Status> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * External payroll items for employees
     */
    public ExternalPayroll withExternalPayrollItems(List<ExternalPayrollItems> externalPayrollItems) {
        Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
        this.externalPayrollItems = Optional.ofNullable(externalPayrollItems);
        return this;
    }

    /**
     * External payroll items for employees
     */
    public ExternalPayroll withExternalPayrollItems(Optional<? extends List<ExternalPayrollItems>> externalPayrollItems) {
        Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
        this.externalPayrollItems = externalPayrollItems;
        return this;
    }

    /**
     * Applicable earnings based on company provisioning.
     */
    public ExternalPayroll withApplicableEarnings(List<ApplicableEarnings> applicableEarnings) {
        Utils.checkNotNull(applicableEarnings, "applicableEarnings");
        this.applicableEarnings = Optional.ofNullable(applicableEarnings);
        return this;
    }

    /**
     * Applicable earnings based on company provisioning.
     */
    public ExternalPayroll withApplicableEarnings(Optional<? extends List<ApplicableEarnings>> applicableEarnings) {
        Utils.checkNotNull(applicableEarnings, "applicableEarnings");
        this.applicableEarnings = applicableEarnings;
        return this;
    }

    /**
     * Applicable benefits based on company provisioning.
     */
    public ExternalPayroll withApplicableBenefits(List<ApplicableBenefits> applicableBenefits) {
        Utils.checkNotNull(applicableBenefits, "applicableBenefits");
        this.applicableBenefits = Optional.ofNullable(applicableBenefits);
        return this;
    }

    /**
     * Applicable benefits based on company provisioning.
     */
    public ExternalPayroll withApplicableBenefits(Optional<? extends List<ApplicableBenefits>> applicableBenefits) {
        Utils.checkNotNull(applicableBenefits, "applicableBenefits");
        this.applicableBenefits = applicableBenefits;
        return this;
    }

    /**
     * Applicable taxes based on company provisioning.
     */
    public ExternalPayroll withApplicableTaxes(List<ApplicableTaxes> applicableTaxes) {
        Utils.checkNotNull(applicableTaxes, "applicableTaxes");
        this.applicableTaxes = Optional.ofNullable(applicableTaxes);
        return this;
    }

    /**
     * Applicable taxes based on company provisioning.
     */
    public ExternalPayroll withApplicableTaxes(Optional<? extends List<ApplicableTaxes>> applicableTaxes) {
        Utils.checkNotNull(applicableTaxes, "applicableTaxes");
        this.applicableTaxes = applicableTaxes;
        return this;
    }

    /**
     * Stores metadata of the external payroll.
     */
    public ExternalPayroll withMetadata(ExternalPayrollMetadata metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = Optional.ofNullable(metadata);
        return this;
    }

    /**
     * Stores metadata of the external payroll.
     */
    public ExternalPayroll withMetadata(Optional<? extends ExternalPayrollMetadata> metadata) {
        Utils.checkNotNull(metadata, "metadata");
        this.metadata = metadata;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ExternalPayroll other = (ExternalPayroll) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.paymentPeriodStartDate, other.paymentPeriodStartDate) &&
            Objects.deepEquals(this.paymentPeriodEndDate, other.paymentPeriodEndDate) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.externalPayrollItems, other.externalPayrollItems) &&
            Objects.deepEquals(this.applicableEarnings, other.applicableEarnings) &&
            Objects.deepEquals(this.applicableBenefits, other.applicableBenefits) &&
            Objects.deepEquals(this.applicableTaxes, other.applicableTaxes) &&
            Objects.deepEquals(this.metadata, other.metadata);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            companyUuid,
            checkDate,
            paymentPeriodStartDate,
            paymentPeriodEndDate,
            status,
            externalPayrollItems,
            applicableEarnings,
            applicableBenefits,
            applicableTaxes,
            metadata);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ExternalPayroll.class,
                "uuid", uuid,
                "companyUuid", companyUuid,
                "checkDate", checkDate,
                "paymentPeriodStartDate", paymentPeriodStartDate,
                "paymentPeriodEndDate", paymentPeriodEndDate,
                "status", status,
                "externalPayrollItems", externalPayrollItems,
                "applicableEarnings", applicableEarnings,
                "applicableBenefits", applicableBenefits,
                "applicableTaxes", applicableTaxes,
                "metadata", metadata);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<String> paymentPeriodStartDate = Optional.empty();
 
        private Optional<String> paymentPeriodEndDate = Optional.empty();
 
        private Optional<? extends Status> status = Optional.empty();
 
        private Optional<? extends List<ExternalPayrollItems>> externalPayrollItems = Optional.empty();
 
        private Optional<? extends List<ApplicableEarnings>> applicableEarnings = Optional.empty();
 
        private Optional<? extends List<ApplicableBenefits>> applicableBenefits = Optional.empty();
 
        private Optional<? extends List<ApplicableTaxes>> applicableTaxes = Optional.empty();
 
        private Optional<? extends ExternalPayrollMetadata> metadata = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the external payroll.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The UUID of the company.
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * The UUID of the company.
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * External payroll's check date.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * External payroll's check date.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * External payroll's pay period start date.
         */
        public Builder paymentPeriodStartDate(String paymentPeriodStartDate) {
            Utils.checkNotNull(paymentPeriodStartDate, "paymentPeriodStartDate");
            this.paymentPeriodStartDate = Optional.ofNullable(paymentPeriodStartDate);
            return this;
        }

        /**
         * External payroll's pay period start date.
         */
        public Builder paymentPeriodStartDate(Optional<String> paymentPeriodStartDate) {
            Utils.checkNotNull(paymentPeriodStartDate, "paymentPeriodStartDate");
            this.paymentPeriodStartDate = paymentPeriodStartDate;
            return this;
        }

        /**
         * External payroll's pay period end date.
         */
        public Builder paymentPeriodEndDate(String paymentPeriodEndDate) {
            Utils.checkNotNull(paymentPeriodEndDate, "paymentPeriodEndDate");
            this.paymentPeriodEndDate = Optional.ofNullable(paymentPeriodEndDate);
            return this;
        }

        /**
         * External payroll's pay period end date.
         */
        public Builder paymentPeriodEndDate(Optional<String> paymentPeriodEndDate) {
            Utils.checkNotNull(paymentPeriodEndDate, "paymentPeriodEndDate");
            this.paymentPeriodEndDate = paymentPeriodEndDate;
            return this;
        }

        /**
         * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
         */
        public Builder status(Status status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the external payroll. The status will be `unprocessed` when the external payroll is created and transition to `processed` once tax liabilities are entered and finalized.  Once in the `processed` status all actions that can edit an external payroll will be disabled.
         */
        public Builder status(Optional<? extends Status> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * External payroll items for employees
         */
        public Builder externalPayrollItems(List<ExternalPayrollItems> externalPayrollItems) {
            Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
            this.externalPayrollItems = Optional.ofNullable(externalPayrollItems);
            return this;
        }

        /**
         * External payroll items for employees
         */
        public Builder externalPayrollItems(Optional<? extends List<ExternalPayrollItems>> externalPayrollItems) {
            Utils.checkNotNull(externalPayrollItems, "externalPayrollItems");
            this.externalPayrollItems = externalPayrollItems;
            return this;
        }

        /**
         * Applicable earnings based on company provisioning.
         */
        public Builder applicableEarnings(List<ApplicableEarnings> applicableEarnings) {
            Utils.checkNotNull(applicableEarnings, "applicableEarnings");
            this.applicableEarnings = Optional.ofNullable(applicableEarnings);
            return this;
        }

        /**
         * Applicable earnings based on company provisioning.
         */
        public Builder applicableEarnings(Optional<? extends List<ApplicableEarnings>> applicableEarnings) {
            Utils.checkNotNull(applicableEarnings, "applicableEarnings");
            this.applicableEarnings = applicableEarnings;
            return this;
        }

        /**
         * Applicable benefits based on company provisioning.
         */
        public Builder applicableBenefits(List<ApplicableBenefits> applicableBenefits) {
            Utils.checkNotNull(applicableBenefits, "applicableBenefits");
            this.applicableBenefits = Optional.ofNullable(applicableBenefits);
            return this;
        }

        /**
         * Applicable benefits based on company provisioning.
         */
        public Builder applicableBenefits(Optional<? extends List<ApplicableBenefits>> applicableBenefits) {
            Utils.checkNotNull(applicableBenefits, "applicableBenefits");
            this.applicableBenefits = applicableBenefits;
            return this;
        }

        /**
         * Applicable taxes based on company provisioning.
         */
        public Builder applicableTaxes(List<ApplicableTaxes> applicableTaxes) {
            Utils.checkNotNull(applicableTaxes, "applicableTaxes");
            this.applicableTaxes = Optional.ofNullable(applicableTaxes);
            return this;
        }

        /**
         * Applicable taxes based on company provisioning.
         */
        public Builder applicableTaxes(Optional<? extends List<ApplicableTaxes>> applicableTaxes) {
            Utils.checkNotNull(applicableTaxes, "applicableTaxes");
            this.applicableTaxes = applicableTaxes;
            return this;
        }

        /**
         * Stores metadata of the external payroll.
         */
        public Builder metadata(ExternalPayrollMetadata metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = Optional.ofNullable(metadata);
            return this;
        }

        /**
         * Stores metadata of the external payroll.
         */
        public Builder metadata(Optional<? extends ExternalPayrollMetadata> metadata) {
            Utils.checkNotNull(metadata, "metadata");
            this.metadata = metadata;
            return this;
        }
        
        public ExternalPayroll build() {
            return new ExternalPayroll(
                uuid,
                companyUuid,
                checkDate,
                paymentPeriodStartDate,
                paymentPeriodEndDate,
                status,
                externalPayrollItems,
                applicableEarnings,
                applicableBenefits,
                applicableTaxes,
                metadata);
        }
    }
}

