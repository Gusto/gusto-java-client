/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * PayrollPaymentSpeedChangedType - Only applicable when a payroll is moved to four day processing instead of fast ach.
 */

public class PayrollPaymentSpeedChangedType {

    /**
     * Original check date when fast ach applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_check_date")
    private Optional<String> originalCheckDate;

    /**
     * Current check date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_check_date")
    private Optional<String> currentCheckDate;

    /**
     * Original debit date when fast ach applies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("original_debit_date")
    private Optional<String> originalDebitDate;

    /**
     * Current debit date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("current_debit_date")
    private Optional<String> currentDebitDate;

    /**
     * The reason why the payroll is moved to four day.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reason")
    private Optional<String> reason;

    @JsonCreator
    public PayrollPaymentSpeedChangedType(
            @JsonProperty("original_check_date") Optional<String> originalCheckDate,
            @JsonProperty("current_check_date") Optional<String> currentCheckDate,
            @JsonProperty("original_debit_date") Optional<String> originalDebitDate,
            @JsonProperty("current_debit_date") Optional<String> currentDebitDate,
            @JsonProperty("reason") Optional<String> reason) {
        Utils.checkNotNull(originalCheckDate, "originalCheckDate");
        Utils.checkNotNull(currentCheckDate, "currentCheckDate");
        Utils.checkNotNull(originalDebitDate, "originalDebitDate");
        Utils.checkNotNull(currentDebitDate, "currentDebitDate");
        Utils.checkNotNull(reason, "reason");
        this.originalCheckDate = originalCheckDate;
        this.currentCheckDate = currentCheckDate;
        this.originalDebitDate = originalDebitDate;
        this.currentDebitDate = currentDebitDate;
        this.reason = reason;
    }
    
    public PayrollPaymentSpeedChangedType() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Original check date when fast ach applies.
     */
    @JsonIgnore
    public Optional<String> originalCheckDate() {
        return originalCheckDate;
    }

    /**
     * Current check date.
     */
    @JsonIgnore
    public Optional<String> currentCheckDate() {
        return currentCheckDate;
    }

    /**
     * Original debit date when fast ach applies.
     */
    @JsonIgnore
    public Optional<String> originalDebitDate() {
        return originalDebitDate;
    }

    /**
     * Current debit date.
     */
    @JsonIgnore
    public Optional<String> currentDebitDate() {
        return currentDebitDate;
    }

    /**
     * The reason why the payroll is moved to four day.
     */
    @JsonIgnore
    public Optional<String> reason() {
        return reason;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Original check date when fast ach applies.
     */
    public PayrollPaymentSpeedChangedType withOriginalCheckDate(String originalCheckDate) {
        Utils.checkNotNull(originalCheckDate, "originalCheckDate");
        this.originalCheckDate = Optional.ofNullable(originalCheckDate);
        return this;
    }

    /**
     * Original check date when fast ach applies.
     */
    public PayrollPaymentSpeedChangedType withOriginalCheckDate(Optional<String> originalCheckDate) {
        Utils.checkNotNull(originalCheckDate, "originalCheckDate");
        this.originalCheckDate = originalCheckDate;
        return this;
    }

    /**
     * Current check date.
     */
    public PayrollPaymentSpeedChangedType withCurrentCheckDate(String currentCheckDate) {
        Utils.checkNotNull(currentCheckDate, "currentCheckDate");
        this.currentCheckDate = Optional.ofNullable(currentCheckDate);
        return this;
    }

    /**
     * Current check date.
     */
    public PayrollPaymentSpeedChangedType withCurrentCheckDate(Optional<String> currentCheckDate) {
        Utils.checkNotNull(currentCheckDate, "currentCheckDate");
        this.currentCheckDate = currentCheckDate;
        return this;
    }

    /**
     * Original debit date when fast ach applies.
     */
    public PayrollPaymentSpeedChangedType withOriginalDebitDate(String originalDebitDate) {
        Utils.checkNotNull(originalDebitDate, "originalDebitDate");
        this.originalDebitDate = Optional.ofNullable(originalDebitDate);
        return this;
    }

    /**
     * Original debit date when fast ach applies.
     */
    public PayrollPaymentSpeedChangedType withOriginalDebitDate(Optional<String> originalDebitDate) {
        Utils.checkNotNull(originalDebitDate, "originalDebitDate");
        this.originalDebitDate = originalDebitDate;
        return this;
    }

    /**
     * Current debit date.
     */
    public PayrollPaymentSpeedChangedType withCurrentDebitDate(String currentDebitDate) {
        Utils.checkNotNull(currentDebitDate, "currentDebitDate");
        this.currentDebitDate = Optional.ofNullable(currentDebitDate);
        return this;
    }

    /**
     * Current debit date.
     */
    public PayrollPaymentSpeedChangedType withCurrentDebitDate(Optional<String> currentDebitDate) {
        Utils.checkNotNull(currentDebitDate, "currentDebitDate");
        this.currentDebitDate = currentDebitDate;
        return this;
    }

    /**
     * The reason why the payroll is moved to four day.
     */
    public PayrollPaymentSpeedChangedType withReason(String reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = Optional.ofNullable(reason);
        return this;
    }

    /**
     * The reason why the payroll is moved to four day.
     */
    public PayrollPaymentSpeedChangedType withReason(Optional<String> reason) {
        Utils.checkNotNull(reason, "reason");
        this.reason = reason;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollPaymentSpeedChangedType other = (PayrollPaymentSpeedChangedType) o;
        return 
            Objects.deepEquals(this.originalCheckDate, other.originalCheckDate) &&
            Objects.deepEquals(this.currentCheckDate, other.currentCheckDate) &&
            Objects.deepEquals(this.originalDebitDate, other.originalDebitDate) &&
            Objects.deepEquals(this.currentDebitDate, other.currentDebitDate) &&
            Objects.deepEquals(this.reason, other.reason);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            originalCheckDate,
            currentCheckDate,
            originalDebitDate,
            currentDebitDate,
            reason);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollPaymentSpeedChangedType.class,
                "originalCheckDate", originalCheckDate,
                "currentCheckDate", currentCheckDate,
                "originalDebitDate", originalDebitDate,
                "currentDebitDate", currentDebitDate,
                "reason", reason);
    }
    
    public final static class Builder {
 
        private Optional<String> originalCheckDate = Optional.empty();
 
        private Optional<String> currentCheckDate = Optional.empty();
 
        private Optional<String> originalDebitDate = Optional.empty();
 
        private Optional<String> currentDebitDate = Optional.empty();
 
        private Optional<String> reason = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Original check date when fast ach applies.
         */
        public Builder originalCheckDate(String originalCheckDate) {
            Utils.checkNotNull(originalCheckDate, "originalCheckDate");
            this.originalCheckDate = Optional.ofNullable(originalCheckDate);
            return this;
        }

        /**
         * Original check date when fast ach applies.
         */
        public Builder originalCheckDate(Optional<String> originalCheckDate) {
            Utils.checkNotNull(originalCheckDate, "originalCheckDate");
            this.originalCheckDate = originalCheckDate;
            return this;
        }

        /**
         * Current check date.
         */
        public Builder currentCheckDate(String currentCheckDate) {
            Utils.checkNotNull(currentCheckDate, "currentCheckDate");
            this.currentCheckDate = Optional.ofNullable(currentCheckDate);
            return this;
        }

        /**
         * Current check date.
         */
        public Builder currentCheckDate(Optional<String> currentCheckDate) {
            Utils.checkNotNull(currentCheckDate, "currentCheckDate");
            this.currentCheckDate = currentCheckDate;
            return this;
        }

        /**
         * Original debit date when fast ach applies.
         */
        public Builder originalDebitDate(String originalDebitDate) {
            Utils.checkNotNull(originalDebitDate, "originalDebitDate");
            this.originalDebitDate = Optional.ofNullable(originalDebitDate);
            return this;
        }

        /**
         * Original debit date when fast ach applies.
         */
        public Builder originalDebitDate(Optional<String> originalDebitDate) {
            Utils.checkNotNull(originalDebitDate, "originalDebitDate");
            this.originalDebitDate = originalDebitDate;
            return this;
        }

        /**
         * Current debit date.
         */
        public Builder currentDebitDate(String currentDebitDate) {
            Utils.checkNotNull(currentDebitDate, "currentDebitDate");
            this.currentDebitDate = Optional.ofNullable(currentDebitDate);
            return this;
        }

        /**
         * Current debit date.
         */
        public Builder currentDebitDate(Optional<String> currentDebitDate) {
            Utils.checkNotNull(currentDebitDate, "currentDebitDate");
            this.currentDebitDate = currentDebitDate;
            return this;
        }

        /**
         * The reason why the payroll is moved to four day.
         */
        public Builder reason(String reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = Optional.ofNullable(reason);
            return this;
        }

        /**
         * The reason why the payroll is moved to four day.
         */
        public Builder reason(Optional<String> reason) {
            Utils.checkNotNull(reason, "reason");
            this.reason = reason;
            return this;
        }
        
        public PayrollPaymentSpeedChangedType build() {
            return new PayrollPaymentSpeedChangedType(
                originalCheckDate,
                currentCheckDate,
                originalDebitDate,
                currentDebitDate,
                reason);
        }
    }
}

