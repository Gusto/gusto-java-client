/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class PutV1EmployeesEmployeeIdRehireRequestBody {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    /**
     * The day when the employee returns to work.
     */
    @JsonProperty("effective_date")
    private String effectiveDate;

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    @JsonProperty("file_new_hire_report")
    private boolean fileNewHireReport;

    /**
     * The uuid of the employee's work location.
     */
    @JsonProperty("work_location_uuid")
    private String workLocationUuid;

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employment_status")
    private Optional<? extends EmploymentStatus> employmentStatus;

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("two_percent_shareholder")
    private Optional<Boolean> twoPercentShareholder;

    @JsonCreator
    public PutV1EmployeesEmployeeIdRehireRequestBody(
            @JsonProperty("version") String version,
            @JsonProperty("effective_date") String effectiveDate,
            @JsonProperty("file_new_hire_report") boolean fileNewHireReport,
            @JsonProperty("work_location_uuid") String workLocationUuid,
            @JsonProperty("employment_status") Optional<? extends EmploymentStatus> employmentStatus,
            @JsonProperty("two_percent_shareholder") Optional<Boolean> twoPercentShareholder) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        Utils.checkNotNull(workLocationUuid, "workLocationUuid");
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.version = version;
        this.effectiveDate = effectiveDate;
        this.fileNewHireReport = fileNewHireReport;
        this.workLocationUuid = workLocationUuid;
        this.employmentStatus = employmentStatus;
        this.twoPercentShareholder = twoPercentShareholder;
    }
    
    public PutV1EmployeesEmployeeIdRehireRequestBody(
            String version,
            String effectiveDate,
            boolean fileNewHireReport,
            String workLocationUuid) {
        this(version, effectiveDate, fileNewHireReport, workLocationUuid, Optional.empty(), Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * The day when the employee returns to work.
     */
    @JsonIgnore
    public String effectiveDate() {
        return effectiveDate;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    @JsonIgnore
    public boolean fileNewHireReport() {
        return fileNewHireReport;
    }

    /**
     * The uuid of the employee's work location.
     */
    @JsonIgnore
    public String workLocationUuid() {
        return workLocationUuid;
    }

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<EmploymentStatus> employmentStatus() {
        return (Optional<EmploymentStatus>) employmentStatus;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    @JsonIgnore
    public Optional<Boolean> twoPercentShareholder() {
        return twoPercentShareholder;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The day when the employee returns to work.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withEffectiveDate(String effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the employee.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withFileNewHireReport(boolean fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = fileNewHireReport;
        return this;
    }

    /**
     * The uuid of the employee's work location.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withWorkLocationUuid(String workLocationUuid) {
        Utils.checkNotNull(workLocationUuid, "workLocationUuid");
        this.workLocationUuid = workLocationUuid;
        return this;
    }

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withEmploymentStatus(EmploymentStatus employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = Optional.ofNullable(employmentStatus);
        return this;
    }

    /**
     * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withEmploymentStatus(Optional<? extends EmploymentStatus> employmentStatus) {
        Utils.checkNotNull(employmentStatus, "employmentStatus");
        this.employmentStatus = employmentStatus;
        return this;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withTwoPercentShareholder(boolean twoPercentShareholder) {
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.twoPercentShareholder = Optional.ofNullable(twoPercentShareholder);
        return this;
    }

    /**
     * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
     */
    public PutV1EmployeesEmployeeIdRehireRequestBody withTwoPercentShareholder(Optional<Boolean> twoPercentShareholder) {
        Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
        this.twoPercentShareholder = twoPercentShareholder;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1EmployeesEmployeeIdRehireRequestBody other = (PutV1EmployeesEmployeeIdRehireRequestBody) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.fileNewHireReport, other.fileNewHireReport) &&
            Objects.deepEquals(this.workLocationUuid, other.workLocationUuid) &&
            Objects.deepEquals(this.employmentStatus, other.employmentStatus) &&
            Objects.deepEquals(this.twoPercentShareholder, other.twoPercentShareholder);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            effectiveDate,
            fileNewHireReport,
            workLocationUuid,
            employmentStatus,
            twoPercentShareholder);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1EmployeesEmployeeIdRehireRequestBody.class,
                "version", version,
                "effectiveDate", effectiveDate,
                "fileNewHireReport", fileNewHireReport,
                "workLocationUuid", workLocationUuid,
                "employmentStatus", employmentStatus,
                "twoPercentShareholder", twoPercentShareholder);
    }
    
    public final static class Builder {
 
        private String version;
 
        private String effectiveDate;
 
        private Boolean fileNewHireReport;
 
        private String workLocationUuid;
 
        private Optional<? extends EmploymentStatus> employmentStatus = Optional.empty();
 
        private Optional<Boolean> twoPercentShareholder = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/idempotency) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The day when the employee returns to work.
         */
        public Builder effectiveDate(String effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the employee.
         */
        public Builder fileNewHireReport(boolean fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }

        /**
         * The uuid of the employee's work location.
         */
        public Builder workLocationUuid(String workLocationUuid) {
            Utils.checkNotNull(workLocationUuid, "workLocationUuid");
            this.workLocationUuid = workLocationUuid;
            return this;
        }

        /**
         * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
         */
        public Builder employmentStatus(EmploymentStatus employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = Optional.ofNullable(employmentStatus);
            return this;
        }

        /**
         * The employee's employment status. Supplying an invalid option will set the employment_status to *not_set*.
         */
        public Builder employmentStatus(Optional<? extends EmploymentStatus> employmentStatus) {
            Utils.checkNotNull(employmentStatus, "employmentStatus");
            this.employmentStatus = employmentStatus;
            return this;
        }

        /**
         * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
         */
        public Builder twoPercentShareholder(boolean twoPercentShareholder) {
            Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
            this.twoPercentShareholder = Optional.ofNullable(twoPercentShareholder);
            return this;
        }

        /**
         * Whether the employee is a two percent shareholder of the company. This field only applies to companies with an S-Corp entity type.
         */
        public Builder twoPercentShareholder(Optional<Boolean> twoPercentShareholder) {
            Utils.checkNotNull(twoPercentShareholder, "twoPercentShareholder");
            this.twoPercentShareholder = twoPercentShareholder;
            return this;
        }
        
        public PutV1EmployeesEmployeeIdRehireRequestBody build() {
            return new PutV1EmployeesEmployeeIdRehireRequestBody(
                version,
                effectiveDate,
                fileNewHireReport,
                workLocationUuid,
                employmentStatus,
                twoPercentShareholder);
        }
    }
}

