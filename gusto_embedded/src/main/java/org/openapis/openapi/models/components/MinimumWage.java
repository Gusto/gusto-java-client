/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * MinimumWage - Representation of a Minimum Wage
 */

public class MinimumWage {

    /**
     * unique identifier of a minimum wage
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The wage rate for a minimum wage record. Represented as a float, e.g. "15.0".
     */
    @JsonProperty("wage")
    private String wage;

    /**
     * The type of wage the minimum wage applies to, e.g. "Regular", "Regular-Industry-Specific".
     */
    @JsonProperty("wage_type")
    private String wageType;

    /**
     * The date the minimum wage rule is effective on.
     */
    @JsonProperty("effective_date")
    private LocalDate effectiveDate;

    /**
     * The governing authority that created the minimum wage, e.g. "City", "State", or "Federal".
     */
    @JsonProperty("authority")
    private String authority;

    /**
     * Description of parties the minimum wage applies to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("notes")
    private Optional<String> notes;

    @JsonCreator
    public MinimumWage(
            @JsonProperty("uuid") String uuid,
            @JsonProperty("wage") String wage,
            @JsonProperty("wage_type") String wageType,
            @JsonProperty("effective_date") LocalDate effectiveDate,
            @JsonProperty("authority") String authority,
            @JsonProperty("notes") Optional<String> notes) {
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(wage, "wage");
        Utils.checkNotNull(wageType, "wageType");
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        Utils.checkNotNull(authority, "authority");
        Utils.checkNotNull(notes, "notes");
        this.uuid = uuid;
        this.wage = wage;
        this.wageType = wageType;
        this.effectiveDate = effectiveDate;
        this.authority = authority;
        this.notes = notes;
    }
    
    public MinimumWage(
            String uuid,
            String wage,
            String wageType,
            LocalDate effectiveDate,
            String authority) {
        this(uuid, wage, wageType, effectiveDate, authority, Optional.empty());
    }

    /**
     * unique identifier of a minimum wage
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The wage rate for a minimum wage record. Represented as a float, e.g. "15.0".
     */
    @JsonIgnore
    public String wage() {
        return wage;
    }

    /**
     * The type of wage the minimum wage applies to, e.g. "Regular", "Regular-Industry-Specific".
     */
    @JsonIgnore
    public String wageType() {
        return wageType;
    }

    /**
     * The date the minimum wage rule is effective on.
     */
    @JsonIgnore
    public LocalDate effectiveDate() {
        return effectiveDate;
    }

    /**
     * The governing authority that created the minimum wage, e.g. "City", "State", or "Federal".
     */
    @JsonIgnore
    public String authority() {
        return authority;
    }

    /**
     * Description of parties the minimum wage applies to.
     */
    @JsonIgnore
    public Optional<String> notes() {
        return notes;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * unique identifier of a minimum wage
     */
    public MinimumWage withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The wage rate for a minimum wage record. Represented as a float, e.g. "15.0".
     */
    public MinimumWage withWage(String wage) {
        Utils.checkNotNull(wage, "wage");
        this.wage = wage;
        return this;
    }

    /**
     * The type of wage the minimum wage applies to, e.g. "Regular", "Regular-Industry-Specific".
     */
    public MinimumWage withWageType(String wageType) {
        Utils.checkNotNull(wageType, "wageType");
        this.wageType = wageType;
        return this;
    }

    /**
     * The date the minimum wage rule is effective on.
     */
    public MinimumWage withEffectiveDate(LocalDate effectiveDate) {
        Utils.checkNotNull(effectiveDate, "effectiveDate");
        this.effectiveDate = effectiveDate;
        return this;
    }

    /**
     * The governing authority that created the minimum wage, e.g. "City", "State", or "Federal".
     */
    public MinimumWage withAuthority(String authority) {
        Utils.checkNotNull(authority, "authority");
        this.authority = authority;
        return this;
    }

    /**
     * Description of parties the minimum wage applies to.
     */
    public MinimumWage withNotes(String notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = Optional.ofNullable(notes);
        return this;
    }

    /**
     * Description of parties the minimum wage applies to.
     */
    public MinimumWage withNotes(Optional<String> notes) {
        Utils.checkNotNull(notes, "notes");
        this.notes = notes;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        MinimumWage other = (MinimumWage) o;
        return 
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.wage, other.wage) &&
            Objects.deepEquals(this.wageType, other.wageType) &&
            Objects.deepEquals(this.effectiveDate, other.effectiveDate) &&
            Objects.deepEquals(this.authority, other.authority) &&
            Objects.deepEquals(this.notes, other.notes);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            uuid,
            wage,
            wageType,
            effectiveDate,
            authority,
            notes);
    }
    
    @Override
    public String toString() {
        return Utils.toString(MinimumWage.class,
                "uuid", uuid,
                "wage", wage,
                "wageType", wageType,
                "effectiveDate", effectiveDate,
                "authority", authority,
                "notes", notes);
    }
    
    public final static class Builder {
 
        private String uuid;
 
        private String wage;
 
        private String wageType;
 
        private LocalDate effectiveDate;
 
        private String authority;
 
        private Optional<String> notes = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * unique identifier of a minimum wage
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The wage rate for a minimum wage record. Represented as a float, e.g. "15.0".
         */
        public Builder wage(String wage) {
            Utils.checkNotNull(wage, "wage");
            this.wage = wage;
            return this;
        }

        /**
         * The type of wage the minimum wage applies to, e.g. "Regular", "Regular-Industry-Specific".
         */
        public Builder wageType(String wageType) {
            Utils.checkNotNull(wageType, "wageType");
            this.wageType = wageType;
            return this;
        }

        /**
         * The date the minimum wage rule is effective on.
         */
        public Builder effectiveDate(LocalDate effectiveDate) {
            Utils.checkNotNull(effectiveDate, "effectiveDate");
            this.effectiveDate = effectiveDate;
            return this;
        }

        /**
         * The governing authority that created the minimum wage, e.g. "City", "State", or "Federal".
         */
        public Builder authority(String authority) {
            Utils.checkNotNull(authority, "authority");
            this.authority = authority;
            return this;
        }

        /**
         * Description of parties the minimum wage applies to.
         */
        public Builder notes(String notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = Optional.ofNullable(notes);
            return this;
        }

        /**
         * Description of parties the minimum wage applies to.
         */
        public Builder notes(Optional<String> notes) {
            Utils.checkNotNull(notes, "notes");
            this.notes = notes;
            return this;
        }
        
        public MinimumWage build() {
            return new MinimumWage(
                uuid,
                wage,
                wageType,
                effectiveDate,
                authority,
                notes);
        }
    }
}

