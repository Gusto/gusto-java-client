/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class PayrollProcessingRequest {

    /**
     * The status of the payroll processing request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<? extends PayrollProcessingRequestStatus> status;

    /**
     * Errors that occurred during async payroll processing
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("errors")
    private Optional<? extends List<EntityErrorObject>> errors;

    @JsonCreator
    public PayrollProcessingRequest(
            @JsonProperty("status") Optional<? extends PayrollProcessingRequestStatus> status,
            @JsonProperty("errors") Optional<? extends List<EntityErrorObject>> errors) {
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(errors, "errors");
        this.status = status;
        this.errors = errors;
    }
    
    public PayrollProcessingRequest() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The status of the payroll processing request
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayrollProcessingRequestStatus> status() {
        return (Optional<PayrollProcessingRequestStatus>) status;
    }

    /**
     * Errors that occurred during async payroll processing
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<EntityErrorObject>> errors() {
        return (Optional<List<EntityErrorObject>>) errors;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The status of the payroll processing request
     */
    public PayrollProcessingRequest withStatus(PayrollProcessingRequestStatus status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * The status of the payroll processing request
     */
    public PayrollProcessingRequest withStatus(Optional<? extends PayrollProcessingRequestStatus> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * Errors that occurred during async payroll processing
     */
    public PayrollProcessingRequest withErrors(List<EntityErrorObject> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = Optional.ofNullable(errors);
        return this;
    }

    /**
     * Errors that occurred during async payroll processing
     */
    public PayrollProcessingRequest withErrors(Optional<? extends List<EntityErrorObject>> errors) {
        Utils.checkNotNull(errors, "errors");
        this.errors = errors;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayrollProcessingRequest other = (PayrollProcessingRequest) o;
        return 
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.errors, other.errors);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            status,
            errors);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayrollProcessingRequest.class,
                "status", status,
                "errors", errors);
    }
    
    public final static class Builder {
 
        private Optional<? extends PayrollProcessingRequestStatus> status = Optional.empty();
 
        private Optional<? extends List<EntityErrorObject>> errors = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The status of the payroll processing request
         */
        public Builder status(PayrollProcessingRequestStatus status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * The status of the payroll processing request
         */
        public Builder status(Optional<? extends PayrollProcessingRequestStatus> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * Errors that occurred during async payroll processing
         */
        public Builder errors(List<EntityErrorObject> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = Optional.ofNullable(errors);
            return this;
        }

        /**
         * Errors that occurred during async payroll processing
         */
        public Builder errors(Optional<? extends List<EntityErrorObject>> errors) {
            Utils.checkNotNull(errors, "errors");
            this.errors = errors;
            return this;
        }
        
        public PayrollProcessingRequest build() {
            return new PayrollProcessingRequest(
                status,
                errors);
        }
    }
}

