/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * EmployeeOnboardingDocument - Configuration for an employee onboarding documents during onboarding
 */

public class EmployeeOnboardingDocument {

    /**
     * Whether to include Form I-9 for an employee during onboarding
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("i9_document")
    private Optional<String> i9Document;

    @JsonCreator
    public EmployeeOnboardingDocument(
            @JsonProperty("i9_document") Optional<String> i9Document) {
        Utils.checkNotNull(i9Document, "i9Document");
        this.i9Document = i9Document;
    }
    
    public EmployeeOnboardingDocument() {
        this(Optional.empty());
    }

    /**
     * Whether to include Form I-9 for an employee during onboarding
     */
    @JsonIgnore
    public Optional<String> i9Document() {
        return i9Document;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether to include Form I-9 for an employee during onboarding
     */
    public EmployeeOnboardingDocument withI9Document(String i9Document) {
        Utils.checkNotNull(i9Document, "i9Document");
        this.i9Document = Optional.ofNullable(i9Document);
        return this;
    }

    /**
     * Whether to include Form I-9 for an employee during onboarding
     */
    public EmployeeOnboardingDocument withI9Document(Optional<String> i9Document) {
        Utils.checkNotNull(i9Document, "i9Document");
        this.i9Document = i9Document;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeOnboardingDocument other = (EmployeeOnboardingDocument) o;
        return 
            Objects.deepEquals(this.i9Document, other.i9Document);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            i9Document);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeOnboardingDocument.class,
                "i9Document", i9Document);
    }
    
    public final static class Builder {
 
        private Optional<String> i9Document = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether to include Form I-9 for an employee during onboarding
         */
        public Builder i9Document(String i9Document) {
            Utils.checkNotNull(i9Document, "i9Document");
            this.i9Document = Optional.ofNullable(i9Document);
            return this;
        }

        /**
         * Whether to include Form I-9 for an employee during onboarding
         */
        public Builder i9Document(Optional<String> i9Document) {
            Utils.checkNotNull(i9Document, "i9Document");
            this.i9Document = i9Document;
            return this;
        }
        
        public EmployeeOnboardingDocument build() {
            return new EmployeeOnboardingDocument(
                i9Document);
        }
    }
}

