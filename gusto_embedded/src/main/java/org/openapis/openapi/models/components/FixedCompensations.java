/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class FixedCompensations {

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The amount of the compensation for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * The UUID of the job for the compensation.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("job_uuid")
    private Optional<String> jobUuid;

    @JsonCreator
    public FixedCompensations(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("job_uuid") Optional<String> jobUuid) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(jobUuid, "jobUuid");
        this.name = name;
        this.amount = amount;
        this.jobUuid = jobUuid;
    }
    
    public FixedCompensations() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The amount of the compensation for the pay period.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * The UUID of the job for the compensation.
     */
    @JsonIgnore
    public Optional<String> jobUuid() {
        return jobUuid;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    public FixedCompensations withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
     */
    public FixedCompensations withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The amount of the compensation for the pay period.
     */
    public FixedCompensations withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The amount of the compensation for the pay period.
     */
    public FixedCompensations withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The UUID of the job for the compensation.
     */
    public FixedCompensations withJobUuid(String jobUuid) {
        Utils.checkNotNull(jobUuid, "jobUuid");
        this.jobUuid = Optional.ofNullable(jobUuid);
        return this;
    }

    /**
     * The UUID of the job for the compensation.
     */
    public FixedCompensations withJobUuid(Optional<String> jobUuid) {
        Utils.checkNotNull(jobUuid, "jobUuid");
        this.jobUuid = jobUuid;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        FixedCompensations other = (FixedCompensations) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.jobUuid, other.jobUuid);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            amount,
            jobUuid);
    }
    
    @Override
    public String toString() {
        return Utils.toString(FixedCompensations.class,
                "name", name,
                "amount", amount,
                "jobUuid", jobUuid);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> jobUuid = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the compensation. This also serves as the unique, immutable identifier for this compensation.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The amount of the compensation for the pay period.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The amount of the compensation for the pay period.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The UUID of the job for the compensation.
         */
        public Builder jobUuid(String jobUuid) {
            Utils.checkNotNull(jobUuid, "jobUuid");
            this.jobUuid = Optional.ofNullable(jobUuid);
            return this;
        }

        /**
         * The UUID of the job for the compensation.
         */
        public Builder jobUuid(Optional<String> jobUuid) {
            Utils.checkNotNull(jobUuid, "jobUuid");
            this.jobUuid = jobUuid;
            return this;
        }
        
        public FixedCompensations build() {
            return new FixedCompensations(
                name,
                amount,
                jobUuid);
        }
    }
}

