/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ApplicableEarnings {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earning_type")
    private Optional<String> earningType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("earning_id")
    private Optional<Double> earningId;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("input_type")
    private Optional<String> inputType;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Optional<String> category;

    @JsonCreator
    public ApplicableEarnings(
            @JsonProperty("earning_type") Optional<String> earningType,
            @JsonProperty("earning_id") Optional<Double> earningId,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("input_type") Optional<String> inputType,
            @JsonProperty("category") Optional<String> category) {
        Utils.checkNotNull(earningType, "earningType");
        Utils.checkNotNull(earningId, "earningId");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(inputType, "inputType");
        Utils.checkNotNull(category, "category");
        this.earningType = earningType;
        this.earningId = earningId;
        this.name = name;
        this.inputType = inputType;
        this.category = category;
    }
    
    public ApplicableEarnings() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    @JsonIgnore
    public Optional<String> earningType() {
        return earningType;
    }

    @JsonIgnore
    public Optional<Double> earningId() {
        return earningId;
    }

    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    @JsonIgnore
    public Optional<String> inputType() {
        return inputType;
    }

    @JsonIgnore
    public Optional<String> category() {
        return category;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public ApplicableEarnings withEarningType(String earningType) {
        Utils.checkNotNull(earningType, "earningType");
        this.earningType = Optional.ofNullable(earningType);
        return this;
    }

    public ApplicableEarnings withEarningType(Optional<String> earningType) {
        Utils.checkNotNull(earningType, "earningType");
        this.earningType = earningType;
        return this;
    }

    public ApplicableEarnings withEarningId(double earningId) {
        Utils.checkNotNull(earningId, "earningId");
        this.earningId = Optional.ofNullable(earningId);
        return this;
    }

    public ApplicableEarnings withEarningId(Optional<Double> earningId) {
        Utils.checkNotNull(earningId, "earningId");
        this.earningId = earningId;
        return this;
    }

    public ApplicableEarnings withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    public ApplicableEarnings withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    public ApplicableEarnings withInputType(String inputType) {
        Utils.checkNotNull(inputType, "inputType");
        this.inputType = Optional.ofNullable(inputType);
        return this;
    }

    public ApplicableEarnings withInputType(Optional<String> inputType) {
        Utils.checkNotNull(inputType, "inputType");
        this.inputType = inputType;
        return this;
    }

    public ApplicableEarnings withCategory(String category) {
        Utils.checkNotNull(category, "category");
        this.category = Optional.ofNullable(category);
        return this;
    }

    public ApplicableEarnings withCategory(Optional<String> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ApplicableEarnings other = (ApplicableEarnings) o;
        return 
            Objects.deepEquals(this.earningType, other.earningType) &&
            Objects.deepEquals(this.earningId, other.earningId) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.inputType, other.inputType) &&
            Objects.deepEquals(this.category, other.category);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            earningType,
            earningId,
            name,
            inputType,
            category);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ApplicableEarnings.class,
                "earningType", earningType,
                "earningId", earningId,
                "name", name,
                "inputType", inputType,
                "category", category);
    }
    
    public final static class Builder {
 
        private Optional<String> earningType = Optional.empty();
 
        private Optional<Double> earningId = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> inputType = Optional.empty();
 
        private Optional<String> category = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder earningType(String earningType) {
            Utils.checkNotNull(earningType, "earningType");
            this.earningType = Optional.ofNullable(earningType);
            return this;
        }

        public Builder earningType(Optional<String> earningType) {
            Utils.checkNotNull(earningType, "earningType");
            this.earningType = earningType;
            return this;
        }

        public Builder earningId(double earningId) {
            Utils.checkNotNull(earningId, "earningId");
            this.earningId = Optional.ofNullable(earningId);
            return this;
        }

        public Builder earningId(Optional<Double> earningId) {
            Utils.checkNotNull(earningId, "earningId");
            this.earningId = earningId;
            return this;
        }

        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        public Builder inputType(String inputType) {
            Utils.checkNotNull(inputType, "inputType");
            this.inputType = Optional.ofNullable(inputType);
            return this;
        }

        public Builder inputType(Optional<String> inputType) {
            Utils.checkNotNull(inputType, "inputType");
            this.inputType = inputType;
            return this;
        }

        public Builder category(String category) {
            Utils.checkNotNull(category, "category");
            this.category = Optional.ofNullable(category);
            return this;
        }

        public Builder category(Optional<String> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }
        
        public ApplicableEarnings build() {
            return new ApplicableEarnings(
                earningType,
                earningId,
                name,
                inputType,
                category);
        }
    }
}

