/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * ChildSupportData - Child Support agency data
 */

public class ChildSupportData {

    /**
     * State child support agencies
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("agencies")
    private Optional<? extends List<Agencies>> agencies;

    @JsonCreator
    public ChildSupportData(
            @JsonProperty("agencies") Optional<? extends List<Agencies>> agencies) {
        Utils.checkNotNull(agencies, "agencies");
        this.agencies = agencies;
    }
    
    public ChildSupportData() {
        this(Optional.empty());
    }

    /**
     * State child support agencies
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<Agencies>> agencies() {
        return (Optional<List<Agencies>>) agencies;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * State child support agencies
     */
    public ChildSupportData withAgencies(List<Agencies> agencies) {
        Utils.checkNotNull(agencies, "agencies");
        this.agencies = Optional.ofNullable(agencies);
        return this;
    }

    /**
     * State child support agencies
     */
    public ChildSupportData withAgencies(Optional<? extends List<Agencies>> agencies) {
        Utils.checkNotNull(agencies, "agencies");
        this.agencies = agencies;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ChildSupportData other = (ChildSupportData) o;
        return 
            Objects.deepEquals(this.agencies, other.agencies);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            agencies);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ChildSupportData.class,
                "agencies", agencies);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<Agencies>> agencies = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * State child support agencies
         */
        public Builder agencies(List<Agencies> agencies) {
            Utils.checkNotNull(agencies, "agencies");
            this.agencies = Optional.ofNullable(agencies);
            return this;
        }

        /**
         * State child support agencies
         */
        public Builder agencies(Optional<? extends List<Agencies>> agencies) {
            Utils.checkNotNull(agencies, "agencies");
            this.agencies = agencies;
            return this;
        }
        
        public ChildSupportData build() {
            return new ChildSupportData(
                agencies);
        }
    }
}

