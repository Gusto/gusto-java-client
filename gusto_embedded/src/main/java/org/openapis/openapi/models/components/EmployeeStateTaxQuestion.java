/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.List;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class EmployeeStateTaxQuestion {

    /**
     * A short title for the question
     */
    @JsonProperty("label")
    private String label;

    /**
     * An explaination of the question - this may contain inline html formatted links.
     */
    @JsonProperty("description")
    private String description;

    /**
     * A unique identifier of the question (for the given state) - used for updating the answer.
     */
    @JsonProperty("key")
    private String key;

    @JsonProperty("input_question_format")
    private EmployeeStateTaxInputQuestionFormat inputQuestionFormat;

    @JsonProperty("answers")
    private List<EmployeeStateTaxAnswer> answers;

    @JsonCreator
    public EmployeeStateTaxQuestion(
            @JsonProperty("label") String label,
            @JsonProperty("description") String description,
            @JsonProperty("key") String key,
            @JsonProperty("input_question_format") EmployeeStateTaxInputQuestionFormat inputQuestionFormat,
            @JsonProperty("answers") List<EmployeeStateTaxAnswer> answers) {
        Utils.checkNotNull(label, "label");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(inputQuestionFormat, "inputQuestionFormat");
        Utils.checkNotNull(answers, "answers");
        this.label = label;
        this.description = description;
        this.key = key;
        this.inputQuestionFormat = inputQuestionFormat;
        this.answers = answers;
    }

    /**
     * A short title for the question
     */
    @JsonIgnore
    public String label() {
        return label;
    }

    /**
     * An explaination of the question - this may contain inline html formatted links.
     */
    @JsonIgnore
    public String description() {
        return description;
    }

    /**
     * A unique identifier of the question (for the given state) - used for updating the answer.
     */
    @JsonIgnore
    public String key() {
        return key;
    }

    @JsonIgnore
    public EmployeeStateTaxInputQuestionFormat inputQuestionFormat() {
        return inputQuestionFormat;
    }

    @JsonIgnore
    public List<EmployeeStateTaxAnswer> answers() {
        return answers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A short title for the question
     */
    public EmployeeStateTaxQuestion withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }

    /**
     * An explaination of the question - this may contain inline html formatted links.
     */
    public EmployeeStateTaxQuestion withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * A unique identifier of the question (for the given state) - used for updating the answer.
     */
    public EmployeeStateTaxQuestion withKey(String key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    public EmployeeStateTaxQuestion withInputQuestionFormat(EmployeeStateTaxInputQuestionFormat inputQuestionFormat) {
        Utils.checkNotNull(inputQuestionFormat, "inputQuestionFormat");
        this.inputQuestionFormat = inputQuestionFormat;
        return this;
    }

    public EmployeeStateTaxQuestion withAnswers(List<EmployeeStateTaxAnswer> answers) {
        Utils.checkNotNull(answers, "answers");
        this.answers = answers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeStateTaxQuestion other = (EmployeeStateTaxQuestion) o;
        return 
            Objects.deepEquals(this.label, other.label) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.inputQuestionFormat, other.inputQuestionFormat) &&
            Objects.deepEquals(this.answers, other.answers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            label,
            description,
            key,
            inputQuestionFormat,
            answers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeStateTaxQuestion.class,
                "label", label,
                "description", description,
                "key", key,
                "inputQuestionFormat", inputQuestionFormat,
                "answers", answers);
    }
    
    public final static class Builder {
 
        private String label;
 
        private String description;
 
        private String key;
 
        private EmployeeStateTaxInputQuestionFormat inputQuestionFormat;
 
        private List<EmployeeStateTaxAnswer> answers;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A short title for the question
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }

        /**
         * An explaination of the question - this may contain inline html formatted links.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * A unique identifier of the question (for the given state) - used for updating the answer.
         */
        public Builder key(String key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        public Builder inputQuestionFormat(EmployeeStateTaxInputQuestionFormat inputQuestionFormat) {
            Utils.checkNotNull(inputQuestionFormat, "inputQuestionFormat");
            this.inputQuestionFormat = inputQuestionFormat;
            return this;
        }

        public Builder answers(List<EmployeeStateTaxAnswer> answers) {
            Utils.checkNotNull(answers, "answers");
            this.answers = answers;
            return this;
        }
        
        public EmployeeStateTaxQuestion build() {
            return new EmployeeStateTaxQuestion(
                label,
                description,
                key,
                inputQuestionFormat,
                answers);
        }
    }
}

