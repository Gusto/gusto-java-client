/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Object;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;


public class Answers {

    @JsonProperty("value")
    private String value;

    @JsonProperty("valid_from")
    private String validFrom;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("valid_up_to")
    private JsonNullable<? extends Object> validUpTo;

    @JsonCreator
    public Answers(
            @JsonProperty("value") String value,
            @JsonProperty("valid_from") String validFrom,
            @JsonProperty("valid_up_to") JsonNullable<? extends Object> validUpTo) {
        Utils.checkNotNull(value, "value");
        Utils.checkNotNull(validFrom, "validFrom");
        Utils.checkNotNull(validUpTo, "validUpTo");
        this.value = value;
        this.validFrom = validFrom;
        this.validUpTo = validUpTo;
    }
    
    public Answers(
            String value,
            String validFrom) {
        this(value, validFrom, JsonNullable.undefined());
    }

    @JsonIgnore
    public String value() {
        return value;
    }

    @JsonIgnore
    public String validFrom() {
        return validFrom;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Object> validUpTo() {
        return (JsonNullable<Object>) validUpTo;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Answers withValue(String value) {
        Utils.checkNotNull(value, "value");
        this.value = value;
        return this;
    }

    public Answers withValidFrom(String validFrom) {
        Utils.checkNotNull(validFrom, "validFrom");
        this.validFrom = validFrom;
        return this;
    }

    public Answers withValidUpTo(Object validUpTo) {
        Utils.checkNotNull(validUpTo, "validUpTo");
        this.validUpTo = JsonNullable.of(validUpTo);
        return this;
    }

    public Answers withValidUpTo(JsonNullable<? extends Object> validUpTo) {
        Utils.checkNotNull(validUpTo, "validUpTo");
        this.validUpTo = validUpTo;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Answers other = (Answers) o;
        return 
            Objects.deepEquals(this.value, other.value) &&
            Objects.deepEquals(this.validFrom, other.validFrom) &&
            Objects.deepEquals(this.validUpTo, other.validUpTo);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            value,
            validFrom,
            validUpTo);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Answers.class,
                "value", value,
                "validFrom", validFrom,
                "validUpTo", validUpTo);
    }
    
    public final static class Builder {
 
        private String value;
 
        private String validFrom;
 
        private JsonNullable<? extends Object> validUpTo = JsonNullable.undefined();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder value(String value) {
            Utils.checkNotNull(value, "value");
            this.value = value;
            return this;
        }

        public Builder validFrom(String validFrom) {
            Utils.checkNotNull(validFrom, "validFrom");
            this.validFrom = validFrom;
            return this;
        }

        public Builder validUpTo(Object validUpTo) {
            Utils.checkNotNull(validUpTo, "validUpTo");
            this.validUpTo = JsonNullable.of(validUpTo);
            return this;
        }

        public Builder validUpTo(JsonNullable<? extends Object> validUpTo) {
            Utils.checkNotNull(validUpTo, "validUpTo");
            this.validUpTo = validUpTo;
            return this;
        }
        
        public Answers build() {
            return new Answers(
                value,
                validFrom,
                validUpTo);
        }
    }
}

