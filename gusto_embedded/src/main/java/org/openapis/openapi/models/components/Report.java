/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * Report - Example response
 */

public class Report {

    /**
     * A unique identifier of the report request
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("request_uuid")
    private Optional<String> requestUuid;

    /**
     * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("status")
    private Optional<String> status;

    /**
     * The array of urls to access the report
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_urls")
    private Optional<? extends List<String>> reportUrls;

    @JsonCreator
    public Report(
            @JsonProperty("request_uuid") Optional<String> requestUuid,
            @JsonProperty("status") Optional<String> status,
            @JsonProperty("report_urls") Optional<? extends List<String>> reportUrls) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        Utils.checkNotNull(status, "status");
        Utils.checkNotNull(reportUrls, "reportUrls");
        this.requestUuid = requestUuid;
        this.status = status;
        this.reportUrls = reportUrls;
    }
    
    public Report() {
        this(Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A unique identifier of the report request
     */
    @JsonIgnore
    public Optional<String> requestUuid() {
        return requestUuid;
    }

    /**
     * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
     */
    @JsonIgnore
    public Optional<String> status() {
        return status;
    }

    /**
     * The array of urls to access the report
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> reportUrls() {
        return (Optional<List<String>>) reportUrls;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A unique identifier of the report request
     */
    public Report withRequestUuid(String requestUuid) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.requestUuid = Optional.ofNullable(requestUuid);
        return this;
    }

    /**
     * A unique identifier of the report request
     */
    public Report withRequestUuid(Optional<String> requestUuid) {
        Utils.checkNotNull(requestUuid, "requestUuid");
        this.requestUuid = requestUuid;
        return this;
    }

    /**
     * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
     */
    public Report withStatus(String status) {
        Utils.checkNotNull(status, "status");
        this.status = Optional.ofNullable(status);
        return this;
    }

    /**
     * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
     */
    public Report withStatus(Optional<String> status) {
        Utils.checkNotNull(status, "status");
        this.status = status;
        return this;
    }

    /**
     * The array of urls to access the report
     */
    public Report withReportUrls(List<String> reportUrls) {
        Utils.checkNotNull(reportUrls, "reportUrls");
        this.reportUrls = Optional.ofNullable(reportUrls);
        return this;
    }

    /**
     * The array of urls to access the report
     */
    public Report withReportUrls(Optional<? extends List<String>> reportUrls) {
        Utils.checkNotNull(reportUrls, "reportUrls");
        this.reportUrls = reportUrls;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Report other = (Report) o;
        return 
            Objects.deepEquals(this.requestUuid, other.requestUuid) &&
            Objects.deepEquals(this.status, other.status) &&
            Objects.deepEquals(this.reportUrls, other.reportUrls);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            requestUuid,
            status,
            reportUrls);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Report.class,
                "requestUuid", requestUuid,
                "status", status,
                "reportUrls", reportUrls);
    }
    
    public final static class Builder {
 
        private Optional<String> requestUuid = Optional.empty();
 
        private Optional<String> status = Optional.empty();
 
        private Optional<? extends List<String>> reportUrls = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A unique identifier of the report request
         */
        public Builder requestUuid(String requestUuid) {
            Utils.checkNotNull(requestUuid, "requestUuid");
            this.requestUuid = Optional.ofNullable(requestUuid);
            return this;
        }

        /**
         * A unique identifier of the report request
         */
        public Builder requestUuid(Optional<String> requestUuid) {
            Utils.checkNotNull(requestUuid, "requestUuid");
            this.requestUuid = requestUuid;
            return this;
        }

        /**
         * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
         */
        public Builder status(String status) {
            Utils.checkNotNull(status, "status");
            this.status = Optional.ofNullable(status);
            return this;
        }

        /**
         * Current status of the report, possible values are 'succeeded', 'pending', or 'failed'
         */
        public Builder status(Optional<String> status) {
            Utils.checkNotNull(status, "status");
            this.status = status;
            return this;
        }

        /**
         * The array of urls to access the report
         */
        public Builder reportUrls(List<String> reportUrls) {
            Utils.checkNotNull(reportUrls, "reportUrls");
            this.reportUrls = Optional.ofNullable(reportUrls);
            return this;
        }

        /**
         * The array of urls to access the report
         */
        public Builder reportUrls(Optional<? extends List<String>> reportUrls) {
            Utils.checkNotNull(reportUrls, "reportUrls");
            this.reportUrls = reportUrls;
            return this;
        }
        
        public Report build() {
            return new Report(
                requestUuid,
                status,
                reportUrls);
        }
    }
}

