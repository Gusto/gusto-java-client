/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class ContractorPaymentGroupMinimalTotals {

    /**
     * The total amount for the group of contractor payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("amount")
    private Optional<String> amount;

    /**
     * The total debit amount for the group of contractor payments. Sum of wage &amp; reimbursement amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("debit_amount")
    private Optional<String> debitAmount;

    /**
     * The total wage amount for the group of contractor payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("wage_amount")
    private Optional<String> wageAmount;

    /**
     * The total reimbursement amount for the group of contractor payments.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("reimbursement_amount")
    private Optional<String> reimbursementAmount;

    @JsonCreator
    public ContractorPaymentGroupMinimalTotals(
            @JsonProperty("amount") Optional<String> amount,
            @JsonProperty("debit_amount") Optional<String> debitAmount,
            @JsonProperty("wage_amount") Optional<String> wageAmount,
            @JsonProperty("reimbursement_amount") Optional<String> reimbursementAmount) {
        Utils.checkNotNull(amount, "amount");
        Utils.checkNotNull(debitAmount, "debitAmount");
        Utils.checkNotNull(wageAmount, "wageAmount");
        Utils.checkNotNull(reimbursementAmount, "reimbursementAmount");
        this.amount = amount;
        this.debitAmount = debitAmount;
        this.wageAmount = wageAmount;
        this.reimbursementAmount = reimbursementAmount;
    }
    
    public ContractorPaymentGroupMinimalTotals() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The total amount for the group of contractor payments.
     */
    @JsonIgnore
    public Optional<String> amount() {
        return amount;
    }

    /**
     * The total debit amount for the group of contractor payments. Sum of wage &amp; reimbursement amount.
     */
    @JsonIgnore
    public Optional<String> debitAmount() {
        return debitAmount;
    }

    /**
     * The total wage amount for the group of contractor payments.
     */
    @JsonIgnore
    public Optional<String> wageAmount() {
        return wageAmount;
    }

    /**
     * The total reimbursement amount for the group of contractor payments.
     */
    @JsonIgnore
    public Optional<String> reimbursementAmount() {
        return reimbursementAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The total amount for the group of contractor payments.
     */
    public ContractorPaymentGroupMinimalTotals withAmount(String amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = Optional.ofNullable(amount);
        return this;
    }

    /**
     * The total amount for the group of contractor payments.
     */
    public ContractorPaymentGroupMinimalTotals withAmount(Optional<String> amount) {
        Utils.checkNotNull(amount, "amount");
        this.amount = amount;
        return this;
    }

    /**
     * The total debit amount for the group of contractor payments. Sum of wage &amp; reimbursement amount.
     */
    public ContractorPaymentGroupMinimalTotals withDebitAmount(String debitAmount) {
        Utils.checkNotNull(debitAmount, "debitAmount");
        this.debitAmount = Optional.ofNullable(debitAmount);
        return this;
    }

    /**
     * The total debit amount for the group of contractor payments. Sum of wage &amp; reimbursement amount.
     */
    public ContractorPaymentGroupMinimalTotals withDebitAmount(Optional<String> debitAmount) {
        Utils.checkNotNull(debitAmount, "debitAmount");
        this.debitAmount = debitAmount;
        return this;
    }

    /**
     * The total wage amount for the group of contractor payments.
     */
    public ContractorPaymentGroupMinimalTotals withWageAmount(String wageAmount) {
        Utils.checkNotNull(wageAmount, "wageAmount");
        this.wageAmount = Optional.ofNullable(wageAmount);
        return this;
    }

    /**
     * The total wage amount for the group of contractor payments.
     */
    public ContractorPaymentGroupMinimalTotals withWageAmount(Optional<String> wageAmount) {
        Utils.checkNotNull(wageAmount, "wageAmount");
        this.wageAmount = wageAmount;
        return this;
    }

    /**
     * The total reimbursement amount for the group of contractor payments.
     */
    public ContractorPaymentGroupMinimalTotals withReimbursementAmount(String reimbursementAmount) {
        Utils.checkNotNull(reimbursementAmount, "reimbursementAmount");
        this.reimbursementAmount = Optional.ofNullable(reimbursementAmount);
        return this;
    }

    /**
     * The total reimbursement amount for the group of contractor payments.
     */
    public ContractorPaymentGroupMinimalTotals withReimbursementAmount(Optional<String> reimbursementAmount) {
        Utils.checkNotNull(reimbursementAmount, "reimbursementAmount");
        this.reimbursementAmount = reimbursementAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ContractorPaymentGroupMinimalTotals other = (ContractorPaymentGroupMinimalTotals) o;
        return 
            Objects.deepEquals(this.amount, other.amount) &&
            Objects.deepEquals(this.debitAmount, other.debitAmount) &&
            Objects.deepEquals(this.wageAmount, other.wageAmount) &&
            Objects.deepEquals(this.reimbursementAmount, other.reimbursementAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            amount,
            debitAmount,
            wageAmount,
            reimbursementAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ContractorPaymentGroupMinimalTotals.class,
                "amount", amount,
                "debitAmount", debitAmount,
                "wageAmount", wageAmount,
                "reimbursementAmount", reimbursementAmount);
    }
    
    public final static class Builder {
 
        private Optional<String> amount = Optional.empty();
 
        private Optional<String> debitAmount = Optional.empty();
 
        private Optional<String> wageAmount = Optional.empty();
 
        private Optional<String> reimbursementAmount = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The total amount for the group of contractor payments.
         */
        public Builder amount(String amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = Optional.ofNullable(amount);
            return this;
        }

        /**
         * The total amount for the group of contractor payments.
         */
        public Builder amount(Optional<String> amount) {
            Utils.checkNotNull(amount, "amount");
            this.amount = amount;
            return this;
        }

        /**
         * The total debit amount for the group of contractor payments. Sum of wage &amp; reimbursement amount.
         */
        public Builder debitAmount(String debitAmount) {
            Utils.checkNotNull(debitAmount, "debitAmount");
            this.debitAmount = Optional.ofNullable(debitAmount);
            return this;
        }

        /**
         * The total debit amount for the group of contractor payments. Sum of wage &amp; reimbursement amount.
         */
        public Builder debitAmount(Optional<String> debitAmount) {
            Utils.checkNotNull(debitAmount, "debitAmount");
            this.debitAmount = debitAmount;
            return this;
        }

        /**
         * The total wage amount for the group of contractor payments.
         */
        public Builder wageAmount(String wageAmount) {
            Utils.checkNotNull(wageAmount, "wageAmount");
            this.wageAmount = Optional.ofNullable(wageAmount);
            return this;
        }

        /**
         * The total wage amount for the group of contractor payments.
         */
        public Builder wageAmount(Optional<String> wageAmount) {
            Utils.checkNotNull(wageAmount, "wageAmount");
            this.wageAmount = wageAmount;
            return this;
        }

        /**
         * The total reimbursement amount for the group of contractor payments.
         */
        public Builder reimbursementAmount(String reimbursementAmount) {
            Utils.checkNotNull(reimbursementAmount, "reimbursementAmount");
            this.reimbursementAmount = Optional.ofNullable(reimbursementAmount);
            return this;
        }

        /**
         * The total reimbursement amount for the group of contractor payments.
         */
        public Builder reimbursementAmount(Optional<String> reimbursementAmount) {
            Utils.checkNotNull(reimbursementAmount, "reimbursementAmount");
            this.reimbursementAmount = reimbursementAmount;
            return this;
        }
        
        public ContractorPaymentGroupMinimalTotals build() {
            return new ContractorPaymentGroupMinimalTotals(
                amount,
                debitAmount,
                wageAmount,
                reimbursementAmount);
        }
    }
}

