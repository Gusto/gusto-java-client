/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class PostV1CompaniesCompanyIdPayrollsRequestBody {

    /**
     * Whether it is an off cycle payroll.
     */
    @JsonProperty("off_cycle")
    private boolean offCycle;

    /**
     * An off cycle payroll reason. Select one from the following list.
     */
    @JsonProperty("off_cycle_reason")
    private OffCycleReason offCycleReason;

    /**
     * Pay period start date.
     */
    @JsonProperty("start_date")
    private String startDate;

    /**
     * Pay period end date.
     */
    @JsonProperty("end_date")
    private String endDate;

    /**
     * A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_schedule_uuid")
    private Optional<String> payScheduleUuid;

    /**
     * A list of employee uuids to include on the payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuids")
    private Optional<? extends List<String>> employeeUuids;

    /**
     * Payment date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * The payment schedule tax rate the payroll is based on.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("withholding_pay_period")
    private Optional<? extends WithholdingPayPeriod> withholdingPayPeriod;

    /**
     * Block regular deductions and contributions for this payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("skip_regular_deductions")
    private Optional<Boolean> skipRegularDeductions;

    /**
     * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("fixed_withholding_rate")
    private Optional<Boolean> fixedWithholdingRate;

    @JsonCreator
    public PostV1CompaniesCompanyIdPayrollsRequestBody(
            @JsonProperty("off_cycle") boolean offCycle,
            @JsonProperty("off_cycle_reason") OffCycleReason offCycleReason,
            @JsonProperty("start_date") String startDate,
            @JsonProperty("end_date") String endDate,
            @JsonProperty("pay_schedule_uuid") Optional<String> payScheduleUuid,
            @JsonProperty("employee_uuids") Optional<? extends List<String>> employeeUuids,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("withholding_pay_period") Optional<? extends WithholdingPayPeriod> withholdingPayPeriod,
            @JsonProperty("skip_regular_deductions") Optional<Boolean> skipRegularDeductions,
            @JsonProperty("fixed_withholding_rate") Optional<Boolean> fixedWithholdingRate) {
        Utils.checkNotNull(offCycle, "offCycle");
        Utils.checkNotNull(offCycleReason, "offCycleReason");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        Utils.checkNotNull(employeeUuids, "employeeUuids");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(withholdingPayPeriod, "withholdingPayPeriod");
        Utils.checkNotNull(skipRegularDeductions, "skipRegularDeductions");
        Utils.checkNotNull(fixedWithholdingRate, "fixedWithholdingRate");
        this.offCycle = offCycle;
        this.offCycleReason = offCycleReason;
        this.startDate = startDate;
        this.endDate = endDate;
        this.payScheduleUuid = payScheduleUuid;
        this.employeeUuids = employeeUuids;
        this.checkDate = checkDate;
        this.withholdingPayPeriod = withholdingPayPeriod;
        this.skipRegularDeductions = skipRegularDeductions;
        this.fixedWithholdingRate = fixedWithholdingRate;
    }
    
    public PostV1CompaniesCompanyIdPayrollsRequestBody(
            boolean offCycle,
            OffCycleReason offCycleReason,
            String startDate,
            String endDate) {
        this(offCycle, offCycleReason, startDate, endDate, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * Whether it is an off cycle payroll.
     */
    @JsonIgnore
    public boolean offCycle() {
        return offCycle;
    }

    /**
     * An off cycle payroll reason. Select one from the following list.
     */
    @JsonIgnore
    public OffCycleReason offCycleReason() {
        return offCycleReason;
    }

    /**
     * Pay period start date.
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    /**
     * Pay period end date.
     */
    @JsonIgnore
    public String endDate() {
        return endDate;
    }

    /**
     * A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
     */
    @JsonIgnore
    public Optional<String> payScheduleUuid() {
        return payScheduleUuid;
    }

    /**
     * A list of employee uuids to include on the payroll.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> employeeUuids() {
        return (Optional<List<String>>) employeeUuids;
    }

    /**
     * Payment date.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * The payment schedule tax rate the payroll is based on.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<WithholdingPayPeriod> withholdingPayPeriod() {
        return (Optional<WithholdingPayPeriod>) withholdingPayPeriod;
    }

    /**
     * Block regular deductions and contributions for this payroll.
     */
    @JsonIgnore
    public Optional<Boolean> skipRegularDeductions() {
        return skipRegularDeductions;
    }

    /**
     * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
     */
    @JsonIgnore
    public Optional<Boolean> fixedWithholdingRate() {
        return fixedWithholdingRate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Whether it is an off cycle payroll.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withOffCycle(boolean offCycle) {
        Utils.checkNotNull(offCycle, "offCycle");
        this.offCycle = offCycle;
        return this;
    }

    /**
     * An off cycle payroll reason. Select one from the following list.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withOffCycleReason(OffCycleReason offCycleReason) {
        Utils.checkNotNull(offCycleReason, "offCycleReason");
        this.offCycleReason = offCycleReason;
        return this;
    }

    /**
     * Pay period start date.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * Pay period end date.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withPayScheduleUuid(String payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
        return this;
    }

    /**
     * A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withPayScheduleUuid(Optional<String> payScheduleUuid) {
        Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
        this.payScheduleUuid = payScheduleUuid;
        return this;
    }

    /**
     * A list of employee uuids to include on the payroll.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withEmployeeUuids(List<String> employeeUuids) {
        Utils.checkNotNull(employeeUuids, "employeeUuids");
        this.employeeUuids = Optional.ofNullable(employeeUuids);
        return this;
    }

    /**
     * A list of employee uuids to include on the payroll.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withEmployeeUuids(Optional<? extends List<String>> employeeUuids) {
        Utils.checkNotNull(employeeUuids, "employeeUuids");
        this.employeeUuids = employeeUuids;
        return this;
    }

    /**
     * Payment date.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * Payment date.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * The payment schedule tax rate the payroll is based on.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withWithholdingPayPeriod(WithholdingPayPeriod withholdingPayPeriod) {
        Utils.checkNotNull(withholdingPayPeriod, "withholdingPayPeriod");
        this.withholdingPayPeriod = Optional.ofNullable(withholdingPayPeriod);
        return this;
    }

    /**
     * The payment schedule tax rate the payroll is based on.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withWithholdingPayPeriod(Optional<? extends WithholdingPayPeriod> withholdingPayPeriod) {
        Utils.checkNotNull(withholdingPayPeriod, "withholdingPayPeriod");
        this.withholdingPayPeriod = withholdingPayPeriod;
        return this;
    }

    /**
     * Block regular deductions and contributions for this payroll.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withSkipRegularDeductions(boolean skipRegularDeductions) {
        Utils.checkNotNull(skipRegularDeductions, "skipRegularDeductions");
        this.skipRegularDeductions = Optional.ofNullable(skipRegularDeductions);
        return this;
    }

    /**
     * Block regular deductions and contributions for this payroll.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withSkipRegularDeductions(Optional<Boolean> skipRegularDeductions) {
        Utils.checkNotNull(skipRegularDeductions, "skipRegularDeductions");
        this.skipRegularDeductions = skipRegularDeductions;
        return this;
    }

    /**
     * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withFixedWithholdingRate(boolean fixedWithholdingRate) {
        Utils.checkNotNull(fixedWithholdingRate, "fixedWithholdingRate");
        this.fixedWithholdingRate = Optional.ofNullable(fixedWithholdingRate);
        return this;
    }

    /**
     * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
     */
    public PostV1CompaniesCompanyIdPayrollsRequestBody withFixedWithholdingRate(Optional<Boolean> fixedWithholdingRate) {
        Utils.checkNotNull(fixedWithholdingRate, "fixedWithholdingRate");
        this.fixedWithholdingRate = fixedWithholdingRate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1CompaniesCompanyIdPayrollsRequestBody other = (PostV1CompaniesCompanyIdPayrollsRequestBody) o;
        return 
            Objects.deepEquals(this.offCycle, other.offCycle) &&
            Objects.deepEquals(this.offCycleReason, other.offCycleReason) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.payScheduleUuid, other.payScheduleUuid) &&
            Objects.deepEquals(this.employeeUuids, other.employeeUuids) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.withholdingPayPeriod, other.withholdingPayPeriod) &&
            Objects.deepEquals(this.skipRegularDeductions, other.skipRegularDeductions) &&
            Objects.deepEquals(this.fixedWithholdingRate, other.fixedWithholdingRate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            offCycle,
            offCycleReason,
            startDate,
            endDate,
            payScheduleUuid,
            employeeUuids,
            checkDate,
            withholdingPayPeriod,
            skipRegularDeductions,
            fixedWithholdingRate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1CompaniesCompanyIdPayrollsRequestBody.class,
                "offCycle", offCycle,
                "offCycleReason", offCycleReason,
                "startDate", startDate,
                "endDate", endDate,
                "payScheduleUuid", payScheduleUuid,
                "employeeUuids", employeeUuids,
                "checkDate", checkDate,
                "withholdingPayPeriod", withholdingPayPeriod,
                "skipRegularDeductions", skipRegularDeductions,
                "fixedWithholdingRate", fixedWithholdingRate);
    }
    
    public final static class Builder {
 
        private Boolean offCycle;
 
        private OffCycleReason offCycleReason;
 
        private String startDate;
 
        private String endDate;
 
        private Optional<String> payScheduleUuid = Optional.empty();
 
        private Optional<? extends List<String>> employeeUuids = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<? extends WithholdingPayPeriod> withholdingPayPeriod = Optional.empty();
 
        private Optional<Boolean> skipRegularDeductions = Optional.empty();
 
        private Optional<Boolean> fixedWithholdingRate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Whether it is an off cycle payroll.
         */
        public Builder offCycle(boolean offCycle) {
            Utils.checkNotNull(offCycle, "offCycle");
            this.offCycle = offCycle;
            return this;
        }

        /**
         * An off cycle payroll reason. Select one from the following list.
         */
        public Builder offCycleReason(OffCycleReason offCycleReason) {
            Utils.checkNotNull(offCycleReason, "offCycleReason");
            this.offCycleReason = offCycleReason;
            return this;
        }

        /**
         * Pay period start date.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * Pay period end date.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
         */
        public Builder payScheduleUuid(String payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = Optional.ofNullable(payScheduleUuid);
            return this;
        }

        /**
         * A pay schedule is required for transition from old pay schedule payroll to identify the matching transition pay period.
         */
        public Builder payScheduleUuid(Optional<String> payScheduleUuid) {
            Utils.checkNotNull(payScheduleUuid, "payScheduleUuid");
            this.payScheduleUuid = payScheduleUuid;
            return this;
        }

        /**
         * A list of employee uuids to include on the payroll.
         */
        public Builder employeeUuids(List<String> employeeUuids) {
            Utils.checkNotNull(employeeUuids, "employeeUuids");
            this.employeeUuids = Optional.ofNullable(employeeUuids);
            return this;
        }

        /**
         * A list of employee uuids to include on the payroll.
         */
        public Builder employeeUuids(Optional<? extends List<String>> employeeUuids) {
            Utils.checkNotNull(employeeUuids, "employeeUuids");
            this.employeeUuids = employeeUuids;
            return this;
        }

        /**
         * Payment date.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * Payment date.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * The payment schedule tax rate the payroll is based on.
         */
        public Builder withholdingPayPeriod(WithholdingPayPeriod withholdingPayPeriod) {
            Utils.checkNotNull(withholdingPayPeriod, "withholdingPayPeriod");
            this.withholdingPayPeriod = Optional.ofNullable(withholdingPayPeriod);
            return this;
        }

        /**
         * The payment schedule tax rate the payroll is based on.
         */
        public Builder withholdingPayPeriod(Optional<? extends WithholdingPayPeriod> withholdingPayPeriod) {
            Utils.checkNotNull(withholdingPayPeriod, "withholdingPayPeriod");
            this.withholdingPayPeriod = withholdingPayPeriod;
            return this;
        }

        /**
         * Block regular deductions and contributions for this payroll.
         */
        public Builder skipRegularDeductions(boolean skipRegularDeductions) {
            Utils.checkNotNull(skipRegularDeductions, "skipRegularDeductions");
            this.skipRegularDeductions = Optional.ofNullable(skipRegularDeductions);
            return this;
        }

        /**
         * Block regular deductions and contributions for this payroll.
         */
        public Builder skipRegularDeductions(Optional<Boolean> skipRegularDeductions) {
            Utils.checkNotNull(skipRegularDeductions, "skipRegularDeductions");
            this.skipRegularDeductions = skipRegularDeductions;
            return this;
        }

        /**
         * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
         */
        public Builder fixedWithholdingRate(boolean fixedWithholdingRate) {
            Utils.checkNotNull(fixedWithholdingRate, "fixedWithholdingRate");
            this.fixedWithholdingRate = Optional.ofNullable(fixedWithholdingRate);
            return this;
        }

        /**
         * Enable taxes to be withheld at the IRS's required rate of 22% for federal income taxes. State income taxes will be taxed at the state's supplemental tax rate. Otherwise, we'll sum the entirety of the employee's wages and withhold taxes on the entire amount at the rate for regular wages.
         */
        public Builder fixedWithholdingRate(Optional<Boolean> fixedWithholdingRate) {
            Utils.checkNotNull(fixedWithholdingRate, "fixedWithholdingRate");
            this.fixedWithholdingRate = fixedWithholdingRate;
            return this;
        }
        
        public PostV1CompaniesCompanyIdPayrollsRequestBody build() {
            return new PostV1CompaniesCompanyIdPayrollsRequestBody(
                offCycle,
                offCycleReason,
                startDate,
                endDate,
                payScheduleUuid,
                employeeUuids,
                checkDate,
                withholdingPayPeriod,
                skipRegularDeductions,
                fixedWithholdingRate);
        }
    }
}

