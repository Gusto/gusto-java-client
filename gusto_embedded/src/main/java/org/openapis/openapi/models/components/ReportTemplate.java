/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * ReportTemplate - Example response
 */

public class ReportTemplate {

    /**
     * List of columns recommended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("columns")
    private Optional<? extends List<String>> columns;

    /**
     * List of groupings recommended
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("groupings")
    private Optional<? extends List<String>> groupings;

    /**
     * Company UUID
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_uuid")
    private Optional<String> companyUuid;

    /**
     * Type of report template
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("report_type")
    private Optional<String> reportType;

    @JsonCreator
    public ReportTemplate(
            @JsonProperty("columns") Optional<? extends List<String>> columns,
            @JsonProperty("groupings") Optional<? extends List<String>> groupings,
            @JsonProperty("company_uuid") Optional<String> companyUuid,
            @JsonProperty("report_type") Optional<String> reportType) {
        Utils.checkNotNull(columns, "columns");
        Utils.checkNotNull(groupings, "groupings");
        Utils.checkNotNull(companyUuid, "companyUuid");
        Utils.checkNotNull(reportType, "reportType");
        this.columns = columns;
        this.groupings = groupings;
        this.companyUuid = companyUuid;
        this.reportType = reportType;
    }
    
    public ReportTemplate() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * List of columns recommended
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> columns() {
        return (Optional<List<String>>) columns;
    }

    /**
     * List of groupings recommended
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<String>> groupings() {
        return (Optional<List<String>>) groupings;
    }

    /**
     * Company UUID
     */
    @JsonIgnore
    public Optional<String> companyUuid() {
        return companyUuid;
    }

    /**
     * Type of report template
     */
    @JsonIgnore
    public Optional<String> reportType() {
        return reportType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * List of columns recommended
     */
    public ReportTemplate withColumns(List<String> columns) {
        Utils.checkNotNull(columns, "columns");
        this.columns = Optional.ofNullable(columns);
        return this;
    }

    /**
     * List of columns recommended
     */
    public ReportTemplate withColumns(Optional<? extends List<String>> columns) {
        Utils.checkNotNull(columns, "columns");
        this.columns = columns;
        return this;
    }

    /**
     * List of groupings recommended
     */
    public ReportTemplate withGroupings(List<String> groupings) {
        Utils.checkNotNull(groupings, "groupings");
        this.groupings = Optional.ofNullable(groupings);
        return this;
    }

    /**
     * List of groupings recommended
     */
    public ReportTemplate withGroupings(Optional<? extends List<String>> groupings) {
        Utils.checkNotNull(groupings, "groupings");
        this.groupings = groupings;
        return this;
    }

    /**
     * Company UUID
     */
    public ReportTemplate withCompanyUuid(String companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = Optional.ofNullable(companyUuid);
        return this;
    }

    /**
     * Company UUID
     */
    public ReportTemplate withCompanyUuid(Optional<String> companyUuid) {
        Utils.checkNotNull(companyUuid, "companyUuid");
        this.companyUuid = companyUuid;
        return this;
    }

    /**
     * Type of report template
     */
    public ReportTemplate withReportType(String reportType) {
        Utils.checkNotNull(reportType, "reportType");
        this.reportType = Optional.ofNullable(reportType);
        return this;
    }

    /**
     * Type of report template
     */
    public ReportTemplate withReportType(Optional<String> reportType) {
        Utils.checkNotNull(reportType, "reportType");
        this.reportType = reportType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        ReportTemplate other = (ReportTemplate) o;
        return 
            Objects.deepEquals(this.columns, other.columns) &&
            Objects.deepEquals(this.groupings, other.groupings) &&
            Objects.deepEquals(this.companyUuid, other.companyUuid) &&
            Objects.deepEquals(this.reportType, other.reportType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            columns,
            groupings,
            companyUuid,
            reportType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(ReportTemplate.class,
                "columns", columns,
                "groupings", groupings,
                "companyUuid", companyUuid,
                "reportType", reportType);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<String>> columns = Optional.empty();
 
        private Optional<? extends List<String>> groupings = Optional.empty();
 
        private Optional<String> companyUuid = Optional.empty();
 
        private Optional<String> reportType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * List of columns recommended
         */
        public Builder columns(List<String> columns) {
            Utils.checkNotNull(columns, "columns");
            this.columns = Optional.ofNullable(columns);
            return this;
        }

        /**
         * List of columns recommended
         */
        public Builder columns(Optional<? extends List<String>> columns) {
            Utils.checkNotNull(columns, "columns");
            this.columns = columns;
            return this;
        }

        /**
         * List of groupings recommended
         */
        public Builder groupings(List<String> groupings) {
            Utils.checkNotNull(groupings, "groupings");
            this.groupings = Optional.ofNullable(groupings);
            return this;
        }

        /**
         * List of groupings recommended
         */
        public Builder groupings(Optional<? extends List<String>> groupings) {
            Utils.checkNotNull(groupings, "groupings");
            this.groupings = groupings;
            return this;
        }

        /**
         * Company UUID
         */
        public Builder companyUuid(String companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = Optional.ofNullable(companyUuid);
            return this;
        }

        /**
         * Company UUID
         */
        public Builder companyUuid(Optional<String> companyUuid) {
            Utils.checkNotNull(companyUuid, "companyUuid");
            this.companyUuid = companyUuid;
            return this;
        }

        /**
         * Type of report template
         */
        public Builder reportType(String reportType) {
            Utils.checkNotNull(reportType, "reportType");
            this.reportType = Optional.ofNullable(reportType);
            return this;
        }

        /**
         * Type of report template
         */
        public Builder reportType(Optional<String> reportType) {
            Utils.checkNotNull(reportType, "reportType");
            this.reportType = reportType;
            return this;
        }
        
        public ReportTemplate build() {
            return new ReportTemplate(
                columns,
                groupings,
                companyUuid,
                reportType);
        }
    }
}

