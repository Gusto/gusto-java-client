/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.time.OffsetDateTime;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * PayPeriodPayroll - Information about the payroll for the pay period.
 */

public class PayPeriodPayroll {

    /**
     * The UUID of the payroll for this pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_uuid")
    private Optional<String> payrollUuid;

    /**
     * The date on which employees will be paid for the payroll if the payroll is submitted on time.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_date")
    private Optional<String> checkDate;

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("processed")
    private Optional<Boolean> processed;

    /**
     * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_deadline")
    private Optional<OffsetDateTime> payrollDeadline;

    /**
     * Whether it is regular pay period or transition pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payroll_type")
    private Optional<? extends PayrollType> payrollType;

    @JsonCreator
    public PayPeriodPayroll(
            @JsonProperty("payroll_uuid") Optional<String> payrollUuid,
            @JsonProperty("check_date") Optional<String> checkDate,
            @JsonProperty("processed") Optional<Boolean> processed,
            @JsonProperty("payroll_deadline") Optional<OffsetDateTime> payrollDeadline,
            @JsonProperty("payroll_type") Optional<? extends PayrollType> payrollType) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        Utils.checkNotNull(checkDate, "checkDate");
        Utils.checkNotNull(processed, "processed");
        Utils.checkNotNull(payrollDeadline, "payrollDeadline");
        Utils.checkNotNull(payrollType, "payrollType");
        this.payrollUuid = payrollUuid;
        this.checkDate = checkDate;
        this.processed = processed;
        this.payrollDeadline = payrollDeadline;
        this.payrollType = payrollType;
    }
    
    public PayPeriodPayroll() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the payroll for this pay period.
     */
    @JsonIgnore
    public Optional<String> payrollUuid() {
        return payrollUuid;
    }

    /**
     * The date on which employees will be paid for the payroll if the payroll is submitted on time.
     */
    @JsonIgnore
    public Optional<String> checkDate() {
        return checkDate;
    }

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
     */
    @JsonIgnore
    public Optional<Boolean> processed() {
        return processed;
    }

    /**
     * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
     */
    @JsonIgnore
    public Optional<OffsetDateTime> payrollDeadline() {
        return payrollDeadline;
    }

    /**
     * Whether it is regular pay period or transition pay period.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PayrollType> payrollType() {
        return (Optional<PayrollType>) payrollType;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the payroll for this pay period.
     */
    public PayPeriodPayroll withPayrollUuid(String payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = Optional.ofNullable(payrollUuid);
        return this;
    }

    /**
     * The UUID of the payroll for this pay period.
     */
    public PayPeriodPayroll withPayrollUuid(Optional<String> payrollUuid) {
        Utils.checkNotNull(payrollUuid, "payrollUuid");
        this.payrollUuid = payrollUuid;
        return this;
    }

    /**
     * The date on which employees will be paid for the payroll if the payroll is submitted on time.
     */
    public PayPeriodPayroll withCheckDate(String checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = Optional.ofNullable(checkDate);
        return this;
    }

    /**
     * The date on which employees will be paid for the payroll if the payroll is submitted on time.
     */
    public PayPeriodPayroll withCheckDate(Optional<String> checkDate) {
        Utils.checkNotNull(checkDate, "checkDate");
        this.checkDate = checkDate;
        return this;
    }

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
     */
    public PayPeriodPayroll withProcessed(boolean processed) {
        Utils.checkNotNull(processed, "processed");
        this.processed = Optional.ofNullable(processed);
        return this;
    }

    /**
     * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
     */
    public PayPeriodPayroll withProcessed(Optional<Boolean> processed) {
        Utils.checkNotNull(processed, "processed");
        this.processed = processed;
        return this;
    }

    /**
     * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
     */
    public PayPeriodPayroll withPayrollDeadline(OffsetDateTime payrollDeadline) {
        Utils.checkNotNull(payrollDeadline, "payrollDeadline");
        this.payrollDeadline = Optional.ofNullable(payrollDeadline);
        return this;
    }

    /**
     * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
     */
    public PayPeriodPayroll withPayrollDeadline(Optional<OffsetDateTime> payrollDeadline) {
        Utils.checkNotNull(payrollDeadline, "payrollDeadline");
        this.payrollDeadline = payrollDeadline;
        return this;
    }

    /**
     * Whether it is regular pay period or transition pay period.
     */
    public PayPeriodPayroll withPayrollType(PayrollType payrollType) {
        Utils.checkNotNull(payrollType, "payrollType");
        this.payrollType = Optional.ofNullable(payrollType);
        return this;
    }

    /**
     * Whether it is regular pay period or transition pay period.
     */
    public PayPeriodPayroll withPayrollType(Optional<? extends PayrollType> payrollType) {
        Utils.checkNotNull(payrollType, "payrollType");
        this.payrollType = payrollType;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PayPeriodPayroll other = (PayPeriodPayroll) o;
        return 
            Objects.deepEquals(this.payrollUuid, other.payrollUuid) &&
            Objects.deepEquals(this.checkDate, other.checkDate) &&
            Objects.deepEquals(this.processed, other.processed) &&
            Objects.deepEquals(this.payrollDeadline, other.payrollDeadline) &&
            Objects.deepEquals(this.payrollType, other.payrollType);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            payrollUuid,
            checkDate,
            processed,
            payrollDeadline,
            payrollType);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PayPeriodPayroll.class,
                "payrollUuid", payrollUuid,
                "checkDate", checkDate,
                "processed", processed,
                "payrollDeadline", payrollDeadline,
                "payrollType", payrollType);
    }
    
    public final static class Builder {
 
        private Optional<String> payrollUuid = Optional.empty();
 
        private Optional<String> checkDate = Optional.empty();
 
        private Optional<Boolean> processed = Optional.empty();
 
        private Optional<OffsetDateTime> payrollDeadline = Optional.empty();
 
        private Optional<? extends PayrollType> payrollType = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the payroll for this pay period.
         */
        public Builder payrollUuid(String payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = Optional.ofNullable(payrollUuid);
            return this;
        }

        /**
         * The UUID of the payroll for this pay period.
         */
        public Builder payrollUuid(Optional<String> payrollUuid) {
            Utils.checkNotNull(payrollUuid, "payrollUuid");
            this.payrollUuid = payrollUuid;
            return this;
        }

        /**
         * The date on which employees will be paid for the payroll if the payroll is submitted on time.
         */
        public Builder checkDate(String checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = Optional.ofNullable(checkDate);
            return this;
        }

        /**
         * The date on which employees will be paid for the payroll if the payroll is submitted on time.
         */
        public Builder checkDate(Optional<String> checkDate) {
            Utils.checkNotNull(checkDate, "checkDate");
            this.checkDate = checkDate;
            return this;
        }

        /**
         * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
         */
        public Builder processed(boolean processed) {
            Utils.checkNotNull(processed, "processed");
            this.processed = Optional.ofNullable(processed);
            return this;
        }

        /**
         * Whether or not the payroll has been successfully processed. Note that processed payrolls cannot be updated. Additionally, a payroll is not guaranteed to be processed just because the payroll deadline has passed. Late payrolls are not uncommon. Conversely, users may choose to run payroll before the payroll deadline.
         */
        public Builder processed(Optional<Boolean> processed) {
            Utils.checkNotNull(processed, "processed");
            this.processed = processed;
            return this;
        }

        /**
         * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
         */
        public Builder payrollDeadline(OffsetDateTime payrollDeadline) {
            Utils.checkNotNull(payrollDeadline, "payrollDeadline");
            this.payrollDeadline = Optional.ofNullable(payrollDeadline);
            return this;
        }

        /**
         * The date by which payroll should be run for employees to be paid on time. Payroll data, such as time and attendance data, should be submitted on or before this date.
         */
        public Builder payrollDeadline(Optional<OffsetDateTime> payrollDeadline) {
            Utils.checkNotNull(payrollDeadline, "payrollDeadline");
            this.payrollDeadline = payrollDeadline;
            return this;
        }

        /**
         * Whether it is regular pay period or transition pay period.
         */
        public Builder payrollType(PayrollType payrollType) {
            Utils.checkNotNull(payrollType, "payrollType");
            this.payrollType = Optional.ofNullable(payrollType);
            return this;
        }

        /**
         * Whether it is regular pay period or transition pay period.
         */
        public Builder payrollType(Optional<? extends PayrollType> payrollType) {
            Utils.checkNotNull(payrollType, "payrollType");
            this.payrollType = payrollType;
            return this;
        }
        
        public PayPeriodPayroll build() {
            return new PayPeriodPayroll(
                payrollUuid,
                checkDate,
                processed,
                payrollDeadline,
                payrollType);
        }
    }
}

