/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * BenefitSummary - Benefit summary response
 */

public class BenefitSummary {

    /**
     * The start date of benefit summary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("start_date")
    private Optional<String> startDate;

    /**
     * The end date of benefit summary.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("end_date")
    private Optional<String> endDate;

    /**
     * Description of the benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_deduction")
    private Optional<String> companyBenefitDeduction;

    /**
     * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_benefit_contribution")
    private Optional<String> companyBenefitContribution;

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employees")
    private Optional<? extends BenefitSummaryEmployees> employees;

    @JsonCreator
    public BenefitSummary(
            @JsonProperty("start_date") Optional<String> startDate,
            @JsonProperty("end_date") Optional<String> endDate,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("company_benefit_deduction") Optional<String> companyBenefitDeduction,
            @JsonProperty("company_benefit_contribution") Optional<String> companyBenefitContribution,
            @JsonProperty("employees") Optional<? extends BenefitSummaryEmployees> employees) {
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(endDate, "endDate");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        Utils.checkNotNull(employees, "employees");
        this.startDate = startDate;
        this.endDate = endDate;
        this.description = description;
        this.companyBenefitDeduction = companyBenefitDeduction;
        this.companyBenefitContribution = companyBenefitContribution;
        this.employees = employees;
    }
    
    public BenefitSummary() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The start date of benefit summary.
     */
    @JsonIgnore
    public Optional<String> startDate() {
        return startDate;
    }

    /**
     * The end date of benefit summary.
     */
    @JsonIgnore
    public Optional<String> endDate() {
        return endDate;
    }

    /**
     * Description of the benefit.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
     */
    @JsonIgnore
    public Optional<String> companyBenefitDeduction() {
        return companyBenefitDeduction;
    }

    /**
     * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
     */
    @JsonIgnore
    public Optional<String> companyBenefitContribution() {
        return companyBenefitContribution;
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<BenefitSummaryEmployees> employees() {
        return (Optional<BenefitSummaryEmployees>) employees;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The start date of benefit summary.
     */
    public BenefitSummary withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = Optional.ofNullable(startDate);
        return this;
    }

    /**
     * The start date of benefit summary.
     */
    public BenefitSummary withStartDate(Optional<String> startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The end date of benefit summary.
     */
    public BenefitSummary withEndDate(String endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = Optional.ofNullable(endDate);
        return this;
    }

    /**
     * The end date of benefit summary.
     */
    public BenefitSummary withEndDate(Optional<String> endDate) {
        Utils.checkNotNull(endDate, "endDate");
        this.endDate = endDate;
        return this;
    }

    /**
     * Description of the benefit.
     */
    public BenefitSummary withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * Description of the benefit.
     */
    public BenefitSummary withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
     */
    public BenefitSummary withCompanyBenefitDeduction(String companyBenefitDeduction) {
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        this.companyBenefitDeduction = Optional.ofNullable(companyBenefitDeduction);
        return this;
    }

    /**
     * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
     */
    public BenefitSummary withCompanyBenefitDeduction(Optional<String> companyBenefitDeduction) {
        Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
        this.companyBenefitDeduction = companyBenefitDeduction;
        return this;
    }

    /**
     * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
     */
    public BenefitSummary withCompanyBenefitContribution(String companyBenefitContribution) {
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        this.companyBenefitContribution = Optional.ofNullable(companyBenefitContribution);
        return this;
    }

    /**
     * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
     */
    public BenefitSummary withCompanyBenefitContribution(Optional<String> companyBenefitContribution) {
        Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
        this.companyBenefitContribution = companyBenefitContribution;
        return this;
    }

    public BenefitSummary withEmployees(BenefitSummaryEmployees employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = Optional.ofNullable(employees);
        return this;
    }

    public BenefitSummary withEmployees(Optional<? extends BenefitSummaryEmployees> employees) {
        Utils.checkNotNull(employees, "employees");
        this.employees = employees;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        BenefitSummary other = (BenefitSummary) o;
        return 
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.endDate, other.endDate) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.companyBenefitDeduction, other.companyBenefitDeduction) &&
            Objects.deepEquals(this.companyBenefitContribution, other.companyBenefitContribution) &&
            Objects.deepEquals(this.employees, other.employees);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startDate,
            endDate,
            description,
            companyBenefitDeduction,
            companyBenefitContribution,
            employees);
    }
    
    @Override
    public String toString() {
        return Utils.toString(BenefitSummary.class,
                "startDate", startDate,
                "endDate", endDate,
                "description", description,
                "companyBenefitDeduction", companyBenefitDeduction,
                "companyBenefitContribution", companyBenefitContribution,
                "employees", employees);
    }
    
    public final static class Builder {
 
        private Optional<String> startDate = Optional.empty();
 
        private Optional<String> endDate = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<String> companyBenefitDeduction = Optional.empty();
 
        private Optional<String> companyBenefitContribution = Optional.empty();
 
        private Optional<? extends BenefitSummaryEmployees> employees = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The start date of benefit summary.
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = Optional.ofNullable(startDate);
            return this;
        }

        /**
         * The start date of benefit summary.
         */
        public Builder startDate(Optional<String> startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The end date of benefit summary.
         */
        public Builder endDate(String endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = Optional.ofNullable(endDate);
            return this;
        }

        /**
         * The end date of benefit summary.
         */
        public Builder endDate(Optional<String> endDate) {
            Utils.checkNotNull(endDate, "endDate");
            this.endDate = endDate;
            return this;
        }

        /**
         * Description of the benefit.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * Description of the benefit.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
         */
        public Builder companyBenefitDeduction(String companyBenefitDeduction) {
            Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
            this.companyBenefitDeduction = Optional.ofNullable(companyBenefitDeduction);
            return this;
        }

        /**
         * The aggregate of employee deduction for all employees given the period of time and the specific company benefit.
         */
        public Builder companyBenefitDeduction(Optional<String> companyBenefitDeduction) {
            Utils.checkNotNull(companyBenefitDeduction, "companyBenefitDeduction");
            this.companyBenefitDeduction = companyBenefitDeduction;
            return this;
        }

        /**
         * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
         */
        public Builder companyBenefitContribution(String companyBenefitContribution) {
            Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
            this.companyBenefitContribution = Optional.ofNullable(companyBenefitContribution);
            return this;
        }

        /**
         * The aggregate of company contribution for all employees given the period of time and the specific company benefit.
         */
        public Builder companyBenefitContribution(Optional<String> companyBenefitContribution) {
            Utils.checkNotNull(companyBenefitContribution, "companyBenefitContribution");
            this.companyBenefitContribution = companyBenefitContribution;
            return this;
        }

        public Builder employees(BenefitSummaryEmployees employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = Optional.ofNullable(employees);
            return this;
        }

        public Builder employees(Optional<? extends BenefitSummaryEmployees> employees) {
            Utils.checkNotNull(employees, "employees");
            this.employees = employees;
            return this;
        }
        
        public BenefitSummary build() {
            return new BenefitSummary(
                startDate,
                endDate,
                description,
                companyBenefitDeduction,
                companyBenefitContribution,
                employees);
        }
    }
}

