/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.time.LocalDate;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Job {

    /**
     * The date when the employee was hired to the company
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hire_date")
    private Optional<LocalDate> hireDate;

    @JsonCreator
    public Job(
            @JsonProperty("hire_date") Optional<LocalDate> hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = hireDate;
    }
    
    public Job() {
        this(Optional.empty());
    }

    /**
     * The date when the employee was hired to the company
     */
    @JsonIgnore
    public Optional<LocalDate> hireDate() {
        return hireDate;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The date when the employee was hired to the company
     */
    public Job withHireDate(LocalDate hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = Optional.ofNullable(hireDate);
        return this;
    }

    /**
     * The date when the employee was hired to the company
     */
    public Job withHireDate(Optional<LocalDate> hireDate) {
        Utils.checkNotNull(hireDate, "hireDate");
        this.hireDate = hireDate;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Job other = (Job) o;
        return 
            Objects.deepEquals(this.hireDate, other.hireDate);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            hireDate);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Job.class,
                "hireDate", hireDate);
    }
    
    public final static class Builder {
 
        private Optional<LocalDate> hireDate = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The date when the employee was hired to the company
         */
        public Builder hireDate(LocalDate hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = Optional.ofNullable(hireDate);
            return this;
        }

        /**
         * The date when the employee was hired to the company
         */
        public Builder hireDate(Optional<LocalDate> hireDate) {
            Utils.checkNotNull(hireDate, "hireDate");
            this.hireDate = hireDate;
            return this;
        }
        
        public Job build() {
            return new Job(
                hireDate);
        }
    }
}

