/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class EmployeeCompensations {

    /**
     * The UUID of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * The first name of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_first_name")
    private Optional<String> employeeFirstName;

    /**
     * The last name of the employee.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_last_name")
    private Optional<String> employeeLastName;

    /**
     * The employee's compensation payment method.\n\n`Check` `Direct Deposit`
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("payment_method")
    private Optional<String> paymentMethod;

    /**
     * The employee's net pay. Net pay paid by check is available for reference but is not included in the `["totals"]["net_pay_debit"]` amount.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("net_pay")
    private Optional<String> netPay;

    /**
     * The total of employer and employee taxes for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_tax")
    private Optional<String> totalTax;

    /**
     * The total garnishments for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_garnishments")
    private Optional<String> totalGarnishments;

    /**
     * The total child support garnishment for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("child_support_garnishment")
    private Optional<String> childSupportGarnishment;

    /**
     * The total reimbursement for the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("total_reimbursement")
    private Optional<String> totalReimbursement;

    @JsonCreator
    public EmployeeCompensations(
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("employee_first_name") Optional<String> employeeFirstName,
            @JsonProperty("employee_last_name") Optional<String> employeeLastName,
            @JsonProperty("payment_method") Optional<String> paymentMethod,
            @JsonProperty("net_pay") Optional<String> netPay,
            @JsonProperty("total_tax") Optional<String> totalTax,
            @JsonProperty("total_garnishments") Optional<String> totalGarnishments,
            @JsonProperty("child_support_garnishment") Optional<String> childSupportGarnishment,
            @JsonProperty("total_reimbursement") Optional<String> totalReimbursement) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(employeeFirstName, "employeeFirstName");
        Utils.checkNotNull(employeeLastName, "employeeLastName");
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        Utils.checkNotNull(netPay, "netPay");
        Utils.checkNotNull(totalTax, "totalTax");
        Utils.checkNotNull(totalGarnishments, "totalGarnishments");
        Utils.checkNotNull(childSupportGarnishment, "childSupportGarnishment");
        Utils.checkNotNull(totalReimbursement, "totalReimbursement");
        this.employeeUuid = employeeUuid;
        this.employeeFirstName = employeeFirstName;
        this.employeeLastName = employeeLastName;
        this.paymentMethod = paymentMethod;
        this.netPay = netPay;
        this.totalTax = totalTax;
        this.totalGarnishments = totalGarnishments;
        this.childSupportGarnishment = childSupportGarnishment;
        this.totalReimbursement = totalReimbursement;
    }
    
    public EmployeeCompensations() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The UUID of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * The first name of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeFirstName() {
        return employeeFirstName;
    }

    /**
     * The last name of the employee.
     */
    @JsonIgnore
    public Optional<String> employeeLastName() {
        return employeeLastName;
    }

    /**
     * The employee's compensation payment method.\n\n`Check` `Direct Deposit`
     */
    @JsonIgnore
    public Optional<String> paymentMethod() {
        return paymentMethod;
    }

    /**
     * The employee's net pay. Net pay paid by check is available for reference but is not included in the `["totals"]["net_pay_debit"]` amount.
     */
    @JsonIgnore
    public Optional<String> netPay() {
        return netPay;
    }

    /**
     * The total of employer and employee taxes for the pay period.
     */
    @JsonIgnore
    public Optional<String> totalTax() {
        return totalTax;
    }

    /**
     * The total garnishments for the pay period.
     */
    @JsonIgnore
    public Optional<String> totalGarnishments() {
        return totalGarnishments;
    }

    /**
     * The total child support garnishment for the pay period.
     */
    @JsonIgnore
    public Optional<String> childSupportGarnishment() {
        return childSupportGarnishment;
    }

    /**
     * The total reimbursement for the pay period.
     */
    @JsonIgnore
    public Optional<String> totalReimbursement() {
        return totalReimbursement;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID of the employee.
     */
    public EmployeeCompensations withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * The UUID of the employee.
     */
    public EmployeeCompensations withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * The first name of the employee.
     */
    public EmployeeCompensations withEmployeeFirstName(String employeeFirstName) {
        Utils.checkNotNull(employeeFirstName, "employeeFirstName");
        this.employeeFirstName = Optional.ofNullable(employeeFirstName);
        return this;
    }

    /**
     * The first name of the employee.
     */
    public EmployeeCompensations withEmployeeFirstName(Optional<String> employeeFirstName) {
        Utils.checkNotNull(employeeFirstName, "employeeFirstName");
        this.employeeFirstName = employeeFirstName;
        return this;
    }

    /**
     * The last name of the employee.
     */
    public EmployeeCompensations withEmployeeLastName(String employeeLastName) {
        Utils.checkNotNull(employeeLastName, "employeeLastName");
        this.employeeLastName = Optional.ofNullable(employeeLastName);
        return this;
    }

    /**
     * The last name of the employee.
     */
    public EmployeeCompensations withEmployeeLastName(Optional<String> employeeLastName) {
        Utils.checkNotNull(employeeLastName, "employeeLastName");
        this.employeeLastName = employeeLastName;
        return this;
    }

    /**
     * The employee's compensation payment method.\n\n`Check` `Direct Deposit`
     */
    public EmployeeCompensations withPaymentMethod(String paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = Optional.ofNullable(paymentMethod);
        return this;
    }

    /**
     * The employee's compensation payment method.\n\n`Check` `Direct Deposit`
     */
    public EmployeeCompensations withPaymentMethod(Optional<String> paymentMethod) {
        Utils.checkNotNull(paymentMethod, "paymentMethod");
        this.paymentMethod = paymentMethod;
        return this;
    }

    /**
     * The employee's net pay. Net pay paid by check is available for reference but is not included in the `["totals"]["net_pay_debit"]` amount.
     */
    public EmployeeCompensations withNetPay(String netPay) {
        Utils.checkNotNull(netPay, "netPay");
        this.netPay = Optional.ofNullable(netPay);
        return this;
    }

    /**
     * The employee's net pay. Net pay paid by check is available for reference but is not included in the `["totals"]["net_pay_debit"]` amount.
     */
    public EmployeeCompensations withNetPay(Optional<String> netPay) {
        Utils.checkNotNull(netPay, "netPay");
        this.netPay = netPay;
        return this;
    }

    /**
     * The total of employer and employee taxes for the pay period.
     */
    public EmployeeCompensations withTotalTax(String totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = Optional.ofNullable(totalTax);
        return this;
    }

    /**
     * The total of employer and employee taxes for the pay period.
     */
    public EmployeeCompensations withTotalTax(Optional<String> totalTax) {
        Utils.checkNotNull(totalTax, "totalTax");
        this.totalTax = totalTax;
        return this;
    }

    /**
     * The total garnishments for the pay period.
     */
    public EmployeeCompensations withTotalGarnishments(String totalGarnishments) {
        Utils.checkNotNull(totalGarnishments, "totalGarnishments");
        this.totalGarnishments = Optional.ofNullable(totalGarnishments);
        return this;
    }

    /**
     * The total garnishments for the pay period.
     */
    public EmployeeCompensations withTotalGarnishments(Optional<String> totalGarnishments) {
        Utils.checkNotNull(totalGarnishments, "totalGarnishments");
        this.totalGarnishments = totalGarnishments;
        return this;
    }

    /**
     * The total child support garnishment for the pay period.
     */
    public EmployeeCompensations withChildSupportGarnishment(String childSupportGarnishment) {
        Utils.checkNotNull(childSupportGarnishment, "childSupportGarnishment");
        this.childSupportGarnishment = Optional.ofNullable(childSupportGarnishment);
        return this;
    }

    /**
     * The total child support garnishment for the pay period.
     */
    public EmployeeCompensations withChildSupportGarnishment(Optional<String> childSupportGarnishment) {
        Utils.checkNotNull(childSupportGarnishment, "childSupportGarnishment");
        this.childSupportGarnishment = childSupportGarnishment;
        return this;
    }

    /**
     * The total reimbursement for the pay period.
     */
    public EmployeeCompensations withTotalReimbursement(String totalReimbursement) {
        Utils.checkNotNull(totalReimbursement, "totalReimbursement");
        this.totalReimbursement = Optional.ofNullable(totalReimbursement);
        return this;
    }

    /**
     * The total reimbursement for the pay period.
     */
    public EmployeeCompensations withTotalReimbursement(Optional<String> totalReimbursement) {
        Utils.checkNotNull(totalReimbursement, "totalReimbursement");
        this.totalReimbursement = totalReimbursement;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeCompensations other = (EmployeeCompensations) o;
        return 
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.employeeFirstName, other.employeeFirstName) &&
            Objects.deepEquals(this.employeeLastName, other.employeeLastName) &&
            Objects.deepEquals(this.paymentMethod, other.paymentMethod) &&
            Objects.deepEquals(this.netPay, other.netPay) &&
            Objects.deepEquals(this.totalTax, other.totalTax) &&
            Objects.deepEquals(this.totalGarnishments, other.totalGarnishments) &&
            Objects.deepEquals(this.childSupportGarnishment, other.childSupportGarnishment) &&
            Objects.deepEquals(this.totalReimbursement, other.totalReimbursement);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employeeUuid,
            employeeFirstName,
            employeeLastName,
            paymentMethod,
            netPay,
            totalTax,
            totalGarnishments,
            childSupportGarnishment,
            totalReimbursement);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeCompensations.class,
                "employeeUuid", employeeUuid,
                "employeeFirstName", employeeFirstName,
                "employeeLastName", employeeLastName,
                "paymentMethod", paymentMethod,
                "netPay", netPay,
                "totalTax", totalTax,
                "totalGarnishments", totalGarnishments,
                "childSupportGarnishment", childSupportGarnishment,
                "totalReimbursement", totalReimbursement);
    }
    
    public final static class Builder {
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<String> employeeFirstName = Optional.empty();
 
        private Optional<String> employeeLastName = Optional.empty();
 
        private Optional<String> paymentMethod = Optional.empty();
 
        private Optional<String> netPay = Optional.empty();
 
        private Optional<String> totalTax = Optional.empty();
 
        private Optional<String> totalGarnishments = Optional.empty();
 
        private Optional<String> childSupportGarnishment = Optional.empty();
 
        private Optional<String> totalReimbursement = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID of the employee.
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * The UUID of the employee.
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * The first name of the employee.
         */
        public Builder employeeFirstName(String employeeFirstName) {
            Utils.checkNotNull(employeeFirstName, "employeeFirstName");
            this.employeeFirstName = Optional.ofNullable(employeeFirstName);
            return this;
        }

        /**
         * The first name of the employee.
         */
        public Builder employeeFirstName(Optional<String> employeeFirstName) {
            Utils.checkNotNull(employeeFirstName, "employeeFirstName");
            this.employeeFirstName = employeeFirstName;
            return this;
        }

        /**
         * The last name of the employee.
         */
        public Builder employeeLastName(String employeeLastName) {
            Utils.checkNotNull(employeeLastName, "employeeLastName");
            this.employeeLastName = Optional.ofNullable(employeeLastName);
            return this;
        }

        /**
         * The last name of the employee.
         */
        public Builder employeeLastName(Optional<String> employeeLastName) {
            Utils.checkNotNull(employeeLastName, "employeeLastName");
            this.employeeLastName = employeeLastName;
            return this;
        }

        /**
         * The employee's compensation payment method.\n\n`Check` `Direct Deposit`
         */
        public Builder paymentMethod(String paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = Optional.ofNullable(paymentMethod);
            return this;
        }

        /**
         * The employee's compensation payment method.\n\n`Check` `Direct Deposit`
         */
        public Builder paymentMethod(Optional<String> paymentMethod) {
            Utils.checkNotNull(paymentMethod, "paymentMethod");
            this.paymentMethod = paymentMethod;
            return this;
        }

        /**
         * The employee's net pay. Net pay paid by check is available for reference but is not included in the `["totals"]["net_pay_debit"]` amount.
         */
        public Builder netPay(String netPay) {
            Utils.checkNotNull(netPay, "netPay");
            this.netPay = Optional.ofNullable(netPay);
            return this;
        }

        /**
         * The employee's net pay. Net pay paid by check is available for reference but is not included in the `["totals"]["net_pay_debit"]` amount.
         */
        public Builder netPay(Optional<String> netPay) {
            Utils.checkNotNull(netPay, "netPay");
            this.netPay = netPay;
            return this;
        }

        /**
         * The total of employer and employee taxes for the pay period.
         */
        public Builder totalTax(String totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = Optional.ofNullable(totalTax);
            return this;
        }

        /**
         * The total of employer and employee taxes for the pay period.
         */
        public Builder totalTax(Optional<String> totalTax) {
            Utils.checkNotNull(totalTax, "totalTax");
            this.totalTax = totalTax;
            return this;
        }

        /**
         * The total garnishments for the pay period.
         */
        public Builder totalGarnishments(String totalGarnishments) {
            Utils.checkNotNull(totalGarnishments, "totalGarnishments");
            this.totalGarnishments = Optional.ofNullable(totalGarnishments);
            return this;
        }

        /**
         * The total garnishments for the pay period.
         */
        public Builder totalGarnishments(Optional<String> totalGarnishments) {
            Utils.checkNotNull(totalGarnishments, "totalGarnishments");
            this.totalGarnishments = totalGarnishments;
            return this;
        }

        /**
         * The total child support garnishment for the pay period.
         */
        public Builder childSupportGarnishment(String childSupportGarnishment) {
            Utils.checkNotNull(childSupportGarnishment, "childSupportGarnishment");
            this.childSupportGarnishment = Optional.ofNullable(childSupportGarnishment);
            return this;
        }

        /**
         * The total child support garnishment for the pay period.
         */
        public Builder childSupportGarnishment(Optional<String> childSupportGarnishment) {
            Utils.checkNotNull(childSupportGarnishment, "childSupportGarnishment");
            this.childSupportGarnishment = childSupportGarnishment;
            return this;
        }

        /**
         * The total reimbursement for the pay period.
         */
        public Builder totalReimbursement(String totalReimbursement) {
            Utils.checkNotNull(totalReimbursement, "totalReimbursement");
            this.totalReimbursement = Optional.ofNullable(totalReimbursement);
            return this;
        }

        /**
         * The total reimbursement for the pay period.
         */
        public Builder totalReimbursement(Optional<String> totalReimbursement) {
            Utils.checkNotNull(totalReimbursement, "totalReimbursement");
            this.totalReimbursement = totalReimbursement;
            return this;
        }
        
        public EmployeeCompensations build() {
            return new EmployeeCompensations(
                employeeUuid,
                employeeFirstName,
                employeeLastName,
                paymentMethod,
                netPay,
                totalTax,
                totalGarnishments,
                childSupportGarnishment,
                totalReimbursement);
        }
    }
}

