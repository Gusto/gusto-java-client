/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Long;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;


public class PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody {

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonProperty("version")
    private String version;

    /**
     * The frequency that employees on this pay schedule are paid with Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("frequency")
    private Optional<? extends PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency> frequency;

    /**
     * The first date that employees on this pay schedule are paid with Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anchor_pay_date")
    private Optional<String> anchorPayDate;

    /**
     * The last date of the first pay period. This can be the same date as the anchor pay date.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("anchor_end_of_pay_period")
    private Optional<String> anchorEndOfPayPeriod;

    /**
     * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("day_1")
    private JsonNullable<Long> day1;

    /**
     * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("day_2")
    private JsonNullable<Long> day2;

    /**
     * A custom pay schedule name.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("custom_name")
    private Optional<String> customName;

    /**
     * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("auto_pilot")
    private Optional<Boolean> autoPilot;

    @JsonCreator
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody(
            @JsonProperty("version") String version,
            @JsonProperty("frequency") Optional<? extends PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency> frequency,
            @JsonProperty("anchor_pay_date") Optional<String> anchorPayDate,
            @JsonProperty("anchor_end_of_pay_period") Optional<String> anchorEndOfPayPeriod,
            @JsonProperty("day_1") JsonNullable<Long> day1,
            @JsonProperty("day_2") JsonNullable<Long> day2,
            @JsonProperty("custom_name") Optional<String> customName,
            @JsonProperty("auto_pilot") Optional<Boolean> autoPilot) {
        Utils.checkNotNull(version, "version");
        Utils.checkNotNull(frequency, "frequency");
        Utils.checkNotNull(anchorPayDate, "anchorPayDate");
        Utils.checkNotNull(anchorEndOfPayPeriod, "anchorEndOfPayPeriod");
        Utils.checkNotNull(day1, "day1");
        Utils.checkNotNull(day2, "day2");
        Utils.checkNotNull(customName, "customName");
        Utils.checkNotNull(autoPilot, "autoPilot");
        this.version = version;
        this.frequency = frequency;
        this.anchorPayDate = anchorPayDate;
        this.anchorEndOfPayPeriod = anchorEndOfPayPeriod;
        this.day1 = day1;
        this.day2 = day2;
        this.customName = customName;
        this.autoPilot = autoPilot;
    }
    
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody(
            String version) {
        this(version, Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty());
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    @JsonIgnore
    public String version() {
        return version;
    }

    /**
     * The frequency that employees on this pay schedule are paid with Gusto.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency> frequency() {
        return (Optional<PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency>) frequency;
    }

    /**
     * The first date that employees on this pay schedule are paid with Gusto.
     */
    @JsonIgnore
    public Optional<String> anchorPayDate() {
        return anchorPayDate;
    }

    /**
     * The last date of the first pay period. This can be the same date as the anchor pay date.
     */
    @JsonIgnore
    public Optional<String> anchorEndOfPayPeriod() {
        return anchorEndOfPayPeriod;
    }

    /**
     * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
     */
    @JsonIgnore
    public JsonNullable<Long> day1() {
        return day1;
    }

    /**
     * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
     */
    @JsonIgnore
    public JsonNullable<Long> day2() {
        return day2;
    }

    /**
     * A custom pay schedule name.
     */
    @JsonIgnore
    public Optional<String> customName() {
        return customName;
    }

    /**
     * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
     */
    @JsonIgnore
    public Optional<Boolean> autoPilot() {
        return autoPilot;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withVersion(String version) {
        Utils.checkNotNull(version, "version");
        this.version = version;
        return this;
    }

    /**
     * The frequency that employees on this pay schedule are paid with Gusto.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withFrequency(PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = Optional.ofNullable(frequency);
        return this;
    }

    /**
     * The frequency that employees on this pay schedule are paid with Gusto.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withFrequency(Optional<? extends PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency> frequency) {
        Utils.checkNotNull(frequency, "frequency");
        this.frequency = frequency;
        return this;
    }

    /**
     * The first date that employees on this pay schedule are paid with Gusto.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withAnchorPayDate(String anchorPayDate) {
        Utils.checkNotNull(anchorPayDate, "anchorPayDate");
        this.anchorPayDate = Optional.ofNullable(anchorPayDate);
        return this;
    }

    /**
     * The first date that employees on this pay schedule are paid with Gusto.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withAnchorPayDate(Optional<String> anchorPayDate) {
        Utils.checkNotNull(anchorPayDate, "anchorPayDate");
        this.anchorPayDate = anchorPayDate;
        return this;
    }

    /**
     * The last date of the first pay period. This can be the same date as the anchor pay date.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withAnchorEndOfPayPeriod(String anchorEndOfPayPeriod) {
        Utils.checkNotNull(anchorEndOfPayPeriod, "anchorEndOfPayPeriod");
        this.anchorEndOfPayPeriod = Optional.ofNullable(anchorEndOfPayPeriod);
        return this;
    }

    /**
     * The last date of the first pay period. This can be the same date as the anchor pay date.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withAnchorEndOfPayPeriod(Optional<String> anchorEndOfPayPeriod) {
        Utils.checkNotNull(anchorEndOfPayPeriod, "anchorEndOfPayPeriod");
        this.anchorEndOfPayPeriod = anchorEndOfPayPeriod;
        return this;
    }

    /**
     * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withDay1(long day1) {
        Utils.checkNotNull(day1, "day1");
        this.day1 = JsonNullable.of(day1);
        return this;
    }

    /**
     * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withDay1(JsonNullable<Long> day1) {
        Utils.checkNotNull(day1, "day1");
        this.day1 = day1;
        return this;
    }

    /**
     * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withDay2(long day2) {
        Utils.checkNotNull(day2, "day2");
        this.day2 = JsonNullable.of(day2);
        return this;
    }

    /**
     * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withDay2(JsonNullable<Long> day2) {
        Utils.checkNotNull(day2, "day2");
        this.day2 = day2;
        return this;
    }

    /**
     * A custom pay schedule name.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withCustomName(String customName) {
        Utils.checkNotNull(customName, "customName");
        this.customName = Optional.ofNullable(customName);
        return this;
    }

    /**
     * A custom pay schedule name.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withCustomName(Optional<String> customName) {
        Utils.checkNotNull(customName, "customName");
        this.customName = customName;
        return this;
    }

    /**
     * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withAutoPilot(boolean autoPilot) {
        Utils.checkNotNull(autoPilot, "autoPilot");
        this.autoPilot = Optional.ofNullable(autoPilot);
        return this;
    }

    /**
     * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
     */
    public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody withAutoPilot(Optional<Boolean> autoPilot) {
        Utils.checkNotNull(autoPilot, "autoPilot");
        this.autoPilot = autoPilot;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody other = (PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody) o;
        return 
            Objects.deepEquals(this.version, other.version) &&
            Objects.deepEquals(this.frequency, other.frequency) &&
            Objects.deepEquals(this.anchorPayDate, other.anchorPayDate) &&
            Objects.deepEquals(this.anchorEndOfPayPeriod, other.anchorEndOfPayPeriod) &&
            Objects.deepEquals(this.day1, other.day1) &&
            Objects.deepEquals(this.day2, other.day2) &&
            Objects.deepEquals(this.customName, other.customName) &&
            Objects.deepEquals(this.autoPilot, other.autoPilot);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            version,
            frequency,
            anchorPayDate,
            anchorEndOfPayPeriod,
            day1,
            day2,
            customName,
            autoPilot);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody.class,
                "version", version,
                "frequency", frequency,
                "anchorPayDate", anchorPayDate,
                "anchorEndOfPayPeriod", anchorEndOfPayPeriod,
                "day1", day1,
                "day2", day2,
                "customName", customName,
                "autoPilot", autoPilot);
    }
    
    public final static class Builder {
 
        private String version;
 
        private Optional<? extends PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency> frequency = Optional.empty();
 
        private Optional<String> anchorPayDate = Optional.empty();
 
        private Optional<String> anchorEndOfPayPeriod = Optional.empty();
 
        private JsonNullable<Long> day1 = JsonNullable.undefined();
 
        private JsonNullable<Long> day2 = JsonNullable.undefined();
 
        private Optional<String> customName = Optional.empty();
 
        private Optional<Boolean> autoPilot = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The current version of the object. See the [versioning guide](https://docs.gusto.com/embedded-payroll/docs/versioning#object-layer) for information on how to use this field.
         */
        public Builder version(String version) {
            Utils.checkNotNull(version, "version");
            this.version = version;
            return this;
        }

        /**
         * The frequency that employees on this pay schedule are paid with Gusto.
         */
        public Builder frequency(PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = Optional.ofNullable(frequency);
            return this;
        }

        /**
         * The frequency that employees on this pay schedule are paid with Gusto.
         */
        public Builder frequency(Optional<? extends PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdFrequency> frequency) {
            Utils.checkNotNull(frequency, "frequency");
            this.frequency = frequency;
            return this;
        }

        /**
         * The first date that employees on this pay schedule are paid with Gusto.
         */
        public Builder anchorPayDate(String anchorPayDate) {
            Utils.checkNotNull(anchorPayDate, "anchorPayDate");
            this.anchorPayDate = Optional.ofNullable(anchorPayDate);
            return this;
        }

        /**
         * The first date that employees on this pay schedule are paid with Gusto.
         */
        public Builder anchorPayDate(Optional<String> anchorPayDate) {
            Utils.checkNotNull(anchorPayDate, "anchorPayDate");
            this.anchorPayDate = anchorPayDate;
            return this;
        }

        /**
         * The last date of the first pay period. This can be the same date as the anchor pay date.
         */
        public Builder anchorEndOfPayPeriod(String anchorEndOfPayPeriod) {
            Utils.checkNotNull(anchorEndOfPayPeriod, "anchorEndOfPayPeriod");
            this.anchorEndOfPayPeriod = Optional.ofNullable(anchorEndOfPayPeriod);
            return this;
        }

        /**
         * The last date of the first pay period. This can be the same date as the anchor pay date.
         */
        public Builder anchorEndOfPayPeriod(Optional<String> anchorEndOfPayPeriod) {
            Utils.checkNotNull(anchorEndOfPayPeriod, "anchorEndOfPayPeriod");
            this.anchorEndOfPayPeriod = anchorEndOfPayPeriod;
            return this;
        }

        /**
         * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
         */
        public Builder day1(long day1) {
            Utils.checkNotNull(day1, "day1");
            this.day1 = JsonNullable.of(day1);
            return this;
        }

        /**
         * An integer between 1 and 31 indicating the first day of the month that employees are paid. This field is only relevant for pay schedules with the “Twice per month” and “Monthly” frequencies. It will be null for pay schedules with other frequencies.
         */
        public Builder day1(JsonNullable<Long> day1) {
            Utils.checkNotNull(day1, "day1");
            this.day1 = day1;
            return this;
        }

        /**
         * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
         */
        public Builder day2(long day2) {
            Utils.checkNotNull(day2, "day2");
            this.day2 = JsonNullable.of(day2);
            return this;
        }

        /**
         * An integer between 1 and 31 indicating the second day of the month that employees are paid. This field is the second pay date for pay schedules with the "Twice per month" frequency. For semi-monthly pay schedules, set this field to 31. For months shorter than 31 days, we will set the second pay date to the last day of the month. It will be null for pay schedules with other frequencies.
         */
        public Builder day2(JsonNullable<Long> day2) {
            Utils.checkNotNull(day2, "day2");
            this.day2 = day2;
            return this;
        }

        /**
         * A custom pay schedule name.
         */
        public Builder customName(String customName) {
            Utils.checkNotNull(customName, "customName");
            this.customName = Optional.ofNullable(customName);
            return this;
        }

        /**
         * A custom pay schedule name.
         */
        public Builder customName(Optional<String> customName) {
            Utils.checkNotNull(customName, "customName");
            this.customName = customName;
            return this;
        }

        /**
         * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
         */
        public Builder autoPilot(boolean autoPilot) {
            Utils.checkNotNull(autoPilot, "autoPilot");
            this.autoPilot = Optional.ofNullable(autoPilot);
            return this;
        }

        /**
         * With Autopilot® enabled, payroll will run automatically one day before your payroll deadlines.
         */
        public Builder autoPilot(Optional<Boolean> autoPilot) {
            Utils.checkNotNull(autoPilot, "autoPilot");
            this.autoPilot = autoPilot;
            return this;
        }
        
        public PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody build() {
            return new PutV1CompaniesCompanyIdPaySchedulesPayScheduleIdRequestBody(
                version,
                frequency,
                anchorPayDate,
                anchorEndOfPayPeriod,
                day1,
                day2,
                customName,
                autoPilot);
        }
    }
}

