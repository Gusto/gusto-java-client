/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import org.openapis.openapi.utils.Utils;


public class PostV1PartnerManagedCompaniesRequestBody {

    /**
     * Information for the user who will be the primary payroll administrator for the new company.
     */
    @JsonProperty("user")
    private User user;

    @JsonProperty("company")
    private Company company;

    @JsonCreator
    public PostV1PartnerManagedCompaniesRequestBody(
            @JsonProperty("user") User user,
            @JsonProperty("company") Company company) {
        Utils.checkNotNull(user, "user");
        Utils.checkNotNull(company, "company");
        this.user = user;
        this.company = company;
    }

    /**
     * Information for the user who will be the primary payroll administrator for the new company.
     */
    @JsonIgnore
    public User user() {
        return user;
    }

    @JsonIgnore
    public Company company() {
        return company;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * Information for the user who will be the primary payroll administrator for the new company.
     */
    public PostV1PartnerManagedCompaniesRequestBody withUser(User user) {
        Utils.checkNotNull(user, "user");
        this.user = user;
        return this;
    }

    public PostV1PartnerManagedCompaniesRequestBody withCompany(Company company) {
        Utils.checkNotNull(company, "company");
        this.company = company;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1PartnerManagedCompaniesRequestBody other = (PostV1PartnerManagedCompaniesRequestBody) o;
        return 
            Objects.deepEquals(this.user, other.user) &&
            Objects.deepEquals(this.company, other.company);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            user,
            company);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1PartnerManagedCompaniesRequestBody.class,
                "user", user,
                "company", company);
    }
    
    public final static class Builder {
 
        private User user;
 
        private Company company;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * Information for the user who will be the primary payroll administrator for the new company.
         */
        public Builder user(User user) {
            Utils.checkNotNull(user, "user");
            this.user = user;
            return this;
        }

        public Builder company(Company company) {
            Utils.checkNotNull(company, "company");
            this.company = company;
            return this;
        }
        
        public PostV1PartnerManagedCompaniesRequestBody build() {
            return new PostV1PartnerManagedCompaniesRequestBody(
                user,
                company);
        }
    }
}

