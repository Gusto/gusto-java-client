/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;


public class PostEmployeeYtdBenefitAmountsFromDifferentCompany {

    /**
     * The benefit type supported by Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefit_type")
    private Optional<Double> benefitType;

    /**
     * The tax year for which this amount applies.
     */
    @JsonProperty("tax_year")
    private double taxYear;

    /**
     * The year-to-date employee deduction made outside the current company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ytd_employee_deduction_amount")
    private Optional<String> ytdEmployeeDeductionAmount;

    /**
     * The year-to-date company contribution made outside the current company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ytd_company_contribution_amount")
    private Optional<String> ytdCompanyContributionAmount;

    @JsonCreator
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany(
            @JsonProperty("benefit_type") Optional<Double> benefitType,
            @JsonProperty("tax_year") double taxYear,
            @JsonProperty("ytd_employee_deduction_amount") Optional<String> ytdEmployeeDeductionAmount,
            @JsonProperty("ytd_company_contribution_amount") Optional<String> ytdCompanyContributionAmount) {
        Utils.checkNotNull(benefitType, "benefitType");
        Utils.checkNotNull(taxYear, "taxYear");
        Utils.checkNotNull(ytdEmployeeDeductionAmount, "ytdEmployeeDeductionAmount");
        Utils.checkNotNull(ytdCompanyContributionAmount, "ytdCompanyContributionAmount");
        this.benefitType = benefitType;
        this.taxYear = taxYear;
        this.ytdEmployeeDeductionAmount = ytdEmployeeDeductionAmount;
        this.ytdCompanyContributionAmount = ytdCompanyContributionAmount;
    }
    
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany(
            double taxYear) {
        this(Optional.empty(), taxYear, Optional.empty(), Optional.empty());
    }

    /**
     * The benefit type supported by Gusto.
     */
    @JsonIgnore
    public Optional<Double> benefitType() {
        return benefitType;
    }

    /**
     * The tax year for which this amount applies.
     */
    @JsonIgnore
    public double taxYear() {
        return taxYear;
    }

    /**
     * The year-to-date employee deduction made outside the current company.
     */
    @JsonIgnore
    public Optional<String> ytdEmployeeDeductionAmount() {
        return ytdEmployeeDeductionAmount;
    }

    /**
     * The year-to-date company contribution made outside the current company.
     */
    @JsonIgnore
    public Optional<String> ytdCompanyContributionAmount() {
        return ytdCompanyContributionAmount;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The benefit type supported by Gusto.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withBenefitType(double benefitType) {
        Utils.checkNotNull(benefitType, "benefitType");
        this.benefitType = Optional.ofNullable(benefitType);
        return this;
    }

    /**
     * The benefit type supported by Gusto.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withBenefitType(Optional<Double> benefitType) {
        Utils.checkNotNull(benefitType, "benefitType");
        this.benefitType = benefitType;
        return this;
    }

    /**
     * The tax year for which this amount applies.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withTaxYear(double taxYear) {
        Utils.checkNotNull(taxYear, "taxYear");
        this.taxYear = taxYear;
        return this;
    }

    /**
     * The year-to-date employee deduction made outside the current company.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withYtdEmployeeDeductionAmount(String ytdEmployeeDeductionAmount) {
        Utils.checkNotNull(ytdEmployeeDeductionAmount, "ytdEmployeeDeductionAmount");
        this.ytdEmployeeDeductionAmount = Optional.ofNullable(ytdEmployeeDeductionAmount);
        return this;
    }

    /**
     * The year-to-date employee deduction made outside the current company.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withYtdEmployeeDeductionAmount(Optional<String> ytdEmployeeDeductionAmount) {
        Utils.checkNotNull(ytdEmployeeDeductionAmount, "ytdEmployeeDeductionAmount");
        this.ytdEmployeeDeductionAmount = ytdEmployeeDeductionAmount;
        return this;
    }

    /**
     * The year-to-date company contribution made outside the current company.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withYtdCompanyContributionAmount(String ytdCompanyContributionAmount) {
        Utils.checkNotNull(ytdCompanyContributionAmount, "ytdCompanyContributionAmount");
        this.ytdCompanyContributionAmount = Optional.ofNullable(ytdCompanyContributionAmount);
        return this;
    }

    /**
     * The year-to-date company contribution made outside the current company.
     */
    public PostEmployeeYtdBenefitAmountsFromDifferentCompany withYtdCompanyContributionAmount(Optional<String> ytdCompanyContributionAmount) {
        Utils.checkNotNull(ytdCompanyContributionAmount, "ytdCompanyContributionAmount");
        this.ytdCompanyContributionAmount = ytdCompanyContributionAmount;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostEmployeeYtdBenefitAmountsFromDifferentCompany other = (PostEmployeeYtdBenefitAmountsFromDifferentCompany) o;
        return 
            Objects.deepEquals(this.benefitType, other.benefitType) &&
            Objects.deepEquals(this.taxYear, other.taxYear) &&
            Objects.deepEquals(this.ytdEmployeeDeductionAmount, other.ytdEmployeeDeductionAmount) &&
            Objects.deepEquals(this.ytdCompanyContributionAmount, other.ytdCompanyContributionAmount);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            benefitType,
            taxYear,
            ytdEmployeeDeductionAmount,
            ytdCompanyContributionAmount);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostEmployeeYtdBenefitAmountsFromDifferentCompany.class,
                "benefitType", benefitType,
                "taxYear", taxYear,
                "ytdEmployeeDeductionAmount", ytdEmployeeDeductionAmount,
                "ytdCompanyContributionAmount", ytdCompanyContributionAmount);
    }
    
    public final static class Builder {
 
        private Optional<Double> benefitType = Optional.empty();
 
        private Double taxYear;
 
        private Optional<String> ytdEmployeeDeductionAmount;
 
        private Optional<String> ytdCompanyContributionAmount;  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The benefit type supported by Gusto.
         */
        public Builder benefitType(double benefitType) {
            Utils.checkNotNull(benefitType, "benefitType");
            this.benefitType = Optional.ofNullable(benefitType);
            return this;
        }

        /**
         * The benefit type supported by Gusto.
         */
        public Builder benefitType(Optional<Double> benefitType) {
            Utils.checkNotNull(benefitType, "benefitType");
            this.benefitType = benefitType;
            return this;
        }

        /**
         * The tax year for which this amount applies.
         */
        public Builder taxYear(double taxYear) {
            Utils.checkNotNull(taxYear, "taxYear");
            this.taxYear = taxYear;
            return this;
        }

        /**
         * The year-to-date employee deduction made outside the current company.
         */
        public Builder ytdEmployeeDeductionAmount(String ytdEmployeeDeductionAmount) {
            Utils.checkNotNull(ytdEmployeeDeductionAmount, "ytdEmployeeDeductionAmount");
            this.ytdEmployeeDeductionAmount = Optional.ofNullable(ytdEmployeeDeductionAmount);
            return this;
        }

        /**
         * The year-to-date employee deduction made outside the current company.
         */
        public Builder ytdEmployeeDeductionAmount(Optional<String> ytdEmployeeDeductionAmount) {
            Utils.checkNotNull(ytdEmployeeDeductionAmount, "ytdEmployeeDeductionAmount");
            this.ytdEmployeeDeductionAmount = ytdEmployeeDeductionAmount;
            return this;
        }

        /**
         * The year-to-date company contribution made outside the current company.
         */
        public Builder ytdCompanyContributionAmount(String ytdCompanyContributionAmount) {
            Utils.checkNotNull(ytdCompanyContributionAmount, "ytdCompanyContributionAmount");
            this.ytdCompanyContributionAmount = Optional.ofNullable(ytdCompanyContributionAmount);
            return this;
        }

        /**
         * The year-to-date company contribution made outside the current company.
         */
        public Builder ytdCompanyContributionAmount(Optional<String> ytdCompanyContributionAmount) {
            Utils.checkNotNull(ytdCompanyContributionAmount, "ytdCompanyContributionAmount");
            this.ytdCompanyContributionAmount = ytdCompanyContributionAmount;
            return this;
        }
        
        public PostEmployeeYtdBenefitAmountsFromDifferentCompany build() {
            if (ytdEmployeeDeductionAmount == null) {
                ytdEmployeeDeductionAmount = _SINGLETON_VALUE_YtdEmployeeDeductionAmount.value();
            }
            if (ytdCompanyContributionAmount == null) {
                ytdCompanyContributionAmount = _SINGLETON_VALUE_YtdCompanyContributionAmount.value();
            }            return new PostEmployeeYtdBenefitAmountsFromDifferentCompany(
                benefitType,
                taxYear,
                ytdEmployeeDeductionAmount,
                ytdCompanyContributionAmount);
        }

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_YtdEmployeeDeductionAmount =
                new LazySingletonValue<>(
                        "ytd_employee_deduction_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});

        private static final LazySingletonValue<Optional<String>> _SINGLETON_VALUE_YtdCompanyContributionAmount =
                new LazySingletonValue<>(
                        "ytd_company_contribution_amount",
                        "\"0.00\"",
                        new TypeReference<Optional<String>>() {});
    }
}

