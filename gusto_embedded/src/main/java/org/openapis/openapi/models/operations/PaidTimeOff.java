/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class PaidTimeOff {

    /**
     * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The hours of this PTO taken during the pay period.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hours")
    private Optional<String> hours;

    /**
     * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("policy_uuid")
    private Optional<String> policyUuid;

    /**
     * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("final_payout_unused_hours_input")
    private Optional<String> finalPayoutUnusedHoursInput;

    @JsonCreator
    public PaidTimeOff(
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("hours") Optional<String> hours,
            @JsonProperty("policy_uuid") Optional<String> policyUuid,
            @JsonProperty("final_payout_unused_hours_input") Optional<String> finalPayoutUnusedHoursInput) {
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(hours, "hours");
        Utils.checkNotNull(policyUuid, "policyUuid");
        Utils.checkNotNull(finalPayoutUnusedHoursInput, "finalPayoutUnusedHoursInput");
        this.name = name;
        this.hours = hours;
        this.policyUuid = policyUuid;
        this.finalPayoutUnusedHoursInput = finalPayoutUnusedHoursInput;
    }
    
    public PaidTimeOff() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The hours of this PTO taken during the pay period.
     */
    @JsonIgnore
    public Optional<String> hours() {
        return hours;
    }

    /**
     * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
     */
    @JsonIgnore
    public Optional<String> policyUuid() {
        return policyUuid;
    }

    /**
     * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
     */
    @JsonIgnore
    public Optional<String> finalPayoutUnusedHoursInput() {
        return finalPayoutUnusedHoursInput;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
     */
    public PaidTimeOff withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
     */
    public PaidTimeOff withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The hours of this PTO taken during the pay period.
     */
    public PaidTimeOff withHours(String hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = Optional.ofNullable(hours);
        return this;
    }

    /**
     * The hours of this PTO taken during the pay period.
     */
    public PaidTimeOff withHours(Optional<String> hours) {
        Utils.checkNotNull(hours, "hours");
        this.hours = hours;
        return this;
    }

    /**
     * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
     */
    public PaidTimeOff withPolicyUuid(String policyUuid) {
        Utils.checkNotNull(policyUuid, "policyUuid");
        this.policyUuid = Optional.ofNullable(policyUuid);
        return this;
    }

    /**
     * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
     */
    public PaidTimeOff withPolicyUuid(Optional<String> policyUuid) {
        Utils.checkNotNull(policyUuid, "policyUuid");
        this.policyUuid = policyUuid;
        return this;
    }

    /**
     * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
     */
    public PaidTimeOff withFinalPayoutUnusedHoursInput(String finalPayoutUnusedHoursInput) {
        Utils.checkNotNull(finalPayoutUnusedHoursInput, "finalPayoutUnusedHoursInput");
        this.finalPayoutUnusedHoursInput = Optional.ofNullable(finalPayoutUnusedHoursInput);
        return this;
    }

    /**
     * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
     */
    public PaidTimeOff withFinalPayoutUnusedHoursInput(Optional<String> finalPayoutUnusedHoursInput) {
        Utils.checkNotNull(finalPayoutUnusedHoursInput, "finalPayoutUnusedHoursInput");
        this.finalPayoutUnusedHoursInput = finalPayoutUnusedHoursInput;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PaidTimeOff other = (PaidTimeOff) o;
        return 
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.hours, other.hours) &&
            Objects.deepEquals(this.policyUuid, other.policyUuid) &&
            Objects.deepEquals(this.finalPayoutUnusedHoursInput, other.finalPayoutUnusedHoursInput);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            name,
            hours,
            policyUuid,
            finalPayoutUnusedHoursInput);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PaidTimeOff.class,
                "name", name,
                "hours", hours,
                "policyUuid", policyUuid,
                "finalPayoutUnusedHoursInput", finalPayoutUnusedHoursInput);
    }
    
    public final static class Builder {
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> hours = Optional.empty();
 
        private Optional<String> policyUuid = Optional.empty();
 
        private Optional<String> finalPayoutUnusedHoursInput = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the PTO. This also serves as the unique, immutable identifier for the PTO. Must pass in name or policy_uuid but not both.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The hours of this PTO taken during the pay period.
         */
        public Builder hours(String hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = Optional.ofNullable(hours);
            return this;
        }

        /**
         * The hours of this PTO taken during the pay period.
         */
        public Builder hours(Optional<String> hours) {
            Utils.checkNotNull(hours, "hours");
            this.hours = hours;
            return this;
        }

        /**
         * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
         */
        public Builder policyUuid(String policyUuid) {
            Utils.checkNotNull(policyUuid, "policyUuid");
            this.policyUuid = Optional.ofNullable(policyUuid);
            return this;
        }

        /**
         * The uuid of the PTO policy. Must pass in name or policy_uuid but not both.
         */
        public Builder policyUuid(Optional<String> policyUuid) {
            Utils.checkNotNull(policyUuid, "policyUuid");
            this.policyUuid = policyUuid;
            return this;
        }

        /**
         * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
         */
        public Builder finalPayoutUnusedHoursInput(String finalPayoutUnusedHoursInput) {
            Utils.checkNotNull(finalPayoutUnusedHoursInput, "finalPayoutUnusedHoursInput");
            this.finalPayoutUnusedHoursInput = Optional.ofNullable(finalPayoutUnusedHoursInput);
            return this;
        }

        /**
         * The outstanding hours paid upon termination. This field is only applicable for termination payrolls.
         */
        public Builder finalPayoutUnusedHoursInput(Optional<String> finalPayoutUnusedHoursInput) {
            Utils.checkNotNull(finalPayoutUnusedHoursInput, "finalPayoutUnusedHoursInput");
            this.finalPayoutUnusedHoursInput = finalPayoutUnusedHoursInput;
            return this;
        }
        
        public PaidTimeOff build() {
            return new PaidTimeOff(
                name,
                hours,
                policyUuid,
                finalPayoutUnusedHoursInput);
        }
    }
}

