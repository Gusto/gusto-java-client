/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class RequiredAttributes {

    /**
     * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("key")
    private Optional<? extends Key> key;

    /**
     * A human readable name of the attribute, e.g. CSE Case Number
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("label")
    private Optional<String> label;

    @JsonCreator
    public RequiredAttributes(
            @JsonProperty("key") Optional<? extends Key> key,
            @JsonProperty("label") Optional<String> label) {
        Utils.checkNotNull(key, "key");
        Utils.checkNotNull(label, "label");
        this.key = key;
        this.label = label;
    }
    
    public RequiredAttributes() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Key> key() {
        return (Optional<Key>) key;
    }

    /**
     * A human readable name of the attribute, e.g. CSE Case Number
     */
    @JsonIgnore
    public Optional<String> label() {
        return label;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
     */
    public RequiredAttributes withKey(Key key) {
        Utils.checkNotNull(key, "key");
        this.key = Optional.ofNullable(key);
        return this;
    }

    /**
     * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
     */
    public RequiredAttributes withKey(Optional<? extends Key> key) {
        Utils.checkNotNull(key, "key");
        this.key = key;
        return this;
    }

    /**
     * A human readable name of the attribute, e.g. CSE Case Number
     */
    public RequiredAttributes withLabel(String label) {
        Utils.checkNotNull(label, "label");
        this.label = Optional.ofNullable(label);
        return this;
    }

    /**
     * A human readable name of the attribute, e.g. CSE Case Number
     */
    public RequiredAttributes withLabel(Optional<String> label) {
        Utils.checkNotNull(label, "label");
        this.label = label;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        RequiredAttributes other = (RequiredAttributes) o;
        return 
            Objects.deepEquals(this.key, other.key) &&
            Objects.deepEquals(this.label, other.label);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            key,
            label);
    }
    
    @Override
    public String toString() {
        return Utils.toString(RequiredAttributes.class,
                "key", key,
                "label", label);
    }
    
    public final static class Builder {
 
        private Optional<? extends Key> key = Optional.empty();
 
        private Optional<String> label = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
         */
        public Builder key(Key key) {
            Utils.checkNotNull(key, "key");
            this.key = Optional.ofNullable(key);
            return this;
        }

        /**
         * A required attribute when creating a garnishment for this state agency. The current values are listed as an enum; though unlikely, values could be added if state agency requirements change in the future.
         */
        public Builder key(Optional<? extends Key> key) {
            Utils.checkNotNull(key, "key");
            this.key = key;
            return this;
        }

        /**
         * A human readable name of the attribute, e.g. CSE Case Number
         */
        public Builder label(String label) {
            Utils.checkNotNull(label, "label");
            this.label = Optional.ofNullable(label);
            return this;
        }

        /**
         * A human readable name of the attribute, e.g. CSE Case Number
         */
        public Builder label(Optional<String> label) {
            Utils.checkNotNull(label, "label");
            this.label = label;
            return this;
        }
        
        public RequiredAttributes build() {
            return new RequiredAttributes(
                key,
                label);
        }
    }
}

