/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * Company - The representation of a company in Gusto.
 */

public class Company {

    /**
     * The Federal Employer Identification Number of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ein")
    private Optional<String> ein;

    /**
     * The tax payer type of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("entity_type")
    private JsonNullable<? extends EntityType> entityType;

    /**
     * Whether the company only supports contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("contractor_only")
    private Optional<Boolean> contractorOnly;

    /**
     * The Gusto product tier of the company (not applicable to Embedded partner managed companies).
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tier")
    private JsonNullable<? extends Tier> tier;

    /**
     * Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_suspended")
    private Optional<Boolean> isSuspended;

    /**
     * The status of the company in Gusto. "Approved" companies are approved to run payroll from a risk and compliance perspective. However, an approved company may still need to resolve other [payroll blockers](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) to be able to run payroll. "Not Approved" companies may not yet run payroll with Gusto and may need to complete onboarding or contact support. "Suspended" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("company_status")
    private Optional<? extends CompanyStatus> companyStatus;

    /**
     * A unique identifier of the company in Gusto.
     */
    @JsonProperty("uuid")
    private String uuid;

    /**
     * The name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The slug of the name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("slug")
    private Optional<String> slug;

    /**
     * The trade name of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("trade_name")
    private JsonNullable<String> tradeName;

    /**
     * Whether the company is fully managed by a partner via the API
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_partner_managed")
    private Optional<Boolean> isPartnerManaged;

    /**
     * The pay schedule assignment type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pay_schedule_type")
    private JsonNullable<? extends PayScheduleType> payScheduleType;

    /**
     * Company's first invoiceable event date
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("join_date")
    private JsonNullable<String> joinDate;

    /**
     * Company's default funding type
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("funding_type")
    private JsonNullable<? extends FundingType> fundingType;

    /**
     * The locations of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("locations")
    private Optional<? extends List<CompanyAddress>> locations;

    /**
     * The available company-wide compensation rates for the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("compensations")
    private Optional<? extends Compensations> compensations;

    /**
     * The primary signatory of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_signatory")
    private JsonNullable<? extends PrimarySignatory> primarySignatory;

    /**
     * The primary payroll admin of the company.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("primary_payroll_admin")
    private Optional<? extends PrimaryPayrollAdmin> primaryPayrollAdmin;

    @JsonCreator
    public Company(
            @JsonProperty("ein") Optional<String> ein,
            @JsonProperty("entity_type") JsonNullable<? extends EntityType> entityType,
            @JsonProperty("contractor_only") Optional<Boolean> contractorOnly,
            @JsonProperty("tier") JsonNullable<? extends Tier> tier,
            @JsonProperty("is_suspended") Optional<Boolean> isSuspended,
            @JsonProperty("company_status") Optional<? extends CompanyStatus> companyStatus,
            @JsonProperty("uuid") String uuid,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("slug") Optional<String> slug,
            @JsonProperty("trade_name") JsonNullable<String> tradeName,
            @JsonProperty("is_partner_managed") Optional<Boolean> isPartnerManaged,
            @JsonProperty("pay_schedule_type") JsonNullable<? extends PayScheduleType> payScheduleType,
            @JsonProperty("join_date") JsonNullable<String> joinDate,
            @JsonProperty("funding_type") JsonNullable<? extends FundingType> fundingType,
            @JsonProperty("locations") Optional<? extends List<CompanyAddress>> locations,
            @JsonProperty("compensations") Optional<? extends Compensations> compensations,
            @JsonProperty("primary_signatory") JsonNullable<? extends PrimarySignatory> primarySignatory,
            @JsonProperty("primary_payroll_admin") Optional<? extends PrimaryPayrollAdmin> primaryPayrollAdmin) {
        Utils.checkNotNull(ein, "ein");
        Utils.checkNotNull(entityType, "entityType");
        Utils.checkNotNull(contractorOnly, "contractorOnly");
        Utils.checkNotNull(tier, "tier");
        Utils.checkNotNull(isSuspended, "isSuspended");
        Utils.checkNotNull(companyStatus, "companyStatus");
        Utils.checkNotNull(uuid, "uuid");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(slug, "slug");
        Utils.checkNotNull(tradeName, "tradeName");
        Utils.checkNotNull(isPartnerManaged, "isPartnerManaged");
        Utils.checkNotNull(payScheduleType, "payScheduleType");
        Utils.checkNotNull(joinDate, "joinDate");
        Utils.checkNotNull(fundingType, "fundingType");
        Utils.checkNotNull(locations, "locations");
        Utils.checkNotNull(compensations, "compensations");
        Utils.checkNotNull(primarySignatory, "primarySignatory");
        Utils.checkNotNull(primaryPayrollAdmin, "primaryPayrollAdmin");
        this.ein = ein;
        this.entityType = entityType;
        this.contractorOnly = contractorOnly;
        this.tier = tier;
        this.isSuspended = isSuspended;
        this.companyStatus = companyStatus;
        this.uuid = uuid;
        this.name = name;
        this.slug = slug;
        this.tradeName = tradeName;
        this.isPartnerManaged = isPartnerManaged;
        this.payScheduleType = payScheduleType;
        this.joinDate = joinDate;
        this.fundingType = fundingType;
        this.locations = locations;
        this.compensations = compensations;
        this.primarySignatory = primarySignatory;
        this.primaryPayrollAdmin = primaryPayrollAdmin;
    }
    
    public Company(
            String uuid) {
        this(Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), uuid, Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), JsonNullable.undefined(), JsonNullable.undefined(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty());
    }

    /**
     * The Federal Employer Identification Number of the company.
     */
    @JsonIgnore
    public Optional<String> ein() {
        return ein;
    }

    /**
     * The tax payer type of the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<EntityType> entityType() {
        return (JsonNullable<EntityType>) entityType;
    }

    /**
     * Whether the company only supports contractors.
     */
    @JsonIgnore
    public Optional<Boolean> contractorOnly() {
        return contractorOnly;
    }

    /**
     * The Gusto product tier of the company (not applicable to Embedded partner managed companies).
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<Tier> tier() {
        return (JsonNullable<Tier>) tier;
    }

    /**
     * Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
     */
    @JsonIgnore
    public Optional<Boolean> isSuspended() {
        return isSuspended;
    }

    /**
     * The status of the company in Gusto. "Approved" companies are approved to run payroll from a risk and compliance perspective. However, an approved company may still need to resolve other [payroll blockers](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) to be able to run payroll. "Not Approved" companies may not yet run payroll with Gusto and may need to complete onboarding or contact support. "Suspended" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<CompanyStatus> companyStatus() {
        return (Optional<CompanyStatus>) companyStatus;
    }

    /**
     * A unique identifier of the company in Gusto.
     */
    @JsonIgnore
    public String uuid() {
        return uuid;
    }

    /**
     * The name of the company.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The slug of the name of the company.
     */
    @JsonIgnore
    public Optional<String> slug() {
        return slug;
    }

    /**
     * The trade name of the company.
     */
    @JsonIgnore
    public JsonNullable<String> tradeName() {
        return tradeName;
    }

    /**
     * Whether the company is fully managed by a partner via the API
     */
    @JsonIgnore
    public Optional<Boolean> isPartnerManaged() {
        return isPartnerManaged;
    }

    /**
     * The pay schedule assignment type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PayScheduleType> payScheduleType() {
        return (JsonNullable<PayScheduleType>) payScheduleType;
    }

    /**
     * Company's first invoiceable event date
     */
    @JsonIgnore
    public JsonNullable<String> joinDate() {
        return joinDate;
    }

    /**
     * Company's default funding type
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<FundingType> fundingType() {
        return (JsonNullable<FundingType>) fundingType;
    }

    /**
     * The locations of the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<CompanyAddress>> locations() {
        return (Optional<List<CompanyAddress>>) locations;
    }

    /**
     * The available company-wide compensation rates for the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<Compensations> compensations() {
        return (Optional<Compensations>) compensations;
    }

    /**
     * The primary signatory of the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public JsonNullable<PrimarySignatory> primarySignatory() {
        return (JsonNullable<PrimarySignatory>) primarySignatory;
    }

    /**
     * The primary payroll admin of the company.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PrimaryPayrollAdmin> primaryPayrollAdmin() {
        return (Optional<PrimaryPayrollAdmin>) primaryPayrollAdmin;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The Federal Employer Identification Number of the company.
     */
    public Company withEin(String ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = Optional.ofNullable(ein);
        return this;
    }

    /**
     * The Federal Employer Identification Number of the company.
     */
    public Company withEin(Optional<String> ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = ein;
        return this;
    }

    /**
     * The tax payer type of the company.
     */
    public Company withEntityType(EntityType entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = JsonNullable.of(entityType);
        return this;
    }

    /**
     * The tax payer type of the company.
     */
    public Company withEntityType(JsonNullable<? extends EntityType> entityType) {
        Utils.checkNotNull(entityType, "entityType");
        this.entityType = entityType;
        return this;
    }

    /**
     * Whether the company only supports contractors.
     */
    public Company withContractorOnly(boolean contractorOnly) {
        Utils.checkNotNull(contractorOnly, "contractorOnly");
        this.contractorOnly = Optional.ofNullable(contractorOnly);
        return this;
    }

    /**
     * Whether the company only supports contractors.
     */
    public Company withContractorOnly(Optional<Boolean> contractorOnly) {
        Utils.checkNotNull(contractorOnly, "contractorOnly");
        this.contractorOnly = contractorOnly;
        return this;
    }

    /**
     * The Gusto product tier of the company (not applicable to Embedded partner managed companies).
     */
    public Company withTier(Tier tier) {
        Utils.checkNotNull(tier, "tier");
        this.tier = JsonNullable.of(tier);
        return this;
    }

    /**
     * The Gusto product tier of the company (not applicable to Embedded partner managed companies).
     */
    public Company withTier(JsonNullable<? extends Tier> tier) {
        Utils.checkNotNull(tier, "tier");
        this.tier = tier;
        return this;
    }

    /**
     * Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
     */
    public Company withIsSuspended(boolean isSuspended) {
        Utils.checkNotNull(isSuspended, "isSuspended");
        this.isSuspended = Optional.ofNullable(isSuspended);
        return this;
    }

    /**
     * Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
     */
    public Company withIsSuspended(Optional<Boolean> isSuspended) {
        Utils.checkNotNull(isSuspended, "isSuspended");
        this.isSuspended = isSuspended;
        return this;
    }

    /**
     * The status of the company in Gusto. "Approved" companies are approved to run payroll from a risk and compliance perspective. However, an approved company may still need to resolve other [payroll blockers](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) to be able to run payroll. "Not Approved" companies may not yet run payroll with Gusto and may need to complete onboarding or contact support. "Suspended" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
     */
    public Company withCompanyStatus(CompanyStatus companyStatus) {
        Utils.checkNotNull(companyStatus, "companyStatus");
        this.companyStatus = Optional.ofNullable(companyStatus);
        return this;
    }

    /**
     * The status of the company in Gusto. "Approved" companies are approved to run payroll from a risk and compliance perspective. However, an approved company may still need to resolve other [payroll blockers](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) to be able to run payroll. "Not Approved" companies may not yet run payroll with Gusto and may need to complete onboarding or contact support. "Suspended" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
     */
    public Company withCompanyStatus(Optional<? extends CompanyStatus> companyStatus) {
        Utils.checkNotNull(companyStatus, "companyStatus");
        this.companyStatus = companyStatus;
        return this;
    }

    /**
     * A unique identifier of the company in Gusto.
     */
    public Company withUuid(String uuid) {
        Utils.checkNotNull(uuid, "uuid");
        this.uuid = uuid;
        return this;
    }

    /**
     * The name of the company.
     */
    public Company withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the company.
     */
    public Company withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The slug of the name of the company.
     */
    public Company withSlug(String slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = Optional.ofNullable(slug);
        return this;
    }

    /**
     * The slug of the name of the company.
     */
    public Company withSlug(Optional<String> slug) {
        Utils.checkNotNull(slug, "slug");
        this.slug = slug;
        return this;
    }

    /**
     * The trade name of the company.
     */
    public Company withTradeName(String tradeName) {
        Utils.checkNotNull(tradeName, "tradeName");
        this.tradeName = JsonNullable.of(tradeName);
        return this;
    }

    /**
     * The trade name of the company.
     */
    public Company withTradeName(JsonNullable<String> tradeName) {
        Utils.checkNotNull(tradeName, "tradeName");
        this.tradeName = tradeName;
        return this;
    }

    /**
     * Whether the company is fully managed by a partner via the API
     */
    public Company withIsPartnerManaged(boolean isPartnerManaged) {
        Utils.checkNotNull(isPartnerManaged, "isPartnerManaged");
        this.isPartnerManaged = Optional.ofNullable(isPartnerManaged);
        return this;
    }

    /**
     * Whether the company is fully managed by a partner via the API
     */
    public Company withIsPartnerManaged(Optional<Boolean> isPartnerManaged) {
        Utils.checkNotNull(isPartnerManaged, "isPartnerManaged");
        this.isPartnerManaged = isPartnerManaged;
        return this;
    }

    /**
     * The pay schedule assignment type.
     */
    public Company withPayScheduleType(PayScheduleType payScheduleType) {
        Utils.checkNotNull(payScheduleType, "payScheduleType");
        this.payScheduleType = JsonNullable.of(payScheduleType);
        return this;
    }

    /**
     * The pay schedule assignment type.
     */
    public Company withPayScheduleType(JsonNullable<? extends PayScheduleType> payScheduleType) {
        Utils.checkNotNull(payScheduleType, "payScheduleType");
        this.payScheduleType = payScheduleType;
        return this;
    }

    /**
     * Company's first invoiceable event date
     */
    public Company withJoinDate(String joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = JsonNullable.of(joinDate);
        return this;
    }

    /**
     * Company's first invoiceable event date
     */
    public Company withJoinDate(JsonNullable<String> joinDate) {
        Utils.checkNotNull(joinDate, "joinDate");
        this.joinDate = joinDate;
        return this;
    }

    /**
     * Company's default funding type
     */
    public Company withFundingType(FundingType fundingType) {
        Utils.checkNotNull(fundingType, "fundingType");
        this.fundingType = JsonNullable.of(fundingType);
        return this;
    }

    /**
     * Company's default funding type
     */
    public Company withFundingType(JsonNullable<? extends FundingType> fundingType) {
        Utils.checkNotNull(fundingType, "fundingType");
        this.fundingType = fundingType;
        return this;
    }

    /**
     * The locations of the company.
     */
    public Company withLocations(List<CompanyAddress> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = Optional.ofNullable(locations);
        return this;
    }

    /**
     * The locations of the company.
     */
    public Company withLocations(Optional<? extends List<CompanyAddress>> locations) {
        Utils.checkNotNull(locations, "locations");
        this.locations = locations;
        return this;
    }

    /**
     * The available company-wide compensation rates for the company.
     */
    public Company withCompensations(Compensations compensations) {
        Utils.checkNotNull(compensations, "compensations");
        this.compensations = Optional.ofNullable(compensations);
        return this;
    }

    /**
     * The available company-wide compensation rates for the company.
     */
    public Company withCompensations(Optional<? extends Compensations> compensations) {
        Utils.checkNotNull(compensations, "compensations");
        this.compensations = compensations;
        return this;
    }

    /**
     * The primary signatory of the company.
     */
    public Company withPrimarySignatory(PrimarySignatory primarySignatory) {
        Utils.checkNotNull(primarySignatory, "primarySignatory");
        this.primarySignatory = JsonNullable.of(primarySignatory);
        return this;
    }

    /**
     * The primary signatory of the company.
     */
    public Company withPrimarySignatory(JsonNullable<? extends PrimarySignatory> primarySignatory) {
        Utils.checkNotNull(primarySignatory, "primarySignatory");
        this.primarySignatory = primarySignatory;
        return this;
    }

    /**
     * The primary payroll admin of the company.
     */
    public Company withPrimaryPayrollAdmin(PrimaryPayrollAdmin primaryPayrollAdmin) {
        Utils.checkNotNull(primaryPayrollAdmin, "primaryPayrollAdmin");
        this.primaryPayrollAdmin = Optional.ofNullable(primaryPayrollAdmin);
        return this;
    }

    /**
     * The primary payroll admin of the company.
     */
    public Company withPrimaryPayrollAdmin(Optional<? extends PrimaryPayrollAdmin> primaryPayrollAdmin) {
        Utils.checkNotNull(primaryPayrollAdmin, "primaryPayrollAdmin");
        this.primaryPayrollAdmin = primaryPayrollAdmin;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Company other = (Company) o;
        return 
            Objects.deepEquals(this.ein, other.ein) &&
            Objects.deepEquals(this.entityType, other.entityType) &&
            Objects.deepEquals(this.contractorOnly, other.contractorOnly) &&
            Objects.deepEquals(this.tier, other.tier) &&
            Objects.deepEquals(this.isSuspended, other.isSuspended) &&
            Objects.deepEquals(this.companyStatus, other.companyStatus) &&
            Objects.deepEquals(this.uuid, other.uuid) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.slug, other.slug) &&
            Objects.deepEquals(this.tradeName, other.tradeName) &&
            Objects.deepEquals(this.isPartnerManaged, other.isPartnerManaged) &&
            Objects.deepEquals(this.payScheduleType, other.payScheduleType) &&
            Objects.deepEquals(this.joinDate, other.joinDate) &&
            Objects.deepEquals(this.fundingType, other.fundingType) &&
            Objects.deepEquals(this.locations, other.locations) &&
            Objects.deepEquals(this.compensations, other.compensations) &&
            Objects.deepEquals(this.primarySignatory, other.primarySignatory) &&
            Objects.deepEquals(this.primaryPayrollAdmin, other.primaryPayrollAdmin);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            ein,
            entityType,
            contractorOnly,
            tier,
            isSuspended,
            companyStatus,
            uuid,
            name,
            slug,
            tradeName,
            isPartnerManaged,
            payScheduleType,
            joinDate,
            fundingType,
            locations,
            compensations,
            primarySignatory,
            primaryPayrollAdmin);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Company.class,
                "ein", ein,
                "entityType", entityType,
                "contractorOnly", contractorOnly,
                "tier", tier,
                "isSuspended", isSuspended,
                "companyStatus", companyStatus,
                "uuid", uuid,
                "name", name,
                "slug", slug,
                "tradeName", tradeName,
                "isPartnerManaged", isPartnerManaged,
                "payScheduleType", payScheduleType,
                "joinDate", joinDate,
                "fundingType", fundingType,
                "locations", locations,
                "compensations", compensations,
                "primarySignatory", primarySignatory,
                "primaryPayrollAdmin", primaryPayrollAdmin);
    }
    
    public final static class Builder {
 
        private Optional<String> ein = Optional.empty();
 
        private JsonNullable<? extends EntityType> entityType = JsonNullable.undefined();
 
        private Optional<Boolean> contractorOnly = Optional.empty();
 
        private JsonNullable<? extends Tier> tier = JsonNullable.undefined();
 
        private Optional<Boolean> isSuspended = Optional.empty();
 
        private Optional<? extends CompanyStatus> companyStatus = Optional.empty();
 
        private String uuid;
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> slug = Optional.empty();
 
        private JsonNullable<String> tradeName = JsonNullable.undefined();
 
        private Optional<Boolean> isPartnerManaged = Optional.empty();
 
        private JsonNullable<? extends PayScheduleType> payScheduleType = JsonNullable.undefined();
 
        private JsonNullable<String> joinDate = JsonNullable.undefined();
 
        private JsonNullable<? extends FundingType> fundingType = JsonNullable.undefined();
 
        private Optional<? extends List<CompanyAddress>> locations = Optional.empty();
 
        private Optional<? extends Compensations> compensations = Optional.empty();
 
        private JsonNullable<? extends PrimarySignatory> primarySignatory = JsonNullable.undefined();
 
        private Optional<? extends PrimaryPayrollAdmin> primaryPayrollAdmin = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The Federal Employer Identification Number of the company.
         */
        public Builder ein(String ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        /**
         * The Federal Employer Identification Number of the company.
         */
        public Builder ein(Optional<String> ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = ein;
            return this;
        }

        /**
         * The tax payer type of the company.
         */
        public Builder entityType(EntityType entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = JsonNullable.of(entityType);
            return this;
        }

        /**
         * The tax payer type of the company.
         */
        public Builder entityType(JsonNullable<? extends EntityType> entityType) {
            Utils.checkNotNull(entityType, "entityType");
            this.entityType = entityType;
            return this;
        }

        /**
         * Whether the company only supports contractors.
         */
        public Builder contractorOnly(boolean contractorOnly) {
            Utils.checkNotNull(contractorOnly, "contractorOnly");
            this.contractorOnly = Optional.ofNullable(contractorOnly);
            return this;
        }

        /**
         * Whether the company only supports contractors.
         */
        public Builder contractorOnly(Optional<Boolean> contractorOnly) {
            Utils.checkNotNull(contractorOnly, "contractorOnly");
            this.contractorOnly = contractorOnly;
            return this;
        }

        /**
         * The Gusto product tier of the company (not applicable to Embedded partner managed companies).
         */
        public Builder tier(Tier tier) {
            Utils.checkNotNull(tier, "tier");
            this.tier = JsonNullable.of(tier);
            return this;
        }

        /**
         * The Gusto product tier of the company (not applicable to Embedded partner managed companies).
         */
        public Builder tier(JsonNullable<? extends Tier> tier) {
            Utils.checkNotNull(tier, "tier");
            this.tier = tier;
            return this;
        }

        /**
         * Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
         */
        public Builder isSuspended(boolean isSuspended) {
            Utils.checkNotNull(isSuspended, "isSuspended");
            this.isSuspended = Optional.ofNullable(isSuspended);
            return this;
        }

        /**
         * Whether or not the company is suspended in Gusto. Suspended companies may not run payroll.
         */
        public Builder isSuspended(Optional<Boolean> isSuspended) {
            Utils.checkNotNull(isSuspended, "isSuspended");
            this.isSuspended = isSuspended;
            return this;
        }

        /**
         * The status of the company in Gusto. "Approved" companies are approved to run payroll from a risk and compliance perspective. However, an approved company may still need to resolve other [payroll blockers](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) to be able to run payroll. "Not Approved" companies may not yet run payroll with Gusto and may need to complete onboarding or contact support. "Suspended" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
         */
        public Builder companyStatus(CompanyStatus companyStatus) {
            Utils.checkNotNull(companyStatus, "companyStatus");
            this.companyStatus = Optional.ofNullable(companyStatus);
            return this;
        }

        /**
         * The status of the company in Gusto. "Approved" companies are approved to run payroll from a risk and compliance perspective. However, an approved company may still need to resolve other [payroll blockers](https://docs.gusto.com/embedded-payroll/docs/payroll-blockers) to be able to run payroll. "Not Approved" companies may not yet run payroll with Gusto and may need to complete onboarding or contact support. "Suspended" companies may not run payroll with Gusto. In order to unsuspend their account, the company must contact support.
         */
        public Builder companyStatus(Optional<? extends CompanyStatus> companyStatus) {
            Utils.checkNotNull(companyStatus, "companyStatus");
            this.companyStatus = companyStatus;
            return this;
        }

        /**
         * A unique identifier of the company in Gusto.
         */
        public Builder uuid(String uuid) {
            Utils.checkNotNull(uuid, "uuid");
            this.uuid = uuid;
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the company.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The slug of the name of the company.
         */
        public Builder slug(String slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = Optional.ofNullable(slug);
            return this;
        }

        /**
         * The slug of the name of the company.
         */
        public Builder slug(Optional<String> slug) {
            Utils.checkNotNull(slug, "slug");
            this.slug = slug;
            return this;
        }

        /**
         * The trade name of the company.
         */
        public Builder tradeName(String tradeName) {
            Utils.checkNotNull(tradeName, "tradeName");
            this.tradeName = JsonNullable.of(tradeName);
            return this;
        }

        /**
         * The trade name of the company.
         */
        public Builder tradeName(JsonNullable<String> tradeName) {
            Utils.checkNotNull(tradeName, "tradeName");
            this.tradeName = tradeName;
            return this;
        }

        /**
         * Whether the company is fully managed by a partner via the API
         */
        public Builder isPartnerManaged(boolean isPartnerManaged) {
            Utils.checkNotNull(isPartnerManaged, "isPartnerManaged");
            this.isPartnerManaged = Optional.ofNullable(isPartnerManaged);
            return this;
        }

        /**
         * Whether the company is fully managed by a partner via the API
         */
        public Builder isPartnerManaged(Optional<Boolean> isPartnerManaged) {
            Utils.checkNotNull(isPartnerManaged, "isPartnerManaged");
            this.isPartnerManaged = isPartnerManaged;
            return this;
        }

        /**
         * The pay schedule assignment type.
         */
        public Builder payScheduleType(PayScheduleType payScheduleType) {
            Utils.checkNotNull(payScheduleType, "payScheduleType");
            this.payScheduleType = JsonNullable.of(payScheduleType);
            return this;
        }

        /**
         * The pay schedule assignment type.
         */
        public Builder payScheduleType(JsonNullable<? extends PayScheduleType> payScheduleType) {
            Utils.checkNotNull(payScheduleType, "payScheduleType");
            this.payScheduleType = payScheduleType;
            return this;
        }

        /**
         * Company's first invoiceable event date
         */
        public Builder joinDate(String joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = JsonNullable.of(joinDate);
            return this;
        }

        /**
         * Company's first invoiceable event date
         */
        public Builder joinDate(JsonNullable<String> joinDate) {
            Utils.checkNotNull(joinDate, "joinDate");
            this.joinDate = joinDate;
            return this;
        }

        /**
         * Company's default funding type
         */
        public Builder fundingType(FundingType fundingType) {
            Utils.checkNotNull(fundingType, "fundingType");
            this.fundingType = JsonNullable.of(fundingType);
            return this;
        }

        /**
         * Company's default funding type
         */
        public Builder fundingType(JsonNullable<? extends FundingType> fundingType) {
            Utils.checkNotNull(fundingType, "fundingType");
            this.fundingType = fundingType;
            return this;
        }

        /**
         * The locations of the company.
         */
        public Builder locations(List<CompanyAddress> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = Optional.ofNullable(locations);
            return this;
        }

        /**
         * The locations of the company.
         */
        public Builder locations(Optional<? extends List<CompanyAddress>> locations) {
            Utils.checkNotNull(locations, "locations");
            this.locations = locations;
            return this;
        }

        /**
         * The available company-wide compensation rates for the company.
         */
        public Builder compensations(Compensations compensations) {
            Utils.checkNotNull(compensations, "compensations");
            this.compensations = Optional.ofNullable(compensations);
            return this;
        }

        /**
         * The available company-wide compensation rates for the company.
         */
        public Builder compensations(Optional<? extends Compensations> compensations) {
            Utils.checkNotNull(compensations, "compensations");
            this.compensations = compensations;
            return this;
        }

        /**
         * The primary signatory of the company.
         */
        public Builder primarySignatory(PrimarySignatory primarySignatory) {
            Utils.checkNotNull(primarySignatory, "primarySignatory");
            this.primarySignatory = JsonNullable.of(primarySignatory);
            return this;
        }

        /**
         * The primary signatory of the company.
         */
        public Builder primarySignatory(JsonNullable<? extends PrimarySignatory> primarySignatory) {
            Utils.checkNotNull(primarySignatory, "primarySignatory");
            this.primarySignatory = primarySignatory;
            return this;
        }

        /**
         * The primary payroll admin of the company.
         */
        public Builder primaryPayrollAdmin(PrimaryPayrollAdmin primaryPayrollAdmin) {
            Utils.checkNotNull(primaryPayrollAdmin, "primaryPayrollAdmin");
            this.primaryPayrollAdmin = Optional.ofNullable(primaryPayrollAdmin);
            return this;
        }

        /**
         * The primary payroll admin of the company.
         */
        public Builder primaryPayrollAdmin(Optional<? extends PrimaryPayrollAdmin> primaryPayrollAdmin) {
            Utils.checkNotNull(primaryPayrollAdmin, "primaryPayrollAdmin");
            this.primaryPayrollAdmin = primaryPayrollAdmin;
            return this;
        }
        
        public Company build() {
            return new Company(
                ein,
                entityType,
                contractorOnly,
                tier,
                isSuspended,
                companyStatus,
                uuid,
                name,
                slug,
                tradeName,
                isPartnerManaged,
                payScheduleType,
                joinDate,
                fundingType,
                locations,
                compensations,
                primarySignatory,
                primaryPayrollAdmin);
        }
    }
}

