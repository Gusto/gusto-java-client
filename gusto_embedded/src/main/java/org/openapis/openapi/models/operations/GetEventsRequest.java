/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.models.components.SortOrder;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.utils.SpeakeasyMetadata;
import org.openapis.openapi.utils.Utils;


public class GetEventsRequest {

    /**
     * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=starting_after_uuid")
    private Optional<String> startingAfterUuid;

    /**
     * The UUID of the company. If not specified, will return all events for all companies.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=resource_uuid")
    private Optional<String> resourceUuid;

    /**
     * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=limit")
    private Optional<String> limit;

    /**
     * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=event_type")
    private Optional<String> eventType;

    /**
     * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
     */
    @SpeakeasyMetadata("queryParam:style=form,explode=true,name=sort_order")
    private Optional<? extends SortOrder> sortOrder;

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    @SpeakeasyMetadata("header:style=simple,explode=false,name=X-Gusto-API-Version")
    private Optional<? extends VersionHeader> xGustoAPIVersion;

    @JsonCreator
    public GetEventsRequest(
            Optional<String> startingAfterUuid,
            Optional<String> resourceUuid,
            Optional<String> limit,
            Optional<String> eventType,
            Optional<? extends SortOrder> sortOrder,
            Optional<? extends VersionHeader> xGustoAPIVersion) {
        Utils.checkNotNull(startingAfterUuid, "startingAfterUuid");
        Utils.checkNotNull(resourceUuid, "resourceUuid");
        Utils.checkNotNull(limit, "limit");
        Utils.checkNotNull(eventType, "eventType");
        Utils.checkNotNull(sortOrder, "sortOrder");
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.startingAfterUuid = startingAfterUuid;
        this.resourceUuid = resourceUuid;
        this.limit = limit;
        this.eventType = eventType;
        this.sortOrder = sortOrder;
        this.xGustoAPIVersion = xGustoAPIVersion;
    }
    
    public GetEventsRequest() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
     */
    @JsonIgnore
    public Optional<String> startingAfterUuid() {
        return startingAfterUuid;
    }

    /**
     * The UUID of the company. If not specified, will return all events for all companies.
     */
    @JsonIgnore
    public Optional<String> resourceUuid() {
        return resourceUuid;
    }

    /**
     * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
     */
    @JsonIgnore
    public Optional<String> limit() {
        return limit;
    }

    /**
     * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
     */
    @JsonIgnore
    public Optional<String> eventType() {
        return eventType;
    }

    /**
     * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<SortOrder> sortOrder() {
        return (Optional<SortOrder>) sortOrder;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<VersionHeader> xGustoAPIVersion() {
        return (Optional<VersionHeader>) xGustoAPIVersion;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
     */
    public GetEventsRequest withStartingAfterUuid(String startingAfterUuid) {
        Utils.checkNotNull(startingAfterUuid, "startingAfterUuid");
        this.startingAfterUuid = Optional.ofNullable(startingAfterUuid);
        return this;
    }

    /**
     * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
     */
    public GetEventsRequest withStartingAfterUuid(Optional<String> startingAfterUuid) {
        Utils.checkNotNull(startingAfterUuid, "startingAfterUuid");
        this.startingAfterUuid = startingAfterUuid;
        return this;
    }

    /**
     * The UUID of the company. If not specified, will return all events for all companies.
     */
    public GetEventsRequest withResourceUuid(String resourceUuid) {
        Utils.checkNotNull(resourceUuid, "resourceUuid");
        this.resourceUuid = Optional.ofNullable(resourceUuid);
        return this;
    }

    /**
     * The UUID of the company. If not specified, will return all events for all companies.
     */
    public GetEventsRequest withResourceUuid(Optional<String> resourceUuid) {
        Utils.checkNotNull(resourceUuid, "resourceUuid");
        this.resourceUuid = resourceUuid;
        return this;
    }

    /**
     * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
     */
    public GetEventsRequest withLimit(String limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = Optional.ofNullable(limit);
        return this;
    }

    /**
     * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
     */
    public GetEventsRequest withLimit(Optional<String> limit) {
        Utils.checkNotNull(limit, "limit");
        this.limit = limit;
        return this;
    }

    /**
     * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
     */
    public GetEventsRequest withEventType(String eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = Optional.ofNullable(eventType);
        return this;
    }

    /**
     * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
     */
    public GetEventsRequest withEventType(Optional<String> eventType) {
        Utils.checkNotNull(eventType, "eventType");
        this.eventType = eventType;
        return this;
    }

    /**
     * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
     */
    public GetEventsRequest withSortOrder(SortOrder sortOrder) {
        Utils.checkNotNull(sortOrder, "sortOrder");
        this.sortOrder = Optional.ofNullable(sortOrder);
        return this;
    }

    /**
     * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
     */
    public GetEventsRequest withSortOrder(Optional<? extends SortOrder> sortOrder) {
        Utils.checkNotNull(sortOrder, "sortOrder");
        this.sortOrder = sortOrder;
        return this;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    public GetEventsRequest withXGustoAPIVersion(VersionHeader xGustoAPIVersion) {
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.xGustoAPIVersion = Optional.ofNullable(xGustoAPIVersion);
        return this;
    }

    /**
     * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
     */
    public GetEventsRequest withXGustoAPIVersion(Optional<? extends VersionHeader> xGustoAPIVersion) {
        Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
        this.xGustoAPIVersion = xGustoAPIVersion;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        GetEventsRequest other = (GetEventsRequest) o;
        return 
            Objects.deepEquals(this.startingAfterUuid, other.startingAfterUuid) &&
            Objects.deepEquals(this.resourceUuid, other.resourceUuid) &&
            Objects.deepEquals(this.limit, other.limit) &&
            Objects.deepEquals(this.eventType, other.eventType) &&
            Objects.deepEquals(this.sortOrder, other.sortOrder) &&
            Objects.deepEquals(this.xGustoAPIVersion, other.xGustoAPIVersion);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            startingAfterUuid,
            resourceUuid,
            limit,
            eventType,
            sortOrder,
            xGustoAPIVersion);
    }
    
    @Override
    public String toString() {
        return Utils.toString(GetEventsRequest.class,
                "startingAfterUuid", startingAfterUuid,
                "resourceUuid", resourceUuid,
                "limit", limit,
                "eventType", eventType,
                "sortOrder", sortOrder,
                "xGustoAPIVersion", xGustoAPIVersion);
    }
    
    public final static class Builder {
 
        private Optional<String> startingAfterUuid = Optional.empty();
 
        private Optional<String> resourceUuid = Optional.empty();
 
        private Optional<String> limit = Optional.empty();
 
        private Optional<String> eventType = Optional.empty();
 
        private Optional<? extends SortOrder> sortOrder = Optional.empty();
 
        private Optional<? extends VersionHeader> xGustoAPIVersion = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
         */
        public Builder startingAfterUuid(String startingAfterUuid) {
            Utils.checkNotNull(startingAfterUuid, "startingAfterUuid");
            this.startingAfterUuid = Optional.ofNullable(startingAfterUuid);
            return this;
        }

        /**
         * A cursor for pagination. Returns all events occuring after the specified UUID (exclusive). Events are sorted according to the provided sort_order param.
         */
        public Builder startingAfterUuid(Optional<String> startingAfterUuid) {
            Utils.checkNotNull(startingAfterUuid, "startingAfterUuid");
            this.startingAfterUuid = startingAfterUuid;
            return this;
        }

        /**
         * The UUID of the company. If not specified, will return all events for all companies.
         */
        public Builder resourceUuid(String resourceUuid) {
            Utils.checkNotNull(resourceUuid, "resourceUuid");
            this.resourceUuid = Optional.ofNullable(resourceUuid);
            return this;
        }

        /**
         * The UUID of the company. If not specified, will return all events for all companies.
         */
        public Builder resourceUuid(Optional<String> resourceUuid) {
            Utils.checkNotNull(resourceUuid, "resourceUuid");
            this.resourceUuid = resourceUuid;
            return this;
        }

        /**
         * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
         */
        public Builder limit(String limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = Optional.ofNullable(limit);
            return this;
        }

        /**
         * Limits the number of objects returned in a single response, between 1 and 100. The default is 25
         */
        public Builder limit(Optional<String> limit) {
            Utils.checkNotNull(limit, "limit");
            this.limit = limit;
            return this;
        }

        /**
         * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
         */
        public Builder eventType(String eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = Optional.ofNullable(eventType);
            return this;
        }

        /**
         * A string containing the exact event name (e.g. `employee.created`), or use a wildcard match to filter for a group of events (e.g. `employee.*`, `*.created`, `notification.*.created` etc.)
         */
        public Builder eventType(Optional<String> eventType) {
            Utils.checkNotNull(eventType, "eventType");
            this.eventType = eventType;
            return this;
        }

        /**
         * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
         */
        public Builder sortOrder(SortOrder sortOrder) {
            Utils.checkNotNull(sortOrder, "sortOrder");
            this.sortOrder = Optional.ofNullable(sortOrder);
            return this;
        }

        /**
         * A string indicating whether to sort resulting events in ascending (asc) or descending (desc) chronological order. Events are sorted by their `timestamp`. Defaults to asc if left empty.
         */
        public Builder sortOrder(Optional<? extends SortOrder> sortOrder) {
            Utils.checkNotNull(sortOrder, "sortOrder");
            this.sortOrder = sortOrder;
            return this;
        }

        /**
         * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         */
        public Builder xGustoAPIVersion(VersionHeader xGustoAPIVersion) {
            Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
            this.xGustoAPIVersion = Optional.ofNullable(xGustoAPIVersion);
            return this;
        }

        /**
         * Determines the date-based API version associated with your API call. If none is provided, your application's [minimum API version](https://docs.gusto.com/embedded-payroll/docs/api-versioning#minimum-api-version) is used.
         */
        public Builder xGustoAPIVersion(Optional<? extends VersionHeader> xGustoAPIVersion) {
            Utils.checkNotNull(xGustoAPIVersion, "xGustoAPIVersion");
            this.xGustoAPIVersion = xGustoAPIVersion;
            return this;
        }
        
        public GetEventsRequest build() {
            return new GetEventsRequest(
                startingAfterUuid,
                resourceUuid,
                limit,
                eventType,
                sortOrder,
                xGustoAPIVersion);
        }
    }
}

