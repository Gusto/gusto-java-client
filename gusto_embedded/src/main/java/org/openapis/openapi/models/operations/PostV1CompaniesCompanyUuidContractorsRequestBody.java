/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.operations;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import com.fasterxml.jackson.core.type.TypeReference;
import java.lang.Boolean;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.LazySingletonValue;
import org.openapis.openapi.utils.Utils;
import org.openapitools.jackson.nullable.JsonNullable;

/**
 * PostV1CompaniesCompanyUuidContractorsRequestBody - Create an individual or business contractor.
 */

public class PostV1CompaniesCompanyUuidContractorsRequestBody {

    /**
     * The contractor type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("type")
    private Optional<? extends PostV1CompaniesCompanyUuidContractorsType> type;

    /**
     * The contractor’s wage type.
     * 
     */
    @JsonProperty("wage_type")
    private WageType wageType;

    /**
     * The day when the contractor will start working for the company.
     * 
     */
    @JsonProperty("start_date")
    private String startDate;

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is `Hourly`.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("hourly_rate")
    private Optional<String> hourlyRate;

    /**
     * Whether the contractor or the payroll admin will complete onboarding in Gusto.
     * Self-onboarding is recommended so that contractors receive Gusto accounts.
     * If self_onboarding is true, then email is required.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("self_onboarding")
    private Optional<Boolean> selfOnboarding;

    /**
     * The contractor’s email address.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("email")
    private Optional<String> email;

    /**
     * The contractor’s first name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("first_name")
    private Optional<String> firstName;

    /**
     * The contractor’s last name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("last_name")
    private Optional<String> lastName;

    /**
     * The contractor’s middle initial.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("middle_initial")
    private Optional<String> middleInitial;

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("file_new_hire_report")
    private Optional<Boolean> fileNewHireReport;

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     * This attribute is required for `Individual` contractors if `file_new_hire_report` is true and will be ignored for `Business` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("work_state")
    private JsonNullable<String> workState;

    /**
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     * Social security number is needed to file the annual 1099 tax form.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ssn")
    private Optional<String> ssn;

    /**
     * The name of the contractor business. This attribute is required for `Business` contractors and will be ignored for `Individual` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("business_name")
    private Optional<String> businessName;

    /**
     * The employer identification number of the contractor business.
     * This attribute is optional for `Business` contractors and will be ignored for `Individual` contractors.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("ein")
    private Optional<String> ein;

    /**
     * The status of the contractor. If the contractor's start date is in the future, updating this field to true means we are setting the start date to today.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("is_active")
    private Optional<Boolean> isActive;

    @JsonCreator
    public PostV1CompaniesCompanyUuidContractorsRequestBody(
            @JsonProperty("type") Optional<? extends PostV1CompaniesCompanyUuidContractorsType> type,
            @JsonProperty("wage_type") WageType wageType,
            @JsonProperty("start_date") String startDate,
            @JsonProperty("hourly_rate") Optional<String> hourlyRate,
            @JsonProperty("self_onboarding") Optional<Boolean> selfOnboarding,
            @JsonProperty("email") Optional<String> email,
            @JsonProperty("first_name") Optional<String> firstName,
            @JsonProperty("last_name") Optional<String> lastName,
            @JsonProperty("middle_initial") Optional<String> middleInitial,
            @JsonProperty("file_new_hire_report") Optional<Boolean> fileNewHireReport,
            @JsonProperty("work_state") JsonNullable<String> workState,
            @JsonProperty("ssn") Optional<String> ssn,
            @JsonProperty("business_name") Optional<String> businessName,
            @JsonProperty("ein") Optional<String> ein,
            @JsonProperty("is_active") Optional<Boolean> isActive) {
        Utils.checkNotNull(type, "type");
        Utils.checkNotNull(wageType, "wageType");
        Utils.checkNotNull(startDate, "startDate");
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        Utils.checkNotNull(selfOnboarding, "selfOnboarding");
        Utils.checkNotNull(email, "email");
        Utils.checkNotNull(firstName, "firstName");
        Utils.checkNotNull(lastName, "lastName");
        Utils.checkNotNull(middleInitial, "middleInitial");
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        Utils.checkNotNull(workState, "workState");
        Utils.checkNotNull(ssn, "ssn");
        Utils.checkNotNull(businessName, "businessName");
        Utils.checkNotNull(ein, "ein");
        Utils.checkNotNull(isActive, "isActive");
        this.type = type;
        this.wageType = wageType;
        this.startDate = startDate;
        this.hourlyRate = hourlyRate;
        this.selfOnboarding = selfOnboarding;
        this.email = email;
        this.firstName = firstName;
        this.lastName = lastName;
        this.middleInitial = middleInitial;
        this.fileNewHireReport = fileNewHireReport;
        this.workState = workState;
        this.ssn = ssn;
        this.businessName = businessName;
        this.ein = ein;
        this.isActive = isActive;
    }
    
    public PostV1CompaniesCompanyUuidContractorsRequestBody(
            WageType wageType,
            String startDate) {
        this(Optional.empty(), wageType, startDate, Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), JsonNullable.undefined(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The contractor type.
     */
    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<PostV1CompaniesCompanyUuidContractorsType> type() {
        return (Optional<PostV1CompaniesCompanyUuidContractorsType>) type;
    }

    /**
     * The contractor’s wage type.
     * 
     */
    @JsonIgnore
    public WageType wageType() {
        return wageType;
    }

    /**
     * The day when the contractor will start working for the company.
     * 
     */
    @JsonIgnore
    public String startDate() {
        return startDate;
    }

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is `Hourly`.
     */
    @JsonIgnore
    public Optional<String> hourlyRate() {
        return hourlyRate;
    }

    /**
     * Whether the contractor or the payroll admin will complete onboarding in Gusto.
     * Self-onboarding is recommended so that contractors receive Gusto accounts.
     * If self_onboarding is true, then email is required.
     */
    @JsonIgnore
    public Optional<Boolean> selfOnboarding() {
        return selfOnboarding;
    }

    /**
     * The contractor’s email address.
     */
    @JsonIgnore
    public Optional<String> email() {
        return email;
    }

    /**
     * The contractor’s first name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonIgnore
    public Optional<String> firstName() {
        return firstName;
    }

    /**
     * The contractor’s last name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonIgnore
    public Optional<String> lastName() {
        return lastName;
    }

    /**
     * The contractor’s middle initial.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonIgnore
    public Optional<String> middleInitial() {
        return middleInitial;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    @JsonIgnore
    public Optional<Boolean> fileNewHireReport() {
        return fileNewHireReport;
    }

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     * This attribute is required for `Individual` contractors if `file_new_hire_report` is true and will be ignored for `Business` contractors.
     */
    @JsonIgnore
    public JsonNullable<String> workState() {
        return workState;
    }

    /**
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     * Social security number is needed to file the annual 1099 tax form.
     */
    @JsonIgnore
    public Optional<String> ssn() {
        return ssn;
    }

    /**
     * The name of the contractor business. This attribute is required for `Business` contractors and will be ignored for `Individual` contractors.
     */
    @JsonIgnore
    public Optional<String> businessName() {
        return businessName;
    }

    /**
     * The employer identification number of the contractor business.
     * This attribute is optional for `Business` contractors and will be ignored for `Individual` contractors.
     */
    @JsonIgnore
    public Optional<String> ein() {
        return ein;
    }

    /**
     * The status of the contractor. If the contractor's start date is in the future, updating this field to true means we are setting the start date to today.
     */
    @JsonIgnore
    public Optional<Boolean> isActive() {
        return isActive;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The contractor type.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withType(PostV1CompaniesCompanyUuidContractorsType type) {
        Utils.checkNotNull(type, "type");
        this.type = Optional.ofNullable(type);
        return this;
    }

    /**
     * The contractor type.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withType(Optional<? extends PostV1CompaniesCompanyUuidContractorsType> type) {
        Utils.checkNotNull(type, "type");
        this.type = type;
        return this;
    }

    /**
     * The contractor’s wage type.
     * 
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withWageType(WageType wageType) {
        Utils.checkNotNull(wageType, "wageType");
        this.wageType = wageType;
        return this;
    }

    /**
     * The day when the contractor will start working for the company.
     * 
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withStartDate(String startDate) {
        Utils.checkNotNull(startDate, "startDate");
        this.startDate = startDate;
        return this;
    }

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is `Hourly`.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withHourlyRate(String hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = Optional.ofNullable(hourlyRate);
        return this;
    }

    /**
     * The contractor’s hourly rate. This attribute is required if the wage_type is `Hourly`.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withHourlyRate(Optional<String> hourlyRate) {
        Utils.checkNotNull(hourlyRate, "hourlyRate");
        this.hourlyRate = hourlyRate;
        return this;
    }

    /**
     * Whether the contractor or the payroll admin will complete onboarding in Gusto.
     * Self-onboarding is recommended so that contractors receive Gusto accounts.
     * If self_onboarding is true, then email is required.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withSelfOnboarding(boolean selfOnboarding) {
        Utils.checkNotNull(selfOnboarding, "selfOnboarding");
        this.selfOnboarding = Optional.ofNullable(selfOnboarding);
        return this;
    }

    /**
     * Whether the contractor or the payroll admin will complete onboarding in Gusto.
     * Self-onboarding is recommended so that contractors receive Gusto accounts.
     * If self_onboarding is true, then email is required.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withSelfOnboarding(Optional<Boolean> selfOnboarding) {
        Utils.checkNotNull(selfOnboarding, "selfOnboarding");
        this.selfOnboarding = selfOnboarding;
        return this;
    }

    /**
     * The contractor’s email address.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withEmail(String email) {
        Utils.checkNotNull(email, "email");
        this.email = Optional.ofNullable(email);
        return this;
    }

    /**
     * The contractor’s email address.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withEmail(Optional<String> email) {
        Utils.checkNotNull(email, "email");
        this.email = email;
        return this;
    }

    /**
     * The contractor’s first name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withFirstName(String firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = Optional.ofNullable(firstName);
        return this;
    }

    /**
     * The contractor’s first name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withFirstName(Optional<String> firstName) {
        Utils.checkNotNull(firstName, "firstName");
        this.firstName = firstName;
        return this;
    }

    /**
     * The contractor’s last name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withLastName(String lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = Optional.ofNullable(lastName);
        return this;
    }

    /**
     * The contractor’s last name.
     * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withLastName(Optional<String> lastName) {
        Utils.checkNotNull(lastName, "lastName");
        this.lastName = lastName;
        return this;
    }

    /**
     * The contractor’s middle initial.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withMiddleInitial(String middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = Optional.ofNullable(middleInitial);
        return this;
    }

    /**
     * The contractor’s middle initial.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withMiddleInitial(Optional<String> middleInitial) {
        Utils.checkNotNull(middleInitial, "middleInitial");
        this.middleInitial = middleInitial;
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withFileNewHireReport(boolean fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = Optional.ofNullable(fileNewHireReport);
        return this;
    }

    /**
     * The boolean flag indicating whether Gusto will file a new hire report for the contractor.
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withFileNewHireReport(Optional<Boolean> fileNewHireReport) {
        Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
        this.fileNewHireReport = fileNewHireReport;
        return this;
    }

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     * This attribute is required for `Individual` contractors if `file_new_hire_report` is true and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withWorkState(String workState) {
        Utils.checkNotNull(workState, "workState");
        this.workState = JsonNullable.of(workState);
        return this;
    }

    /**
     * State where the contractor will be conducting the majority of their work for the company.
     * This value is used when generating the new hire report.
     * This attribute is required for `Individual` contractors if `file_new_hire_report` is true and will be ignored for `Business` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withWorkState(JsonNullable<String> workState) {
        Utils.checkNotNull(workState, "workState");
        this.workState = workState;
        return this;
    }

    /**
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     * Social security number is needed to file the annual 1099 tax form.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withSsn(String ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = Optional.ofNullable(ssn);
        return this;
    }

    /**
     * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
     * Social security number is needed to file the annual 1099 tax form.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withSsn(Optional<String> ssn) {
        Utils.checkNotNull(ssn, "ssn");
        this.ssn = ssn;
        return this;
    }

    /**
     * The name of the contractor business. This attribute is required for `Business` contractors and will be ignored for `Individual` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withBusinessName(String businessName) {
        Utils.checkNotNull(businessName, "businessName");
        this.businessName = Optional.ofNullable(businessName);
        return this;
    }

    /**
     * The name of the contractor business. This attribute is required for `Business` contractors and will be ignored for `Individual` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withBusinessName(Optional<String> businessName) {
        Utils.checkNotNull(businessName, "businessName");
        this.businessName = businessName;
        return this;
    }

    /**
     * The employer identification number of the contractor business.
     * This attribute is optional for `Business` contractors and will be ignored for `Individual` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withEin(String ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = Optional.ofNullable(ein);
        return this;
    }

    /**
     * The employer identification number of the contractor business.
     * This attribute is optional for `Business` contractors and will be ignored for `Individual` contractors.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withEin(Optional<String> ein) {
        Utils.checkNotNull(ein, "ein");
        this.ein = ein;
        return this;
    }

    /**
     * The status of the contractor. If the contractor's start date is in the future, updating this field to true means we are setting the start date to today.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withIsActive(boolean isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = Optional.ofNullable(isActive);
        return this;
    }

    /**
     * The status of the contractor. If the contractor's start date is in the future, updating this field to true means we are setting the start date to today.
     */
    public PostV1CompaniesCompanyUuidContractorsRequestBody withIsActive(Optional<Boolean> isActive) {
        Utils.checkNotNull(isActive, "isActive");
        this.isActive = isActive;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        PostV1CompaniesCompanyUuidContractorsRequestBody other = (PostV1CompaniesCompanyUuidContractorsRequestBody) o;
        return 
            Objects.deepEquals(this.type, other.type) &&
            Objects.deepEquals(this.wageType, other.wageType) &&
            Objects.deepEquals(this.startDate, other.startDate) &&
            Objects.deepEquals(this.hourlyRate, other.hourlyRate) &&
            Objects.deepEquals(this.selfOnboarding, other.selfOnboarding) &&
            Objects.deepEquals(this.email, other.email) &&
            Objects.deepEquals(this.firstName, other.firstName) &&
            Objects.deepEquals(this.lastName, other.lastName) &&
            Objects.deepEquals(this.middleInitial, other.middleInitial) &&
            Objects.deepEquals(this.fileNewHireReport, other.fileNewHireReport) &&
            Objects.deepEquals(this.workState, other.workState) &&
            Objects.deepEquals(this.ssn, other.ssn) &&
            Objects.deepEquals(this.businessName, other.businessName) &&
            Objects.deepEquals(this.ein, other.ein) &&
            Objects.deepEquals(this.isActive, other.isActive);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            type,
            wageType,
            startDate,
            hourlyRate,
            selfOnboarding,
            email,
            firstName,
            lastName,
            middleInitial,
            fileNewHireReport,
            workState,
            ssn,
            businessName,
            ein,
            isActive);
    }
    
    @Override
    public String toString() {
        return Utils.toString(PostV1CompaniesCompanyUuidContractorsRequestBody.class,
                "type", type,
                "wageType", wageType,
                "startDate", startDate,
                "hourlyRate", hourlyRate,
                "selfOnboarding", selfOnboarding,
                "email", email,
                "firstName", firstName,
                "lastName", lastName,
                "middleInitial", middleInitial,
                "fileNewHireReport", fileNewHireReport,
                "workState", workState,
                "ssn", ssn,
                "businessName", businessName,
                "ein", ein,
                "isActive", isActive);
    }
    
    public final static class Builder {
 
        private Optional<? extends PostV1CompaniesCompanyUuidContractorsType> type;
 
        private WageType wageType;
 
        private String startDate;
 
        private Optional<String> hourlyRate = Optional.empty();
 
        private Optional<Boolean> selfOnboarding;
 
        private Optional<String> email = Optional.empty();
 
        private Optional<String> firstName = Optional.empty();
 
        private Optional<String> lastName = Optional.empty();
 
        private Optional<String> middleInitial = Optional.empty();
 
        private Optional<Boolean> fileNewHireReport;
 
        private JsonNullable<String> workState = JsonNullable.undefined();
 
        private Optional<String> ssn = Optional.empty();
 
        private Optional<String> businessName = Optional.empty();
 
        private Optional<String> ein = Optional.empty();
 
        private Optional<Boolean> isActive = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The contractor type.
         */
        public Builder type(PostV1CompaniesCompanyUuidContractorsType type) {
            Utils.checkNotNull(type, "type");
            this.type = Optional.ofNullable(type);
            return this;
        }

        /**
         * The contractor type.
         */
        public Builder type(Optional<? extends PostV1CompaniesCompanyUuidContractorsType> type) {
            Utils.checkNotNull(type, "type");
            this.type = type;
            return this;
        }

        /**
         * The contractor’s wage type.
         * 
         */
        public Builder wageType(WageType wageType) {
            Utils.checkNotNull(wageType, "wageType");
            this.wageType = wageType;
            return this;
        }

        /**
         * The day when the contractor will start working for the company.
         * 
         */
        public Builder startDate(String startDate) {
            Utils.checkNotNull(startDate, "startDate");
            this.startDate = startDate;
            return this;
        }

        /**
         * The contractor’s hourly rate. This attribute is required if the wage_type is `Hourly`.
         */
        public Builder hourlyRate(String hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = Optional.ofNullable(hourlyRate);
            return this;
        }

        /**
         * The contractor’s hourly rate. This attribute is required if the wage_type is `Hourly`.
         */
        public Builder hourlyRate(Optional<String> hourlyRate) {
            Utils.checkNotNull(hourlyRate, "hourlyRate");
            this.hourlyRate = hourlyRate;
            return this;
        }

        /**
         * Whether the contractor or the payroll admin will complete onboarding in Gusto.
         * Self-onboarding is recommended so that contractors receive Gusto accounts.
         * If self_onboarding is true, then email is required.
         */
        public Builder selfOnboarding(boolean selfOnboarding) {
            Utils.checkNotNull(selfOnboarding, "selfOnboarding");
            this.selfOnboarding = Optional.ofNullable(selfOnboarding);
            return this;
        }

        /**
         * Whether the contractor or the payroll admin will complete onboarding in Gusto.
         * Self-onboarding is recommended so that contractors receive Gusto accounts.
         * If self_onboarding is true, then email is required.
         */
        public Builder selfOnboarding(Optional<Boolean> selfOnboarding) {
            Utils.checkNotNull(selfOnboarding, "selfOnboarding");
            this.selfOnboarding = selfOnboarding;
            return this;
        }

        /**
         * The contractor’s email address.
         */
        public Builder email(String email) {
            Utils.checkNotNull(email, "email");
            this.email = Optional.ofNullable(email);
            return this;
        }

        /**
         * The contractor’s email address.
         */
        public Builder email(Optional<String> email) {
            Utils.checkNotNull(email, "email");
            this.email = email;
            return this;
        }

        /**
         * The contractor’s first name.
         * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder firstName(String firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = Optional.ofNullable(firstName);
            return this;
        }

        /**
         * The contractor’s first name.
         * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder firstName(Optional<String> firstName) {
            Utils.checkNotNull(firstName, "firstName");
            this.firstName = firstName;
            return this;
        }

        /**
         * The contractor’s last name.
         * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder lastName(String lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = Optional.ofNullable(lastName);
            return this;
        }

        /**
         * The contractor’s last name.
         * This attribute is required for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder lastName(Optional<String> lastName) {
            Utils.checkNotNull(lastName, "lastName");
            this.lastName = lastName;
            return this;
        }

        /**
         * The contractor’s middle initial.
         * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder middleInitial(String middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = Optional.ofNullable(middleInitial);
            return this;
        }

        /**
         * The contractor’s middle initial.
         * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder middleInitial(Optional<String> middleInitial) {
            Utils.checkNotNull(middleInitial, "middleInitial");
            this.middleInitial = middleInitial;
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the contractor.
         * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder fileNewHireReport(boolean fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = Optional.ofNullable(fileNewHireReport);
            return this;
        }

        /**
         * The boolean flag indicating whether Gusto will file a new hire report for the contractor.
         * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
         */
        public Builder fileNewHireReport(Optional<Boolean> fileNewHireReport) {
            Utils.checkNotNull(fileNewHireReport, "fileNewHireReport");
            this.fileNewHireReport = fileNewHireReport;
            return this;
        }

        /**
         * State where the contractor will be conducting the majority of their work for the company.
         * This value is used when generating the new hire report.
         * This attribute is required for `Individual` contractors if `file_new_hire_report` is true and will be ignored for `Business` contractors.
         */
        public Builder workState(String workState) {
            Utils.checkNotNull(workState, "workState");
            this.workState = JsonNullable.of(workState);
            return this;
        }

        /**
         * State where the contractor will be conducting the majority of their work for the company.
         * This value is used when generating the new hire report.
         * This attribute is required for `Individual` contractors if `file_new_hire_report` is true and will be ignored for `Business` contractors.
         */
        public Builder workState(JsonNullable<String> workState) {
            Utils.checkNotNull(workState, "workState");
            this.workState = workState;
            return this;
        }

        /**
         * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
         * Social security number is needed to file the annual 1099 tax form.
         */
        public Builder ssn(String ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = Optional.ofNullable(ssn);
            return this;
        }

        /**
         * This attribute is optional for `Individual` contractors and will be ignored for `Business` contractors.
         * Social security number is needed to file the annual 1099 tax form.
         */
        public Builder ssn(Optional<String> ssn) {
            Utils.checkNotNull(ssn, "ssn");
            this.ssn = ssn;
            return this;
        }

        /**
         * The name of the contractor business. This attribute is required for `Business` contractors and will be ignored for `Individual` contractors.
         */
        public Builder businessName(String businessName) {
            Utils.checkNotNull(businessName, "businessName");
            this.businessName = Optional.ofNullable(businessName);
            return this;
        }

        /**
         * The name of the contractor business. This attribute is required for `Business` contractors and will be ignored for `Individual` contractors.
         */
        public Builder businessName(Optional<String> businessName) {
            Utils.checkNotNull(businessName, "businessName");
            this.businessName = businessName;
            return this;
        }

        /**
         * The employer identification number of the contractor business.
         * This attribute is optional for `Business` contractors and will be ignored for `Individual` contractors.
         */
        public Builder ein(String ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = Optional.ofNullable(ein);
            return this;
        }

        /**
         * The employer identification number of the contractor business.
         * This attribute is optional for `Business` contractors and will be ignored for `Individual` contractors.
         */
        public Builder ein(Optional<String> ein) {
            Utils.checkNotNull(ein, "ein");
            this.ein = ein;
            return this;
        }

        /**
         * The status of the contractor. If the contractor's start date is in the future, updating this field to true means we are setting the start date to today.
         */
        public Builder isActive(boolean isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = Optional.ofNullable(isActive);
            return this;
        }

        /**
         * The status of the contractor. If the contractor's start date is in the future, updating this field to true means we are setting the start date to today.
         */
        public Builder isActive(Optional<Boolean> isActive) {
            Utils.checkNotNull(isActive, "isActive");
            this.isActive = isActive;
            return this;
        }
        
        public PostV1CompaniesCompanyUuidContractorsRequestBody build() {
            if (type == null) {
                type = _SINGLETON_VALUE_Type.value();
            }
            if (selfOnboarding == null) {
                selfOnboarding = _SINGLETON_VALUE_SelfOnboarding.value();
            }
            if (fileNewHireReport == null) {
                fileNewHireReport = _SINGLETON_VALUE_FileNewHireReport.value();
            }            return new PostV1CompaniesCompanyUuidContractorsRequestBody(
                type,
                wageType,
                startDate,
                hourlyRate,
                selfOnboarding,
                email,
                firstName,
                lastName,
                middleInitial,
                fileNewHireReport,
                workState,
                ssn,
                businessName,
                ein,
                isActive);
        }

        private static final LazySingletonValue<Optional<? extends PostV1CompaniesCompanyUuidContractorsType>> _SINGLETON_VALUE_Type =
                new LazySingletonValue<>(
                        "type",
                        "\"Individual\"",
                        new TypeReference<Optional<? extends PostV1CompaniesCompanyUuidContractorsType>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_SelfOnboarding =
                new LazySingletonValue<>(
                        "self_onboarding",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});

        private static final LazySingletonValue<Optional<Boolean>> _SINGLETON_VALUE_FileNewHireReport =
                new LazySingletonValue<>(
                        "file_new_hire_report",
                        "false",
                        new TypeReference<Optional<Boolean>>() {});
    }
}

