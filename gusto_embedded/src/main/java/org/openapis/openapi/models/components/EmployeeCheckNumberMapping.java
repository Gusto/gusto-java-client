/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class EmployeeCheckNumberMapping {

    /**
     * The UUID for an employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("employee_uuid")
    private Optional<String> employeeUuid;

    /**
     * The check number for the relevant employee
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("check_number")
    private Optional<Double> checkNumber;

    @JsonCreator
    public EmployeeCheckNumberMapping(
            @JsonProperty("employee_uuid") Optional<String> employeeUuid,
            @JsonProperty("check_number") Optional<Double> checkNumber) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        Utils.checkNotNull(checkNumber, "checkNumber");
        this.employeeUuid = employeeUuid;
        this.checkNumber = checkNumber;
    }
    
    public EmployeeCheckNumberMapping() {
        this(Optional.empty(), Optional.empty());
    }

    /**
     * The UUID for an employee
     */
    @JsonIgnore
    public Optional<String> employeeUuid() {
        return employeeUuid;
    }

    /**
     * The check number for the relevant employee
     */
    @JsonIgnore
    public Optional<Double> checkNumber() {
        return checkNumber;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The UUID for an employee
     */
    public EmployeeCheckNumberMapping withEmployeeUuid(String employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = Optional.ofNullable(employeeUuid);
        return this;
    }

    /**
     * The UUID for an employee
     */
    public EmployeeCheckNumberMapping withEmployeeUuid(Optional<String> employeeUuid) {
        Utils.checkNotNull(employeeUuid, "employeeUuid");
        this.employeeUuid = employeeUuid;
        return this;
    }

    /**
     * The check number for the relevant employee
     */
    public EmployeeCheckNumberMapping withCheckNumber(double checkNumber) {
        Utils.checkNotNull(checkNumber, "checkNumber");
        this.checkNumber = Optional.ofNullable(checkNumber);
        return this;
    }

    /**
     * The check number for the relevant employee
     */
    public EmployeeCheckNumberMapping withCheckNumber(Optional<Double> checkNumber) {
        Utils.checkNotNull(checkNumber, "checkNumber");
        this.checkNumber = checkNumber;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        EmployeeCheckNumberMapping other = (EmployeeCheckNumberMapping) o;
        return 
            Objects.deepEquals(this.employeeUuid, other.employeeUuid) &&
            Objects.deepEquals(this.checkNumber, other.checkNumber);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            employeeUuid,
            checkNumber);
    }
    
    @Override
    public String toString() {
        return Utils.toString(EmployeeCheckNumberMapping.class,
                "employeeUuid", employeeUuid,
                "checkNumber", checkNumber);
    }
    
    public final static class Builder {
 
        private Optional<String> employeeUuid = Optional.empty();
 
        private Optional<Double> checkNumber = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The UUID for an employee
         */
        public Builder employeeUuid(String employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = Optional.ofNullable(employeeUuid);
            return this;
        }

        /**
         * The UUID for an employee
         */
        public Builder employeeUuid(Optional<String> employeeUuid) {
            Utils.checkNotNull(employeeUuid, "employeeUuid");
            this.employeeUuid = employeeUuid;
            return this;
        }

        /**
         * The check number for the relevant employee
         */
        public Builder checkNumber(double checkNumber) {
            Utils.checkNotNull(checkNumber, "checkNumber");
            this.checkNumber = Optional.ofNullable(checkNumber);
            return this;
        }

        /**
         * The check number for the relevant employee
         */
        public Builder checkNumber(Optional<Double> checkNumber) {
            Utils.checkNotNull(checkNumber, "checkNumber");
            this.checkNumber = checkNumber;
            return this;
        }
        
        public EmployeeCheckNumberMapping build() {
            return new EmployeeCheckNumberMapping(
                employeeUuid,
                checkNumber);
        }
    }
}

