/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Override;
import java.lang.String;
import java.lang.SuppressWarnings;
import java.util.List;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;


public class Value2 {

    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("tiers")
    private Optional<? extends List<ValueTiers>> tiers;

    @JsonCreator
    public Value2(
            @JsonProperty("tiers") Optional<? extends List<ValueTiers>> tiers) {
        Utils.checkNotNull(tiers, "tiers");
        this.tiers = tiers;
    }
    
    public Value2() {
        this(Optional.empty());
    }

    @SuppressWarnings("unchecked")
    @JsonIgnore
    public Optional<List<ValueTiers>> tiers() {
        return (Optional<List<ValueTiers>>) tiers;
    }

    public final static Builder builder() {
        return new Builder();
    }

    public Value2 withTiers(List<ValueTiers> tiers) {
        Utils.checkNotNull(tiers, "tiers");
        this.tiers = Optional.ofNullable(tiers);
        return this;
    }

    public Value2 withTiers(Optional<? extends List<ValueTiers>> tiers) {
        Utils.checkNotNull(tiers, "tiers");
        this.tiers = tiers;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        Value2 other = (Value2) o;
        return 
            Objects.deepEquals(this.tiers, other.tiers);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            tiers);
    }
    
    @Override
    public String toString() {
        return Utils.toString(Value2.class,
                "tiers", tiers);
    }
    
    public final static class Builder {
 
        private Optional<? extends List<ValueTiers>> tiers = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        public Builder tiers(List<ValueTiers> tiers) {
            Utils.checkNotNull(tiers, "tiers");
            this.tiers = Optional.ofNullable(tiers);
            return this;
        }

        public Builder tiers(Optional<? extends List<ValueTiers>> tiers) {
            Utils.checkNotNull(tiers, "tiers");
            this.tiers = tiers;
            return this;
        }
        
        public Value2 build() {
            return new Value2(
                tiers);
        }
    }
}

