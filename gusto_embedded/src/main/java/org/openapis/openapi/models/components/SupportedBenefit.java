/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi.models.components;


import com.fasterxml.jackson.annotation.JsonCreator;
import com.fasterxml.jackson.annotation.JsonIgnore;
import com.fasterxml.jackson.annotation.JsonInclude.Include;
import com.fasterxml.jackson.annotation.JsonInclude;
import com.fasterxml.jackson.annotation.JsonProperty;
import java.lang.Boolean;
import java.lang.Double;
import java.lang.Override;
import java.lang.String;
import java.util.Objects;
import java.util.Optional;
import org.openapis.openapi.utils.Utils;

/**
 * SupportedBenefit - Example response
 */

public class SupportedBenefit {

    /**
     * The benefit type in Gusto.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("benefit_type")
    private Optional<Double> benefitType;

    /**
     * The name of the benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("name")
    private Optional<String> name;

    /**
     * The description of the benefit.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("description")
    private Optional<String> description;

    /**
     * Whether the benefit is deducted before tax calculations, thus reducing one’s taxable income
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("pretax")
    private Optional<Boolean> pretax;

    /**
     * Whether the benefit is deducted after tax calculations.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("posttax")
    private Optional<Boolean> posttax;

    /**
     * Whether the benefit is considered imputed income.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("imputed")
    private Optional<Boolean> imputed;

    /**
     * Whether the benefit is healthcare related.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("healthcare")
    private Optional<Boolean> healthcare;

    /**
     * Whether the benefit is associated with retirement planning.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("retirement")
    private Optional<Boolean> retirement;

    /**
     * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("yearly_limit")
    private Optional<Boolean> yearlyLimit;

    /**
     * Category where the benefit belongs to.
     */
    @JsonInclude(Include.NON_ABSENT)
    @JsonProperty("category")
    private Optional<String> category;

    @JsonCreator
    public SupportedBenefit(
            @JsonProperty("benefit_type") Optional<Double> benefitType,
            @JsonProperty("name") Optional<String> name,
            @JsonProperty("description") Optional<String> description,
            @JsonProperty("pretax") Optional<Boolean> pretax,
            @JsonProperty("posttax") Optional<Boolean> posttax,
            @JsonProperty("imputed") Optional<Boolean> imputed,
            @JsonProperty("healthcare") Optional<Boolean> healthcare,
            @JsonProperty("retirement") Optional<Boolean> retirement,
            @JsonProperty("yearly_limit") Optional<Boolean> yearlyLimit,
            @JsonProperty("category") Optional<String> category) {
        Utils.checkNotNull(benefitType, "benefitType");
        Utils.checkNotNull(name, "name");
        Utils.checkNotNull(description, "description");
        Utils.checkNotNull(pretax, "pretax");
        Utils.checkNotNull(posttax, "posttax");
        Utils.checkNotNull(imputed, "imputed");
        Utils.checkNotNull(healthcare, "healthcare");
        Utils.checkNotNull(retirement, "retirement");
        Utils.checkNotNull(yearlyLimit, "yearlyLimit");
        Utils.checkNotNull(category, "category");
        this.benefitType = benefitType;
        this.name = name;
        this.description = description;
        this.pretax = pretax;
        this.posttax = posttax;
        this.imputed = imputed;
        this.healthcare = healthcare;
        this.retirement = retirement;
        this.yearlyLimit = yearlyLimit;
        this.category = category;
    }
    
    public SupportedBenefit() {
        this(Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty(), Optional.empty());
    }

    /**
     * The benefit type in Gusto.
     */
    @JsonIgnore
    public Optional<Double> benefitType() {
        return benefitType;
    }

    /**
     * The name of the benefit.
     */
    @JsonIgnore
    public Optional<String> name() {
        return name;
    }

    /**
     * The description of the benefit.
     */
    @JsonIgnore
    public Optional<String> description() {
        return description;
    }

    /**
     * Whether the benefit is deducted before tax calculations, thus reducing one’s taxable income
     */
    @JsonIgnore
    public Optional<Boolean> pretax() {
        return pretax;
    }

    /**
     * Whether the benefit is deducted after tax calculations.
     */
    @JsonIgnore
    public Optional<Boolean> posttax() {
        return posttax;
    }

    /**
     * Whether the benefit is considered imputed income.
     */
    @JsonIgnore
    public Optional<Boolean> imputed() {
        return imputed;
    }

    /**
     * Whether the benefit is healthcare related.
     */
    @JsonIgnore
    public Optional<Boolean> healthcare() {
        return healthcare;
    }

    /**
     * Whether the benefit is associated with retirement planning.
     */
    @JsonIgnore
    public Optional<Boolean> retirement() {
        return retirement;
    }

    /**
     * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
     */
    @JsonIgnore
    public Optional<Boolean> yearlyLimit() {
        return yearlyLimit;
    }

    /**
     * Category where the benefit belongs to.
     */
    @JsonIgnore
    public Optional<String> category() {
        return category;
    }

    public final static Builder builder() {
        return new Builder();
    }

    /**
     * The benefit type in Gusto.
     */
    public SupportedBenefit withBenefitType(double benefitType) {
        Utils.checkNotNull(benefitType, "benefitType");
        this.benefitType = Optional.ofNullable(benefitType);
        return this;
    }

    /**
     * The benefit type in Gusto.
     */
    public SupportedBenefit withBenefitType(Optional<Double> benefitType) {
        Utils.checkNotNull(benefitType, "benefitType");
        this.benefitType = benefitType;
        return this;
    }

    /**
     * The name of the benefit.
     */
    public SupportedBenefit withName(String name) {
        Utils.checkNotNull(name, "name");
        this.name = Optional.ofNullable(name);
        return this;
    }

    /**
     * The name of the benefit.
     */
    public SupportedBenefit withName(Optional<String> name) {
        Utils.checkNotNull(name, "name");
        this.name = name;
        return this;
    }

    /**
     * The description of the benefit.
     */
    public SupportedBenefit withDescription(String description) {
        Utils.checkNotNull(description, "description");
        this.description = Optional.ofNullable(description);
        return this;
    }

    /**
     * The description of the benefit.
     */
    public SupportedBenefit withDescription(Optional<String> description) {
        Utils.checkNotNull(description, "description");
        this.description = description;
        return this;
    }

    /**
     * Whether the benefit is deducted before tax calculations, thus reducing one’s taxable income
     */
    public SupportedBenefit withPretax(boolean pretax) {
        Utils.checkNotNull(pretax, "pretax");
        this.pretax = Optional.ofNullable(pretax);
        return this;
    }

    /**
     * Whether the benefit is deducted before tax calculations, thus reducing one’s taxable income
     */
    public SupportedBenefit withPretax(Optional<Boolean> pretax) {
        Utils.checkNotNull(pretax, "pretax");
        this.pretax = pretax;
        return this;
    }

    /**
     * Whether the benefit is deducted after tax calculations.
     */
    public SupportedBenefit withPosttax(boolean posttax) {
        Utils.checkNotNull(posttax, "posttax");
        this.posttax = Optional.ofNullable(posttax);
        return this;
    }

    /**
     * Whether the benefit is deducted after tax calculations.
     */
    public SupportedBenefit withPosttax(Optional<Boolean> posttax) {
        Utils.checkNotNull(posttax, "posttax");
        this.posttax = posttax;
        return this;
    }

    /**
     * Whether the benefit is considered imputed income.
     */
    public SupportedBenefit withImputed(boolean imputed) {
        Utils.checkNotNull(imputed, "imputed");
        this.imputed = Optional.ofNullable(imputed);
        return this;
    }

    /**
     * Whether the benefit is considered imputed income.
     */
    public SupportedBenefit withImputed(Optional<Boolean> imputed) {
        Utils.checkNotNull(imputed, "imputed");
        this.imputed = imputed;
        return this;
    }

    /**
     * Whether the benefit is healthcare related.
     */
    public SupportedBenefit withHealthcare(boolean healthcare) {
        Utils.checkNotNull(healthcare, "healthcare");
        this.healthcare = Optional.ofNullable(healthcare);
        return this;
    }

    /**
     * Whether the benefit is healthcare related.
     */
    public SupportedBenefit withHealthcare(Optional<Boolean> healthcare) {
        Utils.checkNotNull(healthcare, "healthcare");
        this.healthcare = healthcare;
        return this;
    }

    /**
     * Whether the benefit is associated with retirement planning.
     */
    public SupportedBenefit withRetirement(boolean retirement) {
        Utils.checkNotNull(retirement, "retirement");
        this.retirement = Optional.ofNullable(retirement);
        return this;
    }

    /**
     * Whether the benefit is associated with retirement planning.
     */
    public SupportedBenefit withRetirement(Optional<Boolean> retirement) {
        Utils.checkNotNull(retirement, "retirement");
        this.retirement = retirement;
        return this;
    }

    /**
     * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
     */
    public SupportedBenefit withYearlyLimit(boolean yearlyLimit) {
        Utils.checkNotNull(yearlyLimit, "yearlyLimit");
        this.yearlyLimit = Optional.ofNullable(yearlyLimit);
        return this;
    }

    /**
     * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
     */
    public SupportedBenefit withYearlyLimit(Optional<Boolean> yearlyLimit) {
        Utils.checkNotNull(yearlyLimit, "yearlyLimit");
        this.yearlyLimit = yearlyLimit;
        return this;
    }

    /**
     * Category where the benefit belongs to.
     */
    public SupportedBenefit withCategory(String category) {
        Utils.checkNotNull(category, "category");
        this.category = Optional.ofNullable(category);
        return this;
    }

    /**
     * Category where the benefit belongs to.
     */
    public SupportedBenefit withCategory(Optional<String> category) {
        Utils.checkNotNull(category, "category");
        this.category = category;
        return this;
    }
    
    @Override
    public boolean equals(java.lang.Object o) {
        if (this == o) {
            return true;
        }
        if (o == null || getClass() != o.getClass()) {
            return false;
        }
        SupportedBenefit other = (SupportedBenefit) o;
        return 
            Objects.deepEquals(this.benefitType, other.benefitType) &&
            Objects.deepEquals(this.name, other.name) &&
            Objects.deepEquals(this.description, other.description) &&
            Objects.deepEquals(this.pretax, other.pretax) &&
            Objects.deepEquals(this.posttax, other.posttax) &&
            Objects.deepEquals(this.imputed, other.imputed) &&
            Objects.deepEquals(this.healthcare, other.healthcare) &&
            Objects.deepEquals(this.retirement, other.retirement) &&
            Objects.deepEquals(this.yearlyLimit, other.yearlyLimit) &&
            Objects.deepEquals(this.category, other.category);
    }
    
    @Override
    public int hashCode() {
        return Objects.hash(
            benefitType,
            name,
            description,
            pretax,
            posttax,
            imputed,
            healthcare,
            retirement,
            yearlyLimit,
            category);
    }
    
    @Override
    public String toString() {
        return Utils.toString(SupportedBenefit.class,
                "benefitType", benefitType,
                "name", name,
                "description", description,
                "pretax", pretax,
                "posttax", posttax,
                "imputed", imputed,
                "healthcare", healthcare,
                "retirement", retirement,
                "yearlyLimit", yearlyLimit,
                "category", category);
    }
    
    public final static class Builder {
 
        private Optional<Double> benefitType = Optional.empty();
 
        private Optional<String> name = Optional.empty();
 
        private Optional<String> description = Optional.empty();
 
        private Optional<Boolean> pretax = Optional.empty();
 
        private Optional<Boolean> posttax = Optional.empty();
 
        private Optional<Boolean> imputed = Optional.empty();
 
        private Optional<Boolean> healthcare = Optional.empty();
 
        private Optional<Boolean> retirement = Optional.empty();
 
        private Optional<Boolean> yearlyLimit = Optional.empty();
 
        private Optional<String> category = Optional.empty();  
        
        private Builder() {
          // force use of static builder() method
        }

        /**
         * The benefit type in Gusto.
         */
        public Builder benefitType(double benefitType) {
            Utils.checkNotNull(benefitType, "benefitType");
            this.benefitType = Optional.ofNullable(benefitType);
            return this;
        }

        /**
         * The benefit type in Gusto.
         */
        public Builder benefitType(Optional<Double> benefitType) {
            Utils.checkNotNull(benefitType, "benefitType");
            this.benefitType = benefitType;
            return this;
        }

        /**
         * The name of the benefit.
         */
        public Builder name(String name) {
            Utils.checkNotNull(name, "name");
            this.name = Optional.ofNullable(name);
            return this;
        }

        /**
         * The name of the benefit.
         */
        public Builder name(Optional<String> name) {
            Utils.checkNotNull(name, "name");
            this.name = name;
            return this;
        }

        /**
         * The description of the benefit.
         */
        public Builder description(String description) {
            Utils.checkNotNull(description, "description");
            this.description = Optional.ofNullable(description);
            return this;
        }

        /**
         * The description of the benefit.
         */
        public Builder description(Optional<String> description) {
            Utils.checkNotNull(description, "description");
            this.description = description;
            return this;
        }

        /**
         * Whether the benefit is deducted before tax calculations, thus reducing one’s taxable income
         */
        public Builder pretax(boolean pretax) {
            Utils.checkNotNull(pretax, "pretax");
            this.pretax = Optional.ofNullable(pretax);
            return this;
        }

        /**
         * Whether the benefit is deducted before tax calculations, thus reducing one’s taxable income
         */
        public Builder pretax(Optional<Boolean> pretax) {
            Utils.checkNotNull(pretax, "pretax");
            this.pretax = pretax;
            return this;
        }

        /**
         * Whether the benefit is deducted after tax calculations.
         */
        public Builder posttax(boolean posttax) {
            Utils.checkNotNull(posttax, "posttax");
            this.posttax = Optional.ofNullable(posttax);
            return this;
        }

        /**
         * Whether the benefit is deducted after tax calculations.
         */
        public Builder posttax(Optional<Boolean> posttax) {
            Utils.checkNotNull(posttax, "posttax");
            this.posttax = posttax;
            return this;
        }

        /**
         * Whether the benefit is considered imputed income.
         */
        public Builder imputed(boolean imputed) {
            Utils.checkNotNull(imputed, "imputed");
            this.imputed = Optional.ofNullable(imputed);
            return this;
        }

        /**
         * Whether the benefit is considered imputed income.
         */
        public Builder imputed(Optional<Boolean> imputed) {
            Utils.checkNotNull(imputed, "imputed");
            this.imputed = imputed;
            return this;
        }

        /**
         * Whether the benefit is healthcare related.
         */
        public Builder healthcare(boolean healthcare) {
            Utils.checkNotNull(healthcare, "healthcare");
            this.healthcare = Optional.ofNullable(healthcare);
            return this;
        }

        /**
         * Whether the benefit is healthcare related.
         */
        public Builder healthcare(Optional<Boolean> healthcare) {
            Utils.checkNotNull(healthcare, "healthcare");
            this.healthcare = healthcare;
            return this;
        }

        /**
         * Whether the benefit is associated with retirement planning.
         */
        public Builder retirement(boolean retirement) {
            Utils.checkNotNull(retirement, "retirement");
            this.retirement = Optional.ofNullable(retirement);
            return this;
        }

        /**
         * Whether the benefit is associated with retirement planning.
         */
        public Builder retirement(Optional<Boolean> retirement) {
            Utils.checkNotNull(retirement, "retirement");
            this.retirement = retirement;
            return this;
        }

        /**
         * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
         */
        public Builder yearlyLimit(boolean yearlyLimit) {
            Utils.checkNotNull(yearlyLimit, "yearlyLimit");
            this.yearlyLimit = Optional.ofNullable(yearlyLimit);
            return this;
        }

        /**
         * Whether the benefit has a government mandated yearly limit. If the benefit has a government mandated yearly limit, employees cannot be added to more than one benefit of this type.
         */
        public Builder yearlyLimit(Optional<Boolean> yearlyLimit) {
            Utils.checkNotNull(yearlyLimit, "yearlyLimit");
            this.yearlyLimit = yearlyLimit;
            return this;
        }

        /**
         * Category where the benefit belongs to.
         */
        public Builder category(String category) {
            Utils.checkNotNull(category, "category");
            this.category = Optional.ofNullable(category);
            return this;
        }

        /**
         * Category where the benefit belongs to.
         */
        public Builder category(Optional<String> category) {
            Utils.checkNotNull(category, "category");
            this.category = category;
            return this;
        }
        
        public SupportedBenefit build() {
            return new SupportedBenefit(
                benefitType,
                name,
                description,
                pretax,
                posttax,
                imputed,
                healthcare,
                retirement,
                yearlyLimit,
                category);
        }
    }
}

