/* 
 * Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT.
 */

package org.openapis.openapi;

import com.fasterxml.jackson.core.type.TypeReference;
import java.io.InputStream;
import java.lang.Exception;
import java.lang.Object;
import java.lang.String;
import java.net.http.HttpRequest;
import java.net.http.HttpResponse;
import java.util.List;
import java.util.Optional;
import org.openapis.openapi.models.components.AccruingTimeOffHour;
import org.openapis.openapi.models.components.TimeOffPolicy;
import org.openapis.openapi.models.components.VersionHeader;
import org.openapis.openapi.models.errors.APIException;
import org.openapis.openapi.models.errors.UnprocessableEntityErrorObject;
import org.openapis.openapi.models.operations.GetCompaniesCompanyUuidTimeOffPoliciesRequest;
import org.openapis.openapi.models.operations.GetCompaniesCompanyUuidTimeOffPoliciesRequestBuilder;
import org.openapis.openapi.models.operations.GetCompaniesCompanyUuidTimeOffPoliciesResponse;
import org.openapis.openapi.models.operations.GetTimeOffPoliciesTimeOffPolicyUuidRequest;
import org.openapis.openapi.models.operations.GetTimeOffPoliciesTimeOffPolicyUuidRequestBuilder;
import org.openapis.openapi.models.operations.GetTimeOffPoliciesTimeOffPolicyUuidResponse;
import org.openapis.openapi.models.operations.PostCompaniesCompanyUuidTimeOffPoliciesRequest;
import org.openapis.openapi.models.operations.PostCompaniesCompanyUuidTimeOffPoliciesRequestBody;
import org.openapis.openapi.models.operations.PostCompaniesCompanyUuidTimeOffPoliciesRequestBuilder;
import org.openapis.openapi.models.operations.PostCompaniesCompanyUuidTimeOffPoliciesResponse;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBuilder;
import org.openapis.openapi.models.operations.PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse;
import org.openapis.openapi.models.operations.PutTimeOffPoliciesTimeOffPolicyUuidRequest;
import org.openapis.openapi.models.operations.PutTimeOffPoliciesTimeOffPolicyUuidRequestBody;
import org.openapis.openapi.models.operations.PutTimeOffPoliciesTimeOffPolicyUuidRequestBuilder;
import org.openapis.openapi.models.operations.PutTimeOffPoliciesTimeOffPolicyUuidResponse;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequest;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequestBuilder;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequest;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBody;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBuilder;
import org.openapis.openapi.models.operations.PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBody;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBuilder;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequest;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBody;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBuilder;
import org.openapis.openapi.models.operations.PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse;
import org.openapis.openapi.models.operations.SDKMethodInterfaces.*;
import org.openapis.openapi.utils.HTTPClient;
import org.openapis.openapi.utils.HTTPRequest;
import org.openapis.openapi.utils.Hook.AfterErrorContextImpl;
import org.openapis.openapi.utils.Hook.AfterSuccessContextImpl;
import org.openapis.openapi.utils.Hook.BeforeRequestContextImpl;
import org.openapis.openapi.utils.SerializedBody;
import org.openapis.openapi.utils.Utils.JsonShape;
import org.openapis.openapi.utils.Utils; 

public class TimeOffPolicies implements
            MethodCallPostV1PayrollsPayrollIdCalculateAccruingTimeOffHours,
            MethodCallGetTimeOffPoliciesTimeOffPolicyUuid,
            MethodCallPutTimeOffPoliciesTimeOffPolicyUuid,
            MethodCallGetCompaniesCompanyUuidTimeOffPolicies,
            MethodCallPostCompaniesCompanyUuidTimeOffPolicies,
            MethodCallPutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployees,
            MethodCallPutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployees,
            MethodCallPutVersionTimeOffPoliciesTimeOffPolicyUuidBalance,
            MethodCallPutV1TimeOffPoliciesTimeOffPolicyUuidDeactivate {

    private final SDKConfiguration sdkConfiguration;

    TimeOffPolicies(SDKConfiguration sdkConfiguration) {
        this.sdkConfiguration = sdkConfiguration;
    }


    /**
     * Calculate accruing time off hours
     * Returns a list of accruing time off for each time off policy associated with the employee.
     * 
     * Factors affecting the accrued hours:
     *   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)
     *   * how many hours of work during this pay period
     *   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)
     *   * company pay schedule frequency (for per pay period)
     * 
     * If none of the parameters is passed in, the accrued time off hour will be 0.
     * 
     * scope: `payrolls:read`
     * @return The call builder
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBuilder calculateAccruingTimeOffHours() {
        return new PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBuilder(this);
    }

    /**
     * Calculate accruing time off hours
     * Returns a list of accruing time off for each time off policy associated with the employee.
     * 
     * Factors affecting the accrued hours:
     *   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)
     *   * how many hours of work during this pay period
     *   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)
     *   * company pay schedule frequency (for per pay period)
     * 
     * If none of the parameters is passed in, the accrued time off hour will be 0.
     * 
     * scope: `payrolls:read`
     * @param payrollId The UUID of the payroll
     * @param employeeId The UUID of the employee
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse calculateAccruingTimeOffHours(
            String payrollId,
            String employeeId,
            PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody requestBody) throws Exception {
        return calculateAccruingTimeOffHours(payrollId, employeeId, Optional.empty(), requestBody);
    }
    
    /**
     * Calculate accruing time off hours
     * Returns a list of accruing time off for each time off policy associated with the employee.
     * 
     * Factors affecting the accrued hours:
     *   * the time off policy accrual method (whether they get pay per hour worked, per hour paid, with / without overtime, accumulate time off based on pay period / calendar year / anniversary)
     *   * how many hours of work during this pay period
     *   * how many hours of PTO / sick hours taken during this pay period (for per hour paid policies only)
     *   * company pay schedule frequency (for per pay period)
     * 
     * If none of the parameters is passed in, the accrued time off hour will be 0.
     * 
     * scope: `payrolls:read`
     * @param payrollId The UUID of the payroll
     * @param employeeId The UUID of the employee
     * @param xGustoAPIVersion
     * @param requestBody
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse calculateAccruingTimeOffHours(
            String payrollId,
            String employeeId,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequestBody requestBody) throws Exception {
        PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest request =
            PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest
                .builder()
                .payrollId(payrollId)
                .employeeId(employeeId)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursRequest.class,
                _baseUrl,
                "/v1/payrolls/{payroll_id}/employees/{employee_id}/calculate_accruing_time_off_hours",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-v1-payrolls-payroll_id-calculate_accruing_time_off_hours",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse.Builder _resBuilder = 
            PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostV1PayrollsPayrollIdCalculateAccruingTimeOffHoursResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<AccruingTimeOffHour> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<AccruingTimeOffHour>>() {});
                _res.withAccruingTimeOffHourObject(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get a time off policy
     * Get a time off policy
     * 
     * scope: `time_off_policies:read`
     * @return The call builder
     */
    public GetTimeOffPoliciesTimeOffPolicyUuidRequestBuilder get() {
        return new GetTimeOffPoliciesTimeOffPolicyUuidRequestBuilder(this);
    }

    /**
     * Get a time off policy
     * Get a time off policy
     * 
     * scope: `time_off_policies:read`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTimeOffPoliciesTimeOffPolicyUuidResponse get(
            String timeOffPolicyUuid) throws Exception {
        return get(timeOffPolicyUuid, Optional.empty());
    }
    
    /**
     * Get a time off policy
     * Get a time off policy
     * 
     * scope: `time_off_policies:read`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetTimeOffPoliciesTimeOffPolicyUuidResponse get(
            String timeOffPolicyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetTimeOffPoliciesTimeOffPolicyUuidRequest request =
            GetTimeOffPoliciesTimeOffPolicyUuidRequest
                .builder()
                .timeOffPolicyUuid(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetTimeOffPoliciesTimeOffPolicyUuidRequest.class,
                _baseUrl,
                "/v1/time_off_policies/{time_off_policy_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-time_off_policies-time_off_policy_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-time_off_policies-time_off_policy_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-time_off_policies-time_off_policy_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-time_off_policies-time_off_policy_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetTimeOffPoliciesTimeOffPolicyUuidResponse.Builder _resBuilder = 
            GetTimeOffPoliciesTimeOffPolicyUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetTimeOffPoliciesTimeOffPolicyUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update a time off policy
     * Update a time off policy
     * 
     * scope: `time_off_policies:write`
     * @return The call builder
     */
    public PutTimeOffPoliciesTimeOffPolicyUuidRequestBuilder update() {
        return new PutTimeOffPoliciesTimeOffPolicyUuidRequestBuilder(this);
    }

    /**
     * Update a time off policy
     * Update a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param requestBody Can update any attributes of the time off policy except policy_type, is_active, complete & employees
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutTimeOffPoliciesTimeOffPolicyUuidResponse update(
            String timeOffPolicyUuid,
            PutTimeOffPoliciesTimeOffPolicyUuidRequestBody requestBody) throws Exception {
        return update(timeOffPolicyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update a time off policy
     * Update a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param xGustoAPIVersion
     * @param requestBody Can update any attributes of the time off policy except policy_type, is_active, complete & employees
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutTimeOffPoliciesTimeOffPolicyUuidResponse update(
            String timeOffPolicyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutTimeOffPoliciesTimeOffPolicyUuidRequestBody requestBody) throws Exception {
        PutTimeOffPoliciesTimeOffPolicyUuidRequest request =
            PutTimeOffPoliciesTimeOffPolicyUuidRequest
                .builder()
                .timeOffPolicyUuid(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutTimeOffPoliciesTimeOffPolicyUuidRequest.class,
                _baseUrl,
                "/v1/time_off_policies/{time_off_policy_uuid}",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-time_off_policies-time_off_policy_uuid", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-time_off_policies-time_off_policy_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-time_off_policies-time_off_policy_uuid",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-time_off_policies-time_off_policy_uuid",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutTimeOffPoliciesTimeOffPolicyUuidResponse.Builder _resBuilder = 
            PutTimeOffPoliciesTimeOffPolicyUuidResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutTimeOffPoliciesTimeOffPolicyUuidResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Get all time off policies
     * Get all time off policies for a company
     * 
     * scope: `time_off_policies:read`
     * @return The call builder
     */
    public GetCompaniesCompanyUuidTimeOffPoliciesRequestBuilder getAll() {
        return new GetCompaniesCompanyUuidTimeOffPoliciesRequestBuilder(this);
    }

    /**
     * Get all time off policies
     * Get all time off policies for a company
     * 
     * scope: `time_off_policies:read`
     * @param companyUuid The UUID of the company
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidTimeOffPoliciesResponse getAll(
            String companyUuid) throws Exception {
        return getAll(companyUuid, Optional.empty());
    }
    
    /**
     * Get all time off policies
     * Get all time off policies for a company
     * 
     * scope: `time_off_policies:read`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public GetCompaniesCompanyUuidTimeOffPoliciesResponse getAll(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        GetCompaniesCompanyUuidTimeOffPoliciesRequest request =
            GetCompaniesCompanyUuidTimeOffPoliciesRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                GetCompaniesCompanyUuidTimeOffPoliciesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/time_off_policies",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "GET");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "get-companies-company_uuid-time_off_policies", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-companies-company_uuid-time_off_policies",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "get-companies-company_uuid-time_off_policies",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "get-companies-company_uuid-time_off_policies",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        GetCompaniesCompanyUuidTimeOffPoliciesResponse.Builder _resBuilder = 
            GetCompaniesCompanyUuidTimeOffPoliciesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        GetCompaniesCompanyUuidTimeOffPoliciesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                List<TimeOffPolicy> _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<List<TimeOffPolicy>>() {});
                _res.withTimeOffPolicyList(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Create a time off policy
     * Create a time off policy
     * 
     * scope: `time_off_policies:write`
     * @return The call builder
     */
    public PostCompaniesCompanyUuidTimeOffPoliciesRequestBuilder create() {
        return new PostCompaniesCompanyUuidTimeOffPoliciesRequestBuilder(this);
    }

    /**
     * Create a time off policy
     * Create a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param companyUuid The UUID of the company
     * @param requestBody Requires a policy name, a policy_type, and an accrual_method
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostCompaniesCompanyUuidTimeOffPoliciesResponse create(
            String companyUuid,
            PostCompaniesCompanyUuidTimeOffPoliciesRequestBody requestBody) throws Exception {
        return create(companyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Create a time off policy
     * Create a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param companyUuid The UUID of the company
     * @param xGustoAPIVersion
     * @param requestBody Requires a policy name, a policy_type, and an accrual_method
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PostCompaniesCompanyUuidTimeOffPoliciesResponse create(
            String companyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PostCompaniesCompanyUuidTimeOffPoliciesRequestBody requestBody) throws Exception {
        PostCompaniesCompanyUuidTimeOffPoliciesRequest request =
            PostCompaniesCompanyUuidTimeOffPoliciesRequest
                .builder()
                .companyUuid(companyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PostCompaniesCompanyUuidTimeOffPoliciesRequest.class,
                _baseUrl,
                "/v1/companies/{company_uuid}/time_off_policies",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "POST");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "post-companies-company_uuid-time_off_policies", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-companies-company_uuid-time_off_policies",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "post-companies-company_uuid-time_off_policies",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "post-companies-company_uuid-time_off_policies",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PostCompaniesCompanyUuidTimeOffPoliciesResponse.Builder _resBuilder = 
            PostCompaniesCompanyUuidTimeOffPoliciesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PostCompaniesCompanyUuidTimeOffPoliciesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "201")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Add employees to a time off policy
     * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies
     * 
     * scope: `time_off_policies:write`
     * @return The call builder
     */
    public PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBuilder addEmployees() {
        return new PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBuilder(this);
    }

    /**
     * Add employees to a time off policy
     * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param requestBody A list of employee objects containing the employee uuid
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse addEmployees(
            String timeOffPolicyUuid,
            PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBody requestBody) throws Exception {
        return addEmployees(timeOffPolicyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Add employees to a time off policy
     * Add employees to a time off policy. Employees are required to have at least one job to be added to a time off policy. Accepts starting balances for non-unlimited policies
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param xGustoAPIVersion
     * @param requestBody A list of employee objects containing the employee uuid
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse addEmployees(
            String timeOffPolicyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequestBody requestBody) throws Exception {
        PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest request =
            PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest
                .builder()
                .timeOffPolicyUuid(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesRequest.class,
                _baseUrl,
                "/v1/time_off_policies/{time_off_policy_uuid}/add_employees",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-version-time_off_policies-time_off_policy_uuid-add_employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-version-time_off_policies-time_off_policy_uuid-add_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-version-time_off_policies-time_off_policy_uuid-add_employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-version-time_off_policies-time_off_policy_uuid-add_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse.Builder _resBuilder = 
            PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutVersionTimeOffPoliciesTimeOffPolicyUuidAddEmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Remove employees from a time off policy
     * Remove employees from a time off policy
     * 
     * scope: `time_off_policies:write`
     * @return The call builder
     */
    public PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBuilder removeEmployees() {
        return new PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBuilder(this);
    }

    /**
     * Remove employees from a time off policy
     * Remove employees from a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param requestBody A list of employee objects containing the employee uuid
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse removeEmployees(
            String timeOffPolicyUuid,
            PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBody requestBody) throws Exception {
        return removeEmployees(timeOffPolicyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Remove employees from a time off policy
     * Remove employees from a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param xGustoAPIVersion
     * @param requestBody A list of employee objects containing the employee uuid
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse removeEmployees(
            String timeOffPolicyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequestBody requestBody) throws Exception {
        PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequest request =
            PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequest
                .builder()
                .timeOffPolicyUuid(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesRequest.class,
                _baseUrl,
                "/v1/time_off_policies/{time_off_policy_uuid}/remove_employees",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-time_off_policies-time_off_policy_uuid-remove_employees", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-time_off_policies-time_off_policy_uuid-remove_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-time_off_policies-time_off_policy_uuid-remove_employees",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-time_off_policies-time_off_policy_uuid-remove_employees",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse.Builder _resBuilder = 
            PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1TimeOffPoliciesTimeOffPolicyUuidRemoveEmployeesResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Update employee time off hour balances
     * Updates time off hours balances for employees for a time off policy
     * 
     * scope: `time_off_policies:write`
     * @return The call builder
     */
    public PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBuilder updateBalance() {
        return new PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBuilder(this);
    }

    /**
     * Update employee time off hour balances
     * Updates time off hours balances for employees for a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param requestBody A list of employee objects containing the employee uuid and time off hours balance
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse updateBalance(
            String timeOffPolicyUuid,
            PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBody requestBody) throws Exception {
        return updateBalance(timeOffPolicyUuid, Optional.empty(), requestBody);
    }
    
    /**
     * Update employee time off hour balances
     * Updates time off hours balances for employees for a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param xGustoAPIVersion
     * @param requestBody A list of employee objects containing the employee uuid and time off hours balance
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse updateBalance(
            String timeOffPolicyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion,
            PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequestBody requestBody) throws Exception {
        PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequest request =
            PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequest
                .builder()
                .timeOffPolicyUuid(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .requestBody(requestBody)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceRequest.class,
                _baseUrl,
                "/v1/time_off_policies/{time_off_policy_uuid}/balance",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        Object _convertedRequest = Utils.convertToShape(
                request, 
                JsonShape.DEFAULT,
                new TypeReference<Object>() {});
        SerializedBody _serializedRequestBody = Utils.serializeRequestBody(
                _convertedRequest, 
                "requestBody",
                "json",
                false);
        if (_serializedRequestBody == null) {
            throw new Exception("Request body is required");
        }
        _req.setBody(Optional.ofNullable(_serializedRequestBody));
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-version-time_off_policies-time_off_policy_uuid-balance", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-version-time_off_policies-time_off_policy_uuid-balance",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-version-time_off_policies-time_off_policy_uuid-balance",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-version-time_off_policies-time_off_policy_uuid-balance",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse.Builder _resBuilder = 
            PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutVersionTimeOffPoliciesTimeOffPolicyUuidBalanceResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }



    /**
     * Deactivate a time off policy
     * Deactivate a time off policy
     * 
     * scope: `time_off_policies:write`
     * @return The call builder
     */
    public PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequestBuilder deactivate() {
        return new PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequestBuilder(this);
    }

    /**
     * Deactivate a time off policy
     * Deactivate a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse deactivate(
            String timeOffPolicyUuid) throws Exception {
        return deactivate(timeOffPolicyUuid, Optional.empty());
    }
    
    /**
     * Deactivate a time off policy
     * Deactivate a time off policy
     * 
     * scope: `time_off_policies:write`
     * @param timeOffPolicyUuid The UUID of the company time off policy
     * @param xGustoAPIVersion
     * @return The response from the API call
     * @throws Exception if the API call fails
     */
    public PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse deactivate(
            String timeOffPolicyUuid,
            Optional<? extends VersionHeader> xGustoAPIVersion) throws Exception {
        PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequest request =
            PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequest
                .builder()
                .timeOffPolicyUuid(timeOffPolicyUuid)
                .xGustoAPIVersion(xGustoAPIVersion)
                .build();
        
        String _baseUrl = this.sdkConfiguration.serverUrl;
        String _url = Utils.generateURL(
                PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateRequest.class,
                _baseUrl,
                "/v1/time_off_policies/{time_off_policy_uuid}/deactivate",
                request, null);
        
        HTTPRequest _req = new HTTPRequest(_url, "PUT");
        _req.addHeader("Accept", "application/json")
            .addHeader("user-agent", 
                SDKConfiguration.USER_AGENT);
        _req.addHeaders(Utils.getHeadersFromMetadata(request, null));
        
        Optional<SecuritySource> _hookSecuritySource = this.sdkConfiguration.securitySource();
        Utils.configureSecurity(_req,  
                this.sdkConfiguration.securitySource.getSecurity());
        HTTPClient _client = this.sdkConfiguration.defaultClient;
        HttpRequest _r = 
            sdkConfiguration.hooks()
               .beforeRequest(
                  new BeforeRequestContextImpl(
                      "put-v1-time_off_policies-time_off_policy_uuid-deactivate", 
                      Optional.of(List.of()), 
                      _hookSecuritySource),
                  _req.build());
        HttpResponse<InputStream> _httpRes;
        try {
            _httpRes = _client.send(_r);
            if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "422", "4XX", "5XX")) {
                _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-time_off_policies-time_off_policy_uuid-deactivate",
                            Optional.of(List.of()),
                            _hookSecuritySource),
                        Optional.of(_httpRes),
                        Optional.empty());
            } else {
                _httpRes = sdkConfiguration.hooks()
                    .afterSuccess(
                        new AfterSuccessContextImpl(
                            "put-v1-time_off_policies-time_off_policy_uuid-deactivate",
                            Optional.of(List.of()), 
                            _hookSecuritySource),
                         _httpRes);
            }
        } catch (Exception _e) {
            _httpRes = sdkConfiguration.hooks()
                    .afterError(
                        new AfterErrorContextImpl(
                            "put-v1-time_off_policies-time_off_policy_uuid-deactivate",
                            Optional.of(List.of()),
                            _hookSecuritySource), 
                        Optional.empty(),
                        Optional.of(_e));
        }
        String _contentType = _httpRes
            .headers()
            .firstValue("Content-Type")
            .orElse("application/octet-stream");
        PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse.Builder _resBuilder = 
            PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse
                .builder()
                .contentType(_contentType)
                .statusCode(_httpRes.statusCode())
                .rawResponse(_httpRes);

        PutV1TimeOffPoliciesTimeOffPolicyUuidDeactivateResponse _res = _resBuilder.build();
        
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "200")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                TimeOffPolicy _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<TimeOffPolicy>() {});
                _res.withTimeOffPolicy(Optional.ofNullable(_out));
                return _res;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "422")) {
            if (Utils.contentTypeMatches(_contentType, "application/json")) {
                UnprocessableEntityErrorObject _out = Utils.mapper().readValue(
                    Utils.toUtf8AndClose(_httpRes.body()),
                    new TypeReference<UnprocessableEntityErrorObject>() {});
                throw _out;
            } else {
                throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "Unexpected content-type received: " + _contentType, 
                    Utils.extractByteArrayFromBody(_httpRes));
            }
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "404", "4XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        if (Utils.statusCodeMatches(_httpRes.statusCode(), "5XX")) {
            // no content 
            throw new APIException(
                    _httpRes, 
                    _httpRes.statusCode(), 
                    "API error occurred", 
                    Utils.extractByteArrayFromBody(_httpRes));
        }
        throw new APIException(
            _httpRes, 
            _httpRes.statusCode(), 
            "Unexpected status code received: " + _httpRes.statusCode(), 
            Utils.extractByteArrayFromBody(_httpRes));
    }

}
